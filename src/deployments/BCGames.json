{
  "address": "0xA25bFD9a943dDb3Ad1692d8B9d1b94C64Cd80d28",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CantForceDenizenTurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantForceSinglePlayer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "EventNotForPlayer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PlayerNotInGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StillWithinTimeLimit",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.DenizenType",
          "name": "denizenType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denizenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerTarget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "damage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "turnabout",
          "type": "uint256"
        }
      ],
      "name": "DenizenAttack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "DenizenTurnOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.DenizenType",
          "name": "denizenType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denizenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "damage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "turnabout",
          "type": "uint256"
        }
      ],
      "name": "PlayerAttack",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "StartLocation",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "row",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "col",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DenizenType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "addDenizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bcEvents",
      "outputs": [
        {
          "internalType": "contract EventsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debugRoomId",
          "type": "uint256"
        }
      ],
      "name": "debugMovePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denizens",
      "outputs": [
        {
          "internalType": "contract DenizensInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_free",
          "type": "bool"
        }
      ],
      "name": "endPlayerAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "extGetCharsInGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int8",
                  "name": "health",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "carry",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "defense",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "hack",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "breach",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "shoot",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "melee",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "hasGun",
                  "type": "bool"
                }
              ],
              "internalType": "struct BCTypes.Traits",
              "name": "traits",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "cloneNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxClones",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "ability",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "flaw",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "inGame",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "internalType": "struct BCTypes.Character[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "denizenTurn",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "playerIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "charIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "currentPlayerTurnIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numPlayers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "turnsTaken",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "bugEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "mysteryEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "scavEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "shipEvents",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.EventTracker",
              "name": "eventTracker",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "mapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventNumber",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "eventPosition",
              "type": "tuple"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedBugEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedMysteryEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedScavEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedShipEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "turnTimeLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "denizenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct BCTypes.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "extGetGamePlayerIndexes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "extGetGamesOfPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "denizenTurn",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "playerIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "charIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "currentPlayerTurnIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numPlayers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "turnsTaken",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "bugEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "mysteryEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "scavEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "shipEvents",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.EventTracker",
              "name": "eventTracker",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "mapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventNumber",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "eventPosition",
              "type": "tuple"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedBugEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedMysteryEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedScavEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedShipEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "turnTimeLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "denizenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct BCTypes.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extGetNumGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "extGetPlayersInGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int8",
                  "name": "health",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "carry",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "defense",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "hack",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "breach",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "shoot",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "melee",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "hasGun",
                  "type": "bool"
                }
              ],
              "internalType": "struct BCTypes.Traits",
              "name": "currentTraits",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "lastPos",
              "type": "tuple"
            },
            {
              "internalType": "int8",
              "name": "healthDmgTaken",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8",
              "name": "numItemsHeld",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "internalType": "struct BCTypes.Player[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "extMovePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "forceNextTurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "denizenTurn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "turnsTaken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bugEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mysteryEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scavEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shipEvents",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.EventTracker",
          "name": "eventTracker",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eventPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eventNumber",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "eventPosition",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "turnTimeLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTurnTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getDenizensInGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.DenizenType",
              "name": "denizenType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "healthRemaining",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Denizen[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getEventBlocks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_charId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentPlayerTurnIndex",
          "type": "uint256"
        }
      ],
      "name": "leaveGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos2",
          "type": "tuple"
        }
      ],
      "name": "manhattanDistance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "players",
      "outputs": [
        {
          "internalType": "contract PlayersInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "processDenizenMoves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "resolveEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lobbiesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eventsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_denizensAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_playerIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debugRoomId",
          "type": "uint256"
        }
      ],
      "name": "startGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x86ee21cb1c33fe408e8cf6ae6a73bfd882fade92a88ba9490aa57a8b0c316ba5",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xA25bFD9a943dDb3Ad1692d8B9d1b94C64Cd80d28",
    "transactionIndex": 3,
    "gasUsed": "4778560",
    "logsBloom": "0x
    "blockHash": "0xc136801c0ae0ec64543580f012b66bd12f522089eedf6dc0cbac39fb4f396c16",
    "transactionHash": "0x86ee21cb1c33fe408e8cf6ae6a73bfd882fade92a88ba9490aa57a8b0c316ba5",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40943905,
        "transactionHash": "0x86ee21cb1c33fe408e8cf6ae6a73bfd882fade92a88ba9490aa57a8b0c316ba5",
        "address": "0xA25bFD9a943dDb3Ad1692d8B9d1b94C64Cd80d28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xc136801c0ae0ec64543580f012b66bd12f522089eedf6dc0cbac39fb4f396c16"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40943905,
        "transactionHash": "0x86ee21cb1c33fe408e8cf6ae6a73bfd882fade92a88ba9490aa57a8b0c316ba5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000019771ccd01c00000000000000000000000000000000000000000000000000001f031a09200dfae0000000000000000000000000000000000000000000011957b18f9f6a529cd3300000000000000000000000000000000000000000000000001d6ba83c4ff1fae0000000000000000000000000000000000000000000011957b327113722b8d33",
        "logIndex": 9,
        "blockHash": "0xc136801c0ae0ec64543580f012b66bd12f522089eedf6dc0cbac39fb4f396c16"
      }
    ],
    "blockNumber": 40943905,
    "cumulativeGasUsed": "4936085",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e62aa6b1707c53c9703dcb35914ce55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CantForceDenizenTurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantForceSinglePlayer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EventNotForPlayer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PlayerNotInGame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StillWithinTimeLimit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"denizenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denizenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"damage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnabout\",\"type\":\"uint256\"}],\"name\":\"DenizenAttack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"DenizenTurnOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"denizenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denizenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"damage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnabout\",\"type\":\"uint256\"}],\"name\":\"PlayerAttack\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StartLocation\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"addDenizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcEvents\",\"outputs\":[{\"internalType\":\"contract EventsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debugRoomId\",\"type\":\"uint256\"}],\"name\":\"debugMovePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denizens\",\"outputs\":[{\"internalType\":\"contract DenizensInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"endPlayerAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"extGetCharsInGame\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"health\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"carry\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"hack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"breach\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"shoot\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"melee\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"hasGun\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Traits\",\"name\":\"traits\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"cloneNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxClones\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ability\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"flaw\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"internalType\":\"struct BCTypes.Character[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetGame\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"denizenTurn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"charIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedBugEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedMysteryEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedScavEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedShipEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"turnTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"denizenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct BCTypes.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"extGetGamePlayerIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"extGetGamesOfPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"denizenTurn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"charIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedBugEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedMysteryEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedScavEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedShipEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"turnTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"denizenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct BCTypes.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extGetNumGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"extGetPlayersInGame\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"health\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"carry\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"hack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"breach\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"shoot\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"melee\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"hasGun\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Traits\",\"name\":\"currentTraits\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"lastPos\",\"type\":\"tuple\"},{\"internalType\":\"int8\",\"name\":\"healthDmgTaken\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"numItemsHeld\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"internalType\":\"struct BCTypes.Player[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"extMovePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"forceNextTurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"denizenTurn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"turnTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getDenizensInGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"denizenType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"healthRemaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Denizen[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getEventBlocks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentPlayerTurnIndex\",\"type\":\"uint256\"}],\"name\":\"leaveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos2\",\"type\":\"tuple\"}],\"name\":\"manhattanDistance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"players\",\"outputs\":[{\"internalType\":\"contract PlayersInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"processDenizenMoves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"resolveEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lobbiesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eventsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_denizensAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debugRoomId\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCGames.sol\":\"BCGames\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BCEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// NOTES\\n// Placing enemies must always have the effects in the order of:\\n// - numEnemyToPlace\\n// - EnemyType\\n// - EnemyPlacement\\n\\n// Stores information for events that happen in a specific room or from a card\\n// TODO: CRITICAL -> Unit tests for event and effect validity\\ncontract BCEvents is Ownable {\\n    enum EnemyPlacement {\\n        NONE,\\n        IN_ROOM,\\n        LAST_ROOM,\\n        ALL_ADJACENT\\n    }\\n    enum MovePlayer {\\n        NONE,\\n        HOME,\\n        LAST_ROOM,\\n        RANDOM,\\n        PORTAL,\\n        REACTOR\\n    }\\n\\n    enum EffectTypes {\\n        empty,\\n        permanant,\\n        fullHealth,\\n        instantDeath,\\n        placeHazard,\\n        grantEgg,\\n        healAmt,\\n        healArmorAmt,\\n        hazardDamage,\\n        physicalDamage,\\n        numEnemyToPlace,\\n        enemyType,\\n        whereToPlace,\\n        grantData,\\n        grantNumItems,\\n        takeNumItems,\\n        dropNumItems, // drop items in the room in unknown state\\n        moveType,\\n        trapPlayerEscapeRoll,\\n        grantAbility,\\n        loseTurn,\\n        lockDoorStrength,\\n        traitModifiersID\\n    }\\n\\n    // Effects are mapped by the effect type to an int:\\n    // CRITICAL:  1 == true, not present is false\\n    // Numbers are cast to enum as above\\n    // Uint effects are as normal\\n\\n    struct Effect {\\n        EffectTypes effect;\\n        uint value;\\n    }\\n\\n    struct BCEvent {\\n        // TODO: and replace name and text with a unique ID\\n        uint id; // TODO: Eval system, for now X000NN is for cards and 2000NN is for tiles\\n        // TODO: Change `permanant` to a number to serve as turns allowed?\\n        bool permanent; // Draw card before use allowed.  As an action - both can be derived from this\\n        // TODO: Permanent events conflict with and prevent card events in a room, this upsets balance!\\n        uint8 rollForLow; // On or below (unused if zero)\\n        uint8 rollForHigh; // On or above (unused if zero)\\n        // If both roll items are zero, player can choose any non\\n        Effect[] defaultEffect; // TODO: Eval doing it this way vs. using index and storing in array\\n        Effect[] lowEffect;\\n        Effect[] highEffect;\\n    }\\n\\n    Effect[][] public effectsList; // Used to support creating empty Effects // TODO: Is this the best pattern?\\n\\n    BCEvent[] public bcRoomEvents;\\n\\n    BCEvent[] public bcBugCardEvents;\\n    BCEvent[] public bcMysteryCardEvents;\\n    BCEvent[] public bcScavCardEvents;\\n    BCEvent[] public bcShipCardEvents;\\n\\n    constructor() {\\n        effectsList.push(); // Push empty effect into [0], but this is probably unnecessary\\n        _initializeDefaultRoomEvents();\\n        _initializeDefaultRoomEvents_2();\\n        _initializeDefaultBugCardEvents();\\n        _initializeDefaultMysteryCardEvents();\\n        _initializeDefaultScavCardEvents();\\n        _initializeDefaultShipCardEvents();\\n    }\\n\\n    function extGetRoomEvent(uint _id) public view returns (BCEvent memory) {\\n        return bcRoomEvents[_id];\\n    }\\n\\n    function extGetCardEvent(\\n        uint _id,\\n        BCTypes.BCEventType _type\\n    ) public view returns (BCEvent memory) {\\n        if (_type == BCTypes.BCEventType.BUG) {\\n            return bcBugCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.MYSTERY) {\\n            return bcMysteryCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SCAVENGER) {\\n            return bcScavCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SHIP_SECURITY) {\\n            return bcShipCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.NONE) {\\n            // Return an empty event\\n            // TODO: check for side effects of type\\n            return bcBugCardEvents[0];\\n        } else {\\n            console.log(\\\"Bad Event of type:\\\", uint(_type));\\n            revert(\\\"Bad event type\\\");\\n        }\\n    }\\n\\n    function extGetEffects(\\n        BCTypes.BCEventType _eventType,\\n        uint _id\\n    ) public view returns (Effect[][] memory) {\\n        // TODO: Hardcoded length??\\n        Effect[][] memory currentEffects = new Effect[][](3);\\n        BCEvent storage currentEvent;\\n        if (_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcRoomEvents[_id];\\n        } else {\\n            if (_eventType == BCTypes.BCEventType.BUG) {\\n                currentEvent = bcBugCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.MYSTERY) {\\n                currentEvent = bcMysteryCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SCAVENGER) {\\n                currentEvent = bcScavCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                currentEvent = bcShipCardEvents[_id];\\n            } else {\\n                revert(\\\"Bad event type\\\");\\n            }\\n        }\\n\\n        currentEffects[0] = currentEvent.defaultEffect;\\n        // TODO: This is ineffecient if most effects don't have all three\\n        currentEffects[1] = currentEvent.lowEffect;\\n        currentEffects[2] = currentEvent.highEffect;\\n\\n        return currentEffects;\\n    }\\n\\n    // TODO: REFACTOR WHEN TRAIT MOD SYSTEM IMPLEMENTED!!!\\n    // For _effect 0 -> default, 1 -> low, 2-> high\\n    // function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) public view returns (BCTypes.Traits memory) {\\n    //     BCEvent storage currentEvent;\\n    //     if(_roomEvent) {\\n    //         currentEvent = bcRoomEvents[_id];\\n    //     } else {\\n    //         currentEvent = bcCardEvents[_id];\\n    //     }\\n\\n    //     if(_effect == 0) {\\n    //         return currentEvent.defaultEffect.traitModifiers;\\n    //     } else if (_effect == 1) {\\n    //         return currentEvent.lowEffect.traitModifiers;\\n    //     } else if (_effect == 2) {\\n    //         return currentEvent.highEffect.traitModifiers;\\n    //     } else {\\n    //         revert (\\\"Effect must be 0, 1, or 2\\\");\\n    //     }\\n    // }\\n\\n    function _initializeDefaultBugCardEvents() internal {\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcBugCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 There's Something in the Walls\\n        // TODO\\n        Effect[] storage somethingInWallsDefault = effectsList.push();\\n        somethingInWallsDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        somethingInWallsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        somethingInWallsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage somethingInWalls = bcBugCardEvents.push();\\n        somethingInWalls.id = 300001; // Bug events start with 3\\n        somethingInWalls.permanent = false;\\n        // somethingInWalls.rollForLow = 0;\\n        // somethingInWalls.rollForHigh = 0; //TODO: Can save gas/space not doing this, but less explicit\\n\\n        somethingInWalls.defaultEffect = somethingInWallsDefault;\\n        // somethingInWalls.lowEffect = emptyEffect;\\n        // somethingInWalls.highEffect = emptyEffect;\\n\\n        // 2 Something Bit Me // TODO: Appears not to hurt player\\n        Effect[] storage somethingBitMeDefault = effectsList.push();\\n        somethingBitMeDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n\\n        BCEvent storage somethingBitMe = bcBugCardEvents.push();\\n        somethingBitMe.id = 300002;\\n        somethingBitMe.permanent = false;\\n        // somethingBitMe.rollForLow = 0;\\n        // somethingBitMe.rollForHigh = 0;\\n\\n        somethingBitMe.defaultEffect = somethingBitMeDefault;\\n        // somethingBitMe.lowEffect = emptyEffect;\\n        // somethingBitMe.highEffect = emptyEffect;\\n\\n        // 3 Game Over Man, Game Over!\\n        // TODO\\n        Effect[] storage gameOverDefault = effectsList.push();\\n        gameOverDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage gameOver = bcBugCardEvents.push();\\n        gameOver.id = 300003;\\n        gameOver.permanent = false;\\n        // gameOver.rollForLow = 0;\\n        // gameOver.rollForHigh = 0;\\n\\n        gameOver.defaultEffect = gameOverDefault;\\n        // gameOver.lowEffect = emptyEffect;\\n        // gameOver.highEffect = emptyEffect;\\n\\n        // 4 Packrat\\n        Effect[] storage packratDefault = effectsList.push();\\n        packratDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage packrat = bcBugCardEvents.push();\\n        packrat.id = 300004;\\n        packrat.permanent = false;\\n        // packrat.rollForLow = 0;\\n        // packrat.rollForHigh = 0;\\n\\n        packrat.defaultEffect = packratDefault;\\n        // packrat.lowEffect = emptyEffect;\\n        // packrat.highEffect = emptyEffect;\\n\\n        // 5 What is this stuff?\\n        // TODO\\n        Effect[] storage whatIsThisDefault = effectsList.push();\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: Ignored by bugs\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: -1 to all rolls\\n\\n        BCEvent storage whatIsThis = bcBugCardEvents.push();\\n        whatIsThis.id = 300005;\\n        whatIsThis.permanent = false;\\n        // whatIsThis.rollForLow = 0;\\n        // whatIsThis.rollForHigh = 0;\\n\\n        whatIsThis.defaultEffect = whatIsThisDefault;\\n\\n        // 6 Packrat Nest\\n        // TODO\\n        Effect[] storage packratNestDefault = effectsList.push();\\n        packratNestDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage packratNest = bcBugCardEvents.push();\\n        packratNest.id = 300006;\\n        packratNest.permanent = false;\\n\\n        packratNest.defaultEffect = packratNestDefault;\\n\\n        // 7 Clever Girls\\n        // TODO\\n        Effect[] storage cleverGirlsDefault = effectsList.push();\\n        cleverGirlsDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        cleverGirlsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        cleverGirlsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM))\\n        );\\n\\n        BCEvent storage cleverGirls = bcBugCardEvents.push();\\n        cleverGirls.id = 300007;\\n\\n        cleverGirls.defaultEffect = cleverGirlsDefault;\\n\\n        // 8 Warrior\\n        // TODO\\n        Effect[] storage warriorDefault = effectsList.push();\\n        warriorDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        warriorDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        warriorDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage warrior = bcBugCardEvents.push();\\n        warrior.id = 300008;\\n\\n        warrior.defaultEffect = warriorDefault;\\n\\n        // 9 Good Girl\\n        // TODO\\n        Effect[] storage goodGirlDefault = effectsList.push();\\n        goodGirlDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage goodGirl = bcBugCardEvents.push();\\n        goodGirl.id = 300009;\\n\\n        goodGirl.defaultEffect = goodGirlDefault;\\n\\n        // 10 What's that Smell?\\n        Effect[] storage whatsThatSmellDefault = effectsList.push();\\n        whatsThatSmellDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        whatsThatSmellDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage whatsThatSmell = bcBugCardEvents.push();\\n        whatsThatSmell.id = 300010;\\n\\n        whatsThatSmell.defaultEffect = whatsThatSmellDefault;\\n\\n        // 11 Spider's Web\\n        // TODO\\n        Effect[] storage spidersWebDefault = effectsList.push();\\n        spidersWebDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        spidersWebDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage spidersWebLow = effectsList.push();\\n        spidersWebLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        spidersWebLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage spidersWebHigh = effectsList.push();\\n        spidersWebHigh.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage spidersWeb = bcBugCardEvents.push();\\n        spidersWeb.id = 300011;\\n        spidersWeb.rollForLow = 1;\\n        spidersWeb.rollForHigh = 6;\\n\\n        spidersWeb.defaultEffect = spidersWebDefault;\\n        spidersWeb.lowEffect = spidersWebLow;\\n        spidersWeb.highEffect = spidersWebHigh;\\n\\n        // 12 Something is following me...\\n        // TODO\\n        Effect[] storage followingMeDefault = effectsList.push();\\n        followingMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        followingMeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        followingMeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM))\\n        );\\n\\n        BCEvent storage followingMe = bcBugCardEvents.push();\\n        followingMe.id = 300012;\\n\\n        followingMe.defaultEffect = followingMeDefault;\\n\\n        // 13 Sneak Attack\\n        Effect[] storage sneakAttackDefault = effectsList.push();\\n        sneakAttackDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        sneakAttackDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        sneakAttackDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage sneakAttack = bcBugCardEvents.push();\\n        sneakAttack.id = 300013;\\n\\n        sneakAttack.defaultEffect = sneakAttackDefault;\\n\\n        // 14 Feeding Time\\n        // TODO\\n        Effect[] storage feedingTimeDefault = effectsList.push();\\n        feedingTimeDefault.push(Effect(EffectTypes.dropNumItems, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        feedingTimeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        feedingTimeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage feedingTime = bcBugCardEvents.push();\\n        feedingTime.id = 300014;\\n\\n        feedingTime.defaultEffect = feedingTimeDefault;\\n\\n        // 15 Pardon m---aaaaah!\\n        Effect[] storage pardonMeDefault = effectsList.push();\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.LAST_ROOM))\\n        );\\n        pardonMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage pardonMe = bcBugCardEvents.push();\\n        pardonMe.id = 300015;\\n\\n        pardonMe.defaultEffect = pardonMeDefault;\\n    }\\n\\n    function _initializeDefaultMysteryCardEvents() internal {\\n        BCEvent storage noEvent = bcMysteryCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 Mesmer\\n        Effect[] storage mesmerDefault = effectsList.push();\\n        mesmerDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage mesmer = bcMysteryCardEvents.push();\\n        mesmer.id = 400001;\\n\\n        mesmer.defaultEffect = mesmerDefault;\\n\\n        // 2 Portal\\n        // TODO\\n        Effect[] storage portalDefault = effectsList.push();\\n        portalDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.PORTAL))\\n        );\\n\\n        BCEvent storage portal = bcMysteryCardEvents.push();\\n        portal.id = 400002;\\n\\n        portal.defaultEffect = portalDefault;\\n\\n        // 3 The Kirk Method\\n        // TODO\\n        Effect[] storage kirkMethodDefault = effectsList.push();\\n        kirkMethodDefault.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        Effect[] storage kirkMethodLow = effectsList.push();\\n        kirkMethodLow.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        // TODO: Add ability -1 to all rolls\\n\\n        Effect[] storage kirkMethodHigh = effectsList.push();\\n        kirkMethodHigh.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodHigh.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage kirkMethod = bcMysteryCardEvents.push();\\n        kirkMethod.id = 400003;\\n\\n        kirkMethod.defaultEffect = kirkMethodDefault;\\n        kirkMethod.lowEffect = kirkMethodLow;\\n        kirkMethod.highEffect = kirkMethodHigh;\\n\\n        // 4 Brownie\\n        // TODO: This is a choice event, choices are not implemented\\n        Effect[] storage brownieDefault = effectsList.push();\\n\\n        BCEvent storage brownie = bcMysteryCardEvents.push();\\n        brownie.id = 400004;\\n\\n        brownie.defaultEffect = brownieDefault;\\n\\n        // 5 I gotta get out of here!\\n        // TODO\\n        Effect[] storage getOutDefault = effectsList.push();\\n        getOutDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        // getOutDefault.push(Effect()) // TODO: Move player to nearest window or reeval.  This would be expensive to bfs.\\n\\n        BCEvent storage getOut = bcMysteryCardEvents.push();\\n        getOut.id = 400005;\\n\\n        getOut.defaultEffect = getOutDefault;\\n\\n        // 6 Incident Boundry\\n        // TODO\\n        Effect[] storage incidentBoundryDefault = effectsList.push();\\n        incidentBoundryDefault.push(Effect(EffectTypes.physicalDamage, 1)); // TODO: Should armor prevent this?\\n\\n        BCEvent storage incidentBoundry = bcMysteryCardEvents.push();\\n        incidentBoundry.id = 400006;\\n\\n        incidentBoundry.defaultEffect = incidentBoundryDefault;\\n\\n        // 7 Fugue State\\n        // TODO: May need to replace this one, very complicated to implement, meaningless single player\\n        Effect[] storage fugueStateDefault = effectsList.push();\\n\\n        BCEvent storage fugueState = bcMysteryCardEvents.push();\\n        fugueState.id = 400007;\\n\\n        fugueState.defaultEffect = fugueStateDefault;\\n\\n        // 8 Horror\\n        // TODO: Another challenging event to implement, would need BFS and custom code to break doors, and move player there\\n        Effect[] storage horrorDefault = effectsList.push();\\n\\n        BCEvent storage horror = bcMysteryCardEvents.push();\\n        horror.id = 400008;\\n\\n        horror.defaultEffect = horrorDefault;\\n\\n        // 9 Voices\\n        // TODO\\n        Effect[] storage voicesDefault = effectsList.push();\\n\\n        BCEvent storage voices = bcMysteryCardEvents.push();\\n        voices.id = 400009;\\n\\n        voices.defaultEffect = voicesDefault;\\n\\n        // 10 The Lottery\\n        Effect[] storage lotteryDefault = effectsList.push();\\n\\n        Effect[] storage lotteryLow = effectsList.push();\\n        lotteryLow.push(Effect(EffectTypes.instantDeath, 1));\\n\\n        BCEvent storage lottery = bcMysteryCardEvents.push();\\n        lottery.id = 400010;\\n        lottery.rollForLow = 1;\\n\\n        lottery.defaultEffect = lotteryDefault;\\n        lottery.lowEffect = lotteryLow;\\n\\n        // 11 Missing Numbers\\n        // TODO\\n        Effect[] storage missingNumbersDefault = effectsList.push();\\n\\n        Effect[] storage missingNumbersLow = effectsList.push();\\n\\n        Effect[] storage missingNumbersHigh = effectsList.push();\\n\\n        BCEvent storage missingNumbers = bcMysteryCardEvents.push();\\n        missingNumbers.id = 400011;\\n        missingNumbers.rollForLow = 1;\\n        missingNumbers.rollForHigh = 6;\\n\\n        missingNumbers.defaultEffect = missingNumbersDefault;\\n        missingNumbers.lowEffect = missingNumbersLow;\\n        missingNumbers.highEffect = missingNumbersHigh;\\n\\n        // 12 Tesseract\\n        // TODO\\n        Effect[] storage tesseractDefault = effectsList.push();\\n        tesseractDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage tesseract = bcMysteryCardEvents.push();\\n        tesseract.id = 400012;\\n\\n        tesseract.defaultEffect = tesseractDefault;\\n\\n        // 13 Glitch In the Spaceship\\n        // TODO\\n        Effect[] storage glitchDefault = effectsList.push();\\n\\n        BCEvent storage glitch = bcMysteryCardEvents.push();\\n        glitch.id = 400013;\\n\\n        glitch.defaultEffect = glitchDefault;\\n\\n        // 14 Ephemeral Form\\n        // TODO\\n        Effect[] storage ephemeralFormDefault = effectsList.push();\\n\\n        BCEvent storage ephemeralForm = bcMysteryCardEvents.push();\\n        ephemeralForm.id = 400014;\\n\\n        ephemeralForm.defaultEffect = ephemeralFormDefault;\\n\\n        // 15 TISATAAFL\\n        // TODO\\n        Effect[] storage tisataaflDefault = effectsList.push();\\n        tisataaflDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        tisataaflDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        BCEvent storage tisataafl = bcMysteryCardEvents.push();\\n        tisataafl.id = 400015;\\n\\n        tisataafl.defaultEffect = tisataaflDefault;\\n    }\\n\\n    function _initializeDefaultScavCardEvents() internal {\\n        BCEvent storage noEvent = bcScavCardEvents.push();\\n        noEvent.id = 500000;\\n\\n        // 1 Crazed Prophet\\n        // TODO\\n        Effect[] storage crazedProphetDefault = effectsList.push();\\n        crazedProphetDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage crazedProphet = bcScavCardEvents.push();\\n        crazedProphet.id = 500001;\\n\\n        crazedProphet.defaultEffect = crazedProphetDefault;\\n\\n        // 2 Blackjack\\n        // TODO: Is this broken like packrat?  How can it not be?\\n        // I did die I think that removes the item before the next item is resolved\\n        Effect[] storage blackjackDefault = effectsList.push();\\n        blackjackDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        blackjackDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage blackjack = bcScavCardEvents.push();\\n        blackjack.id = 500002;\\n\\n        blackjack.defaultEffect = blackjackDefault;\\n\\n        // 3 Toll\\n        // TODO\\n        Effect[] storage tollDefault = effectsList.push();\\n\\n        BCEvent storage toll = bcScavCardEvents.push();\\n        toll.id = 500003;\\n\\n        toll.defaultEffect = tollDefault;\\n\\n        // 4 Bear Trap\\n        // TODO: This appears to have placed a hazard at least once\\n        // TODO: 2 dice, place enemy if free self failed\\n        Effect[] storage bearTrapDefault = effectsList.push();\\n        bearTrapDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage bearTrap = bcScavCardEvents.push();\\n        bearTrap.id = 500004;\\n\\n        bearTrap.defaultEffect = bearTrapDefault;\\n\\n        // 5 Cooking Badly\\n        Effect[] storage cookingBadlyDefault = effectsList.push();\\n        cookingBadlyDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage cookingBadly = bcScavCardEvents.push();\\n        cookingBadly.id = 500005;\\n\\n        cookingBadly.defaultEffect = cookingBadlyDefault;\\n\\n        // 6 Garbage Collection\\n        // TODO:\\n        Effect[] storage garbageCollectionDefault = effectsList.push();\\n        garbageCollectionDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage garbageCollection = bcScavCardEvents.push();\\n        garbageCollection.id = 500006;\\n\\n        garbageCollection.defaultEffect = garbageCollectionDefault;\\n\\n        // 7 You scratch my back... // TODO: Need variant for single player\\n        // Or just make it discard a card and draw a card\\n        // TODO:\\n        Effect[] storage scratchDefault = effectsList.push();\\n        scratchDefault.push(Effect(EffectTypes.takeNumItems, 1)); // TODO: Also need to implement picking an item to discard\\n        scratchDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage scratch = bcScavCardEvents.push();\\n        scratch.id = 500007;\\n\\n        scratch.defaultEffect = scratchDefault;\\n\\n        // 8 Bully\\n        // TODO: Choice\\n        Effect[] storage bullyDefault = effectsList.push();\\n\\n        BCEvent storage bully = bcScavCardEvents.push();\\n        bully.id = 500008;\\n\\n        bully.defaultEffect = bullyDefault;\\n\\n        // 9 Arm Rassling\\n        // TODO: Choice\\n        Effect[] storage armRasslingDefault = effectsList.push();\\n\\n        BCEvent storage armRassling = bcScavCardEvents.push();\\n        armRassling.id = 500009;\\n\\n        armRassling.defaultEffect = armRasslingDefault;\\n\\n        // 10 Hitman\\n        // TODO: Solo player variant, pick player to kill, pick discard\\n        Effect[] storage hitmanDefault = effectsList.push();\\n\\n        BCEvent storage hitman = bcScavCardEvents.push();\\n        hitman.id = 500010;\\n\\n        hitman.defaultEffect = hitmanDefault;\\n\\n        // 11 Mad Mel\\n        // TODO\\n        Effect[] storage madMelDefault = effectsList.push();\\n        madMelDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        madMelDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        madMelDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        madMelDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage madMel = bcScavCardEvents.push();\\n        madMel.id = 500011;\\n\\n        madMel.defaultEffect = madMelDefault;\\n\\n        // 12 Scavangus Interruptus\\n        // TODO\\n        Effect[] storage scavangusInterruptusDefault = effectsList.push();\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.numEnemyToPlace, 2)\\n        );\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM)))\\n        );\\n\\n        BCEvent storage scavangusInterruptus = bcScavCardEvents.push();\\n        scavangusInterruptus.id = 500012;\\n\\n        scavangusInterruptus.defaultEffect = scavangusInterruptusDefault;\\n\\n        // 13 I'm sleeping here!\\n        // TODO\\n        Effect[] storage imSleepingDefault = effectsList.push();\\n        imSleepingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        imSleepingDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        imSleepingDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM)))\\n        );\\n\\n        BCEvent storage imSleeping = bcScavCardEvents.push();\\n        imSleeping.id = 500013;\\n\\n        imSleeping.defaultEffect = imSleepingDefault;\\n\\n        // 14 I'm not following you!\\n        Effect[] storage notFollowingDefault = effectsList.push();\\n        notFollowingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notFollowingDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        notFollowingDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.LAST_ROOM)))\\n        );\\n\\n        BCEvent storage notFollowing = bcScavCardEvents.push();\\n        notFollowing.id = 500014;\\n\\n        notFollowing.defaultEffect = notFollowingDefault;\\n\\n        // 15 You Are Not Alone\\n\\n        // TODO CRITICAL -> this event breaks the map\\n        // Should work now, forgot to push zero here.\\n        Effect[] storage notAloneDefault = effectsList.push();\\n        notAloneDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notAloneDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        notAloneDefault.push(\\n            Effect(\\n                EffectTypes.whereToPlace,\\n                (uint(EnemyPlacement.ALL_ADJACENT))\\n            )\\n        );\\n\\n        BCEvent storage notAlone = bcScavCardEvents.push();\\n        notAlone.id = 500015;\\n\\n        notAlone.defaultEffect = notAloneDefault;\\n    }\\n\\n    function _initializeDefaultShipCardEvents() internal {\\n        // TODO: Only 2 events spawns a sentry robot.  Evaluate.\\n        // Though saving murder bots for crisises is interesting too\\n\\n        BCEvent storage noEvent = bcShipCardEvents.push();\\n        noEvent.id = 600000;\\n\\n        // 1 Snitch\\n        // TODO: Need target player mechanism and place in that room\\n        Effect[] storage snitchDefault = effectsList.push();\\n\\n        BCEvent storage snitch = bcShipCardEvents.push();\\n        snitch.id = 600001;\\n\\n        snitch.defaultEffect = snitchDefault;\\n\\n        // 2 Alarm\\n        Effect[] storage alarmDefault = effectsList.push();\\n        alarmDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        alarmDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.ROBOT))\\n        );\\n        alarmDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage alarm = bcShipCardEvents.push();\\n        alarm.id = 600002;\\n\\n        alarm.defaultEffect = alarmDefault;\\n\\n        // 3 Lockdown\\n        // TODO: Need to permanantly lock the walls\\n        // For now, just locking the doors at strength 5\\n        Effect[] storage lockdownDefault = effectsList.push();\\n        lockdownDefault.push(Effect(EffectTypes.lockDoorStrength, 5));\\n\\n        BCEvent storage lockdown = bcShipCardEvents.push();\\n        lockdown.id = 600003;\\n\\n        lockdown.defaultEffect = lockdownDefault;\\n\\n        // 4 Vent the Ship\\n        Effect[] storage ventDefault = effectsList.push();\\n        ventDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        ventDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage vent = bcShipCardEvents.push();\\n        vent.id = 600004;\\n\\n        vent.defaultEffect = ventDefault;\\n\\n        // 5 Maintenance Hatch\\n        // TODO: Impelement hatch\\n        Effect[] storage hatchDefault = effectsList.push();\\n\\n        BCEvent storage hatch = bcShipCardEvents.push();\\n        hatch.id = 600005;\\n\\n        hatch.defaultEffect = hatchDefault;\\n\\n        // 6 Replicator\\n        // TODO: Need to track discarded/destroyed items\\n        // TODO: Allowing item duplicates or reviving dead items has major implications for UiF.  However, it would be super cool properly controlled!\\n        Effect[] storage replicatorDefault = effectsList.push();\\n        // TODO: For now, just granting an item\\n        replicatorDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage replicator = bcShipCardEvents.push();\\n        replicator.id = 600006;\\n\\n        replicator.defaultEffect = replicatorDefault;\\n\\n        // 7 First Aid Station\\n        Effect[] storage firstAidDefault = effectsList.push();\\n        firstAidDefault.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage firstAid = bcShipCardEvents.push();\\n        firstAid.id = 600007;\\n\\n        firstAid.defaultEffect = firstAidDefault;\\n\\n        // 8 ATM\\n        // TODO: Two Dice\\n        // TODO: Choice to walk away\\n        Effect[] storage atmDefault = effectsList.push();\\n\\n        Effect[] storage atmLow = effectsList.push();\\n        atmLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        atmLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        atmLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        // TODO: Add second high?\\n        Effect[] storage atmHigh = effectsList.push();\\n        atmHigh.push(Effect(EffectTypes.grantData, 2)); // Avg of 1 and 3\\n\\n        BCEvent storage atm = bcShipCardEvents.push();\\n        atm.id = 60008;\\n\\n        atm.defaultEffect = atmDefault;\\n        atm.lowEffect = atmLow;\\n        atm.highEffect = atmHigh;\\n\\n        // 9 Blooper Reel\\n        Effect[] storage blooperDefault = effectsList.push();\\n        blooperDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage blooper = bcShipCardEvents.push();\\n        blooper.id = 600009;\\n\\n        blooper.defaultEffect = blooperDefault;\\n\\n        // 10 Locker\\n        // TODO\\n        Effect[] storage lockerDefault = effectsList.push();\\n        lockerDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage locker = bcShipCardEvents.push();\\n        locker.id = 600010;\\n\\n        locker.defaultEffect = lockerDefault;\\n\\n        // 11 Contraband\\n        // TODO: CHOICE\\n        Effect[] storage contrabandDefault = effectsList.push();\\n\\n        BCEvent storage contraband = bcShipCardEvents.push();\\n        contraband.id = 600011;\\n\\n        contraband.defaultEffect = contrabandDefault;\\n\\n        // 12 Fire // TODO: This is identical to Vent the Ship!\\n        Effect[] storage fireDefault = effectsList.push();\\n        fireDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        fireDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage fire = bcShipCardEvents.push();\\n        fire.id = 600012;\\n\\n        fire.defaultEffect = fireDefault;\\n\\n        // 13 Janitorial Misconduct\\n        // TODO: Need ability to force dropping an item at a location\\n        Effect[] storage janitorialMisconductDefault = effectsList.push();\\n\\n        BCEvent storage janitorialMisconduct = bcShipCardEvents.push();\\n        janitorialMisconduct.id = 600013;\\n\\n        janitorialMisconduct.defaultEffect = janitorialMisconductDefault;\\n\\n        // 14 Target Acquired\\n        // TODO\\n        Effect[] storage targetAcquiredDefault = effectsList.push();\\n        targetAcquiredDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        targetAcquiredDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        targetAcquiredDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage targetAcquired = bcShipCardEvents.push();\\n        targetAcquired.id = 600014;\\n\\n        targetAcquired.defaultEffect = targetAcquiredDefault;\\n\\n        // 15 Security!\\n        // TODO\\n        Effect[] storage securityDefault = effectsList.push();\\n        securityDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        securityDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.ROBOT))\\n        );\\n        securityDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage security = bcShipCardEvents.push();\\n        security.id = 600015;\\n\\n        security.defaultEffect = securityDefault;\\n    }\\n\\n    function _initializeDefaultRoomEvents() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcRoomEvents.push();\\n        noEvent.id = 0;\\n        noEvent.permanent = false;\\n        noEvent.rollForLow = 0;\\n        noEvent.rollForHigh = 0;\\n\\n        noEvent.defaultEffect = emptyEffect;\\n        noEvent.lowEffect = emptyEffect;\\n        noEvent.highEffect = emptyEffect;\\n\\n        // 1 Breached Reactor\\n        // Done\\n        Effect[] storage breachedReactorDefault = effectsList.push();\\n        breachedReactorDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        breachedReactorDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        BCEvent storage breachedReactor = bcRoomEvents.push();\\n        breachedReactor.id = 200001;\\n        breachedReactor.permanent = false;\\n        breachedReactor.rollForLow = 0;\\n        breachedReactor.rollForHigh = 0;\\n\\n        breachedReactor.defaultEffect = breachedReactorDefault;\\n        breachedReactor.lowEffect = emptyEffect;\\n        breachedReactor.highEffect = emptyEffect;\\n        //     bcRoomEvents.push(BCEvent(\\n        //         // \\\"Breached Reactor\\\",\\n        //         // \\\"As you enter the room, the reactor explodes!  Take 1 hazard damage.\\\",\\n        //         200001,\\n        //         false,\\n        //         0,\\n        //         0, // TODO:  Explore adding choices to these ones\\n        //         breachedReactorDefault,\\n        //         emptyEffect,\\n        //         emptyEffect\\n        //     ));\\n\\n        // 2 Bug Nest\\n        // TODO\\n        Effect[] storage bugNestLow = effectsList.push();\\n        bugNestLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        bugNestLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        bugNestLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage bugNestHigh = effectsList.push();\\n        bugNestHigh.push(Effect(EffectTypes.grantEgg, 1)); // TRUE\\n\\n        BCEvent storage bugNest = bcRoomEvents.push();\\n        bugNest.id = 200002;\\n        bugNest.permanent = true; // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n        bugNest.rollForLow = 2;\\n        bugNest.rollForHigh = 6;\\n\\n        bugNest.defaultEffect = emptyEffect;\\n        bugNest.lowEffect = bugNestLow;\\n        bugNest.highEffect = bugNestHigh;\\n\\n        // 3 Crossroads\\n        // TODO\\n        Effect[] storage crossroadsDefault = effectsList.push();\\n        crossroadsDefault.push(Effect(EffectTypes.numEnemyToPlace, 3));\\n        crossroadsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        crossroadsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage crossroads = bcRoomEvents.push();\\n        crossroads.id = 200003;\\n        crossroads.permanent = false;\\n        crossroads.rollForLow = 0;\\n        crossroads.rollForHigh = 0;\\n\\n        crossroads.defaultEffect = crossroadsDefault;\\n        crossroads.lowEffect = emptyEffect;\\n        crossroads.highEffect = emptyEffect;\\n\\n        // 4 Engineering Catwalk\\n        Effect[] storage catwalkDefault = effectsList.push();\\n        catwalkDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.REACTOR))\\n        );\\n\\n        BCEvent storage catwalk = bcRoomEvents.push();\\n        catwalk.id = 200004;\\n        catwalk.permanent = true;\\n        catwalk.rollForLow = 0;\\n        catwalk.rollForHigh = 0;\\n\\n        catwalk.defaultEffect = catwalkDefault;\\n        catwalk.lowEffect = emptyEffect;\\n        catwalk.highEffect = emptyEffect;\\n\\n        // 5 Hull Breach\\n        // Done\\n        Effect[] storage hullBreachDefault = effectsList.push();\\n        hullBreachDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n\\n        Effect[] storage hullBreachLow = effectsList.push();\\n        hullBreachLow.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        hullBreachLow.push(Effect(EffectTypes.instantDeath, 1)); // TRUE\\n\\n        BCEvent storage hullBreach = bcRoomEvents.push();\\n        hullBreach.id = 200005;\\n        hullBreach.permanent = false;\\n        hullBreach.rollForLow = 1;\\n        hullBreach.rollForHigh = 0;\\n\\n        hullBreach.defaultEffect = hullBreachDefault;\\n        hullBreach.lowEffect = hullBreachLow;\\n        hullBreach.highEffect = emptyEffect;\\n\\n        // 6 Medbay\\n        // TODO: No hostiles in room\\n        // HACK:  Full health + heal amount 1 indicates heal to full health +1\\n        Effect[] storage medbayDefault = effectsList.push();\\n        medbayDefault.push(Effect(EffectTypes.fullHealth, 1)); // TRUE\\n\\n        BCEvent storage medbay = bcRoomEvents.push();\\n        medbay.id = 200006;\\n        medbay.permanent = true;\\n        medbay.rollForLow = 0;\\n        medbay.rollForHigh = 0;\\n\\n        medbay.defaultEffect = medbayDefault;\\n        medbay.lowEffect = emptyEffect;\\n        medbay.highEffect = emptyEffect;\\n    }\\n\\n    function _initializeDefaultRoomEvents_2() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // 7 Showers\\n        // Done\\n        Effect[] storage showersDefault = effectsList.push();\\n        showersDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage showers = bcRoomEvents.push();\\n        showers.id = 200007;\\n        showers.permanent = false;\\n        showers.rollForLow = 0;\\n        showers.rollForHigh = 0;\\n\\n        showers.defaultEffect = showersDefault;\\n        showers.lowEffect = emptyEffect;\\n        showers.highEffect = emptyEffect;\\n\\n        // 8 Trash Compactor\\n        // TODO - Locking doors is done, crushing players and items is not\\n        Effect[] storage trashCompactorDefault = effectsList.push();\\n        trashCompactorDefault.push(Effect(EffectTypes.lockDoorStrength, 4));\\n\\n        BCEvent storage trashCompactor = bcRoomEvents.push();\\n        trashCompactor.id = 200008;\\n        trashCompactor.permanent = false;\\n        trashCompactor.rollForLow = 0;\\n        trashCompactor.rollForHigh = 0;\\n\\n        trashCompactor.defaultEffect = trashCompactorDefault;\\n        trashCompactor.lowEffect = emptyEffect;\\n        trashCompactor.highEffect = emptyEffect;\\n\\n        // 9 Ship Services\\n        // TODO: Let player select which services to use.\\n        // TODO\\n        Effect[] storage shipServicesDefault = effectsList.push();\\n        shipServicesDefault.push(Effect(EffectTypes.fullHealth, 0)); // TODO: Prevent this from stripping extra health\\n        // TODO: Sell items to company\\n        // TODO: Buy items from company (only multiplayer?)\\n\\n        BCEvent storage shipServices = bcRoomEvents.push();\\n        shipServices.id = 200009;\\n        shipServices.permanent = true;\\n\\n        shipServices.defaultEffect = shipServicesDefault;\\n    }\\n}\\n\",\"keccak256\":\"0x9977a411a9fc2d878a42a48ce964481a69cd6da2c560beef3710cd5686dc4ac9\",\"license\":\"UNLICENSED\"},\"contracts/BCGames.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCEvents.sol\\\";\\nimport \\\"./BCUtils.sol\\\";\\n\\ninterface DenizensInterface {\\n    function processDenizenMoves(\\n        uint _gameId,\\n        uint _mapId,\\n        uint[] memory _playerIds,\\n        uint[] memory _denizenIds\\n    ) external;\\n\\n    function addDenizen(\\n        uint _gameId,\\n        BCTypes.DenizenType _type,\\n        uint _row,\\n        uint _col\\n    ) external returns (uint);\\n\\n    function getDenizens(\\n        uint[] memory _denizenIds\\n    ) external view returns (BCTypes.Denizen[] memory);\\n}\\n\\ninterface EventsInterface {\\n    function extGetRoomEvent(\\n        uint _id\\n    ) external view returns (BCEvents.BCEvent memory);\\n\\n    function extGetCardEvent(\\n        uint _id\\n    ) external view returns (BCEvents.BCEvent memory);\\n\\n    function extGetEffects(\\n        bool _roomEvent,\\n        uint _id\\n    ) external view returns (BCEvents.Effect[][] memory);\\n\\n    function extGetTraitModForEffect(\\n        bool _roomEvent,\\n        uint _id,\\n        uint _effect\\n    ) external view returns (BCTypes.Traits memory);\\n}\\n\\ninterface CharInterface {\\n    function characters(\\n        uint _id\\n    ) external view returns (BCTypes.Character memory);\\n\\n    function incrementCloneNumber(uint _charId) external;\\n\\n    function joinGame(uint _gameId, uint _charId) external;\\n\\n    function leaveGame(uint _charId) external;\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n\\n    function debugBuildMapOneRoom(uint _roomId) external returns (uint);\\n\\n    function extGetBoard(\\n        uint _mapId\\n    ) external view returns (BCTypes.GameTile[][] memory);\\n\\n    function extGetGameTile(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) external view returns (BCTypes.GameTile memory);\\n\\n    function getDoor(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction\\n    ) external view returns (BCTypes.Door memory);\\n\\n    function extGetDoors(\\n        uint _mapId\\n    ) external view returns (BCTypes.Door[] memory);\\n\\n    function setDoorFromPos(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction,\\n        BCTypes.DoorStatus _status,\\n        uint _strength\\n    ) external;\\n\\n    function discoverRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint debugRoomId\\n    ) external returns (uint);\\n\\n    function resetOpenDoors(uint _mapId) external;\\n\\n    function extGetRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) external view returns (BCTypes.RoomTile memory);\\n\\n    function extGetRoomById(\\n        uint _mapId,\\n        uint _roomId\\n    ) external view returns (BCTypes.RoomTile memory);\\n\\n    function extGetRoomId(\\n        uint _mapId,\\n        uint row,\\n        uint col\\n    ) external view returns (uint);\\n\\n    function extSetHazardStatus(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        bool _hasHazard\\n    ) external;\\n\\n    function extSpreadHazards(uint _mapId, uint _distance) external;\\n\\n    function getLineOfSight(\\n        uint _mapId,\\n        BCTypes.Position memory _first,\\n        BCTypes.Position memory _second,\\n        bool _ignoreClosed\\n    ) external view returns (bool);\\n\\n    function moveToOrCloser(\\n        uint _mapId,\\n        BCTypes.Position memory _start,\\n        BCTypes.Position memory _finish,\\n        bool _ignoreClosed,\\n        bool _useVents,\\n        uint _moveLimit\\n    ) external view returns (BCTypes.Position memory);\\n}\\n\\ninterface ItemsInterface {\\n    function getItemIDsByPlayer(\\n        uint _playerID\\n    ) external view returns (uint[] memory);\\n\\n    function destroyItem(uint _itemId) external;\\n\\n    function takeItemsHome(uint _playerId, uint _gameId) external;\\n\\n    function addItemsToGame(uint _gameId, uint[] memory _playerIds) external;\\n}\\n\\ninterface PlayersInterface {\\n    function extChooseEffect(\\n        uint _choice,\\n        uint _eventPlayerId,\\n        uint _gameId,\\n        uint _mapId,\\n        BCTypes.Position memory _position,\\n        uint _eventNumber,\\n        BCTypes.BCEventType _eventType\\n    ) external;\\n\\n    function extMovePlayer(\\n        BCTypes.Position memory _position,\\n        uint _playerId,\\n        uint _mapId\\n    ) external returns (bool);\\n\\n    function extHurtPlayer(uint _playerId, uint _amount, bool _hazard) external;\\n\\n    function extGetPlayerOwner(uint _id) external view returns (address);\\n\\n    function applyHazardDamage(uint _mapId, uint[] memory _players) external;\\n\\n    function resetPlayerActions(uint _playerId) external;\\n\\n    function incrementPlayerActions(uint _playerId) external;\\n\\n    function extGetPlayer(\\n        uint _id\\n    ) external view returns (BCTypes.Player memory);\\n\\n    function extGetActionsTaken(uint _id) external view returns (uint);\\n\\n    function extGetPlayerCharId(uint _id) external view returns (uint);\\n\\n    function setPlayersGameId(uint[] memory ids, uint _gameId) external;\\n}\\n\\ncontract BCGames is Ownable, BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    CharInterface public chars;\\n    MapInterface public maps;\\n    EventsInterface public bcEvents;\\n    ItemsInterface public items;\\n    PlayersInterface public players;\\n    DenizensInterface public denizens;\\n\\n    address public lobbiesAddress;\\n    address public charsAddress;\\n    address public actionsAddress;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _mapsAddress,\\n        address _lobbiesAddress,\\n        address _actionsAddress,\\n        address _eventsAddress,\\n        address _itemsAddress,\\n        address _playersAddress,\\n        address _denizensAddress\\n    ) public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        // bcChars = BCChars(_charAddress);\\n        maps = MapInterface(_mapsAddress);\\n        // bcMaps = Maps(_mapsAddress);\\n        lobbiesAddress = _lobbiesAddress;\\n        actionsAddress = _actionsAddress;\\n        bcEvents = EventsInterface(_eventsAddress);\\n        items = ItemsInterface(_itemsAddress);\\n        players = PlayersInterface(_playersAddress);\\n        denizens = DenizensInterface(_denizensAddress);\\n    }\\n\\n    error EventNotForPlayer(uint);\\n    error PlayerNotInGame(uint, uint);\\n    // error CantSeeTarget(uint);\\n    // error AlreadyDead(uint);\\n    error CantForceDenizenTurn();\\n    error StillWithinTimeLimit();\\n    error CantForceSinglePlayer();\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3;\\n\\n    uint8 constant SPACE_ROOM = 0;\\n    uint constant DONGHAIJIU = 2;\\n\\n    BCTypes.Position public StartLocation = BCTypes.Position(10, 6); // TODO: duped on maps\\n\\n    BCTypes.Game[] public games;\\n\\n    mapping(address => uint[]) public addressToGame; // Don't use set, never removed from\\n\\n    event DenizenAttack(\\n        uint gameId,\\n        BCTypes.DenizenType denizenType,\\n        uint denizenId,\\n        uint playerTarget,\\n        uint damage,\\n        uint turnabout\\n    );\\n\\n    event DenizenTurnOver(uint gameId);\\n\\n    event PlayerAttack(\\n        // TODO: Handle PVP\\n        uint gameId,\\n        uint playerId,\\n        BCTypes.DenizenType denizenType,\\n        uint denizenId,\\n        uint damage,\\n        uint turnabout\\n    );\\n\\n    constructor() {\\n        // TODO: CRITICAL!!! BURN GAME 0\\n        games.push();\\n    }\\n\\n    function startGame(\\n        uint[] memory _playerIndexes,\\n        uint _numPlayers,\\n        uint _debugRoomId\\n    ) public returns (uint) {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        // TODO: Add turn and overall time limits for game\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n        BCTypes.Game storage newGame = games.push();\\n        uint gameId = games.length - 1;\\n        newGame.gameId = gameId;\\n        newGame.active = true;\\n        newGame.turnsTaken = 0;\\n        newGame.playerIndexes = _playerIndexes;\\n        newGame.numPlayers = _numPlayers;\\n        newGame.eventTracker = BCTypes.EventTracker(0, 0, 0, 0);\\n\\n        // TODO: CRITICAL -> Remove DEBUG\\n        if (_debugRoomId == 0) {\\n            newGame.mapId = maps.createMap();\\n        } else {\\n            newGame.mapId = maps.debugBuildMapOneRoom(_debugRoomId);\\n        }\\n        // Move the players to the start // TODO: Hardcoded\\n        // And map the owners to this game\\n        for (uint i = 0; i <= _numPlayers - 1; i++) {\\n            // Warning: using _movePlayer here will attempt to discover, etc.\\n            _movePlayer(\\n                newGame.mapId,\\n                StartLocation,\\n                newGame.playerIndexes[i],\\n                0\\n            );\\n            address joiner = players.extGetPlayerOwner(_playerIndexes[i]);\\n            addressToGame[joiner].push(gameId);\\n\\n            uint charId = players.extGetPlayerCharId(_playerIndexes[i]);\\n\\n            chars.joinGame(gameId, charId);\\n\\n            newGame.charIds.push(charId);\\n        }\\n\\n        players.setPlayersGameId(_playerIndexes, gameId); // TODO: FFS\\n        items.addItemsToGame(gameId, _playerIndexes);\\n\\n        // Create trackers for card events (this is pass by value)\\n        uint[15] memory unusedArr = [\\n            uint(1),\\n            2,\\n            3,\\n            4,\\n            5,\\n            6,\\n            7,\\n            8,\\n            9,\\n            10,\\n            11,\\n            12,\\n            13,\\n            14,\\n            15\\n        ];\\n        newGame.unusedBugEvents = unusedArr;\\n        newGame.unusedMysteryEvents = unusedArr;\\n        newGame.unusedScavEvents = unusedArr;\\n        newGame.unusedShipEvents = unusedArr;\\n\\n        newGame.turnTimeLimit = 5 minutes; // TODO: Add option for 24 hours\\n        newGame.lastTurnTimestamp = block.timestamp;\\n\\n        // TODO DEAL WITH ITEMS\\n\\n        // TODO: Player who pays to start gets to go first?\\n        // TODO: Event\\n        return gameId;\\n    }\\n\\n    function leaveGame(\\n        uint _gameId,\\n        uint _playerId,\\n        uint _charId,\\n        uint _currentPlayerTurnIndex\\n    ) public onlyActions {\\n        // TODO: -> Critical, confirm this is sufficient protection\\n        // require(\\n        //     msg.sender == actionsAddress,\\n        //     \\\"Not actions contract - leaveGame\\\"\\n        // );\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        // TODO: Payout for data (or maybe don't do here, need to be at end to get)\\n        // TODO: Give option to keep or sell still held items\\n        // Thinking to make a cost to smuggle items out, but free to carry\\n        // No payout if you leave early\\n        items.takeItemsHome(_playerId, _gameId);\\n\\n        chars.leaveGame(_charId);\\n\\n        uint[] memory newPlayerIndexes = new uint[](\\n            currentGame.playerIndexes.length - 1\\n        );\\n        uint cursor = 0;\\n\\n        for (uint i = 0; i < currentGame.playerIndexes.length; i++) {\\n            if (i == _currentPlayerTurnIndex) {\\n                continue;\\n            }\\n            newPlayerIndexes[cursor] = currentGame.playerIndexes[i];\\n            cursor++;\\n        }\\n\\n        currentGame.playerIndexes = newPlayerIndexes;\\n        currentGame.numPlayers--;\\n\\n        // Snipping out the leaving player will set the turn to the next\\n        // player.  If this player was the last, we need to set it to 0\\n        if (\\n            currentGame.currentPlayerTurnIndex ==\\n            currentGame.playerIndexes.length\\n        ) {\\n            currentGame.currentPlayerTurnIndex = 0;\\n        }\\n\\n        if (currentGame.playerIndexes.length == 0) {\\n            _endGame(currentGame);\\n        }\\n    }\\n\\n    function _endGame(BCTypes.Game storage _currentGame) internal {\\n        _currentGame.active = false;\\n    }\\n\\n    // TODO: Call the choices 'Risk' and 'Caution'\\n    // TODO: Will be used to add choice later, ie drop items but no risk of death\\n    function resolveEvent(uint _gameId, uint _choice) public {\\n        BCTypes.Game storage eventGame = games[_gameId];\\n\\n        if (msg.sender != players.extGetPlayerOwner(eventGame.eventPlayerId)) {\\n            revert EventNotForPlayer(eventGame.eventPlayerId);\\n        }\\n\\n        _resolveEvent(_gameId, _choice);\\n    }\\n\\n    // Separate internal function to allow this contract to call in `forceNextTurn`\\n    function _resolveEvent(uint _gameId, uint _choice) internal {\\n        BCTypes.Game storage eventGame = games[_gameId];\\n        players.extChooseEffect(\\n            _choice,\\n            eventGame.eventPlayerId,\\n            _gameId,\\n            eventGame.mapId,\\n            eventGame.eventPosition,\\n            eventGame.eventNumber,\\n            eventGame.eventType\\n        );\\n\\n        eventGame.eventPlayerId = 0;\\n        eventGame.eventNumber = 0;\\n        eventGame.eventType = BCTypes.BCEventType.NONE;\\n    }\\n\\n    function endPlayerAction(\\n        uint _gameId,\\n        uint _playerId,\\n        bool _free\\n    ) public onlyActions {\\n        if (!_free) {\\n            players.incrementPlayerActions(_playerId);\\n        }\\n\\n        uint actionsTaken = players.extGetActionsTaken(_playerId);\\n\\n        // TODO: Revise this to handle manual passing the turn\\n        if (actionsTaken >= DEFAULT_ACTIONS_NUM) {\\n            _endPlayerTurn(_gameId, _playerId);\\n        }\\n    }\\n\\n    function _endPlayerTurn(uint _gameId, uint _playerId) internal {\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        // TODO: Get items and abilities for actions\\n        // TODO: This will prevent free actions after last\\n        // TODO: Add FE and BE mechanisim to have a default checkbox \\\"Pass the turn\\\"\\n        players.resetPlayerActions(_playerId);\\n        currentGame.lastTurnTimestamp = block.timestamp;\\n        if (\\n            currentGame.currentPlayerTurnIndex <\\n            currentGame.playerIndexes.length - 1\\n        ) {\\n            currentGame.currentPlayerTurnIndex++;\\n        } else {\\n            _endPlayerRound(_gameId, currentGame.mapId);\\n            currentGame.currentPlayerTurnIndex = 0;\\n        }\\n    }\\n\\n    function _endPlayerRound(uint _gameId, uint _mapId) internal {\\n        BCTypes.Game storage currentGame = games[_gameId];\\n        currentGame.turnsTaken++;\\n        // TODO: Shuffling the player indexes here to create a random order for next turns\\n\\n        // TODO: Consider closing doors after denizens move, particularly if vents don't happen\\n        maps.resetOpenDoors(_mapId);\\n        // TODO: Add ability to change distance for endgame\\n        maps.extSpreadHazards(_mapId, 1);\\n        // TODO: Hazards should damage denizens\\n\\n        players.applyHazardDamage(currentGame.mapId, currentGame.playerIndexes);\\n        currentGame.denizenTurn = true;\\n\\n        // TODO: Decrement timers.  MAKE SURE IT'S OK TO DO THIS BEFORE DENIZENS GO!\\n    }\\n\\n    function processDenizenMoves(uint _gameId) external {\\n        // TODO: Confirm no need to restrict this from anyone doing it\\n        // TODO: Either only first player can do it or maybe need to add time\\n        // Risk is another player could skip first player  or force them to do denizen\\n\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        denizens.processDenizenMoves(\\n            _gameId,\\n            currentGame.mapId,\\n            currentGame.playerIndexes,\\n            currentGame.denizenIds\\n        );\\n\\n        currentGame.denizenTurn = false;\\n        emit DenizenTurnOver(_gameId);\\n        gameToEventBlocks[_gameId].add(block.number);\\n    }\\n\\n    function forceNextTurn(uint _gameId) public {\\n        // TODO: Limit to only players of current game\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        if (currentGame.denizenTurn == true) {\\n            revert CantForceDenizenTurn();\\n        }\\n        if (currentGame.playerIndexes.length == 1) {\\n            revert CantForceSinglePlayer();\\n        }\\n\\n        if (\\n            block.timestamp <\\n            currentGame.lastTurnTimestamp + currentGame.turnTimeLimit\\n        ) {\\n            revert StillWithinTimeLimit();\\n        }\\n\\n        // TODO: Include this in determining checks to prevent randos\\n        // Force resolution of event if one is present\\n        if (currentGame.eventNumber != 0) {\\n            _resolveEvent(_gameId, 0);\\n        }\\n\\n        // TODO: Critical -> This can be exploited to hold on to extra items for a turn or two\\n\\n        _endPlayerTurn(\\n            _gameId,\\n            currentGame.playerIndexes[currentGame.currentPlayerTurnIndex]\\n        );\\n    }\\n\\n    function extMovePlayer(\\n        uint _gameId,\\n        BCTypes.Position memory _position,\\n        uint _playerId\\n    ) public onlyActions {\\n        _movePlayer(_gameId, _position, _playerId, 0);\\n    }\\n\\n    function debugMovePlayer(\\n        uint _gameId,\\n        BCTypes.Position memory _position,\\n        uint _playerId,\\n        uint _debugRoomId\\n    ) public onlyOwner {\\n        _movePlayer(_gameId, _position, _playerId, _debugRoomId);\\n    }\\n\\n    function _movePlayer(\\n        uint _gameId,\\n        BCTypes.Position memory _position,\\n        uint _playerId,\\n        uint _debugRoomId\\n    ) internal {\\n        // TODO: May be unnecessary outside of testing bugs\\n        BCTypes.Game storage game = games[_gameId];\\n        if (\\n            _playerId != game.playerIndexes[0] &&\\n            _playerId != game.playerIndexes[1] &&\\n            _playerId != game.playerIndexes[2] &&\\n            _playerId != game.playerIndexes[3]\\n        ) {\\n            revert PlayerNotInGame(_gameId, _playerId);\\n        }\\n        // extMovePlayer returns true if the player was killed by moving into space\\n        if (\\n            !players.extMovePlayer(_position, _playerId, games[_gameId].mapId)\\n        ) {\\n            // Discover room and process event, if undiscovered\\n            // If roomId is returned by maps.discoverRoom as 0, room was already discovered (it's not a space tile)\\n            // TODO: This is confusing, should not use 0 here to indicate not to trigger event\\n            uint discoveredRoomId = maps.discoverRoom(\\n                games[_gameId].mapId,\\n                _position.row,\\n                _position.col,\\n                _debugRoomId\\n            );\\n            BCTypes.RoomTile memory discoveredRoom = maps.extGetRoomById(\\n                games[_gameId].mapId,\\n                discoveredRoomId\\n            );\\n            if (\\n                discoveredRoomId > 2 &&\\n                discoveredRoom.eventType != BCTypes.BCEventType.NONE\\n            ) {\\n                // Increment the event tracker\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.BUG) {\\n                    games[_gameId].eventTracker.bugEvents++;\\n                }\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.MYSTERY) {\\n                    games[_gameId].eventTracker.mysteryEvents++;\\n                }\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.SCAVENGER) {\\n                    games[_gameId].eventTracker.scavEvents++;\\n                }\\n                if (\\n                    discoveredRoom.eventType ==\\n                    BCTypes.BCEventType.SHIP_SECURITY\\n                ) {\\n                    games[_gameId].eventTracker.shipEvents++;\\n                }\\n\\n                if (discoveredRoom.eventNum > 0) {\\n                    // Set the in-room event ONLY if this is not a permanant event\\n                    BCEvents.BCEvent memory currentEvent = bcEvents\\n                        .extGetRoomEvent(discoveredRoom.eventNum);\\n                    if (!currentEvent.permanent) {\\n                        games[_gameId].eventPlayerId = _playerId;\\n                        games[_gameId].eventNumber = discoveredRoom.eventNum;\\n                        games[_gameId].eventType = BCTypes.BCEventType.ROOM;\\n                        games[_gameId].eventPosition = _position;\\n                    }\\n                } else if (\\n                    discoveredRoom.eventType != BCTypes.BCEventType.NONE\\n                ) {\\n                    games[_gameId].eventPlayerId = _playerId;\\n                    games[_gameId].eventPosition = _position;\\n                    // Draw a card for an event\\n                    // TODO: DRY with above\\n                    // TODO: Handle permanant card events like arm rassling, or remove from game\\n                    if (discoveredRoom.eventType == BCTypes.BCEventType.BUG) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedBugEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes.BCEventType.BUG;\\n                    }\\n                    if (\\n                        discoveredRoom.eventType == BCTypes.BCEventType.MYSTERY\\n                    ) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedMysteryEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes.BCEventType.MYSTERY;\\n                    }\\n                    if (\\n                        discoveredRoom.eventType ==\\n                        BCTypes.BCEventType.SCAVENGER\\n                    ) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedScavEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes\\n                            .BCEventType\\n                            .SCAVENGER;\\n                    }\\n                    if (\\n                        discoveredRoom.eventType ==\\n                        BCTypes.BCEventType.SHIP_SECURITY\\n                    ) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedShipEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes\\n                            .BCEventType\\n                            .SHIP_SECURITY;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // TODO: Eval one call per placement action.  May save gas.  Currently calling this in a loop\\n    function addDenizen(\\n        uint _gameId,\\n        BCTypes.DenizenType _type,\\n        uint _row,\\n        uint _col\\n    ) public {\\n        // Per rules, no denizens on Donghaijiu\\n        if (_row == StartLocation.row && _col == StartLocation.col) {\\n            // TODO: Emit an event here to let FE know to tell player something else\\n            return;\\n        }\\n        // Players contract determines effects of an event\\n        require(msg.sender == address(players), \\\"Not players contract\\\");\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        currentGame.denizenIds.push(\\n            denizens.addDenizen(_gameId, _type, _row, _col)\\n        );\\n    }\\n\\n    function getDenizensInGame(\\n        uint _gameId\\n    ) public view returns (BCTypes.Denizen[] memory) {\\n        return denizens.getDenizens(games[_gameId].denizenIds);\\n    }\\n\\n    function _getUnusedEvent(\\n        uint[] storage _unusedEventList\\n    ) internal returns (uint) {\\n        for (uint i = _unusedEventList.length - 1; i > 0; i--) {\\n            uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n            (_unusedEventList[i], _unusedEventList[k]) = (\\n                _unusedEventList[k],\\n                _unusedEventList[i]\\n            );\\n        }\\n\\n        uint eventId = _unusedEventList[_unusedEventList.length - 1];\\n        _unusedEventList.pop();\\n        return uint8(eventId);\\n    }\\n\\n    // TODO: Shouldn't I just be able to return games[_gameId].playerIndexes?\\n    function extGetGamePlayerIndexes(\\n        uint _gameId\\n    ) public view returns (uint[] memory) {\\n        uint[] memory indexes = new uint[](games[_gameId].playerIndexes.length);\\n        for (uint i = 0; i < indexes.length; i++) {\\n            indexes[i] = games[_gameId].playerIndexes[i];\\n        }\\n        return indexes;\\n    }\\n\\n    function extGetGame(uint _id) public view returns (BCTypes.Game memory) {\\n        return games[_id];\\n    }\\n\\n    function extGetNumGames() public view returns (uint) {\\n        return games.length;\\n    }\\n\\n    function extGetGamesOfPlayer(\\n        address _playerAddress\\n    ) public view returns (BCTypes.Game[] memory) {\\n        BCTypes.Game[] memory gamesList = new BCTypes.Game[](\\n            addressToGame[_playerAddress].length\\n        );\\n\\n        for (uint i = 0; i < gamesList.length; i++) {\\n            gamesList[i] = games[addressToGame[_playerAddress][i]];\\n        }\\n\\n        return gamesList;\\n    }\\n\\n    function extGetPlayersInGame(\\n        uint _gameId\\n    ) public view returns (BCTypes.Player[] memory) {\\n        BCTypes.Player[] memory playersList = new BCTypes.Player[](\\n            games[_gameId].playerIndexes.length\\n        );\\n\\n        for (uint i = 0; i < playersList.length; i++) {\\n            playersList[i] = players.extGetPlayer(\\n                games[_gameId].playerIndexes[i]\\n            );\\n        }\\n\\n        return playersList;\\n    }\\n\\n    function extGetCharsInGame(\\n        uint _gameId\\n    ) public view returns (BCTypes.Character[] memory) {\\n        BCTypes.Character[] memory charsList = new BCTypes.Character[](\\n            games[_gameId].charIds.length\\n        );\\n\\n        for (uint i = 0; i < charsList.length; i++) {\\n            charsList[i] = chars.characters(games[_gameId].charIds[i]);\\n        }\\n\\n        return charsList;\\n    }\\n\\n    modifier onlyActions() {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xca349e89d0ccfd15cb8fb1eecc25942218fb795507f5bfe16464faf892fa147b\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n    // From BCGames.sol\\n    enum DoorStatus {\\n        NO_DOOR,\\n        CLOSED,\\n        OPEN,\\n        BREACHED,\\n        WINDOW\\n    }\\n    enum Action {\\n        HACK,\\n        BREACH,\\n        MOVE,\\n        PASS,\\n        LOOT,\\n        USE_ROOM,\\n        USE_ITEM,\\n        DROP_ITEMS,\\n        PICK_ITEMS,\\n        LEAVE_GAME,\\n        MELEE_ATTACK,\\n        SHOOT_ATTACK,\\n        LOOT_DENIZEN\\n    } // TODO: Add rest\\n    enum Followthrough {\\n        NONE,\\n        MOVE\\n    }\\n    enum BCEventType {\\n        NONE,\\n        BUG,\\n        MYSTERY,\\n        SCAVENGER,\\n        SHIP_SECURITY,\\n        ROOM // TODO: Is this still useful\\n    }\\n    enum WorldItemStatus {\\n        DESTROYED,\\n        HELD,\\n        ON_GROUND,\\n        DISCARDED,\\n        OUT_OF_GAME\\n    }\\n\\n    enum ItemCategory {\\n        COMPANY,\\n        ARTIFACT,\\n        SCAVENGER\\n    }\\n    enum ItemType {\\n        CONSUMABLE,\\n        HEALTH,\\n        CARRY,\\n        DEFENSE,\\n        HACK,\\n        BREACH,\\n        HAZARD,\\n        ARMOR,\\n        RANGED,\\n        MELEE,\\n        SPECIAL\\n    }\\n\\n    enum DenizenType {\\n        NONE,\\n        BUG,\\n        SCAV,\\n        TURRET,\\n        ROBOT,\\n        QUEEN,\\n        BUTCHER,\\n        BEHEMOTH,\\n        DOCTOR\\n    }\\n\\n    // WARNING: At stack limit\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n        uint id; // playerId;\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n        Position position;\\n        Position lastPos; // This is needed for events that use the player's prior position\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken; // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n        uint8 dataTokens; // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n        // Flags\\n\\n        bool dead; // Move to traits?\\n        uint gameId;\\n    }\\n\\n    struct Denizen {\\n        uint id;\\n        uint gameId;\\n        DenizenType denizenType; // Traits are derived from type. //TODO: rename to type\\n        Position position;\\n        uint healthRemaining; // Denizen is dead if this is zero\\n        bool looted;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n        uint[4] doors; // n, s, e, w // TODO: Make an enum for this.  Also,, this should be named doorIds\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n        // Row, Col => GameTile\\n        mapping(uint => mapping(uint => GameTile)) board;\\n        mapping(uint => Door) doors;\\n        uint8 numDoors;\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n        bool denizenTurn;\\n        uint gameId;\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint[] charIds;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        uint turnsTaken;\\n        EventTracker eventTracker;\\n        // address mapContract;  // TODO: If making separately upgradable, need all addys in game\\n        uint mapId;\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n        uint[] denizenIds;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n        uint8 numItems;\\n        uint8 numData;\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n        // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n        bool hasGun;\\n        // bool hasEgg;\\n        // bool canHarmOthers; // Need stack space\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber; // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        // uint holdingPlayerId; // TODO: Eval if this is needed\\n        bool inGame; // For now, keep both.  Enlisting puts you in a lobby, but don't know game id yet\\n        uint gameId; // TODO: CRITICAL-> Handle leaving games!!!\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n        uint weight;\\n        ItemCategory itemCategory;\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n        ItemType itemType;\\n        uint8 power; // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n        WorldItemStatus status;\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0x2bd9b3e08641fafa559b4f0dabb0d434c9845dbb3fbc18cad6e06f80d1bd75bd\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    uint constant DEFAULT_ROLL_RES = 3; // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    mapping(uint256 => EnumerableSet.UintSet) gameToEventBlocks;\\n\\n    function smallIntBetweenVals(\\n        uint8 _min,\\n        uint8 _max\\n    ) public returns (uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    msg.sender,\\n                    TODO_randomSeed,\\n                    blockhash(block.number - 1)\\n                )\\n            )\\n        );\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns (uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return (\\n            keccak256(\\n                abi.encodePacked(\\n                    TODO_randomSeed,\\n                    blockhash(block.number - 1),\\n                    msg.sender\\n                )\\n            )\\n        );\\n    }\\n\\n    function abs(int x) public pure returns (int) {\\n        // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(\\n        uint _min,\\n        uint _max,\\n        uint _val,\\n        uint _valMax\\n    ) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = (adjustedMax * _val) / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(\\n        bytes32 _hash,\\n        uint256 _size,\\n        uint256 _offset\\n    ) public pure returns (uint8) {\\n        bytes32 mask = bytes32((2 ** _size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(\\n        uint _traitNum,\\n        uint _subTraitNum\\n    ) public pure returns (uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(\\n        BCTypes.Position memory _firstRoom,\\n        BCTypes.Position memory _secondRoom\\n    ) public pure returns (uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(\\n        uint _direction,\\n        BCTypes.Position memory _start\\n    ) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row - 1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row + 1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col + 1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col - 1);\\n        }\\n        string memory message = string.concat(\\n            \\\"Invalid direction: \\\",\\n            Strings.toString(_direction)\\n        );\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(\\n        uint _gameId,\\n        uint _for,\\n        uint _against\\n    ) public returns (bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if (_direction == 0) {\\n            return 1;\\n        }\\n        if (_direction == 1) {\\n            return 0;\\n        }\\n        if (_direction == 2) {\\n            return 3;\\n        }\\n        if (_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n\\n    function manhattanDistance(\\n        BCTypes.Position memory _pos1,\\n        BCTypes.Position memory _pos2\\n    ) public pure returns (uint) {\\n        uint row = uint(abs(int(int8(_pos1.row)) - int(int8(_pos2.row))));\\n        uint col = uint(abs(int(int8(_pos1.col)) - int(int8(_pos2.col))));\\n        return row + col;\\n    }\\n\\n    function getEventBlocks(uint _gameId) public view returns (uint[] memory) {\\n        return gameToEventBlocks[_gameId].values();\\n    }\\n}\\n\",\"keccak256\":\"0x2d46431e29668b3c032cad26d21875d590d63c532d5a752475af7725b9197ccd\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600060015560c0604052600a608052600660a052600c805461ffff191661060a1790553480156200002f57600080fd5b506200003b336200004d565b600d805460010181556000526200009d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61542f80620000ad6000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80637b45c0d41161015c578063afd62bb2116100ce578063dc769ee811610087578063dc769ee81461060e578063ed9067fa1461063e578063f101de9a14610651578063f10bff2b14610664578063f2fde38b14610677578063fa3993c21461068a57600080fd5b8063afd62bb214610575578063b26d339514610595578063c06fad06146105b5578063ce28613f146105c8578063d8a03082146105db578063dc0b3564146105fb57600080fd5b8063921d279911610120578063921d2799146104f6578063951fc3fe1461050957806397f34c3f146105295780639fca1ee11461053c578063a99d2a8b1461054f578063aa6e80301461056257600080fd5b80637b45c0d4146104995780637ddae103146104ac5780638214f222146104bf5780638bf52bc3146104d25780638da5cb5b146104e557600080fd5b806340d4fd78116101f557806364db84bf116101b957806364db84bf1461041857806364f664671461042b5780636fe99c181461043e578063715018a61461045e57806371fa32361461046657806372f5a2531461048657600080fd5b806340d4fd78146103a257806346f2434b146103b557806353011696146103bd57806354731422146103e25780635dc96967146103f557600080fd5b80631cef40f6116102475780631cef40f61461033b5780631e1de2051461034e5780631f7b4f3014610356578063336d7d7b146103695780633deaec2b1461037c5780633f090e3d1461038f57600080fd5b80630e73c0241461028457806310a2cd0d146102ad578063117a5b90146102d857806317514225146103055780631b5ac4b51461031a575b600080fd5b610297610292366004613c02565b61069d565b6040516102a49190613c56565b60405180910390f35b6003546102c0906001600160a01b031681565b6040516001600160a01b0390911681526020016102a4565b6102eb6102e6366004613c02565b6106bd565b6040516102a49e9d9c9b9a99989796959493929190613c93565b610318610313366004613e9e565b610793565b005b61032d610328366004613c02565b6107d8565b6040519081526020016102a4565b610318610349366004613ee1565b6107f4565b61032d61092b565b61032d610364366004613c02565b6109a3565b6009546102c0906001600160a01b031681565b6004546102c0906001600160a01b031681565b61031861039d366004613f1e565b6109ff565b6102976103b0366004613c02565b610c41565b600d5461032d565b6103d06103cb366004613f1e565b610d32565b60405160ff90911681526020016102a4565b6103186103f0366004613c02565b610d6f565b610408610403366004613f50565b610e62565b60405190151581526020016102a4565b61032d610426366004613f7c565b610eff565b610318610439366004613f7c565b610f17565b61045161044c366004613c02565b610ff5565b6040516102a49190614169565b6103186113b8565b610479610474366004613c02565b6113cc565b6040516102a49190614212565b6008546102c0906001600160a01b031681565b600b546102c0906001600160a01b031681565b6005546102c0906001600160a01b031681565b61032d6104cd366004613c02565b611541565b6103186104e036600461437d565b6115bb565b6000546001600160a01b03166102c0565b6103186105043660046143ce565b6115cf565b61051c610517366004614477565b611665565b6040516102a491906144a4565b6103d0610537366004613f50565b61178f565b600a546102c0906001600160a01b031681565b61032d61055d3660046144c2565b6117ba565b6103186105703660046144fc565b6117eb565b610588610583366004614535565b6118fb565b6040516102a49190614552565b6105a86105a3366004613c02565b611d91565b6040516102a491906145b4565b6006546102c0906001600160a01b031681565b6103d06105d6366004614672565b611f03565b6105ee6105e9366004613c02565b611fb3565b6040516102a491906146bb565b6007546102c0906001600160a01b031681565b600c546106249060ff8082169161010090041682565b6040805160ff9384168152929091166020830152016102a4565b61031861064c366004613c02565b61204f565b61032d61065f366004614769565b61213e565b61032d61067236600461480e565b612711565b610318610685366004614535565b61275e565b61032d61069836600461480e565b6127d7565b60008181526002602052604090206060906106b79061289f565b92915050565b600d81815481106106cd57600080fd5b60009182526020918290206014909102018054600182015460048301546005840154600685015460408051608081018252600788015460ff81811683526101008083048216848d015262010000830482168486015263010000009092048116606084015260088a015460098b0154600a8c0154600b8d01548751808901909852600c8e0154808616895286900485169e88019e909e5260118d01546012909d0154848d169f5094909b0483169c999b989a9799969894979196909591949216929091908e565b600b546001600160a01b031633146107c65760405162461bcd60e51b81526004016107bd9061483a565b60405180910390fd5b6107d383838360006128ac565b505050565b6000808212156107f0576107eb8261487e565b6106b7565b5090565b600c5460ff16821480156108115750600c54610100900460ff1681145b610925576007546001600160a01b031633146108665760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b60448201526064016107bd565b6000600d858154811061087b5761087b61489a565b60009182526020909120600854604051630e77a07b60e11b81526014909302909101925060138301916001600160a01b0390911690631cef40f6906108ca9089908990899089906004016148b0565b6020604051808303816000875af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d91906148d6565b81546001810183556000928352602090922090910155505b50505050565b600180546000918261093c836148ef565b91905055506001546001436109519190614908565b403360405160200161098893929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b6000806109b260016006611f03565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5183826040516109f1929190918252602082015260400190565b60405180910390a192915050565b600b546001600160a01b03163314610a295760405162461bcd60e51b81526004016107bd9061483a565b6000600d8581548110610a3e57610a3e61489a565b60009182526020909120600654604051635f87260160e01b81526004810188905260248101899052601490930290910192506001600160a01b031690635f87260190604401600060405180830381600087803b158015610a9d57600080fd5b505af1158015610ab1573d6000803e3d6000fd5b5050600354604051631ff77ac560e11b8152600481018790526001600160a01b039091169250633feef58a9150602401600060405180830381600087803b158015610afb57600080fd5b505af1158015610b0f573d6000803e3d6000fd5b505050600282015460009150610b2790600190614908565b6001600160401b03811115610b3e57610b3e613d55565b604051908082528060200260200182016040528015610b67578160200160208202803683370190505b5090506000805b6002840154811015610bde57808514610bcc57836002018181548110610b9657610b9661489a565b9060005260206000200154838381518110610bb357610bb361489a565b602090810291909101015281610bc8816148ef565b9250505b80610bd6816148ef565b915050610b6e565b508151610bf4906002850190602085019061393b565b50600583018054906000610c078361491b565b90915550506002830154600484015403610c2357600060048401555b6002830154600003610c3857825460ff191683555b50505050505050565b60606000600d8381548110610c5857610c5861489a565b9060005260206000209060140201600201805490506001600160401b03811115610c8457610c84613d55565b604051908082528060200260200182016040528015610cad578160200160208202803683370190505b50905060005b8151811015610d2b57600d8481548110610ccf57610ccf61489a565b90600052602060002090601402016002018181548110610cf157610cf161489a565b9060005260206000200154828281518110610d0e57610d0e61489a565b602090810291909101015280610d23816148ef565b915050610cb3565b5092915050565b600080610d3f8686614908565b9050600083610d4e8684614932565b610d58919061495f565b9050610d648782614973565b979650505050505050565b6000600d8281548110610d8457610d8461489a565b600091825260209091206014909102018054909150610100900460ff161515600103610dc357604051633ae1755360e21b815260040160405180910390fd5b6002810154600103610de85760405163015b385160e41b815260040160405180910390fd5b80601101548160120154610dfc9190614973565b421015610e1c57604051630df3377b60e31b815260040160405180910390fd5b600a81015415610e3157610e3182600061328b565b610e5e8282600201836004015481548110610e4e57610e4e61489a565b9060005260206000200154613355565b5050565b600080610e6e856109a3565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a180600103610ecb576000915050610ef8565b600383610ed88684614973565b610ee29190614986565b1315610ef2576001915050610ef8565b60009150505b9392505050565b600081610f0d846004614932565b610ef89190614973565b6000600d8381548110610f2c57610f2c61489a565b600091825260209091206007546014909202016009810154604051636621a42160e01b815260048101919091529092506001600160a01b0390911690636621a42190602401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906149b6565b6001600160a01b0316336001600160a01b031614610feb578060090154604051637111468960e11b81526004016107bd91815260200190565b6107d3838361328b565b610ffd613982565b600d82815481106110105761101061489a565b6000918252602091829020604080516102a0810182526014909302909101805460ff80821615158552610100909104161515838501526001810154838301526002810180548351818702810187019094528084529394919360608601939283018282801561109d57602002820191906000526020600020905b815481526020019060010190808311611089575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156110f557602002820191906000526020600020905b8154815260200190600101908083116110e1575b505050918352505060048201546020808301919091526005808401546040808501919091526006850154606080860191909152815160808181018452600788015460ff80821684526101008083048216988501989098526201000082048116958401959095526301000000900484169282019290925290850152600885015460a0850152600985015460c0850152600a85015460e0850152600b850154929093019291909116908111156111ab576111ab613c69565b60058111156111bc576111bc613c69565b8152604080518082018252600c84015460ff80821683526101009091041660208281019190915280840191909152600d8401805483518184028101840185528181529390940193909183018282801561123457602002820191906000526020600020905b815481526020019060010190808311611220575b50505050508152602001600e820180548060200260200160405190810160405280929190818152602001828054801561128c57602002820191906000526020600020905b815481526020019060010190808311611278575b50505050508152602001600f82018054806020026020016040519081016040528092919081815260200182805480156112e457602002820191906000526020600020905b8154815260200190600101908083116112d0575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561133c57602002820191906000526020600020905b815481526020019060010190808311611328575b505050505081526020016011820154815260200160128201548152602001601382018054806020026020016040519081016040528092919081815260200182805480156113a857602002820191906000526020600020905b815481526020019060010190808311611394575b5050505050815250509050919050565b6113c0613432565b6113ca600061348c565b565b60606000600d83815481106113e3576113e361489a565b9060005260206000209060140201600201805490506001600160401b0381111561140f5761140f613d55565b60405190808252806020026020018201604052801561144857816020015b611435613a8d565b81526020019060019003908161142d5790505b50905060005b8151811015610d2b57600754600d80546001600160a01b03909216916310f67fb39190879081106114815761148161489a565b906000526020600020906014020160020183815481106114a3576114a361489a565b90600052602060002001546040518263ffffffff1660e01b81526004016114cc91815260200190565b600060405180830381865afa1580156114e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115119190810190614b69565b8282815181106115235761152361489a565b60200260200101819052508080611539906148ef565b91505061144e565b60008160000361155357506001919050565b8160010361156357506000919050565b8160020361157357506003919050565b8160030361158357506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b60448201526064016107bd565b6115c3613432565b610925848484846128ac565b6115d7613432565b600380546001600160a01b03199081166001600160a01b039a8b1617909155600480548216988a169890981790975560098054881696891696909617909555600b805487169488169490941790935560058054861692871692909217909155600680548516918616919091179055600780548416918516919091179055600880549092169216919091179055565b6040805180820190915260008082526020820152826000036116b75760405180604001604052806001846000015161169d9190614cb4565b60ff168152602001836020015160ff1681525090506106b7565b826001036116db5760405180604001604052808360000151600161169d9190614ccd565b82600203611718576040518060400160405280836000015160ff1681526020018360200151600161170c9190614ccd565b60ff16905290506106b7565b82600303611749576040518060400160405280836000015160ff1681526020016001846020015161170c9190614cb4565b6000611754846134dc565b6040516020016117649190614d0a565b60405160208183030381529060405290508060405162461bcd60e51b81526004016107bd9190614d45565b6000808260016117a0866002614e5c565b6117aa9190614908565b901b8516831c9150509392505050565b600e60205281600052604060002081815481106117d657600080fd5b90600052602060002001600091509150505481565b600b546001600160a01b031633146118155760405162461bcd60e51b81526004016107bd9061483a565b806118795760075460405163ce93229760e01b8152600481018490526001600160a01b039091169063ce93229790602401600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b505050505b6007546040516347d0e3c960e01b8152600481018490526000916001600160a01b0316906347d0e3c990602401602060405180830381865afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e791906148d6565b905060038110610925576109258484613355565b6001600160a01b0381166000908152600e6020526040812054606091906001600160401b0381111561192f5761192f613d55565b60405190808252806020026020018201604052801561196857816020015b611955613982565b81526020019060019003908161194d5790505b50905060005b8151811015610d2b576001600160a01b0384166000908152600e602052604090208054600d9190839081106119a5576119a561489a565b9060005260206000200154815481106119c0576119c061489a565b6000918252602091829020604080516102a0810182526014909302909101805460ff808216151585526101009091041615158385015260018101548383015260028101805483518187028101870190945280845293949193606086019392830182828015611a4d57602002820191906000526020600020905b815481526020019060010190808311611a39575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611aa557602002820191906000526020600020905b815481526020019060010190808311611a91575b505050918352505060048201546020808301919091526005808401546040808501919091526006850154606080860191909152815160808181018452600788015460ff80821684526101008083048216988501989098526201000082048116958401959095526301000000900484169282019290925290850152600885015460a0850152600985015460c0850152600a85015460e0850152600b85015492909301929190911690811115611b5b57611b5b613c69565b6005811115611b6c57611b6c613c69565b8152604080518082018252600c84015460ff80821683526101009091041660208281019190915280840191909152600d84018054835181840281018401855281815293909401939091830182828015611be457602002820191906000526020600020905b815481526020019060010190808311611bd0575b50505050508152602001600e8201805480602002602001604051908101604052809291908181526020018280548015611c3c57602002820191906000526020600020905b815481526020019060010190808311611c28575b50505050508152602001600f8201805480602002602001604051908101604052809291908181526020018280548015611c9457602002820191906000526020600020905b815481526020019060010190808311611c80575b5050505050815260200160108201805480602002602001604051908101604052809291908181526020018280548015611cec57602002820191906000526020600020905b815481526020019060010190808311611cd8575b50505050508152602001601182015481526020016012820154815260200160138201805480602002602001604051908101604052809291908181526020018280548015611d5857602002820191906000526020600020905b815481526020019060010190808311611d44575b505050505081525050828281518110611d7357611d7361489a565b60200260200101819052508080611d89906148ef565b91505061196e565b60606000600d8381548110611da857611da861489a565b9060005260206000209060140201600301805490506001600160401b03811115611dd457611dd4613d55565b604051908082528060200260200182016040528015611e0d57816020015b611dfa613b4d565b815260200190600190039081611df25790505b50905060005b8151811015610d2b57600354600d80546001600160a01b0390921691634810bc59919087908110611e4657611e4661489a565b90600052602060002090601402016003018381548110611e6857611e6861489a565b90600052602060002001546040518263ffffffff1660e01b8152600401611e9191815260200190565b61022060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190614e68565b828281518110611ee557611ee561489a565b60200260200101819052508080611efb906148ef565b915050611e13565b6001805460009182611f14836148ef565b9190505550600033600154600143611f2c9190614908565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000611f808585614cb4565b611f8b906001614ccd565b90508460ff168160ff1683611fa09190614f1c565b611faa9190614973565b95945050505050565b600854600d80546060926001600160a01b031691633362ec729185908110611fdd57611fdd61489a565b90600052602060002090601402016013016040518263ffffffff1660e01b815260040161200a9190614f65565b600060405180830381865afa158015612027573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106b79190810190614f78565b6000600d82815481106120645761206461489a565b6000918252602090912060088054601490930290910190810154604051632224e7f360e11b81529193506001600160a01b0390921691634449cfe6916120b89186916002870190601388019060040161506d565b600060405180830381600087803b1580156120d257600080fd5b505af11580156120e6573d6000803e3d6000fd5b5050825461ff001916835550506040518281527f0b902bf94ea0561a1c7b03fed6f663a1ae180c3c6d92b1b529718058696a4c389060200160405180910390a160008281526002602052604090206107d390436135e4565b6009546000906001600160a01b031633146121905760405162461bcd60e51b8152602060048201526012602482015271139bdd081b1bd8989e4818dbdb9d1c9858dd60721b60448201526064016107bd565b600d80546001818101808455600093845260149092027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50192916121d49190614908565b6001808401829055835460ff1916178355600060068401558651909150612204906002840190602089019061393b565b50600582018590556040805160808101825260008082526020820181905291810182905260600181905260078301805463ffffffff191690558490036122bb57600480546040805163780fe1ad60e11b815290516001600160a01b039092169263f01fc35a92828201926020929082900301816000875af115801561228d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b191906148d6565b600883015561232e565b6004805460405163148e052f60e21b81529182018690526001600160a01b03169063523814bc906024016020604051808303816000875af1158015612304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232891906148d6565b60088301555b60005b61233c600187614908565b811161257157600883015460408051808201909152600c5460ff808216835261010090910416602082015260028501805461239693929190859081106123845761238461489a565b906000526020600020015460006128ac565b60075487516000916001600160a01b031690636621a421908a90859081106123c0576123c061489a565b60200260200101516040518263ffffffff1660e01b81526004016123e691815260200190565b602060405180830381865afa158015612403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242791906149b6565b6001600160a01b038082166000908152600e6020908152604082208054600181018255908352908220018690556007548b5193945090929116906373e4195c908b90869081106124795761247961489a565b60200260200101516040518263ffffffff1660e01b815260040161249f91815260200190565b602060405180830381865afa1580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e091906148d6565b60035460405163b60b9fcb60e01b815260048101879052602481018390529192506001600160a01b03169063b60b9fcb90604401600060405180830381600087803b15801561252e57600080fd5b505af1158015612542573d6000803e3d6000fd5b505050506003850180546001810182556000918252602090912001555080612569816148ef565b915050612331565b5060075460405163e7169ec560e01b81526001600160a01b039091169063e7169ec5906125a4908990859060040161509e565b600060405180830381600087803b1580156125be57600080fd5b505af11580156125d2573d6000803e3d6000fd5b5050600654604051633b09709560e21b81526001600160a01b03909116925063ec25c25491506126089084908a906004016150c0565b600060405180830381600087803b15801561262257600080fd5b505af1158015612636573d6000803e3d6000fd5b505050506000604051806101e00160405280600181526020016002815260200160038152602001600481526020016005815260200160068152602001600781526020016008815260200160098152602001600a8152602001600b8152602001600c8152602001600d8152602001600e8152602001600f81525090508083600d0190600f6126c492919061393b565b506126d4600e840182600f61393b565b506126e5600f80850190839061393b565b506126f56010840182600f61393b565b505061012c601183015542601290920191909155949350505050565b600080612731836000015160000b856000015160000b6103289190614986565b90506000612752846020015160000b866020015160000b6103289190614986565b9050611faa8183614973565b612766613432565b6001600160a01b0381166127cb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107bd565b6127d48161348c565b50565b805182516000916127e7916150d9565b60000b6001036127f9575060006106b7565b8151835161280791906150d9565b60000b19612817575060016106b7565b8160200151836020015161282b91906150d9565b60000b1961283b575060026106b7565b8160200151836020015161284f91906150d9565b60000b600103612861575060036106b7565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b60448201526064016107bd565b60606000610ef8836135f0565b6000600d85815481106128c1576128c161489a565b90600052602060002090601402019050806002016000815481106128e7576128e761489a565b906000526020600020015483141580156129215750806002016001815481106129125761291261489a565b90600052602060002001548314155b801561294d57508060020160028154811061293e5761293e61489a565b90600052602060002001548314155b801561297957508060020160038154811061296a5761296a61489a565b90600052602060002001548314155b156129a15760405163013eacb560e01b815260048101869052602481018490526044016107bd565b600754600d80546001600160a01b0390921691638d491b3e9187918791908a9081106129cf576129cf61489a565b9060005260206000209060140201600801546040518463ffffffff1660e01b81526004016129ff939291906150fa565b6020604051808303816000875af1158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a429190615129565b61328457600454600d80546000926001600160a01b0316916381bad36d9189908110612a7057612a7061489a565b90600052602060002090601402016008015487600001518860200151876040518563ffffffff1660e01b8152600401612ac6949392919093845260ff928316602085015291166040830152606082015260800190565b6020604051808303816000875af1158015612ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0991906148d6565b600454600d80549293506000926001600160a01b0390921691635805828391908a908110612b3957612b3961489a565b906000526020600020906014020160080154846040518363ffffffff1660e01b8152600401612b72929190918252602082015260400190565b60a060405180830381865afa158015612b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb39190615146565b9050600282118015612bd85750600081516005811115612bd557612bd5613c69565b14155b15610c3857600181516005811115612bf257612bf2613c69565b03612c4557600d8781548110612c0a57612c0a61489a565b600091825260208220600760149092020101805460ff1691612c2b836151d8565b91906101000a81548160ff021916908360ff160217905550505b600281516005811115612c5a57612c5a613c69565b03612cb557600d8781548110612c7257612c7261489a565b600091825260209091206014909102016007018054610100900460ff16906001612c9b836151d8565b91906101000a81548160ff021916908360ff160217905550505b600381516005811115612cca57612cca613c69565b03612d2657600d8781548110612ce257612ce261489a565b60009182526020909120601490910201600701805462010000900460ff16906002612d0c836151d8565b91906101000a81548160ff021916908360ff160217905550505b600481516005811115612d3b57612d3b613c69565b03612d9857600d8781548110612d5357612d5361489a565b6000918252602090912060149091020160070180546301000000900460ff16906003612d7e836151d8565b91906101000a81548160ff021916908360ff160217905550505b602081015115612f1857600554602082015160405163c82c37b960e01b815260048101919091526000916001600160a01b03169063c82c37b990602401600060405180830381865afa158015612df2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e1a9190810190615284565b90508060200151612f125785600d8981548110612e3957612e3961489a565b9060005260206000209060140201600901819055508160200151600d8981548110612e6657612e6661489a565b9060005260206000209060140201600a01819055506005600d8981548110612e9057612e9061489a565b60009182526020909120600b60149092020101805460ff19166001836005811115612ebd57612ebd613c69565b021790555086600d8981548110612ed657612ed661489a565b60009182526020918290208351600c6014909302909101919091018054939092015160ff9081166101000261ffff199094169116179190911790555b50610c38565b600081516005811115612f2d57612f2d613c69565b14610c385784600d8881548110612f4657612f4661489a565b90600052602060002090601402016009018190555085600d8881548110612f6f57612f6f61489a565b60009182526020918290208351600c6014909302909101919091018054939092015160ff9081166101000261ffff19909416911617919091179055600181516005811115612fbf57612fbf613c69565b0361306057612ff0600d8881548110612fda57612fda61489a565b9060005260206000209060140201600d0161364c565b600d88815481106130035761300361489a565b9060005260206000209060140201600a01819055506001600d888154811061302d5761302d61489a565b60009182526020909120600b60149092020101805460ff1916600183600581111561305a5761305a613c69565b02179055505b60028151600581111561307557613075613c69565b03613116576130a6600d88815481106130905761309061489a565b9060005260206000209060140201600e0161364c565b600d88815481106130b9576130b961489a565b9060005260206000209060140201600a01819055506002600d88815481106130e3576130e361489a565b60009182526020909120600b60149092020101805460ff1916600183600581111561311057613110613c69565b02179055505b60038151600581111561312b5761312b613c69565b036131cc5761315c600d88815481106131465761314661489a565b9060005260206000209060140201600f0161364c565b600d888154811061316f5761316f61489a565b9060005260206000209060140201600a01819055506003600d88815481106131995761319961489a565b60009182526020909120600b60149092020101805460ff191660018360058111156131c6576131c6613c69565b02179055505b6004815160058111156131e1576131e1613c69565b03610c3857613212600d88815481106131fc576131fc61489a565b906000526020600020906014020160100161364c565b600d88815481106132255761322561489a565b9060005260206000209060140201600a01819055506004600d888154811061324f5761324f61489a565b60009182526020909120600b60149092020101805460ff1916600183600581111561327c5761327c613c69565b021790555050505b5050505050565b6000600d83815481106132a0576132a061489a565b6000918252602090912060075460149092020160098101546008820154600a830154600b840154604051636d291bbb60e01b81529496506001600160a01b0390951694636d291bbb9461330694899490938b939192600c8b019260ff1690600401615375565b600060405180830381600087803b15801561332057600080fd5b505af1158015613334573d6000803e3d6000fd5b5050600060098401819055600a8401555050600b01805460ff191690555050565b6000600d838154811061336a5761336a61489a565b6000918252602090912060075460405163065c363f60e41b815260048101869052601490930290910192506001600160a01b0316906365c363f090602401600060405180830381600087803b1580156133c257600080fd5b505af11580156133d6573d6000803e3d6000fd5b5050426012840155505060028101546133f190600190614908565b816004015410156134185760048101805490600061340e836148ef565b9190505550505050565b613426838260080154613772565b60006004820155505050565b6000546001600160a01b031633146113ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107bd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816000036135035750506040805180820190915260018152600360fc1b602082015290565b8160005b811561352d5780613517816148ef565b91506135269050600a8361495f565b9150613507565b6000816001600160401b0381111561354757613547613d55565b6040519080825280601f01601f191660200182016040528015613571576020820181803683370190505b5090505b84156135dc57613586600183614908565b9150613593600a86614f1c565b61359e906030614973565b60f81b8183815181106135b3576135b361489a565b60200101906001600160f81b031916908160001a9053506135d5600a8661495f565b9450613575565b949350505050565b6000610ef883836138ec565b60608160000180548060200260200160405190810160405280929190818152602001828054801561364057602002820191906000526020600020905b81548152602001906001019080831161362c575b50505050509050919050565b8054600090819061365f90600190614908565b90505b801561370f576000613675600083611f03565b9050838160ff168154811061368c5761368c61489a565b90600052602060002001548483815481106136a9576136a961489a565b90600052602060002001548584815481106136c6576136c661489a565b906000526020600020016000878560ff16815481106136e7576136e761489a565b60009182526020909120019290925591909155508190506137078161491b565b915050613662565b508154600090839061372390600190614908565b815481106137335761373361489a565b9060005260206000200154905082805480613750576137506153ca565b600190038181906000526020600020016000905590558060ff16915050919050565b6000600d83815481106137875761378761489a565b906000526020600020906014020190508060060160008154809291906137ac906148ef565b909155505060048054604051630b06115560e31b81529182018490526001600160a01b0316906358308aa890602401600060405180830381600087803b1580156137f557600080fd5b505af1158015613809573d6000803e3d6000fd5b50506004805460405163c6b41b4560e01b8152918201869052600160248301526001600160a01b0316925063c6b41b459150604401600060405180830381600087803b15801561385857600080fd5b505af115801561386c573d6000803e3d6000fd5b5050600754600884015460405163668a7f3b60e01b81526001600160a01b03909216935063668a7f3b92506138a89160028601906004016153e0565b600060405180830381600087803b1580156138c257600080fd5b505af11580156138d6573d6000803e3d6000fd5b5050825461ff0019166101001790925550505050565b6000818152600183016020526040812054613933575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b7565b5060006106b7565b828054828255906000526020600020908101928215613976579160200282015b8281111561397657825182559160200191906001019061395b565b506107f0929150613ba9565b604051806102a00160405280600015158152602001600015158152602001600081526020016060815260200160608152602001600081526020016000815260200160008152602001613a016040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b815260200160008152602001600081526020016000815260200160006005811115613a2e57613a2e613c69565b8152602001613a566040518060400160405280600060ff168152602001600060ff1681525090565b8152602001606081526020016060815260200160608152602001606081526020016000815260200160008152602001606081525090565b604051806101c0016040528060006001600160a01b031681526020016000815260200160008152602001613abf613bbe565b8152602001613ae76040518060400160405280600060ff168152602001600060ff1681525090565b8152602001613b0f6040518060400160405280600060ff168152602001600060ff1681525090565b81526000602082018190526040820181905260608083018290526080830182905260a083015260c0820181905260e082018190526101009091015290565b604051806101400160405280600080191681526020016000815260200160008152602001613b79613bbe565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b5b808211156107f05760008155600101613baa565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b600060208284031215613c1457600080fd5b5035919050565b600081518084526020808501945080840160005b83811015613c4b57815187529582019590820190600101613c2f565b509495945050505050565b602081526000610ef86020830184613c1b565b634e487b7160e01b600052602160045260246000fd5b60068110613c8f57613c8f613c69565b9052565b6000610240820190508f151582528e151560208301528d60408301528c60608301528b60808301528a60a0830152613cfb60c083018b60ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b886101408301528761016083015286610180830152613d1e6101a0830187613c7f565b845160ff9081166101c08401526020860151166101e083015261020082019390935261022001529c9b505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613d8d57613d8d613d55565b60405290565b6040516101c081016001600160401b0381118282101715613d8d57613d8d613d55565b60405161014081016001600160401b0381118282101715613d8d57613d8d613d55565b60405160c081016001600160401b0381118282101715613d8d57613d8d613d55565b60405160e081016001600160401b0381118282101715613d8d57613d8d613d55565b604051601f8201601f191681016001600160401b0381118282101715613e4557613e45613d55565b604052919050565b60ff811681146127d457600080fd5b600060408284031215613e6e57600080fd5b613e76613d6b565b90508135613e8381613e4d565b81526020820135613e9381613e4d565b602082015292915050565b600080600060808486031215613eb357600080fd5b83359250613ec48560208601613e5c565b9150606084013590509250925092565b600981106127d457600080fd5b60008060008060808587031215613ef757600080fd5b843593506020850135613f0981613ed4565b93969395505050506040820135916060013590565b60008060008060808587031215613f3457600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215613f6557600080fd5b505081359360208301359350604090920135919050565b60008060408385031215613f8f57600080fd5b50508035926020909101359150565b80511515825260006103206020830151613fbc602086018215159052565b50604083015160408501526060830151816060860152613fde82860182613c1b565b91505060808301518482036080860152613ff88282613c1b565b91505060a083015160a085015260c083015160c085015260e083015160e0850152610100808401516140598287018260ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b5050610120830151610180818187015261014085015191506101a0828188015261016086015192506101c083818901528287015193506101e092506140a083890185613c7f565b908601519250610200906140c688830185805160ff908116835260209182015116910152565b80870151935050610240878503818901526140e18585613c1b565b94508287015193506102609250878503838901526140ff8585613c1b565b945081870151935061028091508785038289015261411d8585613c1b565b945061022087015193508785036102a089015261413a8585613c1b565b908701516102c0890152918601516102e08801528501518682036103008801529092509050611faa8282613c1b565b602081526000610ef86020830184613f9e565b8051600081810b84526020830151810b60208501526040830151810b60408501526060830151810b60608501526080830151810b608085015260a0830151810b60a085015260c0830151810b60c0850152505060e0810151151560e08301525050565b600081518084526020808501945080840160005b83811015613c4b57815160ff16875295820195908201906001016141f3565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561436f57888303603f19018552815180516001600160a01b031684526102e08882015189860152878201518886015260608083015161427e8288018261417c565b505060808201516101606142a481880183805160ff908116835260209182015116910152565b60a084015191506101a06142ca81890184805160ff908116835260209182015116910152565b60c085015192506142e16101e089018460000b9052565b60e085015160ff9081166102008a015261010086015181166102208a01526101208601511661024089015261014085015161026089018590529250614328848901846141df565b935081850151925061434061028089018460ff169052565b61018085015115156102a0890152909301516102c0909601959095529588019593505090860190600101614239565b509098975050505050505050565b60008060008060a0858703121561439357600080fd5b843593506143a48660208701613e5c565b93969395505050506060820135916080013590565b6001600160a01b03811681146127d457600080fd5b600080600080600080600080610100898b0312156143eb57600080fd5b88356143f6816143b9565b97506020890135614406816143b9565b96506040890135614416816143b9565b95506060890135614426816143b9565b94506080890135614436816143b9565b935060a0890135614446816143b9565b925060c0890135614456816143b9565b915060e0890135614466816143b9565b809150509295985092959890939650565b6000806060838503121561448a57600080fd5b8235915061449b8460208501613e5c565b90509250929050565b604081016106b78284805160ff908116835260209182015116910152565b600080604083850312156144d557600080fd5b82356144e0816143b9565b946020939093013593505050565b80151581146127d457600080fd5b60008060006060848603121561451157600080fd5b8335925060208401359150604084013561452a816144ee565b809150509250925092565b60006020828403121561454757600080fd5b8135610ef8816143b9565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156145a757603f19888603018452614595858351613f9e565b94509285019290850190600101614579565b5092979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561466557815180518552868101518786015285810151868601526060808201516146018288018261417c565b5050608081015160ff90811661016087015260a0820151811661018087015260c082015181166101a087015260e0820151166101c086015261010081015115156101e0860152610120015161020085015261022090930192908501906001016145d1565b5091979650505050505050565b6000806040838503121561468557600080fd5b823561469081613e4d565b915060208301356146a081613e4d565b809150509250929050565b60098110613c8f57613c8f613c69565b602080825282518282018190526000919060409081850190868401855b82811015614665578151805185528681015187860152858101516146fe878701826146ab565b50606081810151805160ff9081168884015260208201511660808801525050608081015160a0868101919091520151151560c085015260e090930192908501906001016146d8565b60006001600160401b0382111561475f5761475f613d55565b5060051b60200190565b60008060006060848603121561477e57600080fd5b83356001600160401b0381111561479457600080fd5b8401601f810186136147a557600080fd5b803560206147ba6147b583614746565b613e1d565b82815260059290921b830181019181810190898411156147d957600080fd5b938201935b838510156147f7578435825293820193908201906147de565b999188013598505060409096013595945050505050565b6000806080838503121561482157600080fd5b61482b8484613e5c565b915061449b8460408501613e5c565b602080825260149082015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820161489357614893614868565b5060000390565b634e487b7160e01b600052603260045260246000fd5b848152608081016148c460208301866146ab565b60408201939093526060015292915050565b6000602082840312156148e857600080fd5b5051919050565b60006001820161490157614901614868565b5060010190565b818103818111156106b7576106b7614868565b60008161492a5761492a614868565b506000190190565b80820281158282048414176106b7576106b7614868565b634e487b7160e01b600052601260045260246000fd5b60008261496e5761496e614949565b500490565b808201808211156106b7576106b7614868565b8181036000831280158383131683831282161715610d2b57610d2b614868565b80516149b1816143b9565b919050565b6000602082840312156149c857600080fd5b8151610ef8816143b9565b8051600081900b81146149b157600080fd5b80516149b1816144ee565b6000610100808385031215614a0457600080fd5b604051908101906001600160401b0382118183101715614a2657614a26613d55565b81604052809250614a36846149d3565b8152614a44602085016149d3565b6020820152614a55604085016149d3565b6040820152614a66606085016149d3565b6060820152614a77608085016149d3565b6080820152614a8860a085016149d3565b60a0820152614a9960c085016149d3565b60c082015260e08401519150614aae826144ee565b60e0015292915050565b80516149b181613e4d565b600060408284031215614ad557600080fd5b614add613d6b565b90508151614aea81613e4d565b81526020820151613e9381613e4d565b600082601f830112614b0b57600080fd5b81516020614b1b6147b583614746565b82815260059290921b84018101918181019086841115614b3a57600080fd5b8286015b84811015614b5e578051614b5181613e4d565b8352918301918301614b3e565b509695505050505050565b600060208284031215614b7b57600080fd5b81516001600160401b0380821115614b9257600080fd5b908301906102e08286031215614ba757600080fd5b614baf613d93565b614bb8836149a6565b81526020830151602082015260408301516040820152614bdb86606085016149f0565b6060820152610160614bef87828601614ac3565b60808301526101a0614c0388828701614ac3565b60a0840152614c156101e086016149d3565b60c0840152614c276102008601614ab8565b60e0840152614c396102208601614ab8565b610100840152614c4c6102408601614ab8565b61012084015261026085015184811115614c6557600080fd5b614c7189828801614afa565b61014085015250614c856102808601614ab8565b82840152614c966102a086016149e5565b6101808401526102c085015181840152505080935050505092915050565b60ff82811682821603908111156106b7576106b7614868565b60ff81811683821601908111156106b7576106b7614868565b60005b83811015614d01578181015183820152602001614ce9565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251614d38816013850160208701614ce6565b9190910160130192915050565b6020815260008251806020840152614d64816040850160208701614ce6565b601f01601f19169190910160400192915050565b600181815b80851115614db3578160001904821115614d9957614d99614868565b80851615614da657918102915b93841c9390800290614d7d565b509250929050565b600082614dca575060016106b7565b81614dd7575060006106b7565b8160018114614ded5760028114614df757614e13565b60019150506106b7565b60ff841115614e0857614e08614868565b50506001821b6106b7565b5060208310610133831016604e8410600b8410161715614e36575081810a6106b7565b614e408383614d78565b8060001904821115614e5457614e54614868565b029392505050565b6000610ef88383614dbb565b60006102208284031215614e7b57600080fd5b614e83613db6565b825181526020830151602082015260408301516040820152614ea884606085016149f0565b6060820152614eba6101608401614ab8565b6080820152614ecc6101808401614ab8565b60a0820152614ede6101a08401614ab8565b60c0820152614ef06101c08401614ab8565b60e0820152614f026101e084016149e5565b610100820152610200929092015161012083015250919050565b600082614f2b57614f2b614949565b500690565b6000815480845260208085019450836000528060002060005b83811015613c4b57815487529582019560019182019101614f49565b602081526000610ef86020830184614f30565b60006020808385031215614f8b57600080fd5b82516001600160401b03811115614fa157600080fd5b8301601f81018513614fb257600080fd5b8051614fc06147b582614746565b81815260e09182028301840191848201919088841115614fdf57600080fd5b938501935b838510156150615780858a031215614ffc5760008081fd5b615004613dd9565b85518152868601518782015260408087015161501f81613ed4565b9082015260606150318b888301614ac3565b9082015260a086810151608083015260c087015161504e816144ee565b9082015283529384019391850191614fe4565b50979650505050505050565b84815283602082015260806040820152600061508c6080830185614f30565b8281036060840152610d648185614f30565b6040815260006150b16040830185613c1b565b90508260208301529392505050565b8281526040602082015260006135dc6040830184613c1b565b600082810b9082900b03607f198112607f821317156106b7576106b7614868565b608081016151188286805160ff908116835260209182015116910152565b604082019390935260600152919050565b60006020828403121561513b57600080fd5b8151610ef8816144ee565b600060a0828403121561515857600080fd5b60405160a081018181106001600160401b038211171561517a5761517a613d55565b60405282516006811061518c57600080fd5b81526020838101519082015260408301516151a681613e4d565b604082015260608301516151b981613e4d565b606082015260808301516151cc816144ee565b60808201529392505050565b600060ff821660ff81036151ee576151ee614868565b60010192915050565b600082601f83011261520857600080fd5b815160206152186147b583614746565b82815260069290921b8401810191818101908684111561523757600080fd5b8286015b84811015614b5e57604081890312156152545760008081fd5b61525c613d6b565b81516017811061526c5760008081fd5b8152818501518582015283529183019160400161523b565b60006020828403121561529657600080fd5b81516001600160401b03808211156152ad57600080fd5b9083019060e082860312156152c157600080fd5b6152c9613dfb565b825181526152d9602084016149e5565b60208201526152ea60408401614ab8565b60408201526152fb60608401614ab8565b606082015260808301518281111561531257600080fd5b61531e878286016151f7565b60808301525060a08301518281111561533657600080fd5b615342878286016151f7565b60a08301525060c08301518281111561535a57600080fd5b615366878286016151f7565b60c08301525095945050505050565b600061010082019050888252876020830152866040830152856060830152845460ff8116608084015260ff8160081c1660a0840152508360c08301526153be60e0830184613c7f565b98975050505050505050565b634e487b7160e01b600052603160045260246000fd5b8281526040602082015260006135dc6040830184614f3056fea26469706673582212203649006fe66d41906e90a530ebd5b209cddaa80e41048138ddf92f9f039cf5cd64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c80637b45c0d41161015c578063afd62bb2116100ce578063dc769ee811610087578063dc769ee81461060e578063ed9067fa1461063e578063f101de9a14610651578063f10bff2b14610664578063f2fde38b14610677578063fa3993c21461068a57600080fd5b8063afd62bb214610575578063b26d339514610595578063c06fad06146105b5578063ce28613f146105c8578063d8a03082146105db578063dc0b3564146105fb57600080fd5b8063921d279911610120578063921d2799146104f6578063951fc3fe1461050957806397f34c3f146105295780639fca1ee11461053c578063a99d2a8b1461054f578063aa6e80301461056257600080fd5b80637b45c0d4146104995780637ddae103146104ac5780638214f222146104bf5780638bf52bc3146104d25780638da5cb5b146104e557600080fd5b806340d4fd78116101f557806364db84bf116101b957806364db84bf1461041857806364f664671461042b5780636fe99c181461043e578063715018a61461045e57806371fa32361461046657806372f5a2531461048657600080fd5b806340d4fd78146103a257806346f2434b146103b557806353011696146103bd57806354731422146103e25780635dc96967146103f557600080fd5b80631cef40f6116102475780631cef40f61461033b5780631e1de2051461034e5780631f7b4f3014610356578063336d7d7b146103695780633deaec2b1461037c5780633f090e3d1461038f57600080fd5b80630e73c0241461028457806310a2cd0d146102ad578063117a5b90146102d857806317514225146103055780631b5ac4b51461031a575b600080fd5b610297610292366004613c02565b61069d565b6040516102a49190613c56565b60405180910390f35b6003546102c0906001600160a01b031681565b6040516001600160a01b0390911681526020016102a4565b6102eb6102e6366004613c02565b6106bd565b6040516102a49e9d9c9b9a99989796959493929190613c93565b610318610313366004613e9e565b610793565b005b61032d610328366004613c02565b6107d8565b6040519081526020016102a4565b610318610349366004613ee1565b6107f4565b61032d61092b565b61032d610364366004613c02565b6109a3565b6009546102c0906001600160a01b031681565b6004546102c0906001600160a01b031681565b61031861039d366004613f1e565b6109ff565b6102976103b0366004613c02565b610c41565b600d5461032d565b6103d06103cb366004613f1e565b610d32565b60405160ff90911681526020016102a4565b6103186103f0366004613c02565b610d6f565b610408610403366004613f50565b610e62565b60405190151581526020016102a4565b61032d610426366004613f7c565b610eff565b610318610439366004613f7c565b610f17565b61045161044c366004613c02565b610ff5565b6040516102a49190614169565b6103186113b8565b610479610474366004613c02565b6113cc565b6040516102a49190614212565b6008546102c0906001600160a01b031681565b600b546102c0906001600160a01b031681565b6005546102c0906001600160a01b031681565b61032d6104cd366004613c02565b611541565b6103186104e036600461437d565b6115bb565b6000546001600160a01b03166102c0565b6103186105043660046143ce565b6115cf565b61051c610517366004614477565b611665565b6040516102a491906144a4565b6103d0610537366004613f50565b61178f565b600a546102c0906001600160a01b031681565b61032d61055d3660046144c2565b6117ba565b6103186105703660046144fc565b6117eb565b610588610583366004614535565b6118fb565b6040516102a49190614552565b6105a86105a3366004613c02565b611d91565b6040516102a491906145b4565b6006546102c0906001600160a01b031681565b6103d06105d6366004614672565b611f03565b6105ee6105e9366004613c02565b611fb3565b6040516102a491906146bb565b6007546102c0906001600160a01b031681565b600c546106249060ff8082169161010090041682565b6040805160ff9384168152929091166020830152016102a4565b61031861064c366004613c02565b61204f565b61032d61065f366004614769565b61213e565b61032d61067236600461480e565b612711565b610318610685366004614535565b61275e565b61032d61069836600461480e565b6127d7565b60008181526002602052604090206060906106b79061289f565b92915050565b600d81815481106106cd57600080fd5b60009182526020918290206014909102018054600182015460048301546005840154600685015460408051608081018252600788015460ff81811683526101008083048216848d015262010000830482168486015263010000009092048116606084015260088a015460098b0154600a8c0154600b8d01548751808901909852600c8e0154808616895286900485169e88019e909e5260118d01546012909d0154848d169f5094909b0483169c999b989a9799969894979196909591949216929091908e565b600b546001600160a01b031633146107c65760405162461bcd60e51b81526004016107bd9061483a565b60405180910390fd5b6107d383838360006128ac565b505050565b6000808212156107f0576107eb8261487e565b6106b7565b5090565b600c5460ff16821480156108115750600c54610100900460ff1681145b610925576007546001600160a01b031633146108665760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b60448201526064016107bd565b6000600d858154811061087b5761087b61489a565b60009182526020909120600854604051630e77a07b60e11b81526014909302909101925060138301916001600160a01b0390911690631cef40f6906108ca9089908990899089906004016148b0565b6020604051808303816000875af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d91906148d6565b81546001810183556000928352602090922090910155505b50505050565b600180546000918261093c836148ef565b91905055506001546001436109519190614908565b403360405160200161098893929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b6000806109b260016006611f03565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5183826040516109f1929190918252602082015260400190565b60405180910390a192915050565b600b546001600160a01b03163314610a295760405162461bcd60e51b81526004016107bd9061483a565b6000600d8581548110610a3e57610a3e61489a565b60009182526020909120600654604051635f87260160e01b81526004810188905260248101899052601490930290910192506001600160a01b031690635f87260190604401600060405180830381600087803b158015610a9d57600080fd5b505af1158015610ab1573d6000803e3d6000fd5b5050600354604051631ff77ac560e11b8152600481018790526001600160a01b039091169250633feef58a9150602401600060405180830381600087803b158015610afb57600080fd5b505af1158015610b0f573d6000803e3d6000fd5b505050600282015460009150610b2790600190614908565b6001600160401b03811115610b3e57610b3e613d55565b604051908082528060200260200182016040528015610b67578160200160208202803683370190505b5090506000805b6002840154811015610bde57808514610bcc57836002018181548110610b9657610b9661489a565b9060005260206000200154838381518110610bb357610bb361489a565b602090810291909101015281610bc8816148ef565b9250505b80610bd6816148ef565b915050610b6e565b508151610bf4906002850190602085019061393b565b50600583018054906000610c078361491b565b90915550506002830154600484015403610c2357600060048401555b6002830154600003610c3857825460ff191683555b50505050505050565b60606000600d8381548110610c5857610c5861489a565b9060005260206000209060140201600201805490506001600160401b03811115610c8457610c84613d55565b604051908082528060200260200182016040528015610cad578160200160208202803683370190505b50905060005b8151811015610d2b57600d8481548110610ccf57610ccf61489a565b90600052602060002090601402016002018181548110610cf157610cf161489a565b9060005260206000200154828281518110610d0e57610d0e61489a565b602090810291909101015280610d23816148ef565b915050610cb3565b5092915050565b600080610d3f8686614908565b9050600083610d4e8684614932565b610d58919061495f565b9050610d648782614973565b979650505050505050565b6000600d8281548110610d8457610d8461489a565b600091825260209091206014909102018054909150610100900460ff161515600103610dc357604051633ae1755360e21b815260040160405180910390fd5b6002810154600103610de85760405163015b385160e41b815260040160405180910390fd5b80601101548160120154610dfc9190614973565b421015610e1c57604051630df3377b60e31b815260040160405180910390fd5b600a81015415610e3157610e3182600061328b565b610e5e8282600201836004015481548110610e4e57610e4e61489a565b9060005260206000200154613355565b5050565b600080610e6e856109a3565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a180600103610ecb576000915050610ef8565b600383610ed88684614973565b610ee29190614986565b1315610ef2576001915050610ef8565b60009150505b9392505050565b600081610f0d846004614932565b610ef89190614973565b6000600d8381548110610f2c57610f2c61489a565b600091825260209091206007546014909202016009810154604051636621a42160e01b815260048101919091529092506001600160a01b0390911690636621a42190602401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906149b6565b6001600160a01b0316336001600160a01b031614610feb578060090154604051637111468960e11b81526004016107bd91815260200190565b6107d3838361328b565b610ffd613982565b600d82815481106110105761101061489a565b6000918252602091829020604080516102a0810182526014909302909101805460ff80821615158552610100909104161515838501526001810154838301526002810180548351818702810187019094528084529394919360608601939283018282801561109d57602002820191906000526020600020905b815481526020019060010190808311611089575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156110f557602002820191906000526020600020905b8154815260200190600101908083116110e1575b505050918352505060048201546020808301919091526005808401546040808501919091526006850154606080860191909152815160808181018452600788015460ff80821684526101008083048216988501989098526201000082048116958401959095526301000000900484169282019290925290850152600885015460a0850152600985015460c0850152600a85015460e0850152600b850154929093019291909116908111156111ab576111ab613c69565b60058111156111bc576111bc613c69565b8152604080518082018252600c84015460ff80821683526101009091041660208281019190915280840191909152600d8401805483518184028101840185528181529390940193909183018282801561123457602002820191906000526020600020905b815481526020019060010190808311611220575b50505050508152602001600e820180548060200260200160405190810160405280929190818152602001828054801561128c57602002820191906000526020600020905b815481526020019060010190808311611278575b50505050508152602001600f82018054806020026020016040519081016040528092919081815260200182805480156112e457602002820191906000526020600020905b8154815260200190600101908083116112d0575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561133c57602002820191906000526020600020905b815481526020019060010190808311611328575b505050505081526020016011820154815260200160128201548152602001601382018054806020026020016040519081016040528092919081815260200182805480156113a857602002820191906000526020600020905b815481526020019060010190808311611394575b5050505050815250509050919050565b6113c0613432565b6113ca600061348c565b565b60606000600d83815481106113e3576113e361489a565b9060005260206000209060140201600201805490506001600160401b0381111561140f5761140f613d55565b60405190808252806020026020018201604052801561144857816020015b611435613a8d565b81526020019060019003908161142d5790505b50905060005b8151811015610d2b57600754600d80546001600160a01b03909216916310f67fb39190879081106114815761148161489a565b906000526020600020906014020160020183815481106114a3576114a361489a565b90600052602060002001546040518263ffffffff1660e01b81526004016114cc91815260200190565b600060405180830381865afa1580156114e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115119190810190614b69565b8282815181106115235761152361489a565b60200260200101819052508080611539906148ef565b91505061144e565b60008160000361155357506001919050565b8160010361156357506000919050565b8160020361157357506003919050565b8160030361158357506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b60448201526064016107bd565b6115c3613432565b610925848484846128ac565b6115d7613432565b600380546001600160a01b03199081166001600160a01b039a8b1617909155600480548216988a169890981790975560098054881696891696909617909555600b805487169488169490941790935560058054861692871692909217909155600680548516918616919091179055600780548416918516919091179055600880549092169216919091179055565b6040805180820190915260008082526020820152826000036116b75760405180604001604052806001846000015161169d9190614cb4565b60ff168152602001836020015160ff1681525090506106b7565b826001036116db5760405180604001604052808360000151600161169d9190614ccd565b82600203611718576040518060400160405280836000015160ff1681526020018360200151600161170c9190614ccd565b60ff16905290506106b7565b82600303611749576040518060400160405280836000015160ff1681526020016001846020015161170c9190614cb4565b6000611754846134dc565b6040516020016117649190614d0a565b60405160208183030381529060405290508060405162461bcd60e51b81526004016107bd9190614d45565b6000808260016117a0866002614e5c565b6117aa9190614908565b901b8516831c9150509392505050565b600e60205281600052604060002081815481106117d657600080fd5b90600052602060002001600091509150505481565b600b546001600160a01b031633146118155760405162461bcd60e51b81526004016107bd9061483a565b806118795760075460405163ce93229760e01b8152600481018490526001600160a01b039091169063ce93229790602401600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b505050505b6007546040516347d0e3c960e01b8152600481018490526000916001600160a01b0316906347d0e3c990602401602060405180830381865afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e791906148d6565b905060038110610925576109258484613355565b6001600160a01b0381166000908152600e6020526040812054606091906001600160401b0381111561192f5761192f613d55565b60405190808252806020026020018201604052801561196857816020015b611955613982565b81526020019060019003908161194d5790505b50905060005b8151811015610d2b576001600160a01b0384166000908152600e602052604090208054600d9190839081106119a5576119a561489a565b9060005260206000200154815481106119c0576119c061489a565b6000918252602091829020604080516102a0810182526014909302909101805460ff808216151585526101009091041615158385015260018101548383015260028101805483518187028101870190945280845293949193606086019392830182828015611a4d57602002820191906000526020600020905b815481526020019060010190808311611a39575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611aa557602002820191906000526020600020905b815481526020019060010190808311611a91575b505050918352505060048201546020808301919091526005808401546040808501919091526006850154606080860191909152815160808181018452600788015460ff80821684526101008083048216988501989098526201000082048116958401959095526301000000900484169282019290925290850152600885015460a0850152600985015460c0850152600a85015460e0850152600b85015492909301929190911690811115611b5b57611b5b613c69565b6005811115611b6c57611b6c613c69565b8152604080518082018252600c84015460ff80821683526101009091041660208281019190915280840191909152600d84018054835181840281018401855281815293909401939091830182828015611be457602002820191906000526020600020905b815481526020019060010190808311611bd0575b50505050508152602001600e8201805480602002602001604051908101604052809291908181526020018280548015611c3c57602002820191906000526020600020905b815481526020019060010190808311611c28575b50505050508152602001600f8201805480602002602001604051908101604052809291908181526020018280548015611c9457602002820191906000526020600020905b815481526020019060010190808311611c80575b5050505050815260200160108201805480602002602001604051908101604052809291908181526020018280548015611cec57602002820191906000526020600020905b815481526020019060010190808311611cd8575b50505050508152602001601182015481526020016012820154815260200160138201805480602002602001604051908101604052809291908181526020018280548015611d5857602002820191906000526020600020905b815481526020019060010190808311611d44575b505050505081525050828281518110611d7357611d7361489a565b60200260200101819052508080611d89906148ef565b91505061196e565b60606000600d8381548110611da857611da861489a565b9060005260206000209060140201600301805490506001600160401b03811115611dd457611dd4613d55565b604051908082528060200260200182016040528015611e0d57816020015b611dfa613b4d565b815260200190600190039081611df25790505b50905060005b8151811015610d2b57600354600d80546001600160a01b0390921691634810bc59919087908110611e4657611e4661489a565b90600052602060002090601402016003018381548110611e6857611e6861489a565b90600052602060002001546040518263ffffffff1660e01b8152600401611e9191815260200190565b61022060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190614e68565b828281518110611ee557611ee561489a565b60200260200101819052508080611efb906148ef565b915050611e13565b6001805460009182611f14836148ef565b9190505550600033600154600143611f2c9190614908565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000611f808585614cb4565b611f8b906001614ccd565b90508460ff168160ff1683611fa09190614f1c565b611faa9190614973565b95945050505050565b600854600d80546060926001600160a01b031691633362ec729185908110611fdd57611fdd61489a565b90600052602060002090601402016013016040518263ffffffff1660e01b815260040161200a9190614f65565b600060405180830381865afa158015612027573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106b79190810190614f78565b6000600d82815481106120645761206461489a565b6000918252602090912060088054601490930290910190810154604051632224e7f360e11b81529193506001600160a01b0390921691634449cfe6916120b89186916002870190601388019060040161506d565b600060405180830381600087803b1580156120d257600080fd5b505af11580156120e6573d6000803e3d6000fd5b5050825461ff001916835550506040518281527f0b902bf94ea0561a1c7b03fed6f663a1ae180c3c6d92b1b529718058696a4c389060200160405180910390a160008281526002602052604090206107d390436135e4565b6009546000906001600160a01b031633146121905760405162461bcd60e51b8152602060048201526012602482015271139bdd081b1bd8989e4818dbdb9d1c9858dd60721b60448201526064016107bd565b600d80546001818101808455600093845260149092027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50192916121d49190614908565b6001808401829055835460ff1916178355600060068401558651909150612204906002840190602089019061393b565b50600582018590556040805160808101825260008082526020820181905291810182905260600181905260078301805463ffffffff191690558490036122bb57600480546040805163780fe1ad60e11b815290516001600160a01b039092169263f01fc35a92828201926020929082900301816000875af115801561228d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b191906148d6565b600883015561232e565b6004805460405163148e052f60e21b81529182018690526001600160a01b03169063523814bc906024016020604051808303816000875af1158015612304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232891906148d6565b60088301555b60005b61233c600187614908565b811161257157600883015460408051808201909152600c5460ff808216835261010090910416602082015260028501805461239693929190859081106123845761238461489a565b906000526020600020015460006128ac565b60075487516000916001600160a01b031690636621a421908a90859081106123c0576123c061489a565b60200260200101516040518263ffffffff1660e01b81526004016123e691815260200190565b602060405180830381865afa158015612403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242791906149b6565b6001600160a01b038082166000908152600e6020908152604082208054600181018255908352908220018690556007548b5193945090929116906373e4195c908b90869081106124795761247961489a565b60200260200101516040518263ffffffff1660e01b815260040161249f91815260200190565b602060405180830381865afa1580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e091906148d6565b60035460405163b60b9fcb60e01b815260048101879052602481018390529192506001600160a01b03169063b60b9fcb90604401600060405180830381600087803b15801561252e57600080fd5b505af1158015612542573d6000803e3d6000fd5b505050506003850180546001810182556000918252602090912001555080612569816148ef565b915050612331565b5060075460405163e7169ec560e01b81526001600160a01b039091169063e7169ec5906125a4908990859060040161509e565b600060405180830381600087803b1580156125be57600080fd5b505af11580156125d2573d6000803e3d6000fd5b5050600654604051633b09709560e21b81526001600160a01b03909116925063ec25c25491506126089084908a906004016150c0565b600060405180830381600087803b15801561262257600080fd5b505af1158015612636573d6000803e3d6000fd5b505050506000604051806101e00160405280600181526020016002815260200160038152602001600481526020016005815260200160068152602001600781526020016008815260200160098152602001600a8152602001600b8152602001600c8152602001600d8152602001600e8152602001600f81525090508083600d0190600f6126c492919061393b565b506126d4600e840182600f61393b565b506126e5600f80850190839061393b565b506126f56010840182600f61393b565b505061012c601183015542601290920191909155949350505050565b600080612731836000015160000b856000015160000b6103289190614986565b90506000612752846020015160000b866020015160000b6103289190614986565b9050611faa8183614973565b612766613432565b6001600160a01b0381166127cb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107bd565b6127d48161348c565b50565b805182516000916127e7916150d9565b60000b6001036127f9575060006106b7565b8151835161280791906150d9565b60000b19612817575060016106b7565b8160200151836020015161282b91906150d9565b60000b1961283b575060026106b7565b8160200151836020015161284f91906150d9565b60000b600103612861575060036106b7565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b60448201526064016107bd565b60606000610ef8836135f0565b6000600d85815481106128c1576128c161489a565b90600052602060002090601402019050806002016000815481106128e7576128e761489a565b906000526020600020015483141580156129215750806002016001815481106129125761291261489a565b90600052602060002001548314155b801561294d57508060020160028154811061293e5761293e61489a565b90600052602060002001548314155b801561297957508060020160038154811061296a5761296a61489a565b90600052602060002001548314155b156129a15760405163013eacb560e01b815260048101869052602481018490526044016107bd565b600754600d80546001600160a01b0390921691638d491b3e9187918791908a9081106129cf576129cf61489a565b9060005260206000209060140201600801546040518463ffffffff1660e01b81526004016129ff939291906150fa565b6020604051808303816000875af1158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a429190615129565b61328457600454600d80546000926001600160a01b0316916381bad36d9189908110612a7057612a7061489a565b90600052602060002090601402016008015487600001518860200151876040518563ffffffff1660e01b8152600401612ac6949392919093845260ff928316602085015291166040830152606082015260800190565b6020604051808303816000875af1158015612ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0991906148d6565b600454600d80549293506000926001600160a01b0390921691635805828391908a908110612b3957612b3961489a565b906000526020600020906014020160080154846040518363ffffffff1660e01b8152600401612b72929190918252602082015260400190565b60a060405180830381865afa158015612b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb39190615146565b9050600282118015612bd85750600081516005811115612bd557612bd5613c69565b14155b15610c3857600181516005811115612bf257612bf2613c69565b03612c4557600d8781548110612c0a57612c0a61489a565b600091825260208220600760149092020101805460ff1691612c2b836151d8565b91906101000a81548160ff021916908360ff160217905550505b600281516005811115612c5a57612c5a613c69565b03612cb557600d8781548110612c7257612c7261489a565b600091825260209091206014909102016007018054610100900460ff16906001612c9b836151d8565b91906101000a81548160ff021916908360ff160217905550505b600381516005811115612cca57612cca613c69565b03612d2657600d8781548110612ce257612ce261489a565b60009182526020909120601490910201600701805462010000900460ff16906002612d0c836151d8565b91906101000a81548160ff021916908360ff160217905550505b600481516005811115612d3b57612d3b613c69565b03612d9857600d8781548110612d5357612d5361489a565b6000918252602090912060149091020160070180546301000000900460ff16906003612d7e836151d8565b91906101000a81548160ff021916908360ff160217905550505b602081015115612f1857600554602082015160405163c82c37b960e01b815260048101919091526000916001600160a01b03169063c82c37b990602401600060405180830381865afa158015612df2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e1a9190810190615284565b90508060200151612f125785600d8981548110612e3957612e3961489a565b9060005260206000209060140201600901819055508160200151600d8981548110612e6657612e6661489a565b9060005260206000209060140201600a01819055506005600d8981548110612e9057612e9061489a565b60009182526020909120600b60149092020101805460ff19166001836005811115612ebd57612ebd613c69565b021790555086600d8981548110612ed657612ed661489a565b60009182526020918290208351600c6014909302909101919091018054939092015160ff9081166101000261ffff199094169116179190911790555b50610c38565b600081516005811115612f2d57612f2d613c69565b14610c385784600d8881548110612f4657612f4661489a565b90600052602060002090601402016009018190555085600d8881548110612f6f57612f6f61489a565b60009182526020918290208351600c6014909302909101919091018054939092015160ff9081166101000261ffff19909416911617919091179055600181516005811115612fbf57612fbf613c69565b0361306057612ff0600d8881548110612fda57612fda61489a565b9060005260206000209060140201600d0161364c565b600d88815481106130035761300361489a565b9060005260206000209060140201600a01819055506001600d888154811061302d5761302d61489a565b60009182526020909120600b60149092020101805460ff1916600183600581111561305a5761305a613c69565b02179055505b60028151600581111561307557613075613c69565b03613116576130a6600d88815481106130905761309061489a565b9060005260206000209060140201600e0161364c565b600d88815481106130b9576130b961489a565b9060005260206000209060140201600a01819055506002600d88815481106130e3576130e361489a565b60009182526020909120600b60149092020101805460ff1916600183600581111561311057613110613c69565b02179055505b60038151600581111561312b5761312b613c69565b036131cc5761315c600d88815481106131465761314661489a565b9060005260206000209060140201600f0161364c565b600d888154811061316f5761316f61489a565b9060005260206000209060140201600a01819055506003600d88815481106131995761319961489a565b60009182526020909120600b60149092020101805460ff191660018360058111156131c6576131c6613c69565b02179055505b6004815160058111156131e1576131e1613c69565b03610c3857613212600d88815481106131fc576131fc61489a565b906000526020600020906014020160100161364c565b600d88815481106132255761322561489a565b9060005260206000209060140201600a01819055506004600d888154811061324f5761324f61489a565b60009182526020909120600b60149092020101805460ff1916600183600581111561327c5761327c613c69565b021790555050505b5050505050565b6000600d83815481106132a0576132a061489a565b6000918252602090912060075460149092020160098101546008820154600a830154600b840154604051636d291bbb60e01b81529496506001600160a01b0390951694636d291bbb9461330694899490938b939192600c8b019260ff1690600401615375565b600060405180830381600087803b15801561332057600080fd5b505af1158015613334573d6000803e3d6000fd5b5050600060098401819055600a8401555050600b01805460ff191690555050565b6000600d838154811061336a5761336a61489a565b6000918252602090912060075460405163065c363f60e41b815260048101869052601490930290910192506001600160a01b0316906365c363f090602401600060405180830381600087803b1580156133c257600080fd5b505af11580156133d6573d6000803e3d6000fd5b5050426012840155505060028101546133f190600190614908565b816004015410156134185760048101805490600061340e836148ef565b9190505550505050565b613426838260080154613772565b60006004820155505050565b6000546001600160a01b031633146113ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107bd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816000036135035750506040805180820190915260018152600360fc1b602082015290565b8160005b811561352d5780613517816148ef565b91506135269050600a8361495f565b9150613507565b6000816001600160401b0381111561354757613547613d55565b6040519080825280601f01601f191660200182016040528015613571576020820181803683370190505b5090505b84156135dc57613586600183614908565b9150613593600a86614f1c565b61359e906030614973565b60f81b8183815181106135b3576135b361489a565b60200101906001600160f81b031916908160001a9053506135d5600a8661495f565b9450613575565b949350505050565b6000610ef883836138ec565b60608160000180548060200260200160405190810160405280929190818152602001828054801561364057602002820191906000526020600020905b81548152602001906001019080831161362c575b50505050509050919050565b8054600090819061365f90600190614908565b90505b801561370f576000613675600083611f03565b9050838160ff168154811061368c5761368c61489a565b90600052602060002001548483815481106136a9576136a961489a565b90600052602060002001548584815481106136c6576136c661489a565b906000526020600020016000878560ff16815481106136e7576136e761489a565b60009182526020909120019290925591909155508190506137078161491b565b915050613662565b508154600090839061372390600190614908565b815481106137335761373361489a565b9060005260206000200154905082805480613750576137506153ca565b600190038181906000526020600020016000905590558060ff16915050919050565b6000600d83815481106137875761378761489a565b906000526020600020906014020190508060060160008154809291906137ac906148ef565b909155505060048054604051630b06115560e31b81529182018490526001600160a01b0316906358308aa890602401600060405180830381600087803b1580156137f557600080fd5b505af1158015613809573d6000803e3d6000fd5b50506004805460405163c6b41b4560e01b8152918201869052600160248301526001600160a01b0316925063c6b41b459150604401600060405180830381600087803b15801561385857600080fd5b505af115801561386c573d6000803e3d6000fd5b5050600754600884015460405163668a7f3b60e01b81526001600160a01b03909216935063668a7f3b92506138a89160028601906004016153e0565b600060405180830381600087803b1580156138c257600080fd5b505af11580156138d6573d6000803e3d6000fd5b5050825461ff0019166101001790925550505050565b6000818152600183016020526040812054613933575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b7565b5060006106b7565b828054828255906000526020600020908101928215613976579160200282015b8281111561397657825182559160200191906001019061395b565b506107f0929150613ba9565b604051806102a00160405280600015158152602001600015158152602001600081526020016060815260200160608152602001600081526020016000815260200160008152602001613a016040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b815260200160008152602001600081526020016000815260200160006005811115613a2e57613a2e613c69565b8152602001613a566040518060400160405280600060ff168152602001600060ff1681525090565b8152602001606081526020016060815260200160608152602001606081526020016000815260200160008152602001606081525090565b604051806101c0016040528060006001600160a01b031681526020016000815260200160008152602001613abf613bbe565b8152602001613ae76040518060400160405280600060ff168152602001600060ff1681525090565b8152602001613b0f6040518060400160405280600060ff168152602001600060ff1681525090565b81526000602082018190526040820181905260608083018290526080830182905260a083015260c0820181905260e082018190526101009091015290565b604051806101400160405280600080191681526020016000815260200160008152602001613b79613bbe565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b5b808211156107f05760008155600101613baa565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b600060208284031215613c1457600080fd5b5035919050565b600081518084526020808501945080840160005b83811015613c4b57815187529582019590820190600101613c2f565b509495945050505050565b602081526000610ef86020830184613c1b565b634e487b7160e01b600052602160045260246000fd5b60068110613c8f57613c8f613c69565b9052565b6000610240820190508f151582528e151560208301528d60408301528c60608301528b60808301528a60a0830152613cfb60c083018b60ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b886101408301528761016083015286610180830152613d1e6101a0830187613c7f565b845160ff9081166101c08401526020860151166101e083015261020082019390935261022001529c9b505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613d8d57613d8d613d55565b60405290565b6040516101c081016001600160401b0381118282101715613d8d57613d8d613d55565b60405161014081016001600160401b0381118282101715613d8d57613d8d613d55565b60405160c081016001600160401b0381118282101715613d8d57613d8d613d55565b60405160e081016001600160401b0381118282101715613d8d57613d8d613d55565b604051601f8201601f191681016001600160401b0381118282101715613e4557613e45613d55565b604052919050565b60ff811681146127d457600080fd5b600060408284031215613e6e57600080fd5b613e76613d6b565b90508135613e8381613e4d565b81526020820135613e9381613e4d565b602082015292915050565b600080600060808486031215613eb357600080fd5b83359250613ec48560208601613e5c565b9150606084013590509250925092565b600981106127d457600080fd5b60008060008060808587031215613ef757600080fd5b843593506020850135613f0981613ed4565b93969395505050506040820135916060013590565b60008060008060808587031215613f3457600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215613f6557600080fd5b505081359360208301359350604090920135919050565b60008060408385031215613f8f57600080fd5b50508035926020909101359150565b80511515825260006103206020830151613fbc602086018215159052565b50604083015160408501526060830151816060860152613fde82860182613c1b565b91505060808301518482036080860152613ff88282613c1b565b91505060a083015160a085015260c083015160c085015260e083015160e0850152610100808401516140598287018260ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b5050610120830151610180818187015261014085015191506101a0828188015261016086015192506101c083818901528287015193506101e092506140a083890185613c7f565b908601519250610200906140c688830185805160ff908116835260209182015116910152565b80870151935050610240878503818901526140e18585613c1b565b94508287015193506102609250878503838901526140ff8585613c1b565b945081870151935061028091508785038289015261411d8585613c1b565b945061022087015193508785036102a089015261413a8585613c1b565b908701516102c0890152918601516102e08801528501518682036103008801529092509050611faa8282613c1b565b602081526000610ef86020830184613f9e565b8051600081810b84526020830151810b60208501526040830151810b60408501526060830151810b60608501526080830151810b608085015260a0830151810b60a085015260c0830151810b60c0850152505060e0810151151560e08301525050565b600081518084526020808501945080840160005b83811015613c4b57815160ff16875295820195908201906001016141f3565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561436f57888303603f19018552815180516001600160a01b031684526102e08882015189860152878201518886015260608083015161427e8288018261417c565b505060808201516101606142a481880183805160ff908116835260209182015116910152565b60a084015191506101a06142ca81890184805160ff908116835260209182015116910152565b60c085015192506142e16101e089018460000b9052565b60e085015160ff9081166102008a015261010086015181166102208a01526101208601511661024089015261014085015161026089018590529250614328848901846141df565b935081850151925061434061028089018460ff169052565b61018085015115156102a0890152909301516102c0909601959095529588019593505090860190600101614239565b509098975050505050505050565b60008060008060a0858703121561439357600080fd5b843593506143a48660208701613e5c565b93969395505050506060820135916080013590565b6001600160a01b03811681146127d457600080fd5b600080600080600080600080610100898b0312156143eb57600080fd5b88356143f6816143b9565b97506020890135614406816143b9565b96506040890135614416816143b9565b95506060890135614426816143b9565b94506080890135614436816143b9565b935060a0890135614446816143b9565b925060c0890135614456816143b9565b915060e0890135614466816143b9565b809150509295985092959890939650565b6000806060838503121561448a57600080fd5b8235915061449b8460208501613e5c565b90509250929050565b604081016106b78284805160ff908116835260209182015116910152565b600080604083850312156144d557600080fd5b82356144e0816143b9565b946020939093013593505050565b80151581146127d457600080fd5b60008060006060848603121561451157600080fd5b8335925060208401359150604084013561452a816144ee565b809150509250925092565b60006020828403121561454757600080fd5b8135610ef8816143b9565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156145a757603f19888603018452614595858351613f9e565b94509285019290850190600101614579565b5092979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561466557815180518552868101518786015285810151868601526060808201516146018288018261417c565b5050608081015160ff90811661016087015260a0820151811661018087015260c082015181166101a087015260e0820151166101c086015261010081015115156101e0860152610120015161020085015261022090930192908501906001016145d1565b5091979650505050505050565b6000806040838503121561468557600080fd5b823561469081613e4d565b915060208301356146a081613e4d565b809150509250929050565b60098110613c8f57613c8f613c69565b602080825282518282018190526000919060409081850190868401855b82811015614665578151805185528681015187860152858101516146fe878701826146ab565b50606081810151805160ff9081168884015260208201511660808801525050608081015160a0868101919091520151151560c085015260e090930192908501906001016146d8565b60006001600160401b0382111561475f5761475f613d55565b5060051b60200190565b60008060006060848603121561477e57600080fd5b83356001600160401b0381111561479457600080fd5b8401601f810186136147a557600080fd5b803560206147ba6147b583614746565b613e1d565b82815260059290921b830181019181810190898411156147d957600080fd5b938201935b838510156147f7578435825293820193908201906147de565b999188013598505060409096013595945050505050565b6000806080838503121561482157600080fd5b61482b8484613e5c565b915061449b8460408501613e5c565b602080825260149082015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820161489357614893614868565b5060000390565b634e487b7160e01b600052603260045260246000fd5b848152608081016148c460208301866146ab565b60408201939093526060015292915050565b6000602082840312156148e857600080fd5b5051919050565b60006001820161490157614901614868565b5060010190565b818103818111156106b7576106b7614868565b60008161492a5761492a614868565b506000190190565b80820281158282048414176106b7576106b7614868565b634e487b7160e01b600052601260045260246000fd5b60008261496e5761496e614949565b500490565b808201808211156106b7576106b7614868565b8181036000831280158383131683831282161715610d2b57610d2b614868565b80516149b1816143b9565b919050565b6000602082840312156149c857600080fd5b8151610ef8816143b9565b8051600081900b81146149b157600080fd5b80516149b1816144ee565b6000610100808385031215614a0457600080fd5b604051908101906001600160401b0382118183101715614a2657614a26613d55565b81604052809250614a36846149d3565b8152614a44602085016149d3565b6020820152614a55604085016149d3565b6040820152614a66606085016149d3565b6060820152614a77608085016149d3565b6080820152614a8860a085016149d3565b60a0820152614a9960c085016149d3565b60c082015260e08401519150614aae826144ee565b60e0015292915050565b80516149b181613e4d565b600060408284031215614ad557600080fd5b614add613d6b565b90508151614aea81613e4d565b81526020820151613e9381613e4d565b600082601f830112614b0b57600080fd5b81516020614b1b6147b583614746565b82815260059290921b84018101918181019086841115614b3a57600080fd5b8286015b84811015614b5e578051614b5181613e4d565b8352918301918301614b3e565b509695505050505050565b600060208284031215614b7b57600080fd5b81516001600160401b0380821115614b9257600080fd5b908301906102e08286031215614ba757600080fd5b614baf613d93565b614bb8836149a6565b81526020830151602082015260408301516040820152614bdb86606085016149f0565b6060820152610160614bef87828601614ac3565b60808301526101a0614c0388828701614ac3565b60a0840152614c156101e086016149d3565b60c0840152614c276102008601614ab8565b60e0840152614c396102208601614ab8565b610100840152614c4c6102408601614ab8565b61012084015261026085015184811115614c6557600080fd5b614c7189828801614afa565b61014085015250614c856102808601614ab8565b82840152614c966102a086016149e5565b6101808401526102c085015181840152505080935050505092915050565b60ff82811682821603908111156106b7576106b7614868565b60ff81811683821601908111156106b7576106b7614868565b60005b83811015614d01578181015183820152602001614ce9565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251614d38816013850160208701614ce6565b9190910160130192915050565b6020815260008251806020840152614d64816040850160208701614ce6565b601f01601f19169190910160400192915050565b600181815b80851115614db3578160001904821115614d9957614d99614868565b80851615614da657918102915b93841c9390800290614d7d565b509250929050565b600082614dca575060016106b7565b81614dd7575060006106b7565b8160018114614ded5760028114614df757614e13565b60019150506106b7565b60ff841115614e0857614e08614868565b50506001821b6106b7565b5060208310610133831016604e8410600b8410161715614e36575081810a6106b7565b614e408383614d78565b8060001904821115614e5457614e54614868565b029392505050565b6000610ef88383614dbb565b60006102208284031215614e7b57600080fd5b614e83613db6565b825181526020830151602082015260408301516040820152614ea884606085016149f0565b6060820152614eba6101608401614ab8565b6080820152614ecc6101808401614ab8565b60a0820152614ede6101a08401614ab8565b60c0820152614ef06101c08401614ab8565b60e0820152614f026101e084016149e5565b610100820152610200929092015161012083015250919050565b600082614f2b57614f2b614949565b500690565b6000815480845260208085019450836000528060002060005b83811015613c4b57815487529582019560019182019101614f49565b602081526000610ef86020830184614f30565b60006020808385031215614f8b57600080fd5b82516001600160401b03811115614fa157600080fd5b8301601f81018513614fb257600080fd5b8051614fc06147b582614746565b81815260e09182028301840191848201919088841115614fdf57600080fd5b938501935b838510156150615780858a031215614ffc5760008081fd5b615004613dd9565b85518152868601518782015260408087015161501f81613ed4565b9082015260606150318b888301614ac3565b9082015260a086810151608083015260c087015161504e816144ee565b9082015283529384019391850191614fe4565b50979650505050505050565b84815283602082015260806040820152600061508c6080830185614f30565b8281036060840152610d648185614f30565b6040815260006150b16040830185613c1b565b90508260208301529392505050565b8281526040602082015260006135dc6040830184613c1b565b600082810b9082900b03607f198112607f821317156106b7576106b7614868565b608081016151188286805160ff908116835260209182015116910152565b604082019390935260600152919050565b60006020828403121561513b57600080fd5b8151610ef8816144ee565b600060a0828403121561515857600080fd5b60405160a081018181106001600160401b038211171561517a5761517a613d55565b60405282516006811061518c57600080fd5b81526020838101519082015260408301516151a681613e4d565b604082015260608301516151b981613e4d565b606082015260808301516151cc816144ee565b60808201529392505050565b600060ff821660ff81036151ee576151ee614868565b60010192915050565b600082601f83011261520857600080fd5b815160206152186147b583614746565b82815260069290921b8401810191818101908684111561523757600080fd5b8286015b84811015614b5e57604081890312156152545760008081fd5b61525c613d6b565b81516017811061526c5760008081fd5b8152818501518582015283529183019160400161523b565b60006020828403121561529657600080fd5b81516001600160401b03808211156152ad57600080fd5b9083019060e082860312156152c157600080fd5b6152c9613dfb565b825181526152d9602084016149e5565b60208201526152ea60408401614ab8565b60408201526152fb60608401614ab8565b606082015260808301518281111561531257600080fd5b61531e878286016151f7565b60808301525060a08301518281111561533657600080fd5b615342878286016151f7565b60a08301525060c08301518281111561535a57600080fd5b615366878286016151f7565b60c08301525095945050505050565b600061010082019050888252876020830152866040830152856060830152845460ff8116608084015260ff8160081c1660a0840152508360c08301526153be60e0830184613c7f565b98975050505050505050565b634e487b7160e01b600052603160045260246000fd5b8281526040602082015260006135dc6040830184614f3056fea26469706673582212203649006fe66d41906e90a530ebd5b209cddaa80e41048138ddf92f9f039cf5cd64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9118,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9123,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "gameToEventBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2262_storage)"
      },
      {
        "astId": 7061,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "chars",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(CharInterface)6747"
      },
      {
        "astId": 7064,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "maps",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MapInterface)6925"
      },
      {
        "astId": 7067,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "bcEvents",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(EventsInterface)6721"
      },
      {
        "astId": 7070,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "items",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ItemsInterface)6954"
      },
      {
        "astId": 7073,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "players",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(PlayersInterface)7050"
      },
      {
        "astId": 7076,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "denizens",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(DenizensInterface)6680"
      },
      {
        "astId": 7078,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "lobbiesAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7080,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "charsAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7082,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7181,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "StartLocation",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Position)8890_storage"
      },
      {
        "astId": 7185,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "games",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Game)8993_storage)dyn_storage"
      },
      {
        "astId": 7190,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "addressToGame",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Game)8993_storage)dyn_storage": {
        "base": "t_struct(Game)8993_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CharInterface)6747": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(DenizensInterface)6680": {
        "encoding": "inplace",
        "label": "contract DenizensInterface",
        "numberOfBytes": "20"
      },
      "t_contract(EventsInterface)6721": {
        "encoding": "inplace",
        "label": "contract EventsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)6954": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)6925": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PlayersInterface)7050": {
        "encoding": "inplace",
        "label": "contract PlayersInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)8796": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(UintSet)2262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2262_storage"
      },
      "t_struct(EventTracker)8885_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.EventTracker",
        "members": [
          {
            "astId": 8878,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "bugEvents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8880,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mysteryEvents",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8882,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "scavEvents",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8884,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "shipEvents",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)8993_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Game",
        "members": [
          {
            "astId": 8942,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8944,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "denizenTurn",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8946,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "gameId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8949,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "playerIndexes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8952,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "charIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8954,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "currentPlayerTurnIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8956,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "numPlayers",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8958,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "turnsTaken",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8961,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventTracker",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(EventTracker)8885_storage"
          },
          {
            "astId": 8963,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8965,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventPlayerId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8967,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventNumber",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8970,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventType",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(BCEventType)8796"
          },
          {
            "astId": 8973,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventPosition",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Position)8890_storage"
          },
          {
            "astId": 8976,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedBugEvents",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8979,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedMysteryEvents",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8982,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedScavEvents",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8985,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedShipEvents",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8987,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "turnTimeLimit",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 8989,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "lastTurnTimestamp",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 8992,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "denizenIds",
            "offset": 0,
            "slot": "19",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_struct(Position)8890_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 8887,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8889,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)1804_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1799,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1803,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2262_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2261,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1804_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}