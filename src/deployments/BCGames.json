{
  "address": "0xB908d54BfE12B7e9530Dde1b070B5543BCA4c30e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "charContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "healthDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "inventoryIDs",
              "type": "uint8[]"
            },
            {
              "internalType": "bool",
              "name": "canHarmOthers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct BCTypes.Player",
          "name": "player",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "ActionCompleteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_charId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.Followthrough",
          "name": "_followthrough",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_1stDirection",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_2ndDirection",
          "type": "uint256"
        }
      ],
      "name": "doAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "extGetGamePlayerIndexes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "turnsTaken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bugEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mysteryEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scavEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shipEvents",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.EventTracker",
          "name": "eventTracker",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "mapContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mapId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "charContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "position",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "healthDmgTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "armorDmgTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "actionsTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "dataTokens",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "canHarmOthers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "dead",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roomTileAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lobbiesAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_playerIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_numPlayers",
          "type": "uint256"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x28b3d366500d29b2a887013fcdc69aa3d2fd6c2a0fdd65d2dd8d7732f88a7fa4",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0xB908d54BfE12B7e9530Dde1b070B5543BCA4c30e",
    "transactionIndex": 28,
    "gasUsed": "4470001",
    "logsBloom": "0x
    "blockHash": "0xd57d3f810c100c7d81dab9a07225a44a728f5edd276794eb26e880df9c76ecea",
    "transactionHash": "0x28b3d366500d29b2a887013fcdc69aa3d2fd6c2a0fdd65d2dd8d7732f88a7fa4",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 28274720,
        "transactionHash": "0x28b3d366500d29b2a887013fcdc69aa3d2fd6c2a0fdd65d2dd8d7732f88a7fa4",
        "address": "0xB908d54BfE12B7e9530Dde1b070B5543BCA4c30e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0xd57d3f810c100c7d81dab9a07225a44a728f5edd276794eb26e880df9c76ecea"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 28274720,
        "transactionHash": "0x28b3d366500d29b2a887013fcdc69aa3d2fd6c2a0fdd65d2dd8d7732f88a7fa4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000045dff21c3d3bc30000000000000000000000000000000000000000000000001e2245957a60934900000000000000000000000000000000000000000000159bb45d54635a68c3840000000000000000000000000000000000000000000000001ddc65a35e23578600000000000000000000000000000000000000000000159bb4a3345576a5ff47",
        "logIndex": 157,
        "blockHash": "0xd57d3f810c100c7d81dab9a07225a44a728f5edd276794eb26e880df9c76ecea"
      }
    ],
    "blockNumber": 28274720,
    "cumulativeGasUsed": "9289287",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "8c343b04fa0f2f489794f8cd2022c5d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"healthDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"inventoryIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct BCTypes.Player\",\"name\":\"player\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"ActionCompleteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_charId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.Followthrough\",\"name\":\"_followthrough\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_1stDirection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_2ndDirection\",\"type\":\"uint256\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"extGetGamePlayerIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"mapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"healthDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roomTileAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lobbiesAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_numPlayers\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCGames.sol\":\"BCGames\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BCGames.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface CharInterface {\\n    function characters(uint _id) external view returns(BCTypes.Character memory);\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll() external returns (uint8);\\n    function abs(int x) external pure returns(int);\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n    function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) external view returns (BCTypes.Door memory);\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) external;\\n    function discoverRoom(uint _mapId, uint _row, uint _col) external returns (bool);\\n    function resetOpenDoors(uint _mapId) external;\\n}\\n\\ncontract BCGames is Ownable {\\n    // TODO: Where is right place for these???\\n    // TODO: Go back to matching name of contract?\\n    RoomTileInterface public roomTiles;\\n    CharInterface public chars;\\n    UtilsInterface public utils;\\n    MapInterface public maps;\\n\\n    address public lobbiesAddress;\\n\\n    function setContractAddresses(\\n        address _roomTileAddress,\\n        address _charAddress,\\n        address _utilsAddress,\\n        address _mapsAddress,\\n        address _lobbiesAddress)\\n        public onlyOwner {\\n        roomTiles = RoomTileInterface(_roomTileAddress);\\n        chars = CharInterface(_charAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        maps = MapInterface(_mapsAddress);\\n        lobbiesAddress = _lobbiesAddress;\\n    }\\n\\n    event DiceRollEvent(uint roll, uint forValue, uint against);\\n    event ActionCompleteEvent(uint currentPlayerTurnIndex, BCTypes.Player player, BCTypes.Action action);\\n    // event Received();\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3;\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    uint constant START_ROOM_ID = 2; // TODO: Duplicated in BCMaps.sol\\n\\n    BCTypes.Player[] public players;\\n\\n    BCTypes.Game[] public games;\\n\\n    mapping (address => uint[]) public addressToGame;\\n\\n    function addPlayer(address _charContractAddress, uint _charId, address _owner) external returns (uint) {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        // TODO: Decide on allowing more than one valid contract for chars (etc.)\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n\\n        BCTypes.Player storage newPlayer = players.push();\\n        newPlayer.charContractAddress = _charContractAddress;\\n        newPlayer.owner = _owner;\\n        newPlayer.characterId = _charId;\\n        return uint(players.length-1);\\n    }\\n\\n    function startGame(uint[] memory _playerIndexes, uint _numPlayers) public {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n        BCTypes.Game storage newGame = games.push();\\n        newGame.active = true;\\n        newGame.turnsTaken = 0;\\n        newGame.playerIndexes = _playerIndexes;\\n        newGame.numPlayers = _numPlayers;\\n        newGame.eventTracker = BCTypes.EventTracker(0, 0, 0, 0);\\n\\n        newGame.mapContract = address(maps);\\n        newGame.mapId = maps.createMap();\\n\\n        // Move the players to the start // TODO: Hardcoded\\n        // And map the owners to this game\\n        for (uint i = 0; i < _numPlayers; i++) {\\n            // Warning: using _movePlayer here will attempt to discover, etc.\\n            _movePlayer(newGame.mapId, BCTypes.Position(8, 5), newGame.playerIndexes[i]);\\n            address joiner = players[newGame.playerIndexes[i]].owner;\\n            addressToGame[joiner].push(games.length-1);\\n        }\\n\\n        // TODO DEAL WITH ITEMS\\n\\n        // TODO: Player who pays to start gets to go first?\\n        // TODO: Event\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function _resolveChallenge(uint _for, uint _against) internal returns(bool) {\\n        uint roll = utils.roll();\\n        emit DiceRollEvent(roll, _for, _against);\\n        if (roll == 1) {\\n            return false;\\n        }\\n\\n        if (int(roll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function doAction(\\n        uint _gameId,\\n        uint _playerId,\\n        BCTypes.Action _action,\\n        BCTypes.Followthrough _followthrough,\\n        // Using room positions requires more checks, try to avoid\\n        // Position memory _roomPos, // For followthrough move, shoot, etc.\\n        uint _1stDirection, // NSEW 4==in room\\n        uint _2ndDirection  // NSEW 4==in room\\n        ) public\\n    {\\n        // Universal requirements for all actions\\n        // TODO: Player must not be dead!\\n        // TODO: Optimize?  Would it actually be better to make a local copy of the player stats?\\n        BCTypes.Player storage currentPlayer = players[_playerId];\\n        BCTypes.Game storage currentGame = games[_gameId];\\n        // TODO: Hardcoding\\n        // BCTypes.GameTile[][] memory =\\n        BCTypes.Character memory currentChar = chars.characters(currentPlayer.characterId);\\n\\n        require(msg.sender == currentPlayer.owner, \\\"Sender not player owner\\\");\\n        require(currentPlayer.actionsTaken < DEFAULT_ACTIONS_NUM, \\\"No actions left\\\"); // TODO: Confirm this won't ever trigger // TODO: Get effects and items\\n        require(_playerId == currentGame.playerIndexes[currentGame.currentPlayerTurnIndex], \\\"Not your turn\\\");\\n\\n        // TODO: Add respawn action for living or dead players\\n\\n        if (_action == BCTypes.Action.PASS) {\\n            // Do nothing\\n        } else if (_action == BCTypes.Action.MOVE) {\\n            // TODO: Handle using door number 4 to represent in room and DRY\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    firstRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    firstRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"1st Door not open/breached/unlocked\\\");\\n\\n            if(firstRefDoor.status != BCTypes.DoorStatus.BREACHED) {\\n                maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection, BCTypes.DoorStatus.OPEN);\\n            }\\n\\n            // Main move\\n            BCTypes.Position memory targetRoomPos = utils.getNeighborRoom(_1stDirection, currentPlayer.position);\\n\\n            // Followthrough\\n            if (_followthrough == BCTypes.Followthrough.MOVE) {              // first because we reference the roome we move to first for the second direction\\n                BCTypes.Position memory neighborRoom = utils.getNeighborRoom(_1stDirection, targetRoomPos);\\n                BCTypes.Door memory secondRefDoor = maps.getDoor(currentGame.mapId, neighborRoom.row, neighborRoom.col, _2ndDirection);\\n                require(secondRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    secondRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    secondRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"2nd Door not open/breached/unlocked\\\");\\n\\n                targetRoomPos = neighborRoom;\\n                BCTypes.GameTile[][] memory currentMap = maps.extGetBoard(currentGame.mapId);\\n                require(currentMap[targetRoomPos.row][targetRoomPos.col].roomId > START_ROOM_ID, \\\"Room not explored\\\");\\n\\n                if(secondRefDoor.status != BCTypes.DoorStatus.BREACHED) {\\n                    maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _2ndDirection, BCTypes.DoorStatus.OPEN);\\n                }\\n            }\\n            _movePlayer(currentGame.mapId, targetRoomPos, _playerId);\\n\\n        } else if (_action == BCTypes.Action.HACK) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n\\n            if (_resolveChallenge(currentChar.traits.hack, firstRefDoor.vsHack)) {\\n                maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection, BCTypes.DoorStatus.OPEN);\\n                // TODO: DRY - consolidate with breach\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    _movePlayer(currentGame.mapId, utils.getNeighborRoom(_1stDirection, currentPlayer.position), _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n            }\\n        } else if (_action == BCTypes.Action.BREACH) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n\\n            if (_resolveChallenge(currentChar.traits.breach, firstRefDoor.vsBreach)) {\\n                maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection, BCTypes.DoorStatus.BREACHED);\\n                // TODO: DRY - consolidate with hack\\n                // console.log(\\\"Roll succeeded\\\");\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    _movePlayer(currentGame.mapId, utils.getNeighborRoom(_1stDirection, currentPlayer.position), _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n                // TODO: Handle breaching into space\\n            }\\n        } else {\\n            revert(\\\"ERROR: Bad action config\\\");\\n        }\\n\\n        currentPlayer.actionsTaken++;\\n        if (currentPlayer.actionsTaken >= DEFAULT_ACTIONS_NUM) {\\n            // TODO: Get items and abilities for actions\\n            // TODO: This will prevent free actions after last\\n            // TODO: Add FE and BE mechanisim to have a default checkbox \\\"Pass the turn\\\"\\n            currentPlayer.actionsTaken = 0;\\n            if (currentGame.currentPlayerTurnIndex < currentGame.playerIndexes.length-1) {\\n                currentGame.currentPlayerTurnIndex++;\\n            } else {\\n\\n                _endPlayerTurn(currentGame.mapId);\\n                currentGame.currentPlayerTurnIndex = 0;\\n            }\\n        }\\n\\n        emit ActionCompleteEvent(currentGame.currentPlayerTurnIndex, currentPlayer, _action);\\n    }\\n\\n    function _endPlayerTurn(uint _mapId) internal {\\n        // TODO: All denizen logic\\n        // TODO: Consider shuffling the index here\\n        // TODO: Kill all players on space tiles and respawn\\n        maps.resetOpenDoors(_mapId);\\n    }\\n\\n    function _movePlayer(uint _mapId, BCTypes.Position memory _position, uint _playerId) internal {\\n        // TODO: Require move to ship tile?\\n        players[_playerId].position = _position;\\n\\n        // Discover room and process event, if undiscovered\\n        if (maps.discoverRoom(_mapId, _position.row, _position.col)) {\\n            // TODO: Process in-room event or draw event\\n            // In-room event maps.roomList[maps[_mapId].roomId].eventNum;\\n        }\\n\\n        // TODO: Emit movement\\n    }\\n\\n    function extGetGamePlayerIndexes(uint _gameId) public view returns (uint[] memory) {\\n        uint[] memory indexes = new uint[](games[_gameId].playerIndexes.length);\\n        for (uint i = 0; i < indexes.length; i++) {\\n            indexes[i] = games[_gameId].playerIndexes[i];\\n        }\\n        return indexes;\\n    }\\n\\n    function transferFundsOut() public onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    // function onERC721Received(\\n    //     address _operator,\\n    //     address _from,\\n    //     uint256 _tokenId,\\n    //     bytes calldata _data\\n    // )\\n    //     external\\n    //     override\\n    //     returns(bytes4)\\n    // {\\n    //     _operator;\\n    //     _from;\\n    //     _tokenId;\\n    //     _data;\\n    //     emit Received();\\n    //     return 0x150b7a02;\\n    // }\\n}\\n\",\"keccak256\":\"0x66d218df59675434632a024e01a91ea8aab001f16ed6c830c665d9634e3ee8a6\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Tie to universal inventory\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame;\\n        bool dead;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdd1d7bd294a49dfb4f595f04066ec5b370752b6f52cafe591f304e17d34ea89a\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b614f9380620001146000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806368030c72116100a2578063e847ae1e11610071578063e847ae1e1461029c578063f0698699146102b8578063f2fde38b146102d4578063f7157f64146102f0578063f71d96cb1461030e5761010b565b806368030c7214610228578063715018a6146102445780638da5cb5b1461024e578063a99d2a8b1461026c5761010b565b80633838aed1116100de5780633838aed1146101b25780633deaec2b146101bc57806340d4fd78146101da5780635a29638d1461020a5761010b565b806308178b3c1461011057806310a2cd0d14610140578063117a5b901461015e578063336d7d7b14610194575b600080fd5b61012a60048036038101906101259190612643565b610347565b60405161013791906126a5565b60405180910390f35b6101486104a8565b604051610155919061271f565b60405180910390f35b6101786004803603810190610173919061273a565b6104ce565b60405161018b9796959493929190612802565b60405180910390f35b61019c6105cb565b6040516101a99190612874565b60405180910390f35b6101ba6105f1565b005b6101c4610649565b6040516101d191906128b0565b60405180910390f35b6101f460048036038101906101ef919061273a565b61066f565b6040516102019190612989565b60405180910390f35b610212610770565b60405161021f91906129cc565b60405180910390f35b610242600480360381019061023d9190612b40565b610796565b005b61024c610ba0565b005b610256610bb4565b6040516102639190612874565b60405180910390f35b61028660048036038101906102819190612b9c565b610bdd565b60405161029391906126a5565b60405180910390f35b6102b660048036038101906102b19190612bdc565b610c0e565b005b6102d260048036038101906102cd9190612ca1565b610d62565b005b6102ee60048036038101906102e99190612d2e565b611f3e565b005b6102f8611fc2565b6040516103059190612d7c565b60405180910390f35b6103286004803603810190610323919061273a565b611fe8565b60405161033e9a99989796959493929190612dd5565b60405180910390f35b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d090612ecf565b60405180910390fd5b600060066001816001815401808255809150500390600052602060002090600802019050848160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160020181905550600160068054905061049e9190612f1e565b9150509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600781815481106104de57600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900460ff1690806002015490806003015490806004015490806005016040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681526020016000820160039054906101000a900460ff1660ff1660ff1681525050908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070154905087565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105f961211e565b610601610bb4565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610646573d6000803e3d6000fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060006007838154811061068757610686612f52565b5b90600052602060002090600802016001018054905067ffffffffffffffff8111156106b5576106b46129fd565b5b6040519080825280602002602001820160405280156106e35781602001602082028036833780820191505090505b50905060005b8151811015610766576007848154811061070657610705612f52565b5b9060005260206000209060080201600101818154811061072957610728612f52565b5b906000526020600020015482828151811061074757610746612f52565b5b602002602001018181525050808061075e90612f81565b9150506106e9565b5080915050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081d90612ecf565b60405180910390fd5b60006007600181600181540180825580915050039060005260206000209060080201905060018160000160006101000a81548160ff0219169083151502179055506000816004018190555082816001019080519060200190610889929190612531565b508181600301819055506040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152508160050160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff160217905550905050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f01fc35a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190612fdf565b816007018190555060005b82811015610b9a57610aa582600701546040518060400160405280600860ff168152602001600560ff16815250846001018481548110610a9557610a94612f52565b5b906000526020600020015461219c565b60006006836001018381548110610abf57610abe612f52565b5b906000526020600020015481548110610adb57610ada612f52565b5b906000526020600020906008020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600780549050610b609190612f1e565b9080600181540180825580915050600190039060005260206000200160009091909190915055508080610b9290612f81565b915050610a52565b50505050565b610ba861211e565b610bb260006122b7565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60086020528160005260406000208181548110610bf957600080fd5b90600052602060002001600091509150505481565b610c1661211e565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b600060068681548110610d7857610d77612f52565b5b90600052602060002090600802019050600060078881548110610d9e57610d9d612f52565b5b906000526020600020906008020190506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634810bc5984600201546040518263ffffffff1660e01b8152600401610e0f91906126a5565b6101c060405180830381865afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190613223565b90508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc9061329d565b60405180910390fd5b60038360040160029054906101000a900460ff1660ff1610610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3390613309565b60405180910390fd5b81600101826002015481548110610f5657610f55612f52565b5b90600052602060002001548814610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9990613375565b60405180910390fd5b600380811115610fb557610fb4613395565b5b876003811115610fc857610fc7613395565b5b1415610fd357611e29565b60026003811115610fe757610fe6613395565b5b876003811115610ffa57610ff9613395565b5b141561178d576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b815260040161108f94939291906133f5565b606060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d091906134c3565b9050600260048111156110e6576110e5613395565b5b816040015160048111156110fd576110fc613395565b5b148061113157506003600481111561111857611117613395565b5b8160400151600481111561112f5761112e613395565b5b145b8061114357506000816020015160ff16145b611182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117990613562565b60405180910390fd5b6003600481111561119657611195613395565b5b816040015160048111156111ad576111ac613395565b5b1461127557600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b484600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a60026040518663ffffffff1660e01b81526004016112429594939291906135ca565b600060405180830381600087803b15801561125c57600080fd5b505af1158015611270573d6000803e3d6000fd5b505050505b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88876003016040518363ffffffff1660e01b81526004016112d79291906136b8565b6040805180830381865afa1580156112f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113179190613731565b905060018081111561132c5761132b613395565b5b88600181111561133f5761133e613395565b5b1415611777576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe89846040518363ffffffff1660e01b81526004016113a492919061375e565b6040805180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e49190613731565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88760070154846000015185602001518c6040518563ffffffff1660e01b815260040161145594939291906133f5565b606060405180830381865afa158015611472573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149691906134c3565b9050600260048111156114ac576114ab613395565b5b816040015160048111156114c3576114c2613395565b5b14806114f75750600360048111156114de576114dd613395565b5b816040015160048111156114f5576114f4613395565b5b145b8061150957506000816020015160ff16145b611548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153f906137f9565b60405180910390fd5b8192506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ef0441688600701546040518263ffffffff1660e01b81526004016115ac91906126a5565b600060405180830381865afa1580156115c9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115f29190613b12565b9050600281856000015160ff16815181106116105761160f612f52565b5b6020026020010151856020015160ff168151811061163157611630612f52565b5b60200260200101516000015160ff1611611680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167790613ba7565b60405180910390fd5b6003600481111561169457611693613395565b5b826040015160048111156116ab576116aa613395565b5b1461177357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b488600701548a60030160000160009054906101000a900460ff168b60030160000160019054906101000a900460ff168d60026040518663ffffffff1660e01b81526004016117409594939291906135ca565b600060405180830381600087803b15801561175a57600080fd5b505af115801561176e573d6000803e3d6000fd5b505050505b5050505b6117868460070154828c61219c565b5050611e28565b600060038111156117a1576117a0613395565b5b8760038111156117b4576117b3613395565b5b1415611abc576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b815260040161184994939291906133f5565b606060405180830381865afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a91906134c3565b9050600160048111156118a05761189f613395565b5b816040015160048111156118b7576118b6613395565b5b146118f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ee90613c13565b60405180910390fd5b61191382602001516060015160ff16826020015160ff1661237b565b15611ab657600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b484600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a60026040518663ffffffff1660e01b81526004016119a89594939291906135ca565b600060405180830381600087803b1580156119c257600080fd5b505af11580156119d6573d6000803e3d6000fd5b505050506001808111156119ed576119ec613395565b5b876001811115611a00576119ff613395565b5b1415611ab557611ab48360070154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe89886003016040518363ffffffff1660e01b8152600401611a6e9291906136b8565b6040805180830381865afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae9190613731565b8b61219c565b5b5b50611e27565b60016003811115611ad057611acf613395565b5b876003811115611ae357611ae2613395565b5b1415611deb576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b8152600401611b7894939291906133f5565b606060405180830381865afa158015611b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb991906134c3565b905060016004811115611bcf57611bce613395565b5b81604001516004811115611be657611be5613395565b5b14611c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1d90613c13565b60405180910390fd5b611c4282602001516080015160ff16826000015160ff1661237b565b15611de557600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b484600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a60036040518663ffffffff1660e01b8152600401611cd79594939291906135ca565b600060405180830381600087803b158015611cf157600080fd5b505af1158015611d05573d6000803e3d6000fd5b50505050600180811115611d1c57611d1b613395565b5b876001811115611d2f57611d2e613395565b5b1415611de457611de38360070154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe89886003016040518363ffffffff1660e01b8152600401611d9d9291906136b8565b6040805180830381865afa158015611db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddd9190613731565b8b61219c565b5b5b50611e26565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d90613c7f565b60405180910390fd5b5b5b5b82600401600281819054906101000a900460ff1680929190611e4a90613c9f565b91906101000a81548160ff021916908360ff1602179055505060038360040160029054906101000a900460ff1660ff1610611ef45760008360040160026101000a81548160ff021916908360ff16021790555060018260010180549050611eb19190612f1e565b82600201541015611edb57816002016000815480929190611ed190612f81565b9190505550611ef3565b611ee88260070154612499565b600082600201819055505b5b7f81f0468752500ded70032fadd8011a832ccdbaddfc2cae78738f1a5f78e5f49082600201548489604051611f2b93929190614c65565b60405180910390a1505050505050505050565b611f4661211e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fad90614d15565b60405180910390fd5b611fbf816122b7565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068181548110611ff857600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015490806003016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060040160029054906101000a900460ff16908060040160039054906101000a900460ff16908060070160009054906101000a900460ff16908060070160019054906101000a900460ff1690508a565b612126612529565b73ffffffffffffffffffffffffffffffffffffffff16612144610bb4565b73ffffffffffffffffffffffffffffffffffffffff161461219a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219190614d81565b60405180910390fd5b565b81600682815481106121b1576121b0612f52565b5b906000526020600020906008020160030160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663471b675984846000015185602001516040518463ffffffff1660e01b815260040161226e93929190614da1565b6020604051808303816000875af115801561228d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b19190614dd8565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd5e3c5d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190614e05565b60ff1690507f2729adc6efc811c2141edf691ce91423fbcd06f2d8fe8be0a13b24e47d1050c481858560405161244993929190614e32565b60405180910390a16001811415612464576000915050612493565b60038385836124739190614e69565b61247d9190614ec9565b131561248d576001915050612493565b60009150505b92915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358308aa8826040518263ffffffff1660e01b81526004016124f491906126a5565b600060405180830381600087803b15801561250e57600080fd5b505af1158015612522573d6000803e3d6000fd5b5050505050565b600033905090565b82805482825590600052602060002090810192821561256d579160200282015b8281111561256c578251825591602001919060010190612551565b5b50905061257a919061257e565b5090565b5b8082111561259757600081600090555060010161257f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125da826125af565b9050919050565b6125ea816125cf565b81146125f557600080fd5b50565b600081359050612607816125e1565b92915050565b6000819050919050565b6126208161260d565b811461262b57600080fd5b50565b60008135905061263d81612617565b92915050565b60008060006060848603121561265c5761265b6125a5565b5b600061266a868287016125f8565b935050602061267b8682870161262e565b925050604061268c868287016125f8565b9150509250925092565b61269f8161260d565b82525050565b60006020820190506126ba6000830184612696565b92915050565b6000819050919050565b60006126e56126e06126db846125af565b6126c0565b6125af565b9050919050565b60006126f7826126ca565b9050919050565b6000612709826126ec565b9050919050565b612719816126fe565b82525050565b60006020820190506127346000830184612710565b92915050565b6000602082840312156127505761274f6125a5565b5b600061275e8482850161262e565b91505092915050565b60008115159050919050565b61277c81612767565b82525050565b600060ff82169050919050565b61279881612782565b82525050565b6080820160008201516127b4600085018261278f565b5060208201516127c7602085018261278f565b5060408201516127da604085018261278f565b5060608201516127ed606085018261278f565b50505050565b6127fc816125cf565b82525050565b600061014082019050612818600083018a612773565b6128256020830189612696565b6128326040830188612696565b61283f6060830187612696565b61284c608083018661279e565b61285a6101008301856127f3565b612868610120830184612696565b98975050505050505050565b600060208201905061288960008301846127f3565b92915050565b600061289a826126ec565b9050919050565b6128aa8161288f565b82525050565b60006020820190506128c560008301846128a1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129008161260d565b82525050565b600061291283836128f7565b60208301905092915050565b6000602082019050919050565b6000612936826128cb565b61294081856128d6565b935061294b836128e7565b8060005b8381101561297c5781516129638882612906565b975061296e8361291e565b92505060018101905061294f565b5085935050505092915050565b600060208201905081810360008301526129a3818461292b565b905092915050565b60006129b6826126ec565b9050919050565b6129c6816129ab565b82525050565b60006020820190506129e160008301846129bd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a35826129ec565b810181811067ffffffffffffffff82111715612a5457612a536129fd565b5b80604052505050565b6000612a6761259b565b9050612a738282612a2c565b919050565b600067ffffffffffffffff821115612a9357612a926129fd565b5b602082029050602081019050919050565b600080fd5b6000612abc612ab784612a78565b612a5d565b90508083825260208201905060208402830185811115612adf57612ade612aa4565b5b835b81811015612b085780612af4888261262e565b845260208401935050602081019050612ae1565b5050509392505050565b600082601f830112612b2757612b266129e7565b5b8135612b37848260208601612aa9565b91505092915050565b60008060408385031215612b5757612b566125a5565b5b600083013567ffffffffffffffff811115612b7557612b746125aa565b5b612b8185828601612b12565b9250506020612b928582860161262e565b9150509250929050565b60008060408385031215612bb357612bb26125a5565b5b6000612bc1858286016125f8565b9250506020612bd28582860161262e565b9150509250929050565b600080600080600060a08688031215612bf857612bf76125a5565b5b6000612c06888289016125f8565b9550506020612c17888289016125f8565b9450506040612c28888289016125f8565b9350506060612c39888289016125f8565b9250506080612c4a888289016125f8565b9150509295509295909350565b60048110612c6457600080fd5b50565b600081359050612c7681612c57565b92915050565b60028110612c8957600080fd5b50565b600081359050612c9b81612c7c565b92915050565b60008060008060008060c08789031215612cbe57612cbd6125a5565b5b6000612ccc89828a0161262e565b9650506020612cdd89828a0161262e565b9550506040612cee89828a01612c67565b9450506060612cff89828a01612c8c565b9350506080612d1089828a0161262e565b92505060a0612d2189828a0161262e565b9150509295509295509295565b600060208284031215612d4457612d436125a5565b5b6000612d52848285016125f8565b91505092915050565b6000612d66826126ec565b9050919050565b612d7681612d5b565b82525050565b6000602082019050612d916000830184612d6d565b92915050565b604082016000820151612dad600085018261278f565b506020820151612dc0602085018261278f565b50505050565b612dcf81612782565b82525050565b600061016082019050612deb600083018d6127f3565b612df8602083018c6127f3565b612e05604083018b612696565b612e12606083018a612d97565b612e1f60a0830189612dc6565b612e2c60c0830188612dc6565b612e3960e0830187612dc6565b612e47610100830186612dc6565b612e55610120830185612773565b612e63610140830184612773565b9b9a5050505050505050505050565b600082825260208201905092915050565b7f4e6f74206c6f62627920636f6e74726163740000000000000000000000000000600082015250565b6000612eb9601283612e72565b9150612ec482612e83565b602082019050919050565b60006020820190508181036000830152612ee881612eac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f298261260d565b9150612f348361260d565b925082821015612f4757612f46612eef565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612f8c8261260d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fbf57612fbe612eef565b5b600182019050919050565b600081519050612fd981612617565b92915050565b600060208284031215612ff557612ff46125a5565b5b600061300384828501612fca565b91505092915050565b600080fd5b6000819050919050565b61302481613011565b811461302f57600080fd5b50565b6000815190506130418161301b565b92915050565b61305081612782565b811461305b57600080fd5b50565b60008151905061306d81613047565b92915050565b600060e082840312156130895761308861300c565b5b61309360e0612a5d565b905060006130a38482850161305e565b60008301525060206130b78482850161305e565b60208301525060406130cb8482850161305e565b60408301525060606130df8482850161305e565b60608301525060806130f38482850161305e565b60808301525060a06131078482850161305e565b60a08301525060c061311b8482850161305e565b60c08301525092915050565b61313081612767565b811461313b57600080fd5b50565b60008151905061314d81613127565b92915050565b60006101c0828403121561316a5761316961300c565b5b613175610100612a5d565b9050600061318584828501613032565b600083015250602061319984828501613073565b6020830152506101006131ae8482850161305e565b6040830152506101206131c38482850161305e565b6060830152506101406131d88482850161305e565b6080830152506101606131ed8482850161305e565b60a0830152506101806132028482850161313e565b60c0830152506101a06132178482850161313e565b60e08301525092915050565b60006101c0828403121561323a576132396125a5565b5b600061324884828501613153565b91505092915050565b7f53656e646572206e6f7420706c61796572206f776e6572000000000000000000600082015250565b6000613287601783612e72565b915061329282613251565b602082019050919050565b600060208201905081810360008301526132b68161327a565b9050919050565b7f4e6f20616374696f6e73206c6566740000000000000000000000000000000000600082015250565b60006132f3600f83612e72565b91506132fe826132bd565b602082019050919050565b60006020820190508181036000830152613322816132e6565b9050919050565b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000600082015250565b600061335f600d83612e72565b915061336a82613329565b602082019050919050565b6000602082019050818103600083015261338e81613352565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006133df6133da6133d584612782565b6126c0565b61260d565b9050919050565b6133ef816133c4565b82525050565b600060808201905061340a6000830187612696565b61341760208301866133e6565b61342460408301856133e6565b6134316060830184612696565b95945050505050565b6005811061344757600080fd5b50565b6000815190506134598161343a565b92915050565b6000606082840312156134755761347461300c565b5b61347f6060612a5d565b9050600061348f8482850161305e565b60008301525060206134a38482850161305e565b60208301525060406134b78482850161344a565b60408301525092915050565b6000606082840312156134d9576134d86125a5565b5b60006134e78482850161345f565b91505092915050565b7f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b600061354c602383612e72565b9150613557826134f0565b604082019050919050565b6000602082019050818103600083015261357b8161353f565b9050919050565b6005811061359357613592613395565b5b50565b60008190506135a482613582565b919050565b60006135b482613596565b9050919050565b6135c4816135a9565b82525050565b600060a0820190506135df6000830188612696565b6135ec60208301876133e6565b6135f960408301866133e6565b6136066060830185612696565b61361360808301846135bb565b9695505050505050565b60008160001c9050919050565b600060ff82169050919050565b600061364a6136458361361d565b61362a565b9050919050565b60008160081c9050919050565b600061367161366c83613651565b61362a565b9050919050565b60408201600080830154905061368d81613637565b61369a600086018261278f565b506136a48161365e565b6136b1602086018261278f565b5050505050565b60006060820190506136cd6000830185612696565b6136da6020830184613678565b9392505050565b6000604082840312156136f7576136f661300c565b5b6137016040612a5d565b905060006137118482850161305e565b60008301525060206137258482850161305e565b60208301525092915050565b600060408284031215613747576137466125a5565b5b6000613755848285016136e1565b91505092915050565b60006060820190506137736000830185612696565b6137806020830184612d97565b9392505050565b7f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b60006137e3602383612e72565b91506137ee82613787565b604082019050919050565b60006020820190508181036000830152613812816137d6565b9050919050565b600067ffffffffffffffff821115613834576138336129fd565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156138605761385f6129fd565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561388c5761388b6129fd565b5b602082029050919050565b60006138aa6138a584613871565b612a5d565b905080602084028301858111156138c4576138c3612aa4565b5b835b818110156138ed57806138d98882612fca565b8452602084019350506020810190506138c6565b5050509392505050565b600082601f83011261390c5761390b6129e7565b5b6004613919848285613897565b91505092915050565b600061012082840312156139395761393861300c565b5b61394360c0612a5d565b905060006139538482850161305e565b60008301525060206139678482850161305e565b602083015250604061397b848285016138f7565b60408301525060c061398f8482850161313e565b60608301525060e06139a38482850161313e565b6080830152506101006139b88482850161313e565b60a08301525092915050565b60006139d76139d284613845565b612a5d565b90508083825260208201905061012084028301858111156139fb576139fa612aa4565b5b835b81811015613a255780613a108882613922565b845260208401935050610120810190506139fd565b5050509392505050565b600082601f830112613a4457613a436129e7565b5b8151613a548482602086016139c4565b91505092915050565b6000613a70613a6b84613819565b612a5d565b90508083825260208201905060208402830185811115613a9357613a92612aa4565b5b835b81811015613ada57805167ffffffffffffffff811115613ab857613ab76129e7565b5b808601613ac58982613a2f565b85526020850194505050602081019050613a95565b5050509392505050565b600082601f830112613af957613af86129e7565b5b8151613b09848260208601613a5d565b91505092915050565b600060208284031215613b2857613b276125a5565b5b600082015167ffffffffffffffff811115613b4657613b456125aa565b5b613b5284828501613ae4565b91505092915050565b7f526f6f6d206e6f74206578706c6f726564000000000000000000000000000000600082015250565b6000613b91601183612e72565b9150613b9c82613b5b565b602082019050919050565b60006020820190508181036000830152613bc081613b84565b9050919050565b7f446f6f72206e6f7420636c6f7365640000000000000000000000000000000000600082015250565b6000613bfd600f83612e72565b9150613c0882613bc7565b602082019050919050565b60006020820190508181036000830152613c2c81613bf0565b9050919050565b7f4552524f523a2042616420616374696f6e20636f6e6669670000000000000000600082015250565b6000613c69601883612e72565b9150613c7482613c33565b602082019050919050565b60006020820190508181036000830152613c9881613c5c565b9050919050565b6000613caa82612782565b915060ff821415613cbe57613cbd612eef565b5b600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613cfc613cf78361361d565b613cc9565b9050919050565b613d0c816125cf565b82525050565b6000819050919050565b6000613d2f613d2a8361361d565b613d12565b9050919050565b604082016000808301549050613d4b81613637565b613d58600086018261278f565b50613d628161365e565b613d6f602086018261278f565b5050505050565b60008160101c9050919050565b6000613d96613d9183613d76565b61362a565b9050919050565b60008160181c9050919050565b6000613dbd613db883613d9d565b61362a565b9050919050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160201c9050919050565b6000613e15613e1083613df5565b61362a565b9050919050565b60008160281c9050919050565b6000613e3c613e3783613e1c565b61362a565b9050919050565b60008160301c9050919050565b6000613e63613e5e83613e43565b61362a565b9050919050565b60008160381c9050919050565b6000613e8a613e8583613e6a565b61362a565b9050919050565b60008160401c9050919050565b6000613eb1613eac83613e91565b61362a565b9050919050565b60008160481c9050919050565b6000613ed8613ed383613eb8565b61362a565b9050919050565b60008160501c9050919050565b6000613eff613efa83613edf565b61362a565b9050919050565b60008160581c9050919050565b6000613f26613f2183613f06565b61362a565b9050919050565b60008160601c9050919050565b6000613f4d613f4883613f2d565b61362a565b9050919050565b60008160681c9050919050565b6000613f74613f6f83613f54565b61362a565b9050919050565b60008160701c9050919050565b6000613f9b613f9683613f7b565b61362a565b9050919050565b60008160781c9050919050565b6000613fc2613fbd83613fa2565b61362a565b9050919050565b60008160801c9050919050565b6000613fe9613fe483613fc9565b61362a565b9050919050565b60008160881c9050919050565b600061401061400b83613ff0565b61362a565b9050919050565b60008160901c9050919050565b600061403761403283614017565b61362a565b9050919050565b60008160981c9050919050565b600061405e6140598361403e565b61362a565b9050919050565b60008160a01c9050919050565b600061408561408083614065565b61362a565b9050919050565b60008160a81c9050919050565b60006140ac6140a78361408c565b61362a565b9050919050565b60008160b01c9050919050565b60006140d36140ce836140b3565b61362a565b9050919050565b60008160b81c9050919050565b60006140fa6140f5836140da565b61362a565b9050919050565b60008160c01c9050919050565b600061412161411c83614101565b61362a565b9050919050565b60008160c81c9050919050565b600061414861414383614128565b61362a565b9050919050565b60008160d01c9050919050565b600061416f61416a8361414f565b61362a565b9050919050565b60008160d81c9050919050565b600061419661419183614176565b61362a565b9050919050565b60008160e01c9050919050565b60006141bd6141b88361419d565b61362a565b9050919050565b60008160e81c9050919050565b60006141e46141df836141c4565b61362a565b9050919050565b60008160f01c9050919050565b600061420b614206836141eb565b61362a565b9050919050565b60008160f81c9050919050565b600061423261422d83614212565b61362a565b9050919050565b600061424482613dc4565b61424e8185613dcf565b93508361425a84613de0565b6000600115614587575b836001602003820110156145865781546142868861428183613637565b61278f565b60208801975061429e886142998361365e565b61278f565b6020880197506142b6886142b183613d83565b61278f565b6020880197506142ce886142c983613daa565b61278f565b6020880197506142e6886142e183613e02565b61278f565b6020880197506142fe886142f983613e29565b61278f565b6020880197506143168861431183613e50565b61278f565b60208801975061432e8861432983613e77565b61278f565b6020880197506143468861434183613e9e565b61278f565b60208801975061435e8861435983613ec5565b61278f565b6020880197506143768861437183613eec565b61278f565b60208801975061438e8861438983613f13565b61278f565b6020880197506143a6886143a183613f3a565b61278f565b6020880197506143be886143b983613f61565b61278f565b6020880197506143d6886143d183613f88565b61278f565b6020880197506143ee886143e983613faf565b61278f565b6020880197506144068861440183613fd6565b61278f565b60208801975061441e8861441983613ffd565b61278f565b6020880197506144368861443183614024565b61278f565b60208801975061444e886144498361404b565b61278f565b6020880197506144668861446183614072565b61278f565b60208801975061447e8861447983614099565b61278f565b60208801975061449688614491836140c0565b61278f565b6020880197506144ae886144a9836140e7565b61278f565b6020880197506144c6886144c18361410e565b61278f565b6020880197506144de886144d983614135565b61278f565b6020880197506144f6886144f18361415c565b61278f565b60208801975061450e8861450983614183565b61278f565b60208801975061452688614521836141aa565b61278f565b60208801975061453e88614539836141d1565b61278f565b60208801975061455688614551836141f8565b61278f565b60208801975061456e886145698361421f565b61278f565b60208801975060018301925050602081019050614264565b5b600115614a72578154848210156145b7576145aa886145a583613637565b61278f565b6020880197506001820191505b848210156145de576145d1886145cc8361365e565b61278f565b6020880197506001820191505b84821015614605576145f8886145f383613d83565b61278f565b6020880197506001820191505b8482101561462c5761461f8861461a83613daa565b61278f565b6020880197506001820191505b84821015614653576146468861464183613e02565b61278f565b6020880197506001820191505b8482101561467a5761466d8861466883613e29565b61278f565b6020880197506001820191505b848210156146a1576146948861468f83613e50565b61278f565b6020880197506001820191505b848210156146c8576146bb886146b683613e77565b61278f565b6020880197506001820191505b848210156146ef576146e2886146dd83613e9e565b61278f565b6020880197506001820191505b84821015614716576147098861470483613ec5565b61278f565b6020880197506001820191505b8482101561473d576147308861472b83613eec565b61278f565b6020880197506001820191505b84821015614764576147578861475283613f13565b61278f565b6020880197506001820191505b8482101561478b5761477e8861477983613f3a565b61278f565b6020880197506001820191505b848210156147b2576147a5886147a083613f61565b61278f565b6020880197506001820191505b848210156147d9576147cc886147c783613f88565b61278f565b6020880197506001820191505b84821015614800576147f3886147ee83613faf565b61278f565b6020880197506001820191505b848210156148275761481a8861481583613fd6565b61278f565b6020880197506001820191505b8482101561484e576148418861483c83613ffd565b61278f565b6020880197506001820191505b84821015614875576148688861486383614024565b61278f565b6020880197506001820191505b8482101561489c5761488f8861488a8361404b565b61278f565b6020880197506001820191505b848210156148c3576148b6886148b183614072565b61278f565b6020880197506001820191505b848210156148ea576148dd886148d883614099565b61278f565b6020880197506001820191505b8482101561491157614904886148ff836140c0565b61278f565b6020880197506001820191505b848210156149385761492b88614926836140e7565b61278f565b6020880197506001820191505b8482101561495f576149528861494d8361410e565b61278f565b6020880197506001820191505b84821015614986576149798861497483614135565b61278f565b6020880197506001820191505b848210156149ad576149a08861499b8361415c565b61278f565b6020880197506001820191505b848210156149d4576149c7886149c283614183565b61278f565b6020880197506001820191505b848210156149fb576149ee886149e9836141aa565b61278f565b6020880197506001820191505b84821015614a2257614a1588614a10836141d1565b61278f565b6020880197506001820191505b84821015614a4957614a3c88614a37836141f8565b61278f565b6020880197506001820191505b84821015614a7057614a6388614a5e8361421f565b61278f565b6020880197506001820191505b505b8694505050505092915050565b600060ff82169050919050565b6000614a9f614a9a8361361d565b614a7f565b9050919050565b614aaf81612767565b82525050565b6000614ac8614ac383613651565b614a7f565b9050919050565b60006101a083016000808401549050614ae781613ce9565b614af46000870182613d03565b5060018401549050614b0581613ce9565b614b126020870182613d03565b5060028401549050614b2381613d1c565b614b3060408701826128f7565b5060038401614b426060870182613d36565b5060048401549050614b5381613637565b614b6060a087018261278f565b50614b6a8161365e565b614b7760c087018261278f565b50614b8181613d83565b614b8e60e087018261278f565b50614b9881613daa565b614ba661010087018261278f565b5060058401858303610120870152614bbe8382614239565b92505060068401858303610140870152614bd88382614239565b92505060078401549050614beb81614a8c565b614bf9610160870182614aa6565b50614c0381614ab5565b614c11610180870182614aa6565b50819250505092915050565b60048110614c2e57614c2d613395565b5b50565b6000819050614c3f82614c1d565b919050565b6000614c4f82614c31565b9050919050565b614c5f81614c44565b82525050565b6000606082019050614c7a6000830186612696565b8181036020830152614c8c8185614acf565b9050614c9b6040830184614c56565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614cff602683612e72565b9150614d0a82614ca3565b604082019050919050565b60006020820190508181036000830152614d2e81614cf2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614d6b602083612e72565b9150614d7682614d35565b602082019050919050565b60006020820190508181036000830152614d9a81614d5e565b9050919050565b6000606082019050614db66000830186612696565b614dc360208301856133e6565b614dd060408301846133e6565b949350505050565b600060208284031215614dee57614ded6125a5565b5b6000614dfc8482850161313e565b91505092915050565b600060208284031215614e1b57614e1a6125a5565b5b6000614e298482850161305e565b91505092915050565b6000606082019050614e476000830186612696565b614e546020830185612696565b614e616040830184612696565b949350505050565b6000614e748261260d565b9150614e7f8361260d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614eb457614eb3612eef565b5b828201905092915050565b6000819050919050565b6000614ed482614ebf565b9150614edf83614ebf565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614f1a57614f19612eef565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615614f5257614f51612eef565b5b82820390509291505056fea2646970667358221220de9256ac5c17d479040ed5c9cd0f3dbdbfbc3cc5649d423e6a2f5f4759ae22d364736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806368030c72116100a2578063e847ae1e11610071578063e847ae1e1461029c578063f0698699146102b8578063f2fde38b146102d4578063f7157f64146102f0578063f71d96cb1461030e5761010b565b806368030c7214610228578063715018a6146102445780638da5cb5b1461024e578063a99d2a8b1461026c5761010b565b80633838aed1116100de5780633838aed1146101b25780633deaec2b146101bc57806340d4fd78146101da5780635a29638d1461020a5761010b565b806308178b3c1461011057806310a2cd0d14610140578063117a5b901461015e578063336d7d7b14610194575b600080fd5b61012a60048036038101906101259190612643565b610347565b60405161013791906126a5565b60405180910390f35b6101486104a8565b604051610155919061271f565b60405180910390f35b6101786004803603810190610173919061273a565b6104ce565b60405161018b9796959493929190612802565b60405180910390f35b61019c6105cb565b6040516101a99190612874565b60405180910390f35b6101ba6105f1565b005b6101c4610649565b6040516101d191906128b0565b60405180910390f35b6101f460048036038101906101ef919061273a565b61066f565b6040516102019190612989565b60405180910390f35b610212610770565b60405161021f91906129cc565b60405180910390f35b610242600480360381019061023d9190612b40565b610796565b005b61024c610ba0565b005b610256610bb4565b6040516102639190612874565b60405180910390f35b61028660048036038101906102819190612b9c565b610bdd565b60405161029391906126a5565b60405180910390f35b6102b660048036038101906102b19190612bdc565b610c0e565b005b6102d260048036038101906102cd9190612ca1565b610d62565b005b6102ee60048036038101906102e99190612d2e565b611f3e565b005b6102f8611fc2565b6040516103059190612d7c565b60405180910390f35b6103286004803603810190610323919061273a565b611fe8565b60405161033e9a99989796959493929190612dd5565b60405180910390f35b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d090612ecf565b60405180910390fd5b600060066001816001815401808255809150500390600052602060002090600802019050848160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160020181905550600160068054905061049e9190612f1e565b9150509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600781815481106104de57600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900460ff1690806002015490806003015490806004015490806005016040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681526020016000820160039054906101000a900460ff1660ff1660ff1681525050908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070154905087565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105f961211e565b610601610bb4565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610646573d6000803e3d6000fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060006007838154811061068757610686612f52565b5b90600052602060002090600802016001018054905067ffffffffffffffff8111156106b5576106b46129fd565b5b6040519080825280602002602001820160405280156106e35781602001602082028036833780820191505090505b50905060005b8151811015610766576007848154811061070657610705612f52565b5b9060005260206000209060080201600101818154811061072957610728612f52565b5b906000526020600020015482828151811061074757610746612f52565b5b602002602001018181525050808061075e90612f81565b9150506106e9565b5080915050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081d90612ecf565b60405180910390fd5b60006007600181600181540180825580915050039060005260206000209060080201905060018160000160006101000a81548160ff0219169083151502179055506000816004018190555082816001019080519060200190610889929190612531565b508181600301819055506040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152508160050160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff160217905550905050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f01fc35a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190612fdf565b816007018190555060005b82811015610b9a57610aa582600701546040518060400160405280600860ff168152602001600560ff16815250846001018481548110610a9557610a94612f52565b5b906000526020600020015461219c565b60006006836001018381548110610abf57610abe612f52565b5b906000526020600020015481548110610adb57610ada612f52565b5b906000526020600020906008020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600780549050610b609190612f1e565b9080600181540180825580915050600190039060005260206000200160009091909190915055508080610b9290612f81565b915050610a52565b50505050565b610ba861211e565b610bb260006122b7565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60086020528160005260406000208181548110610bf957600080fd5b90600052602060002001600091509150505481565b610c1661211e565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b600060068681548110610d7857610d77612f52565b5b90600052602060002090600802019050600060078881548110610d9e57610d9d612f52565b5b906000526020600020906008020190506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634810bc5984600201546040518263ffffffff1660e01b8152600401610e0f91906126a5565b6101c060405180830381865afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190613223565b90508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc9061329d565b60405180910390fd5b60038360040160029054906101000a900460ff1660ff1610610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3390613309565b60405180910390fd5b81600101826002015481548110610f5657610f55612f52565b5b90600052602060002001548814610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9990613375565b60405180910390fd5b600380811115610fb557610fb4613395565b5b876003811115610fc857610fc7613395565b5b1415610fd357611e29565b60026003811115610fe757610fe6613395565b5b876003811115610ffa57610ff9613395565b5b141561178d576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b815260040161108f94939291906133f5565b606060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d091906134c3565b9050600260048111156110e6576110e5613395565b5b816040015160048111156110fd576110fc613395565b5b148061113157506003600481111561111857611117613395565b5b8160400151600481111561112f5761112e613395565b5b145b8061114357506000816020015160ff16145b611182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117990613562565b60405180910390fd5b6003600481111561119657611195613395565b5b816040015160048111156111ad576111ac613395565b5b1461127557600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b484600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a60026040518663ffffffff1660e01b81526004016112429594939291906135ca565b600060405180830381600087803b15801561125c57600080fd5b505af1158015611270573d6000803e3d6000fd5b505050505b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88876003016040518363ffffffff1660e01b81526004016112d79291906136b8565b6040805180830381865afa1580156112f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113179190613731565b905060018081111561132c5761132b613395565b5b88600181111561133f5761133e613395565b5b1415611777576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe89846040518363ffffffff1660e01b81526004016113a492919061375e565b6040805180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e49190613731565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88760070154846000015185602001518c6040518563ffffffff1660e01b815260040161145594939291906133f5565b606060405180830381865afa158015611472573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149691906134c3565b9050600260048111156114ac576114ab613395565b5b816040015160048111156114c3576114c2613395565b5b14806114f75750600360048111156114de576114dd613395565b5b816040015160048111156114f5576114f4613395565b5b145b8061150957506000816020015160ff16145b611548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153f906137f9565b60405180910390fd5b8192506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ef0441688600701546040518263ffffffff1660e01b81526004016115ac91906126a5565b600060405180830381865afa1580156115c9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115f29190613b12565b9050600281856000015160ff16815181106116105761160f612f52565b5b6020026020010151856020015160ff168151811061163157611630612f52565b5b60200260200101516000015160ff1611611680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167790613ba7565b60405180910390fd5b6003600481111561169457611693613395565b5b826040015160048111156116ab576116aa613395565b5b1461177357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b488600701548a60030160000160009054906101000a900460ff168b60030160000160019054906101000a900460ff168d60026040518663ffffffff1660e01b81526004016117409594939291906135ca565b600060405180830381600087803b15801561175a57600080fd5b505af115801561176e573d6000803e3d6000fd5b505050505b5050505b6117868460070154828c61219c565b5050611e28565b600060038111156117a1576117a0613395565b5b8760038111156117b4576117b3613395565b5b1415611abc576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b815260040161184994939291906133f5565b606060405180830381865afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a91906134c3565b9050600160048111156118a05761189f613395565b5b816040015160048111156118b7576118b6613395565b5b146118f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ee90613c13565b60405180910390fd5b61191382602001516060015160ff16826020015160ff1661237b565b15611ab657600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b484600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a60026040518663ffffffff1660e01b81526004016119a89594939291906135ca565b600060405180830381600087803b1580156119c257600080fd5b505af11580156119d6573d6000803e3d6000fd5b505050506001808111156119ed576119ec613395565b5b876001811115611a00576119ff613395565b5b1415611ab557611ab48360070154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe89886003016040518363ffffffff1660e01b8152600401611a6e9291906136b8565b6040805180830381865afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae9190613731565b8b61219c565b5b5b50611e27565b60016003811115611ad057611acf613395565b5b876003811115611ae357611ae2613395565b5b1415611deb576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b8152600401611b7894939291906133f5565b606060405180830381865afa158015611b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb991906134c3565b905060016004811115611bcf57611bce613395565b5b81604001516004811115611be657611be5613395565b5b14611c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1d90613c13565b60405180910390fd5b611c4282602001516080015160ff16826000015160ff1661237b565b15611de557600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b484600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a60036040518663ffffffff1660e01b8152600401611cd79594939291906135ca565b600060405180830381600087803b158015611cf157600080fd5b505af1158015611d05573d6000803e3d6000fd5b50505050600180811115611d1c57611d1b613395565b5b876001811115611d2f57611d2e613395565b5b1415611de457611de38360070154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe89886003016040518363ffffffff1660e01b8152600401611d9d9291906136b8565b6040805180830381865afa158015611db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddd9190613731565b8b61219c565b5b5b50611e26565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d90613c7f565b60405180910390fd5b5b5b5b82600401600281819054906101000a900460ff1680929190611e4a90613c9f565b91906101000a81548160ff021916908360ff1602179055505060038360040160029054906101000a900460ff1660ff1610611ef45760008360040160026101000a81548160ff021916908360ff16021790555060018260010180549050611eb19190612f1e565b82600201541015611edb57816002016000815480929190611ed190612f81565b9190505550611ef3565b611ee88260070154612499565b600082600201819055505b5b7f81f0468752500ded70032fadd8011a832ccdbaddfc2cae78738f1a5f78e5f49082600201548489604051611f2b93929190614c65565b60405180910390a1505050505050505050565b611f4661211e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fad90614d15565b60405180910390fd5b611fbf816122b7565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068181548110611ff857600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015490806003016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060040160029054906101000a900460ff16908060040160039054906101000a900460ff16908060070160009054906101000a900460ff16908060070160019054906101000a900460ff1690508a565b612126612529565b73ffffffffffffffffffffffffffffffffffffffff16612144610bb4565b73ffffffffffffffffffffffffffffffffffffffff161461219a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219190614d81565b60405180910390fd5b565b81600682815481106121b1576121b0612f52565b5b906000526020600020906008020160030160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663471b675984846000015185602001516040518463ffffffff1660e01b815260040161226e93929190614da1565b6020604051808303816000875af115801561228d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b19190614dd8565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd5e3c5d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190614e05565b60ff1690507f2729adc6efc811c2141edf691ce91423fbcd06f2d8fe8be0a13b24e47d1050c481858560405161244993929190614e32565b60405180910390a16001811415612464576000915050612493565b60038385836124739190614e69565b61247d9190614ec9565b131561248d576001915050612493565b60009150505b92915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358308aa8826040518263ffffffff1660e01b81526004016124f491906126a5565b600060405180830381600087803b15801561250e57600080fd5b505af1158015612522573d6000803e3d6000fd5b5050505050565b600033905090565b82805482825590600052602060002090810192821561256d579160200282015b8281111561256c578251825591602001919060010190612551565b5b50905061257a919061257e565b5090565b5b8082111561259757600081600090555060010161257f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125da826125af565b9050919050565b6125ea816125cf565b81146125f557600080fd5b50565b600081359050612607816125e1565b92915050565b6000819050919050565b6126208161260d565b811461262b57600080fd5b50565b60008135905061263d81612617565b92915050565b60008060006060848603121561265c5761265b6125a5565b5b600061266a868287016125f8565b935050602061267b8682870161262e565b925050604061268c868287016125f8565b9150509250925092565b61269f8161260d565b82525050565b60006020820190506126ba6000830184612696565b92915050565b6000819050919050565b60006126e56126e06126db846125af565b6126c0565b6125af565b9050919050565b60006126f7826126ca565b9050919050565b6000612709826126ec565b9050919050565b612719816126fe565b82525050565b60006020820190506127346000830184612710565b92915050565b6000602082840312156127505761274f6125a5565b5b600061275e8482850161262e565b91505092915050565b60008115159050919050565b61277c81612767565b82525050565b600060ff82169050919050565b61279881612782565b82525050565b6080820160008201516127b4600085018261278f565b5060208201516127c7602085018261278f565b5060408201516127da604085018261278f565b5060608201516127ed606085018261278f565b50505050565b6127fc816125cf565b82525050565b600061014082019050612818600083018a612773565b6128256020830189612696565b6128326040830188612696565b61283f6060830187612696565b61284c608083018661279e565b61285a6101008301856127f3565b612868610120830184612696565b98975050505050505050565b600060208201905061288960008301846127f3565b92915050565b600061289a826126ec565b9050919050565b6128aa8161288f565b82525050565b60006020820190506128c560008301846128a1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129008161260d565b82525050565b600061291283836128f7565b60208301905092915050565b6000602082019050919050565b6000612936826128cb565b61294081856128d6565b935061294b836128e7565b8060005b8381101561297c5781516129638882612906565b975061296e8361291e565b92505060018101905061294f565b5085935050505092915050565b600060208201905081810360008301526129a3818461292b565b905092915050565b60006129b6826126ec565b9050919050565b6129c6816129ab565b82525050565b60006020820190506129e160008301846129bd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a35826129ec565b810181811067ffffffffffffffff82111715612a5457612a536129fd565b5b80604052505050565b6000612a6761259b565b9050612a738282612a2c565b919050565b600067ffffffffffffffff821115612a9357612a926129fd565b5b602082029050602081019050919050565b600080fd5b6000612abc612ab784612a78565b612a5d565b90508083825260208201905060208402830185811115612adf57612ade612aa4565b5b835b81811015612b085780612af4888261262e565b845260208401935050602081019050612ae1565b5050509392505050565b600082601f830112612b2757612b266129e7565b5b8135612b37848260208601612aa9565b91505092915050565b60008060408385031215612b5757612b566125a5565b5b600083013567ffffffffffffffff811115612b7557612b746125aa565b5b612b8185828601612b12565b9250506020612b928582860161262e565b9150509250929050565b60008060408385031215612bb357612bb26125a5565b5b6000612bc1858286016125f8565b9250506020612bd28582860161262e565b9150509250929050565b600080600080600060a08688031215612bf857612bf76125a5565b5b6000612c06888289016125f8565b9550506020612c17888289016125f8565b9450506040612c28888289016125f8565b9350506060612c39888289016125f8565b9250506080612c4a888289016125f8565b9150509295509295909350565b60048110612c6457600080fd5b50565b600081359050612c7681612c57565b92915050565b60028110612c8957600080fd5b50565b600081359050612c9b81612c7c565b92915050565b60008060008060008060c08789031215612cbe57612cbd6125a5565b5b6000612ccc89828a0161262e565b9650506020612cdd89828a0161262e565b9550506040612cee89828a01612c67565b9450506060612cff89828a01612c8c565b9350506080612d1089828a0161262e565b92505060a0612d2189828a0161262e565b9150509295509295509295565b600060208284031215612d4457612d436125a5565b5b6000612d52848285016125f8565b91505092915050565b6000612d66826126ec565b9050919050565b612d7681612d5b565b82525050565b6000602082019050612d916000830184612d6d565b92915050565b604082016000820151612dad600085018261278f565b506020820151612dc0602085018261278f565b50505050565b612dcf81612782565b82525050565b600061016082019050612deb600083018d6127f3565b612df8602083018c6127f3565b612e05604083018b612696565b612e12606083018a612d97565b612e1f60a0830189612dc6565b612e2c60c0830188612dc6565b612e3960e0830187612dc6565b612e47610100830186612dc6565b612e55610120830185612773565b612e63610140830184612773565b9b9a5050505050505050505050565b600082825260208201905092915050565b7f4e6f74206c6f62627920636f6e74726163740000000000000000000000000000600082015250565b6000612eb9601283612e72565b9150612ec482612e83565b602082019050919050565b60006020820190508181036000830152612ee881612eac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f298261260d565b9150612f348361260d565b925082821015612f4757612f46612eef565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612f8c8261260d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fbf57612fbe612eef565b5b600182019050919050565b600081519050612fd981612617565b92915050565b600060208284031215612ff557612ff46125a5565b5b600061300384828501612fca565b91505092915050565b600080fd5b6000819050919050565b61302481613011565b811461302f57600080fd5b50565b6000815190506130418161301b565b92915050565b61305081612782565b811461305b57600080fd5b50565b60008151905061306d81613047565b92915050565b600060e082840312156130895761308861300c565b5b61309360e0612a5d565b905060006130a38482850161305e565b60008301525060206130b78482850161305e565b60208301525060406130cb8482850161305e565b60408301525060606130df8482850161305e565b60608301525060806130f38482850161305e565b60808301525060a06131078482850161305e565b60a08301525060c061311b8482850161305e565b60c08301525092915050565b61313081612767565b811461313b57600080fd5b50565b60008151905061314d81613127565b92915050565b60006101c0828403121561316a5761316961300c565b5b613175610100612a5d565b9050600061318584828501613032565b600083015250602061319984828501613073565b6020830152506101006131ae8482850161305e565b6040830152506101206131c38482850161305e565b6060830152506101406131d88482850161305e565b6080830152506101606131ed8482850161305e565b60a0830152506101806132028482850161313e565b60c0830152506101a06132178482850161313e565b60e08301525092915050565b60006101c0828403121561323a576132396125a5565b5b600061324884828501613153565b91505092915050565b7f53656e646572206e6f7420706c61796572206f776e6572000000000000000000600082015250565b6000613287601783612e72565b915061329282613251565b602082019050919050565b600060208201905081810360008301526132b68161327a565b9050919050565b7f4e6f20616374696f6e73206c6566740000000000000000000000000000000000600082015250565b60006132f3600f83612e72565b91506132fe826132bd565b602082019050919050565b60006020820190508181036000830152613322816132e6565b9050919050565b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000600082015250565b600061335f600d83612e72565b915061336a82613329565b602082019050919050565b6000602082019050818103600083015261338e81613352565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006133df6133da6133d584612782565b6126c0565b61260d565b9050919050565b6133ef816133c4565b82525050565b600060808201905061340a6000830187612696565b61341760208301866133e6565b61342460408301856133e6565b6134316060830184612696565b95945050505050565b6005811061344757600080fd5b50565b6000815190506134598161343a565b92915050565b6000606082840312156134755761347461300c565b5b61347f6060612a5d565b9050600061348f8482850161305e565b60008301525060206134a38482850161305e565b60208301525060406134b78482850161344a565b60408301525092915050565b6000606082840312156134d9576134d86125a5565b5b60006134e78482850161345f565b91505092915050565b7f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b600061354c602383612e72565b9150613557826134f0565b604082019050919050565b6000602082019050818103600083015261357b8161353f565b9050919050565b6005811061359357613592613395565b5b50565b60008190506135a482613582565b919050565b60006135b482613596565b9050919050565b6135c4816135a9565b82525050565b600060a0820190506135df6000830188612696565b6135ec60208301876133e6565b6135f960408301866133e6565b6136066060830185612696565b61361360808301846135bb565b9695505050505050565b60008160001c9050919050565b600060ff82169050919050565b600061364a6136458361361d565b61362a565b9050919050565b60008160081c9050919050565b600061367161366c83613651565b61362a565b9050919050565b60408201600080830154905061368d81613637565b61369a600086018261278f565b506136a48161365e565b6136b1602086018261278f565b5050505050565b60006060820190506136cd6000830185612696565b6136da6020830184613678565b9392505050565b6000604082840312156136f7576136f661300c565b5b6137016040612a5d565b905060006137118482850161305e565b60008301525060206137258482850161305e565b60208301525092915050565b600060408284031215613747576137466125a5565b5b6000613755848285016136e1565b91505092915050565b60006060820190506137736000830185612696565b6137806020830184612d97565b9392505050565b7f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b60006137e3602383612e72565b91506137ee82613787565b604082019050919050565b60006020820190508181036000830152613812816137d6565b9050919050565b600067ffffffffffffffff821115613834576138336129fd565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156138605761385f6129fd565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561388c5761388b6129fd565b5b602082029050919050565b60006138aa6138a584613871565b612a5d565b905080602084028301858111156138c4576138c3612aa4565b5b835b818110156138ed57806138d98882612fca565b8452602084019350506020810190506138c6565b5050509392505050565b600082601f83011261390c5761390b6129e7565b5b6004613919848285613897565b91505092915050565b600061012082840312156139395761393861300c565b5b61394360c0612a5d565b905060006139538482850161305e565b60008301525060206139678482850161305e565b602083015250604061397b848285016138f7565b60408301525060c061398f8482850161313e565b60608301525060e06139a38482850161313e565b6080830152506101006139b88482850161313e565b60a08301525092915050565b60006139d76139d284613845565b612a5d565b90508083825260208201905061012084028301858111156139fb576139fa612aa4565b5b835b81811015613a255780613a108882613922565b845260208401935050610120810190506139fd565b5050509392505050565b600082601f830112613a4457613a436129e7565b5b8151613a548482602086016139c4565b91505092915050565b6000613a70613a6b84613819565b612a5d565b90508083825260208201905060208402830185811115613a9357613a92612aa4565b5b835b81811015613ada57805167ffffffffffffffff811115613ab857613ab76129e7565b5b808601613ac58982613a2f565b85526020850194505050602081019050613a95565b5050509392505050565b600082601f830112613af957613af86129e7565b5b8151613b09848260208601613a5d565b91505092915050565b600060208284031215613b2857613b276125a5565b5b600082015167ffffffffffffffff811115613b4657613b456125aa565b5b613b5284828501613ae4565b91505092915050565b7f526f6f6d206e6f74206578706c6f726564000000000000000000000000000000600082015250565b6000613b91601183612e72565b9150613b9c82613b5b565b602082019050919050565b60006020820190508181036000830152613bc081613b84565b9050919050565b7f446f6f72206e6f7420636c6f7365640000000000000000000000000000000000600082015250565b6000613bfd600f83612e72565b9150613c0882613bc7565b602082019050919050565b60006020820190508181036000830152613c2c81613bf0565b9050919050565b7f4552524f523a2042616420616374696f6e20636f6e6669670000000000000000600082015250565b6000613c69601883612e72565b9150613c7482613c33565b602082019050919050565b60006020820190508181036000830152613c9881613c5c565b9050919050565b6000613caa82612782565b915060ff821415613cbe57613cbd612eef565b5b600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613cfc613cf78361361d565b613cc9565b9050919050565b613d0c816125cf565b82525050565b6000819050919050565b6000613d2f613d2a8361361d565b613d12565b9050919050565b604082016000808301549050613d4b81613637565b613d58600086018261278f565b50613d628161365e565b613d6f602086018261278f565b5050505050565b60008160101c9050919050565b6000613d96613d9183613d76565b61362a565b9050919050565b60008160181c9050919050565b6000613dbd613db883613d9d565b61362a565b9050919050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160201c9050919050565b6000613e15613e1083613df5565b61362a565b9050919050565b60008160281c9050919050565b6000613e3c613e3783613e1c565b61362a565b9050919050565b60008160301c9050919050565b6000613e63613e5e83613e43565b61362a565b9050919050565b60008160381c9050919050565b6000613e8a613e8583613e6a565b61362a565b9050919050565b60008160401c9050919050565b6000613eb1613eac83613e91565b61362a565b9050919050565b60008160481c9050919050565b6000613ed8613ed383613eb8565b61362a565b9050919050565b60008160501c9050919050565b6000613eff613efa83613edf565b61362a565b9050919050565b60008160581c9050919050565b6000613f26613f2183613f06565b61362a565b9050919050565b60008160601c9050919050565b6000613f4d613f4883613f2d565b61362a565b9050919050565b60008160681c9050919050565b6000613f74613f6f83613f54565b61362a565b9050919050565b60008160701c9050919050565b6000613f9b613f9683613f7b565b61362a565b9050919050565b60008160781c9050919050565b6000613fc2613fbd83613fa2565b61362a565b9050919050565b60008160801c9050919050565b6000613fe9613fe483613fc9565b61362a565b9050919050565b60008160881c9050919050565b600061401061400b83613ff0565b61362a565b9050919050565b60008160901c9050919050565b600061403761403283614017565b61362a565b9050919050565b60008160981c9050919050565b600061405e6140598361403e565b61362a565b9050919050565b60008160a01c9050919050565b600061408561408083614065565b61362a565b9050919050565b60008160a81c9050919050565b60006140ac6140a78361408c565b61362a565b9050919050565b60008160b01c9050919050565b60006140d36140ce836140b3565b61362a565b9050919050565b60008160b81c9050919050565b60006140fa6140f5836140da565b61362a565b9050919050565b60008160c01c9050919050565b600061412161411c83614101565b61362a565b9050919050565b60008160c81c9050919050565b600061414861414383614128565b61362a565b9050919050565b60008160d01c9050919050565b600061416f61416a8361414f565b61362a565b9050919050565b60008160d81c9050919050565b600061419661419183614176565b61362a565b9050919050565b60008160e01c9050919050565b60006141bd6141b88361419d565b61362a565b9050919050565b60008160e81c9050919050565b60006141e46141df836141c4565b61362a565b9050919050565b60008160f01c9050919050565b600061420b614206836141eb565b61362a565b9050919050565b60008160f81c9050919050565b600061423261422d83614212565b61362a565b9050919050565b600061424482613dc4565b61424e8185613dcf565b93508361425a84613de0565b6000600115614587575b836001602003820110156145865781546142868861428183613637565b61278f565b60208801975061429e886142998361365e565b61278f565b6020880197506142b6886142b183613d83565b61278f565b6020880197506142ce886142c983613daa565b61278f565b6020880197506142e6886142e183613e02565b61278f565b6020880197506142fe886142f983613e29565b61278f565b6020880197506143168861431183613e50565b61278f565b60208801975061432e8861432983613e77565b61278f565b6020880197506143468861434183613e9e565b61278f565b60208801975061435e8861435983613ec5565b61278f565b6020880197506143768861437183613eec565b61278f565b60208801975061438e8861438983613f13565b61278f565b6020880197506143a6886143a183613f3a565b61278f565b6020880197506143be886143b983613f61565b61278f565b6020880197506143d6886143d183613f88565b61278f565b6020880197506143ee886143e983613faf565b61278f565b6020880197506144068861440183613fd6565b61278f565b60208801975061441e8861441983613ffd565b61278f565b6020880197506144368861443183614024565b61278f565b60208801975061444e886144498361404b565b61278f565b6020880197506144668861446183614072565b61278f565b60208801975061447e8861447983614099565b61278f565b60208801975061449688614491836140c0565b61278f565b6020880197506144ae886144a9836140e7565b61278f565b6020880197506144c6886144c18361410e565b61278f565b6020880197506144de886144d983614135565b61278f565b6020880197506144f6886144f18361415c565b61278f565b60208801975061450e8861450983614183565b61278f565b60208801975061452688614521836141aa565b61278f565b60208801975061453e88614539836141d1565b61278f565b60208801975061455688614551836141f8565b61278f565b60208801975061456e886145698361421f565b61278f565b60208801975060018301925050602081019050614264565b5b600115614a72578154848210156145b7576145aa886145a583613637565b61278f565b6020880197506001820191505b848210156145de576145d1886145cc8361365e565b61278f565b6020880197506001820191505b84821015614605576145f8886145f383613d83565b61278f565b6020880197506001820191505b8482101561462c5761461f8861461a83613daa565b61278f565b6020880197506001820191505b84821015614653576146468861464183613e02565b61278f565b6020880197506001820191505b8482101561467a5761466d8861466883613e29565b61278f565b6020880197506001820191505b848210156146a1576146948861468f83613e50565b61278f565b6020880197506001820191505b848210156146c8576146bb886146b683613e77565b61278f565b6020880197506001820191505b848210156146ef576146e2886146dd83613e9e565b61278f565b6020880197506001820191505b84821015614716576147098861470483613ec5565b61278f565b6020880197506001820191505b8482101561473d576147308861472b83613eec565b61278f565b6020880197506001820191505b84821015614764576147578861475283613f13565b61278f565b6020880197506001820191505b8482101561478b5761477e8861477983613f3a565b61278f565b6020880197506001820191505b848210156147b2576147a5886147a083613f61565b61278f565b6020880197506001820191505b848210156147d9576147cc886147c783613f88565b61278f565b6020880197506001820191505b84821015614800576147f3886147ee83613faf565b61278f565b6020880197506001820191505b848210156148275761481a8861481583613fd6565b61278f565b6020880197506001820191505b8482101561484e576148418861483c83613ffd565b61278f565b6020880197506001820191505b84821015614875576148688861486383614024565b61278f565b6020880197506001820191505b8482101561489c5761488f8861488a8361404b565b61278f565b6020880197506001820191505b848210156148c3576148b6886148b183614072565b61278f565b6020880197506001820191505b848210156148ea576148dd886148d883614099565b61278f565b6020880197506001820191505b8482101561491157614904886148ff836140c0565b61278f565b6020880197506001820191505b848210156149385761492b88614926836140e7565b61278f565b6020880197506001820191505b8482101561495f576149528861494d8361410e565b61278f565b6020880197506001820191505b84821015614986576149798861497483614135565b61278f565b6020880197506001820191505b848210156149ad576149a08861499b8361415c565b61278f565b6020880197506001820191505b848210156149d4576149c7886149c283614183565b61278f565b6020880197506001820191505b848210156149fb576149ee886149e9836141aa565b61278f565b6020880197506001820191505b84821015614a2257614a1588614a10836141d1565b61278f565b6020880197506001820191505b84821015614a4957614a3c88614a37836141f8565b61278f565b6020880197506001820191505b84821015614a7057614a6388614a5e8361421f565b61278f565b6020880197506001820191505b505b8694505050505092915050565b600060ff82169050919050565b6000614a9f614a9a8361361d565b614a7f565b9050919050565b614aaf81612767565b82525050565b6000614ac8614ac383613651565b614a7f565b9050919050565b60006101a083016000808401549050614ae781613ce9565b614af46000870182613d03565b5060018401549050614b0581613ce9565b614b126020870182613d03565b5060028401549050614b2381613d1c565b614b3060408701826128f7565b5060038401614b426060870182613d36565b5060048401549050614b5381613637565b614b6060a087018261278f565b50614b6a8161365e565b614b7760c087018261278f565b50614b8181613d83565b614b8e60e087018261278f565b50614b9881613daa565b614ba661010087018261278f565b5060058401858303610120870152614bbe8382614239565b92505060068401858303610140870152614bd88382614239565b92505060078401549050614beb81614a8c565b614bf9610160870182614aa6565b50614c0381614ab5565b614c11610180870182614aa6565b50819250505092915050565b60048110614c2e57614c2d613395565b5b50565b6000819050614c3f82614c1d565b919050565b6000614c4f82614c31565b9050919050565b614c5f81614c44565b82525050565b6000606082019050614c7a6000830186612696565b8181036020830152614c8c8185614acf565b9050614c9b6040830184614c56565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614cff602683612e72565b9150614d0a82614ca3565b604082019050919050565b60006020820190508181036000830152614d2e81614cf2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614d6b602083612e72565b9150614d7682614d35565b602082019050919050565b60006020820190508181036000830152614d9a81614d5e565b9050919050565b6000606082019050614db66000830186612696565b614dc360208301856133e6565b614dd060408301846133e6565b949350505050565b600060208284031215614dee57614ded6125a5565b5b6000614dfc8482850161313e565b91505092915050565b600060208284031215614e1b57614e1a6125a5565b5b6000614e298482850161305e565b91505092915050565b6000606082019050614e476000830186612696565b614e546020830185612696565b614e616040830184612696565b949350505050565b6000614e748261260d565b9150614e7f8361260d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614eb457614eb3612eef565b5b828201905092915050565b6000819050919050565b6000614ed482614ebf565b9150614edf83614ebf565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614f1a57614f19612eef565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615614f5257614f51612eef565b5b82820390509291505056fea2646970667358221220de9256ac5c17d479040ed5c9cd0f3dbdbfbc3cc5649d423e6a2f5f4759ae22d364736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2692,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "roomTiles",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(RoomTileInterface)2574"
      },
      {
        "astId": 2695,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "chars",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(CharInterface)2583"
      },
      {
        "astId": 2698,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "utils",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(UtilsInterface)2627"
      },
      {
        "astId": 2701,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "maps",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MapInterface)2687"
      },
      {
        "astId": 2703,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "lobbiesAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2778,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "players",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Player)5764_storage)dyn_storage"
      },
      {
        "astId": 2782,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "games",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Game)5859_storage)dyn_storage"
      },
      {
        "astId": 2787,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "addressToGame",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)5859_storage)dyn_storage": {
        "base": "t_struct(Game)5859_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Player)5764_storage)dyn_storage": {
        "base": "t_struct(Player)5764_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Player[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CharInterface)2583": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)2687": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(RoomTileInterface)2574": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)2627": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(EventTracker)5783_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.EventTracker",
        "members": [
          {
            "astId": 5776,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "bugEvents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5778,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mysteryEvents",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5780,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "scavEvents",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5782,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "shipEvents",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)5859_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Game",
        "members": [
          {
            "astId": 5842,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5845,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "playerIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5847,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "currentPlayerTurnIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5849,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "numPlayers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5851,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "turnsTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5854,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventTracker",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(EventTracker)5783_storage"
          },
          {
            "astId": 5856,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapContract",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5858,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Player)5764_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Player",
        "members": [
          {
            "astId": 5738,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5740,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "charContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5742,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "characterId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5745,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "position",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Position)5788_storage"
          },
          {
            "astId": 5747,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "healthDmgTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 5749,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "armorDmgTaken",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 5751,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "actionsTaken",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 5753,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "dataTokens",
            "offset": 3,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 5756,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "currentEffects",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5759,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "inventoryIDs",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5761,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "canHarmOthers",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 5763,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "dead",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Position)5788_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 5785,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5787,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}