{
  "address": "0x0341b62C0D94158e2da49A336c461402Baf9eFCF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "StartLocation",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "row",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "col",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bcEvents",
      "outputs": [
        {
          "internalType": "contract EventsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debugRoomId",
          "type": "uint256"
        }
      ],
      "name": "debugMovePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_worldItemIds",
          "type": "uint256[]"
        }
      ],
      "name": "deleteWorldItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_free",
          "type": "bool"
        }
      ],
      "name": "endPlayerAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "playerIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "currentPlayerTurnIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numPlayers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "turnsTaken",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "bugEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "mysteryEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "scavEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "shipEvents",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.EventTracker",
              "name": "eventTracker",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "mapContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "mapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventNumber",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "eventPosition",
              "type": "tuple"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedBugEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedMysteryEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedScavEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedShipEvents",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct BCTypes.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "extGetGamePlayerIndexes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "extGetGamesOfPlayer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extGetNumGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "extGetWorldItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bcItemId",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.WorldItemStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            }
          ],
          "internalType": "struct BCTypes.WorldItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "extMovePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameIdToWorldItemIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "turnsTaken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bugEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mysteryEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scavEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shipEvents",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.EventTracker",
          "name": "eventTracker",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "mapContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eventPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eventNumber",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "eventPosition",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameWorldItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bcItemId",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.WorldItemStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            }
          ],
          "internalType": "struct BCTypes.WorldItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "placeWorldItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "players",
      "outputs": [
        {
          "internalType": "contract PlayersInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "resolveEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lobbiesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eventsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_playerIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debugRoomId",
          "type": "uint256"
        }
      ],
      "name": "startGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "worldItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bcItemId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.WorldItemStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2d35227f22d5a144543ee7f45775d261e926520d404901b799bc39dce32cae5",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x0341b62C0D94158e2da49A336c461402Baf9eFCF",
    "transactionIndex": 2,
    "gasUsed": "3043527",
    "logsBloom": "0x
    "blockHash": "0xbe169ae028ed23bc09a2c6c766be95ce7b10f472584e91a18ab34d73e2f1273d",
    "transactionHash": "0xb2d35227f22d5a144543ee7f45775d261e926520d404901b799bc39dce32cae5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 32421689,
        "transactionHash": "0xb2d35227f22d5a144543ee7f45775d261e926520d404901b799bc39dce32cae5",
        "address": "0x0341b62C0D94158e2da49A336c461402Baf9eFCF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xbe169ae028ed23bc09a2c6c766be95ce7b10f472584e91a18ab34d73e2f1273d"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 32421689,
        "transactionHash": "0xb2d35227f22d5a144543ee7f45775d261e926520d404901b799bc39dce32cae5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c8b61541786d10000000000000000000000000000000000000000000000001bc270e61a1a1241000000000000000000000000000000000000000000000dcec30694f420cc460e0000000000000000000000000000000000000000000000001ba5e584c6028b70000000000000000000000000000000000000000000000dcec323205574e3ccdf",
        "logIndex": 5,
        "blockHash": "0xbe169ae028ed23bc09a2c6c766be95ce7b10f472584e91a18ab34d73e2f1273d"
      }
    ],
    "blockNumber": 32421689,
    "cumulativeGasUsed": "3190387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e4fa0a5ba7575f2f162947b2f1a14db2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StartLocation\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcEvents\",\"outputs\":[{\"internalType\":\"contract EventsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debugRoomId\",\"type\":\"uint256\"}],\"name\":\"debugMovePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_worldItemIds\",\"type\":\"uint256[]\"}],\"name\":\"deleteWorldItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"endPlayerAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetGame\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"mapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedBugEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedMysteryEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedScavEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedShipEvents\",\"type\":\"uint256[]\"}],\"internalType\":\"struct BCTypes.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"extGetGamePlayerIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"extGetGamesOfPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extGetNumGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"extGetWorldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bcItemId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct BCTypes.WorldItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"extMovePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameIdToWorldItemIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"mapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGameWorldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bcItemId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct BCTypes.WorldItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"placeWorldItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"players\",\"outputs\":[{\"internalType\":\"contract PlayersInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"resolveEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lobbiesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eventsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debugRoomId\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"worldItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bcItemId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCGames.sol\":\"BCGames\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BCEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// Stores information for events that happen in a specific room or from a card\\n// TODO: Consider splitting this by event type\\n// TODO: CRITICAL -> Unit tests for event and effect validity\\ncontract BCEvents is Ownable {\\n\\n    enum EnemyPlacement { NONE, IN_ROOM, LAST_ROOM, ALL_ADJACENT }\\n    enum MovePlayer { NONE, HOME, LAST_ROOM, RANDOM, PORTAL, REACTOR }\\n    enum EnemyType { NONE, TURRET, ROBOT, SCAV, BUG }\\n    // ENEMY Types: 0 - turret, 1 - robot, 2 - scav, 3 - bug\\n\\n    enum EffectTypes {\\n        empty,\\n\\n        permanant,\\n        fullHealth,\\n        instantDeath,\\n        placeHazard,\\n        grantEgg,\\n\\n        healAmt,\\n        healArmorAmt,\\n        hazardDamage,\\n        physicalDamage,\\n\\n        numEnemyToPlace,\\n        enemyType,\\n        whereToPlace,\\n\\n        grantData,\\n        grantNumItems,\\n        takeNumItems,\\n        dropNumItems, // drop items in the room in unknown state\\n\\n        moveType,\\n        trapPlayerEscapeRoll,\\n        grantAbility,\\n\\n        loseTurn,\\n\\n        lockDoorStrength,\\n\\n        traitModifiersID\\n    }\\n\\n    // Effects are mapped by the effect type to an int:\\n    // CRITICAL:  1 == true, not present is false\\n    // Numbers are cast to enum as above\\n    // Uint effects are as normal\\n\\n    struct Effect {\\n        EffectTypes effect;\\n        uint value;\\n    }\\n\\n    struct BCEvent {\\n        // TODO: Only a one-time cost to put this here, probably leave for ease\\n        // TODO: Except there is probably a cost to read it from the chain, remove\\n        // TODO: and replace name and text with a unique ID\\n        // string name;\\n        // string text;\\n        uint id; // TODO: Eval system, for now X000NN is for cards and 2000NN is for tiles\\n        // TODO: Change below to a number to serve as turns allowed?\\n        bool permanent; // Draw card before use allowed.  As an action - both can be derived from this\\n                        // TODO: Permanent events conflict with and prevent card events in a room, this upsets balance!\\n        uint8 rollForLow;  // On or below (unused if zero)\\n        uint8 rollForHigh; // On or above (unused if zero)\\n                           // If both roll items are zero, player can choose any non\\n        Effect[] defaultEffect;  // TODO: Eval doing it this way vs. using index and storing in array\\n        Effect[] lowEffect;\\n        Effect[] highEffect;\\n    }\\n\\n    Effect[][] public effectsList; // Used to support creating empty Effects // TODO: Is this the best pattern?\\n\\n    BCEvent[] public bcRoomEvents;\\n\\n    BCEvent[] public bcBugCardEvents;\\n    BCEvent[] public bcMysteryCardEvents;\\n    BCEvent[] public bcScavCardEvents;\\n    BCEvent[] public bcShipCardEvents;\\n\\n    constructor() {\\n        effectsList.push(); // Push empty effect into [0], but this is probably unnecessary\\n        _initializeDefaultRoomEvents();\\n        _initializeDefaultRoomEvents_2();\\n        _initializeDefaultBugCardEvents();\\n        _initializeDefaultMysteryCardEvents();\\n        _initializeDefaultScavCardEvents();\\n        _initializeDefaultShipCardEvents();\\n    }\\n\\n    function extGetRoomEvent(uint _id) public view returns (BCEvent memory) {\\n        return bcRoomEvents[_id];\\n    }\\n\\n    function extGetCardEvent(uint _id, BCTypes.BCEventType _type) public view returns (BCEvent memory) {\\n        if(_type == BCTypes.BCEventType.BUG) {\\n            return bcBugCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.MYSTERY) {\\n            return bcMysteryCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SCAVENGER) {\\n            return bcScavCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SHIP_SECURITY) {\\n            return bcShipCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.NONE) {\\n            // Return an empty event\\n            // TODO: check for side effects of type\\n            return bcBugCardEvents[0];\\n        } else {\\n            console.log(\\\"Bad Event of type:\\\", uint(_type));\\n            revert(\\\"Bad event type\\\");\\n        }\\n    }\\n\\n    function extGetEffects(BCTypes.BCEventType _eventType, uint _id) public view returns (Effect[][] memory) {\\n        // TODO: Hardcoded length??\\n        Effect[][] memory currentEffects = new Effect[][](3);\\n        BCEvent storage currentEvent;\\n        if(_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcRoomEvents[_id];\\n        } else {\\n            if(_eventType == BCTypes.BCEventType.BUG) {\\n                currentEvent = bcBugCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.MYSTERY) {\\n                currentEvent = bcMysteryCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SCAVENGER) {\\n                currentEvent = bcScavCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                currentEvent = bcShipCardEvents[_id];\\n            } else {\\n                revert(\\\"Bad event type\\\");\\n            }\\n        }\\n\\n        currentEffects[0] = currentEvent.defaultEffect;\\n        // TODO: This is ineffecient if most effects don't have all three\\n        currentEffects[1] = currentEvent.lowEffect;\\n        currentEffects[2] = currentEvent.highEffect;\\n\\n        return currentEffects;\\n    }\\n\\n    // TODO: REFACTOR WHEN TRAIT MOD SYSTEM IMPLEMENTED!!!\\n    // For _effect 0 -> default, 1 -> low, 2-> high\\n    // function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) public view returns (BCTypes.Traits memory) {\\n    //     BCEvent storage currentEvent;\\n    //     if(_roomEvent) {\\n    //         currentEvent = bcRoomEvents[_id];\\n    //     } else {\\n    //         currentEvent = bcCardEvents[_id];\\n    //     }\\n\\n    //     if(_effect == 0) {\\n    //         return currentEvent.defaultEffect.traitModifiers;\\n    //     } else if (_effect == 1) {\\n    //         return currentEvent.lowEffect.traitModifiers;\\n    //     } else if (_effect == 2) {\\n    //         return currentEvent.highEffect.traitModifiers;\\n    //     } else {\\n    //         revert (\\\"Effect must be 0, 1, or 2\\\");\\n    //     }\\n    // }\\n\\n    function _initializeDefaultBugCardEvents() internal {\\n        // Effect[] storage emptyEffect = effectsList[0];\\n\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcBugCardEvents.push();\\n        noEvent.id = 0;\\n        // noEvent.permanent = false;\\n        // noEvent.rollForLow = 0;\\n        // noEvent.rollForHigh = 0;\\n\\n        // noEvent.defaultEffect = emptyEffect;\\n        // noEvent.lowEffect = emptyEffect;\\n        // noEvent.highEffect = emptyEffect;\\n\\n        // 1 There's Something in the Walls\\n        // TODO\\n        Effect[] storage somethingInWallsDefault = effectsList.push();\\n        somethingInWallsDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        somethingInWallsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        somethingInWallsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage somethingInWalls = bcBugCardEvents.push();\\n        somethingInWalls.id = 300001; // Bug events start with 3\\n        somethingInWalls.permanent = false;\\n        // somethingInWalls.rollForLow = 0;\\n        // somethingInWalls.rollForHigh = 0; //TODO: Can save gas/space not doing this, but less explicit\\n\\n        somethingInWalls.defaultEffect = somethingInWallsDefault;\\n        // somethingInWalls.lowEffect = emptyEffect;\\n        // somethingInWalls.highEffect = emptyEffect;\\n\\n        // 2 Something Bit Me // TODO: Appears not to hurt player\\n        Effect[] storage somethingBitMeDefault = effectsList.push();\\n        somethingBitMeDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n\\n        BCEvent storage somethingBitMe = bcBugCardEvents.push();\\n        somethingBitMe.id = 300002;\\n        somethingBitMe.permanent = false;\\n        // somethingBitMe.rollForLow = 0;\\n        // somethingBitMe.rollForHigh = 0;\\n\\n        somethingBitMe.defaultEffect = somethingBitMeDefault;\\n        // somethingBitMe.lowEffect = emptyEffect;\\n        // somethingBitMe.highEffect = emptyEffect;\\n\\n        // 3 Game Over Man, Game Over!\\n        // TODO\\n        Effect[] storage gameOverDefault = effectsList.push();\\n        gameOverDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage gameOver = bcBugCardEvents.push();\\n        gameOver.id = 300003;\\n        gameOver.permanent = false;\\n        // gameOver.rollForLow = 0;\\n        // gameOver.rollForHigh = 0;\\n\\n        gameOver.defaultEffect = gameOverDefault;\\n        // gameOver.lowEffect = emptyEffect;\\n        // gameOver.highEffect = emptyEffect;\\n\\n        // 4 Packrat\\n        Effect[] storage packratDefault = effectsList.push();\\n        packratDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage packrat = bcBugCardEvents.push();\\n        packrat.id = 300004;\\n        packrat.permanent = false;\\n        // packrat.rollForLow = 0;\\n        // packrat.rollForHigh = 0;\\n\\n        packrat.defaultEffect = packratDefault;\\n        // packrat.lowEffect = emptyEffect;\\n        // packrat.highEffect = emptyEffect;\\n\\n        // 5 What is this stuff?\\n        // TODO\\n        Effect[] storage whatIsThisDefault = effectsList.push();\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: Ignored by bugs\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: -1 to all rolls\\n\\n        BCEvent storage whatIsThis = bcBugCardEvents.push();\\n        whatIsThis.id = 300005;\\n        whatIsThis.permanent = false;\\n        // whatIsThis.rollForLow = 0;\\n        // whatIsThis.rollForHigh = 0;\\n\\n        whatIsThis.defaultEffect = whatIsThisDefault;\\n\\n        // 6 Packrat Nest\\n        // TODO\\n        Effect[] storage packratNestDefault = effectsList.push();\\n        packratNestDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage packratNest = bcBugCardEvents.push();\\n        packratNest.id = 300006;\\n        packratNest.permanent = false;\\n\\n        packratNest.defaultEffect = packratNestDefault;\\n\\n        // 7 Clever Girls\\n        // TODO\\n        Effect[] storage cleverGirlsDefault = effectsList.push();\\n        cleverGirlsDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        cleverGirlsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        cleverGirlsDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM)));\\n\\n        BCEvent storage cleverGirls = bcBugCardEvents.push();\\n        cleverGirls.id = 300007;\\n\\n        cleverGirls.defaultEffect = cleverGirlsDefault;\\n\\n        // 8 Warrior\\n        // TODO\\n        Effect[] storage warriorDefault = effectsList.push();\\n        warriorDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        warriorDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        warriorDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage warrior = bcBugCardEvents.push();\\n        warrior.id = 300008;\\n\\n        warrior.defaultEffect = warriorDefault;\\n\\n        // 9 Good Girl\\n        // TODO\\n        Effect[] storage goodGirlDefault = effectsList.push();\\n        goodGirlDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage goodGirl = bcBugCardEvents.push();\\n        goodGirl.id = 300009;\\n\\n        goodGirl.defaultEffect = goodGirlDefault;\\n\\n        // 10 What's that Smell?\\n        Effect[] storage whatsThatSmellDefault = effectsList.push();\\n        whatsThatSmellDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        whatsThatSmellDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage whatsThatSmell = bcBugCardEvents.push();\\n        whatsThatSmell.id = 300010;\\n\\n        whatsThatSmell.defaultEffect = whatsThatSmellDefault;\\n\\n        // 11 Spider's Web\\n        // TODO\\n        Effect[] storage spidersWebDefault = effectsList.push();\\n        spidersWebDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        spidersWebDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage spidersWebLow = effectsList.push();\\n        spidersWebLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        spidersWebLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage spidersWebHigh = effectsList.push();\\n        spidersWebHigh.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage spidersWeb = bcBugCardEvents.push();\\n        spidersWeb.id = 300011;\\n        spidersWeb.rollForLow = 1;\\n        spidersWeb.rollForHigh = 6;\\n\\n        spidersWeb.defaultEffect = spidersWebDefault;\\n        spidersWeb.lowEffect = spidersWebLow;\\n        spidersWeb.highEffect = spidersWebHigh;\\n\\n        // 12 Something is following me...\\n        // TODO\\n        Effect[] storage followingMeDefault = effectsList.push();\\n        followingMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        followingMeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        followingMeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM)));\\n\\n        BCEvent storage followingMe = bcBugCardEvents.push();\\n        followingMe.id = 300012;\\n\\n        followingMe.defaultEffect = followingMeDefault;\\n\\n        // 13 Sneak Attack\\n        Effect[] storage sneakAttackDefault = effectsList.push();\\n        sneakAttackDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        sneakAttackDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        sneakAttackDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage sneakAttack = bcBugCardEvents.push();\\n        sneakAttack.id = 300013;\\n\\n        sneakAttack.defaultEffect = sneakAttackDefault;\\n\\n        // 14 Feeding Time\\n        // TODO\\n        Effect[] storage feedingTimeDefault = effectsList.push();\\n        feedingTimeDefault.push(Effect(EffectTypes.dropNumItems, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        feedingTimeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage feedingTime = bcBugCardEvents.push();\\n        feedingTime.id = 300014;\\n\\n        feedingTime.defaultEffect = feedingTimeDefault;\\n\\n        // 15 Pardon m---aaaaah!\\n        Effect[] storage pardonMeDefault = effectsList.push();\\n        pardonMeDefault.push(Effect(EffectTypes.moveType, uint(MovePlayer.LAST_ROOM)));\\n        pardonMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        pardonMeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        pardonMeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage pardonMe = bcBugCardEvents.push();\\n        pardonMe.id = 300015;\\n\\n        pardonMe.defaultEffect = pardonMeDefault;\\n    }\\n\\n    function _initializeDefaultMysteryCardEvents() internal {\\n        BCEvent storage noEvent = bcMysteryCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 Mesmer\\n        Effect[] storage mesmerDefault = effectsList.push();\\n        mesmerDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage mesmer = bcMysteryCardEvents.push();\\n        mesmer.id = 400001;\\n\\n        mesmer.defaultEffect = mesmerDefault;\\n\\n        // 2 Portal\\n        // TODO\\n        Effect[] storage portalDefault = effectsList.push();\\n        portalDefault.push(Effect(EffectTypes.moveType, uint(MovePlayer.PORTAL)));\\n\\n        BCEvent storage portal = bcMysteryCardEvents.push();\\n        portal.id = 400002;\\n\\n        portal.defaultEffect = portalDefault;\\n\\n        // 3 The Kirk Method\\n        // TODO\\n        Effect[] storage kirkMethodDefault = effectsList.push();\\n        kirkMethodDefault.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        Effect[] storage kirkMethodLow = effectsList.push();\\n        kirkMethodLow.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        // TODO: Add ability -1 to all rolls\\n\\n        Effect[] storage kirkMethodHigh = effectsList.push();\\n        kirkMethodHigh.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodHigh.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage kirkMethod = bcMysteryCardEvents.push();\\n        kirkMethod.id = 400003;\\n\\n        kirkMethod.defaultEffect = kirkMethodDefault;\\n        kirkMethod.lowEffect = kirkMethodLow;\\n        kirkMethod.highEffect = kirkMethodHigh;\\n\\n        // 4 Brownie\\n        // TODO: This is a choice event, choices are not implemented\\n        Effect[] storage brownieDefault = effectsList.push();\\n\\n        BCEvent storage brownie = bcMysteryCardEvents.push();\\n        brownie.id = 400004;\\n\\n        brownie.defaultEffect = brownieDefault;\\n\\n        // 5 I gotta get out of here!\\n        // TODO\\n        Effect[] storage getOutDefault = effectsList.push();\\n        getOutDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        // getOutDefault.push(Effect()) // TODO: Move player to nearest window or reeval.  This would be expensive to bfs.\\n\\n        BCEvent storage getOut = bcMysteryCardEvents.push();\\n        getOut.id = 400005;\\n\\n        getOut.defaultEffect = getOutDefault;\\n\\n        // 6 Incident Boundry\\n        // TODO\\n        Effect[] storage incidentBoundryDefault = effectsList.push();\\n        incidentBoundryDefault.push(Effect(EffectTypes.physicalDamage, 1)); // TODO: Should armor prevent this?\\n\\n        BCEvent storage incidentBoundry = bcMysteryCardEvents.push();\\n        incidentBoundry.id = 400006;\\n\\n        incidentBoundry.defaultEffect = incidentBoundryDefault;\\n\\n        // 7 Fugue State\\n        // TODO: May need to replace this one, very complicated to implement, meaningless single player\\n        Effect[] storage fugueStateDefault = effectsList.push();\\n\\n        BCEvent storage fugueState = bcMysteryCardEvents.push();\\n        fugueState.id = 400007;\\n\\n        fugueState.defaultEffect = fugueStateDefault;\\n\\n        // 8 Horror\\n        // TODO: Another challenging event to implement, would need BFS and custom code to break doors, and move player there\\n        Effect[] storage horrorDefault = effectsList.push();\\n\\n        BCEvent storage horror = bcMysteryCardEvents.push();\\n        horror.id = 400008;\\n\\n        horror.defaultEffect = horrorDefault;\\n\\n        // 9 Voices\\n        // TODO\\n        Effect[] storage voicesDefault = effectsList.push();\\n\\n        BCEvent storage voices = bcMysteryCardEvents.push();\\n        voices.id = 400009;\\n\\n        voices.defaultEffect = voicesDefault;\\n\\n        // 10 The Lottery\\n        Effect[] storage lotteryDefault = effectsList.push();\\n\\n        Effect[] storage lotteryLow = effectsList.push();\\n        lotteryLow.push(Effect(EffectTypes.instantDeath, 1));\\n\\n        BCEvent storage lottery = bcMysteryCardEvents.push();\\n        lottery.id = 400010;\\n        lottery.rollForLow = 1;\\n\\n        lottery.defaultEffect = lotteryDefault;\\n        lottery.lowEffect = lotteryLow;\\n\\n        // 11 Missing Numbers\\n        // TODO\\n        Effect[] storage missingNumbersDefault = effectsList.push();\\n\\n        Effect[] storage missingNumbersLow = effectsList.push();\\n\\n        Effect[] storage missingNumbersHigh = effectsList.push();\\n\\n        BCEvent storage missingNumbers = bcMysteryCardEvents.push();\\n        missingNumbers.id = 400011;\\n        missingNumbers.rollForLow = 1;\\n        missingNumbers.rollForHigh = 6;\\n\\n        missingNumbers.defaultEffect = missingNumbersDefault;\\n        missingNumbers.lowEffect = missingNumbersLow;\\n        missingNumbers.highEffect = missingNumbersHigh;\\n\\n        // 12 Tesseract\\n        // TODO\\n        Effect[] storage tesseractDefault = effectsList.push();\\n        tesseractDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage tesseract = bcMysteryCardEvents.push();\\n        tesseract.id = 400012;\\n\\n        tesseract.defaultEffect = tesseractDefault;\\n\\n        // 13 Glitch In the Spaceship\\n        // TODO\\n        Effect[] storage glitchDefault = effectsList.push();\\n\\n        BCEvent storage glitch = bcMysteryCardEvents.push();\\n        glitch.id = 400013;\\n\\n        glitch.defaultEffect = glitchDefault;\\n\\n        // 14 Ephemeral Form\\n        // TODO\\n        Effect[] storage ephemeralFormDefault = effectsList.push();\\n\\n        BCEvent storage ephemeralForm = bcMysteryCardEvents.push();\\n        ephemeralForm.id = 400014;\\n\\n        ephemeralForm.defaultEffect = ephemeralFormDefault;\\n\\n        // 15 TISATAAFL\\n        // TODO\\n        Effect[] storage tisataaflDefault = effectsList.push();\\n        tisataaflDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        tisataaflDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        BCEvent storage tisataafl = bcMysteryCardEvents.push();\\n        tisataafl.id = 400015;\\n\\n        tisataafl.defaultEffect = tisataaflDefault;\\n    }\\n\\n    function _initializeDefaultScavCardEvents() internal {\\n        // 1 Crazed Prophet\\n        // TODO\\n        Effect[] storage crazedProphetDefault = effectsList.push();\\n        crazedProphetDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage crazedProphet = bcScavCardEvents.push();\\n        crazedProphet.id = 500001;\\n\\n        crazedProphet.defaultEffect = crazedProphetDefault;\\n\\n        // 2 Blackjack\\n        Effect[] storage blackjackDefault = effectsList.push();\\n        blackjackDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        blackjackDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage blackjack = bcScavCardEvents.push();\\n        blackjack.id = 500002;\\n\\n        blackjack.defaultEffect = blackjackDefault;\\n\\n        // 3 Toll\\n        // TODO\\n        Effect[] storage tollDefault = effectsList.push();\\n\\n        BCEvent storage toll = bcScavCardEvents.push();\\n        toll.id = 500003;\\n\\n        toll.defaultEffect = tollDefault;\\n\\n        // 4 Bear Trap\\n        // TODO: 2 dice, place enemy if free self failed\\n        Effect[] storage bearTrapDefault = effectsList.push();\\n        bearTrapDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage bearTrap = bcScavCardEvents.push();\\n        bearTrap.id = 500004;\\n\\n        bearTrap.defaultEffect = bearTrapDefault;\\n\\n        // 5 Cooking Badly\\n        Effect[] storage cookingBadlyDefault = effectsList.push();\\n        cookingBadlyDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage cookingBadly = bcScavCardEvents.push();\\n        cookingBadly.id = 500005;\\n\\n        cookingBadly.defaultEffect = cookingBadlyDefault;\\n\\n        // 6 Garbage Collection\\n        // TODO:\\n        Effect[] storage garbageCollectionDefault = effectsList.push();\\n        garbageCollectionDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage garbageCollection = bcScavCardEvents.push();\\n        garbageCollection.id = 500006;\\n\\n        garbageCollection.defaultEffect = garbageCollectionDefault;\\n\\n        // 7 You scratch my back... // TODO: Need variant for single player\\n                                    // Or just make it discard a card and draw a card\\n        // TODO:\\n        Effect[] storage scratchDefault = effectsList.push();\\n        scratchDefault.push(Effect(EffectTypes.takeNumItems, 1)); // TODO: Also need to implement picking an item to discard\\n        scratchDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage scratch = bcScavCardEvents.push();\\n        scratch.id = 500007;\\n\\n        scratch.defaultEffect = scratchDefault;\\n\\n        // 8 Bully\\n        // TODO: Choice\\n        Effect[] storage bullyDefault = effectsList.push();\\n\\n        BCEvent storage bully = bcScavCardEvents.push();\\n        bully.id = 500008;\\n\\n        bully.defaultEffect = bullyDefault;\\n\\n        // 9 Arm Rassling\\n        // TODO: Choice\\n        Effect[] storage armRasslingDefault = effectsList.push();\\n\\n        BCEvent storage armRassling = bcScavCardEvents.push();\\n        armRassling.id = 500009;\\n\\n        armRassling.defaultEffect = armRasslingDefault;\\n\\n        // 10 Hitman\\n        // TODO: Solo player variant, pick player to kill, pick discard\\n        Effect[] storage hitmanDefault = effectsList.push();\\n\\n        BCEvent storage hitman = bcScavCardEvents.push();\\n        hitman.id = 500010;\\n\\n        hitman.defaultEffect = hitmanDefault;\\n\\n        // 11 Mad Mel\\n        // TODO\\n        Effect[] storage madMelDefault = effectsList.push();\\n        madMelDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        madMelDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        madMelDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        madMelDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage madMel = bcScavCardEvents.push();\\n        madMel.id = 500011;\\n\\n        madMel.defaultEffect = madMelDefault;\\n\\n        // 12 Scavangus Interruptus\\n        // TODO\\n        Effect[] storage scavangusInterruptusDefault = effectsList.push();\\n        scavangusInterruptusDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        scavangusInterruptusDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        scavangusInterruptusDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM))));\\n\\n        BCEvent storage scavangusInterruptus = bcScavCardEvents.push();\\n        scavangusInterruptus.id = 500012;\\n\\n        scavangusInterruptus.defaultEffect = scavangusInterruptusDefault;\\n\\n        // 13 I'm sleeping here!\\n        // TODO\\n        Effect[] storage imSleepingDefault = effectsList.push();\\n        imSleepingDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        imSleepingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        imSleepingDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM))));\\n\\n        BCEvent storage imSleeping = bcScavCardEvents.push();\\n        imSleeping.id = 500013;\\n\\n        imSleeping.defaultEffect = imSleepingDefault;\\n\\n        // 14 I'm not following you!\\n        Effect[] storage notFollowingDefault = effectsList.push();\\n        notFollowingDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        notFollowingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notFollowingDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.LAST_ROOM))));\\n\\n        BCEvent storage notFollowing = bcScavCardEvents.push();\\n        notFollowing.id = 500014;\\n\\n        notFollowing.defaultEffect = notFollowingDefault;\\n\\n        // 15 You Are Not Alone\\n\\n        // TODO CRITICAL -> this event breaks the map\\n        Effect[] storage notAloneDefault = effectsList.push();\\n        notAloneDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        notAloneDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notAloneDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.ALL_ADJACENT))));\\n\\n        BCEvent storage notAlone = bcScavCardEvents.push();\\n        notAlone.id = 500015;\\n\\n        notAlone.defaultEffect = notAloneDefault;\\n    }\\n\\n    function _initializeDefaultShipCardEvents() internal {\\n        // TODO: Only 2 events spawns a sentry robot.  Evaluate.\\n        // Though saving murder bots for crisises is interesting too\\n\\n        BCEvent storage noEvent = bcShipCardEvents.push();\\n        noEvent.id = 600000;\\n\\n        // 1 Snitch\\n        // TODO: Need target player mechanism and place in that room\\n        Effect[] storage snitchDefault = effectsList.push();\\n\\n        BCEvent storage snitch = bcShipCardEvents.push();\\n        snitch.id = 600001;\\n\\n        snitch.defaultEffect = snitchDefault;\\n\\n        // 2 Alarm\\n        Effect[] storage alarmDefault = effectsList.push();\\n        alarmDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.ROBOT)));\\n        alarmDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        alarmDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage alarm = bcShipCardEvents.push();\\n        alarm.id = 600002;\\n\\n        alarm.defaultEffect = alarmDefault;\\n\\n        // 3 Lockdown\\n        // TODO: Need to permanantly lock the walls\\n        // For now, just locking the doors at strength 5\\n        Effect[] storage lockdownDefault = effectsList.push();\\n        lockdownDefault.push(Effect(EffectTypes.lockDoorStrength, 5));\\n\\n        BCEvent storage lockdown = bcShipCardEvents.push();\\n        lockdown.id = 600003;\\n\\n        lockdown.defaultEffect = lockdownDefault;\\n\\n        // 4 Vent the Ship\\n        Effect[] storage ventDefault = effectsList.push();\\n        ventDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        ventDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage vent = bcShipCardEvents.push();\\n        vent.id = 600004;\\n\\n        vent.defaultEffect = ventDefault;\\n\\n        // 5 Maintenance Hatch\\n        // TODO: Impelement hatch\\n        Effect[] storage hatchDefault = effectsList.push();\\n\\n        BCEvent storage hatch = bcShipCardEvents.push();\\n        hatch.id = 600005;\\n\\n        hatch.defaultEffect = hatchDefault;\\n\\n        // 6 Replicator\\n        // TODO: Need to track discarded/destroyed items\\n        // TODO: Allowing item duplicates or reviving dead items has major implications for UiF.  However, it would be super cool properly controlled!\\n        Effect[] storage replicatorDefault = effectsList.push();\\n        // TODO: For now, just granting an item\\n        replicatorDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage replicator = bcShipCardEvents.push();\\n        replicator.id = 600006;\\n\\n        replicator.defaultEffect = replicatorDefault;\\n\\n        // 7 First Aid Station\\n        Effect[] storage firstAidDefault = effectsList.push();\\n        firstAidDefault.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage firstAid = bcShipCardEvents.push();\\n        firstAid.id = 600007;\\n\\n        firstAid.defaultEffect = firstAidDefault;\\n\\n        // 8 ATM\\n        // TODO: Two Dice\\n        // TODO: Choice to walk away\\n        Effect[] storage atmDefault = effectsList.push();\\n\\n        Effect[] storage atmLow = effectsList.push();\\n        atmLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.TURRET)));\\n        atmLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        atmLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        // TODO: Add second high?\\n        Effect[] storage atmHigh = effectsList.push();\\n        atmHigh.push(Effect(EffectTypes.grantData, 2)); // Avg of 1 and 3\\n\\n        BCEvent storage atm = bcShipCardEvents.push();\\n        atm.id = 60008;\\n\\n        atm.defaultEffect = atmDefault;\\n        atm.lowEffect = atmLow;\\n        atm.highEffect = atmHigh;\\n\\n        // 9 Blooper Reel\\n        Effect[] storage blooperDefault = effectsList.push();\\n        blooperDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage blooper = bcShipCardEvents.push();\\n        blooper.id = 600009;\\n\\n        blooper.defaultEffect = blooperDefault;\\n\\n        // 10 Locker\\n        // TODO\\n        Effect[] storage lockerDefault = effectsList.push();\\n        lockerDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage locker = bcShipCardEvents.push();\\n        locker.id = 600010;\\n\\n        locker.defaultEffect = lockerDefault;\\n\\n        // 11 Contraband\\n        // TODO: CHOICE\\n        Effect[] storage contrabandDefault = effectsList.push();\\n\\n        BCEvent storage contraband = bcShipCardEvents.push();\\n        contraband.id = 600011;\\n\\n        contraband.defaultEffect = contrabandDefault;\\n\\n        // 12 Fire // TODO: This is identical to Vent the Ship!\\n        Effect[] storage fireDefault = effectsList.push();\\n        fireDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        fireDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage fire = bcShipCardEvents.push();\\n        fire.id = 600012;\\n\\n        fire.defaultEffect = fireDefault;\\n\\n        // 13 Janitorial Misconduct\\n        // TODO: Need ability to force dropping an item at a location\\n        Effect[] storage janitorialMisconductDefault = effectsList.push();\\n\\n        BCEvent storage janitorialMisconduct = bcShipCardEvents.push();\\n        janitorialMisconduct.id = 600013;\\n\\n        janitorialMisconduct.defaultEffect = janitorialMisconductDefault;\\n\\n        // 14 Target Acquired\\n        // TODO\\n        Effect[] storage targetAcquiredDefault = effectsList.push();\\n        targetAcquiredDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.TURRET)));\\n        targetAcquiredDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        targetAcquiredDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage targetAcquired = bcShipCardEvents.push();\\n        targetAcquired.id = 600014;\\n\\n        targetAcquired.defaultEffect = targetAcquiredDefault;\\n\\n        // 15 Security!\\n        // TODO\\n        Effect[] storage securityDefault = effectsList.push();\\n        securityDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.TURRET)));\\n        securityDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        securityDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage security = bcShipCardEvents.push();\\n        security.id = 600015;\\n\\n        security.defaultEffect = securityDefault;\\n    }\\n\\n    function _initializeDefaultRoomEvents() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcRoomEvents.push();\\n        noEvent.id = 0;\\n        noEvent.permanent = false;\\n        noEvent.rollForLow = 0;\\n        noEvent.rollForHigh = 0;\\n\\n        noEvent.defaultEffect = emptyEffect;\\n        noEvent.lowEffect = emptyEffect;\\n        noEvent.highEffect = emptyEffect;\\n\\n        // 1 Breached Reactor\\n        // Done\\n        Effect[] storage breachedReactorDefault = effectsList.push();\\n        breachedReactorDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        breachedReactorDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        BCEvent storage breachedReactor = bcRoomEvents.push();\\n        breachedReactor.id = 200001;\\n        breachedReactor.permanent = false;\\n        breachedReactor.rollForLow = 0;\\n        breachedReactor.rollForHigh = 0;\\n\\n        breachedReactor.defaultEffect = breachedReactorDefault;\\n        breachedReactor.lowEffect = emptyEffect;\\n        breachedReactor.highEffect = emptyEffect;\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Breached Reactor\\\",\\n    //         // \\\"As you enter the room, the reactor explodes!  Take 1 hazard damage.\\\",\\n    //         200001,\\n    //         false,\\n    //         0,\\n    //         0, // TODO:  Explore adding choices to these ones\\n    //         breachedReactorDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 2 Bug Nest\\n        // TODO\\n        Effect[] storage bugNestLow = effectsList.push();\\n        bugNestLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        bugNestLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        bugNestLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage bugNestHigh = effectsList.push();\\n        bugNestHigh.push(Effect(EffectTypes.grantEgg, 1)); // TRUE\\n\\n        BCEvent storage bugNest = bcRoomEvents.push();\\n        bugNest.id = 200002;\\n        bugNest.permanent = true; // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n        bugNest.rollForLow = 2;\\n        bugNest.rollForHigh = 6;\\n\\n        bugNest.defaultEffect = emptyEffect;\\n        bugNest.lowEffect = bugNestLow;\\n        bugNest.highEffect = bugNestHigh;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Bug Nest\\\",\\n    //         // \\\"As an action, attempt to harvest an egg.  Roll a die.  On a 6, take an egg token.  On a 1 or 2, take 1 physical damage and place a bug alien in the room.\\\",\\n    //         200002,\\n    //         true,  // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n    //         2,\\n    //         6,\\n    //         emptyEffect,\\n    //         bugNestLow,\\n    //         bugNestHigh\\n    //     ));\\n\\n        // 3 Crossroads\\n        // TODO\\n        Effect[] storage crossroadsDefault = effectsList.push();\\n        crossroadsDefault.push(Effect(EffectTypes.numEnemyToPlace, 3));\\n        crossroadsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        crossroadsDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage crossroads = bcRoomEvents.push();\\n        crossroads.id = 200003;\\n        crossroads.permanent = false;\\n        crossroads.rollForLow = 0;\\n        crossroads.rollForHigh = 0;\\n\\n        crossroads.defaultEffect = crossroadsDefault;\\n        crossroads.lowEffect = emptyEffect;\\n        crossroads.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Crossroads\\\",\\n    //         // \\\"You've crashed a party!  Place 3 scavengers in this room.\\\",\\n    //         200003,\\n    //         false,\\n    //         0,\\n    //         0,\\n\\n    //         crossroadsDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 4 Engineering Catwalk\\n        Effect[] storage catwalkDefault = effectsList.push();\\n        catwalkDefault.push(Effect(EffectTypes.moveType, uint(MovePlayer.REACTOR)));\\n\\n        BCEvent storage catwalk = bcRoomEvents.push();\\n        catwalk.id = 200004;\\n        catwalk.permanent = true;\\n        catwalk.rollForLow = 0;\\n        catwalk.rollForHigh = 0;\\n\\n        catwalk.defaultEffect = catwalkDefault;\\n        catwalk.lowEffect = emptyEffect;\\n        catwalk.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Engineering Catwalk\\\",\\n    //         // \\\"As an action, jump down to the Reactor Room, exploring if unexplored.\\\",\\n    //         200004,\\n    //         true,\\n    //         0,\\n    //         0,\\n    //         catwalkDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 5 Hull Breach\\n        // Done\\n        Effect[] storage hullBreachDefault = effectsList.push();\\n        hullBreachDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n\\n        Effect[] storage hullBreachLow = effectsList.push();\\n        hullBreachLow.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        hullBreachLow.push(Effect(EffectTypes.instantDeath, 1)); // TRUE\\n\\n        BCEvent storage hullBreach = bcRoomEvents.push();\\n        hullBreach.id = 200005;\\n        hullBreach.permanent = false;\\n        hullBreach.rollForLow = 1;\\n        hullBreach.rollForHigh = 0;\\n\\n        hullBreach.defaultEffect = hullBreachDefault;\\n        hullBreach.lowEffect = hullBreachLow;\\n        hullBreach.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Hull Breach\\\",\\n    //         // \\\"As you enter the room, a wall buckles and explodes into space!\\\",\\n    //         200005,\\n    //         false,\\n    //         1,\\n    //         0,\\n\\n    //         hullBreachDefault,\\n    //         hullBreachLow,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 6 Medbay\\n        // TODO: No hostiles in room\\n        // HACK:  Full health + heal amount 1 indicates heal to full health +1\\n        Effect[] storage medbayDefault = effectsList.push();\\n        medbayDefault.push(Effect(EffectTypes.fullHealth, 1)); // TRUE\\n\\n        BCEvent storage medbay = bcRoomEvents.push();\\n        medbay.id = 200006;\\n        medbay.permanent = true;\\n        medbay.rollForLow = 0;\\n        medbay.rollForHigh = 0;\\n\\n        medbay.defaultEffect = medbayDefault;\\n        medbay.lowEffect = emptyEffect;\\n        medbay.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Medbay\\\",\\n    //         // \\\"If there are no hostiles in this room, as an action, return to full health +1\\\",\\n    //         200006,\\n    //         true,\\n    //         0,\\n    //         0,\\n\\n    //         medbayDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n    }\\n\\n    function _initializeDefaultRoomEvents_2() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // 7 Showers\\n        // Done\\n        Effect[] storage showersDefault = effectsList.push();\\n        showersDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage showers = bcRoomEvents.push();\\n        showers.id = 200007;\\n        showers.permanent = false;\\n        showers.rollForLow = 0;\\n        showers.rollForHigh = 0;\\n\\n        showers.defaultEffect = showersDefault;\\n        showers.lowEffect = emptyEffect;\\n        showers.highEffect = emptyEffect;\\n\\n        //     bcRoomEvents.push(BCEvent(\\n        //     // \\\"Showers\\\",\\n        //     // \\\"As you explore this room, a horde of small bugs emerge from the drains.  They get inside your suit, biiting and stinging.  Take 1 hazard damage.\\\",\\n        //     200007,\\n        //     false,\\n        //     0,\\n        //     0,\\n\\n        //     showersDefault,\\n        //     emptyEffect,\\n        //     emptyEffect\\n        // ));\\n\\n        // 8 Trash Compactor\\n        // TODO - Locking doors is done, crushing players and items is not\\n        Effect[] storage trashCompactorDefault = effectsList.push();\\n        trashCompactorDefault.push(Effect(EffectTypes.lockDoorStrength, 4));\\n\\n        BCEvent storage trashCompactor = bcRoomEvents.push();\\n        trashCompactor.id = 200008;\\n        trashCompactor.permanent = false;\\n        trashCompactor.rollForLow = 0;\\n        trashCompactor.rollForHigh = 0;\\n\\n        trashCompactor.defaultEffect = trashCompactorDefault;\\n        trashCompactor.lowEffect = emptyEffect;\\n        trashCompactor.highEffect = emptyEffect;\\n\\n        // bcRoomEvents.push(BCEvent(\\n        //     // \\\"Trash Compactor\\\",\\n        //     // \\\"As you enter, the doors slam shut and the trash compactor comes to life!  In three turns, everything in the room will be destroyed!\\\",\\n        //     200008,\\n        //     false,\\n        //     0,\\n        //     0,\\n\\n        //     trashCompactorDefault,\\n        //     emptyEffect,\\n        //     emptyEffect\\n        // ));\\n\\n        // 9 Ship Services\\n        // TODO: Let player select which services to use.\\n        // TODO\\n        Effect[] storage shipServicesDefault = effectsList.push();\\n        shipServicesDefault.push(Effect(EffectTypes.fullHealth, 0)); // TODO: Prevent this from stripping extra health\\n        // TODO: Sell items to company\\n        // TODO: Buy items from company (only multiplayer?)\\n\\n        BCEvent storage shipServices = bcRoomEvents.push();\\n        shipServices.id = 200009;\\n        shipServices.permanent = true;\\n\\n        shipServices.defaultEffect = shipServicesDefault;\\n    }\\n}\\n\",\"keccak256\":\"0x9439d2f05d1728ff385d6e2bbbc8a1dfe22c853abac4eb3e357c88245c334ee7\",\"license\":\"UNLICENSED\"},\"contracts/BCGames.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCEvents.sol\\\";\\n// import \\\"./BCMaps.sol\\\";\\n\\n\\n// TODO: _Probably_ don't need explicit interfaces since I have the source contracts\\n// TODO: Also explore putting all interfaces in one contract and importing.\\n// TODO: Can also save a handful of bytes by directly calling ones that don't return a struct\\n// But having them lets me return structs whole\\ninterface EventsInterface {\\n    function extGetRoomEvent(uint _id) external view returns (BCEvents.BCEvent memory);\\n    function extGetCardEvent(uint _id) external view returns (BCEvents.BCEvent memory);\\n    function extGetEffects(bool _roomEvent, uint _id) external view returns (BCEvents.Effect[][] memory);\\n    function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) external view returns (BCTypes.Traits memory);\\n}\\n\\ninterface CharInterface {\\n    function characters(uint _id) external view returns(BCTypes.Character memory);\\n    function incrementCloneNumber(uint _charId) external;\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    // function roll() external returns (uint8);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n    function debugBuildMapOneRoom(uint _roomId) external returns(uint);\\n    // function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) external view returns (BCTypes.GameTile memory);\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) external view returns (BCTypes.Door memory);\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status, uint _strength) external;\\n    function discoverRoom(uint _mapId, uint _row, uint _col, uint debugRoomId) external returns (uint);\\n    function resetOpenDoors(uint _mapId) external;\\n    function extGetRoom(uint _mapId, uint _row, uint _col) external view returns(BCTypes.RoomTile memory);\\n    function extGetRoomById(uint _mapId, uint _roomId) external view returns (BCTypes.RoomTile memory);\\n    function extSetHazardStatus(uint _mapId, uint _row, uint _col, bool _hasHazard) external;\\n    function extSpreadHazards(uint _mapId, uint _distance) external;\\n}\\n\\ninterface ItemsInterface {\\n    function getItemIDsByPlayer(uint _playerID) external view returns (uint[] memory);\\n    function destroyItem(uint _itemId) external;\\n}\\n\\ninterface PlayersInterface {\\n    function extChooseEffect(uint _choice, uint _eventPlayerId, uint _gameId, uint _mapId, BCTypes.Position memory _position, uint _eventNumber, BCTypes.BCEventType _eventType) external;\\n    function extMovePlayer(BCTypes.Position memory _position, uint _playerId, uint _mapId) external returns (bool);\\n    // function extHurtPlayer(uint _playerId, uint _amount, bool _hazard, uint _mapId) external;\\n    function extGetPlayerOwner(uint _id) external view returns (address);\\n    function applyHazardDamage(uint _mapId, uint[] memory _players) external;\\n    function resetPlayerActions(uint _playerId) external;\\n    function incrementPlayerActions(uint _playerId) external;\\n    function extGetPlayer(uint _id) external view returns(BCTypes.Player memory);\\n}\\n\\ncontract BCGames is Ownable {\\n    // TODO: Where is right place for these???\\n    // TODO: Go back to matching name of contract?\\n    CharInterface public chars;\\n    UtilsInterface public utils;\\n    MapInterface public maps;\\n    EventsInterface public bcEvents;\\n    ItemsInterface public items;\\n    PlayersInterface public players;\\n\\n    address public lobbiesAddress;\\n    address public charsAddress;\\n    address public actionsAddress;\\n\\n    // BCChars bcChars;\\n    // Maps bcMaps;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _utilsAddress,\\n        address _mapsAddress,\\n        address _lobbiesAddress,\\n        address _actionsAddress,\\n        address _eventsAddress,\\n        address _itemsAddress,\\n        address _playersAddress)\\n        public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        // bcChars = BCChars(_charAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        maps = MapInterface(_mapsAddress);\\n        // bcMaps = Maps(_mapsAddress);\\n        lobbiesAddress = _lobbiesAddress;\\n        actionsAddress = _actionsAddress;\\n        bcEvents = EventsInterface(_eventsAddress);\\n        items = ItemsInterface(_itemsAddress);\\n        players = PlayersInterface(_playersAddress);\\n    }\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3;\\n\\n    uint8 constant SPACE_ROOM = 0;\\n\\n    BCTypes.Position public StartLocation = BCTypes.Position(10, 6); // TODO: duped on maps\\n\\n    BCTypes.Game[] public games;\\n    BCTypes.WorldItem[] public worldItems;\\n    mapping(uint=>uint[]) public gameIdToWorldItemIds;\\n\\n    mapping (address => uint[]) public addressToGame;\\n\\n    constructor() {\\n        // TODO: CRITICAL!!! BURN PLAYER 0\\n    }\\n\\n    function startGame(uint[] memory _playerIndexes, uint _numPlayers, uint _debugRoomId) public returns (uint) {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        // TODO: Add turn and overall time limits for game\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n        BCTypes.Game storage newGame = games.push();\\n        newGame.active = true;\\n        newGame.turnsTaken = 0;\\n        newGame.playerIndexes = _playerIndexes;\\n        newGame.numPlayers = _numPlayers;\\n        newGame.eventTracker = BCTypes.EventTracker(0, 0, 0, 0);\\n\\n        newGame.mapContract = address(maps);\\n\\n        // TODO: CRITICAL -> Remove DEBUG\\n        if (_debugRoomId == 0) {\\n            newGame.mapId = maps.createMap();\\n        } else {\\n            newGame.mapId = maps.debugBuildMapOneRoom(_debugRoomId);\\n        }\\n        // Move the players to the start // TODO: Hardcoded\\n        // And map the owners to this game\\n        for (uint i = 0; i <= _numPlayers-1; i++) {\\n            // Warning: using _movePlayer here will attempt to discover, etc.\\n            _movePlayer(newGame.mapId, StartLocation, newGame.playerIndexes[i], 0);\\n            address joiner = players.extGetPlayerOwner(_playerIndexes[i]);\\n            addressToGame[joiner].push(games.length-1);\\n        }\\n\\n        // Create trackers for card events (this is pass by value)\\n        uint[15] memory unusedArr = [uint(1), 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\\n        newGame.unusedBugEvents = unusedArr;\\n        newGame.unusedMysteryEvents = unusedArr;\\n        newGame.unusedScavEvents = unusedArr;\\n        newGame.unusedShipEvents = unusedArr;\\n\\n        // TODO DEAL WITH ITEMS\\n\\n        // TODO: Player who pays to start gets to go first?\\n        // TODO: Event\\n        return games.length-1;\\n    }\\n                                        // TODO: Will be used to add choice later, ie drop items but no risk of death\\n    function resolveEvent(uint _gameId, uint _choice) public {\\n        // TODO: CRITICAL -> Require msg.sender to be player owner\\n        BCTypes.Game storage eventGame = games[_gameId];\\n        players.extChooseEffect(_choice, eventGame.eventPlayerId, _gameId, eventGame.mapId, eventGame.eventPosition, eventGame.eventNumber, eventGame.eventType);\\n\\n        eventGame.eventPlayerId = 0;\\n        eventGame.eventNumber = 0;\\n        eventGame.eventType = BCTypes.BCEventType.NONE; // TODO: Could save gas by not writing this\\n    }\\n\\n    function endPlayerAction(uint _gameId, uint _playerId, bool _free) public {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract\\\");\\n\\n        if(!_free) {\\n            players.incrementPlayerActions(_playerId);\\n        }\\n\\n        BCTypes.Player memory currentPlayer = players.extGetPlayer(_playerId);\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        // TODO: Revise this to handle manual passing the turn\\n        if (currentPlayer.actionsTaken >= DEFAULT_ACTIONS_NUM) {\\n            // TODO: Get items and abilities for actions\\n            // TODO: This will prevent free actions after last\\n            // TODO: Add FE and BE mechanisim to have a default checkbox \\\"Pass the turn\\\"\\n            players.resetPlayerActions(_playerId);\\n            if (currentGame.currentPlayerTurnIndex < currentGame.playerIndexes.length-1) {\\n                currentGame.currentPlayerTurnIndex++;\\n            } else {\\n                _endPlayerRound(_gameId, currentGame.mapId);\\n                currentGame.currentPlayerTurnIndex = 0;\\n            }\\n        }\\n    }\\n\\n    // Item IDs, NOT worldItem ids!!!\\n    function placeWorldItems(uint _gameId, uint[] memory _itemIds, uint _row, uint _col) public {\\n        for(uint i = 0; i < _itemIds.length; i++) {\\n            BCTypes.WorldItem storage worldItem = worldItems.push();\\n            worldItem.gameId = _gameId;\\n            worldItem.bcItemId = _itemIds[i];\\n            worldItem.status = BCTypes.WorldItemStatus.KNOWN;\\n            worldItem.position = BCTypes.Position(uint8(_row), uint8(_col));\\n            gameIdToWorldItemIds[_gameId].push(worldItems.length-1);\\n        }\\n    }\\n\\n    // Item IDs, NOT worldItem ids!!!\\n    function getGameWorldItems(uint _gameId) public view returns (BCTypes.WorldItem[] memory) {\\n        BCTypes.WorldItem[] memory gameWorldItems = new BCTypes.WorldItem[](gameIdToWorldItemIds[_gameId].length);\\n\\n        for(uint i = 0; i < gameWorldItems.length; i++) {\\n            gameWorldItems[i] = worldItems[gameIdToWorldItemIds[_gameId][i]];\\n        }\\n\\n        return gameWorldItems;\\n    }\\n\\n    function deleteWorldItems(uint[] calldata _worldItemIds) public {\\n        // TODO: CRITICAL -> Validate security.  Make sure this can't delete wrong items\\n\\n        require(msg.sender == address(items), \\\"Not items contract\\\");\\n        for(uint i = 0; i < _worldItemIds.length; i++) {\\n            delete worldItems[_worldItemIds[i]];\\n        }\\n    }\\n\\n    function _endPlayerRound(uint _gameId, uint _mapId) internal {\\n        // TODO: All denizen logic\\n        BCTypes.Game storage currentGame = games[_gameId];\\n        // TODO: Consider shuffling the index here\\n\\n        maps.resetOpenDoors(_mapId);\\n        // TODO: Add ability to change distance for endgame\\n        maps.extSpreadHazards(_mapId, 1);\\n        // TODO: Hazards should damage denizens\\n\\n        players.applyHazardDamage(currentGame.mapId, currentGame.playerIndexes);\\n    }\\n\\n    function extMovePlayer(uint _gameId, BCTypes.Position memory _position, uint _playerId) public {\\n        require((msg.sender == actionsAddress || msg.sender == address(players)), \\\"Not actions/players contract\\\");\\n        _movePlayer(_gameId, _position, _playerId, 0);\\n    }\\n\\n    function debugMovePlayer(uint _gameId, BCTypes.Position memory _position, uint _playerId, uint _debugRoomId) public {\\n        require(msg.sender == owner(), \\\"Not owner\\\");\\n        _movePlayer(_gameId, _position, _playerId, _debugRoomId);\\n    }\\n\\n    function _movePlayer(uint _gameId, BCTypes.Position memory _position, uint _playerId, uint _debugRoomId) internal {\\n        // extMovePlayer returns true if the player was killed by moving into space\\n        if(!players.extMovePlayer(_position, _playerId, games[_gameId].mapId)) {\\n            // Discover room and process event, if undiscovered\\n            // If roomId is returned by maps.discoverRoom as 0, room was already discovered (it's not a space tile)\\n            // TODO: This is confusing, should not use 0 here to indicate not to trigger event\\n            uint discoveredRoomId = maps.discoverRoom(games[_gameId].mapId, _position.row, _position.col, _debugRoomId);\\n            BCTypes.RoomTile memory discoveredRoom = maps.extGetRoomById(games[_gameId].mapId, discoveredRoomId);\\n            if (discoveredRoomId > 2 && discoveredRoom.eventType != BCTypes.BCEventType.NONE) {\\n\\n                // TODO: I could save function bytes4 representations in a mapping then call iterators with this.call\\n                // Increment the event tracker\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.BUG) {\\n                    games[_gameId].eventTracker.bugEvents++;\\n                }\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.MYSTERY) {\\n                    games[_gameId].eventTracker.mysteryEvents++;\\n                }\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.SCAVENGER) {\\n                    games[_gameId].eventTracker.scavEvents++;\\n                }\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                    games[_gameId].eventTracker.shipEvents++;\\n                }\\n\\n                // TODO: Process in-room event or draw event\\n                if (discoveredRoom.eventNum > 0) {\\n                    // Set the in-room event ONLY if this is not a permanant event\\n                    BCEvents.BCEvent memory currentEvent = bcEvents.extGetRoomEvent(discoveredRoom.eventNum);\\n                    if(!currentEvent.permanent) {\\n                        games[_gameId].eventPlayerId = _playerId;\\n                        games[_gameId].eventNumber = discoveredRoom.eventNum;\\n                        games[_gameId].eventType = BCTypes.BCEventType.ROOM;\\n                        games[_gameId].eventPosition = _position;\\n                    }\\n                } else if (discoveredRoom.eventType != BCTypes.BCEventType.NONE) {\\n                    games[_gameId].eventPlayerId = _playerId;\\n                    games[_gameId].eventPosition = _position;\\n                    // Draw a card for an event\\n                    // TODO: DRY with above\\n                    // TODO: Handle permanant card events like arm rassling, or remove from game\\n                    if (discoveredRoom.eventType == BCTypes.BCEventType.BUG) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(games[_gameId].unusedBugEvents);\\n                        games[_gameId].eventType = BCTypes.BCEventType.BUG;\\n                    }\\n                    if (discoveredRoom.eventType == BCTypes.BCEventType.MYSTERY) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(games[_gameId].unusedMysteryEvents);\\n                        games[_gameId].eventType = BCTypes.BCEventType.MYSTERY;\\n                    }\\n                    if (discoveredRoom.eventType == BCTypes.BCEventType.SCAVENGER) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(games[_gameId].unusedScavEvents);\\n                        games[_gameId].eventType = BCTypes.BCEventType.SCAVENGER;\\n                    }\\n                    if (discoveredRoom.eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(games[_gameId].unusedShipEvents);\\n                        games[_gameId].eventType = BCTypes.BCEventType.SHIP_SECURITY;\\n                    }\\n                }\\n            }\\n        }\\n        // TODO: Emit event\\n    }\\n\\n    function _getUnusedEvent(uint[] storage _unusedEventList) internal returns (uint) {\\n        for (uint i = _unusedEventList.length-1; i > 0; i--) {\\n            uint8 k = utils.smallIntBetweenVals(0, uint8(i));\\n\\n            (_unusedEventList[i], _unusedEventList[k]) = (_unusedEventList[k], _unusedEventList[i]);\\n        }\\n\\n        uint eventId = _unusedEventList[_unusedEventList.length-1];\\n        _unusedEventList.pop();\\n        return uint8(eventId);\\n    }\\n\\n    function extGetGamePlayerIndexes(uint _gameId) public view returns (uint[] memory) {\\n        uint[] memory indexes = new uint[](games[_gameId].playerIndexes.length);\\n        for (uint i = 0; i < indexes.length; i++) {\\n            indexes[i] = games[_gameId].playerIndexes[i];\\n        }\\n        return indexes;\\n    }\\n\\n    function extGetGame(uint _id) public view returns (BCTypes.Game memory) {\\n        return games[_id];\\n    }\\n\\n    function extGetNumGames() public view returns (uint) {\\n        return games.length;\\n    }\\n\\n    function extGetWorldItems(uint[] calldata _ids) public view returns(BCTypes.WorldItem[] memory) {\\n        BCTypes.WorldItem[] memory worldItemList = new BCTypes.WorldItem[](_ids.length);\\n\\n        for(uint i = 0; i < _ids.length; i++) {\\n            worldItemList[i] = worldItems[_ids[i]];\\n        }\\n\\n        return worldItemList;\\n    }\\n\\n    function extGetGamesOfPlayer(address _playerAddress) public view returns (uint[] memory) {\\n        uint[] memory gamesList = new uint[](addressToGame[_playerAddress].length);\\n\\n        for (uint i = 0; i < gamesList.length; i++) {\\n            gamesList[i] = addressToGame[_playerAddress][i];\\n        }\\n\\n        return gamesList;\\n    }\\n}\\n\",\"keccak256\":\"0xe71453ffc40a6393457d32900607c1c5b96b7641ba05c0118272264e554b9848\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM, DROP_ITEMS, PICK_ITEMS } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType { NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY, ROOM }\\n    enum WorldItemStatus { UNKNOWN, KNOWN, DISCARDED, REMOVED }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead; // TODO: Probably don't need\\n        bool hasEgg;  // TODO: Eval only allowing one egg at a time\\n\\n        uint gameId;\\n    }\\n\\n    // Items on the ground in a game\\n    struct WorldItem {\\n        // address itemContract;\\n        uint gameId;\\n        uint bcItemId; // ID 0 == unknown item (use WorldItemStatus for logic)\\n\\n        WorldItemStatus status;\\n\\n        Position position;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        // TODO:  Either add all events, effects, and traits here, or remove roomList\\n        // mapping (uint => RoomTile) roomList;\\n        // uint8 numRooms;\\n        uint[] unusedNormalRooms;\\n        // mapping (uint => bool) usedRooms;\\n\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        // uint roomTileId // TODO: Critical\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x1fc831f80771bf4306af5f0952086615c89e04bd9f16bb4d7cdf2aa9021e4a86\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600a6080819052600660a052805461ffff191661060a1790553480156200002a57600080fd5b5062000036336200003c565b6200008c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61353e806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638bf52bc31161010f578063aa6e8030116100a2578063dc769ee811610071578063dc769ee81461044e578063e67d0e791461047e578063f101de9a14610491578063f2fde38b146104a457600080fd5b8063aa6e803014610402578063afd62bb214610415578063c06fad0614610428578063dc0b35641461043b57600080fd5b8063921d2799116100de578063921d2799146103b65780639bda278a146103c95780639fca1ee1146103dc578063a99d2a8b146103ef57600080fd5b80638bf52bc31461035c5780638ccaedfb1461036f5780638d4723ee146103825780638da5cb5b146103a557600080fd5b806340d4fd78116101875780636fe99c18116101565780636fe99c181461030e578063715018a61461032e5780637b45c0d4146103365780637ddae1031461034957600080fd5b806340d4fd78146102b657806346f2434b146102d65780635a29638d146102e857806364f66467146102fb57600080fd5b8063117a5b90116101c3578063117a5b9014610253578063175142251461027d578063336d7d7b146102905780633deaec2b146102a357600080fd5b806305892ff6146101ea5780630d8354681461021357806310a2cd0d14610228575b600080fd5b6101fd6101f83660046126c2565b6104b7565b60405161020a9190612760565b60405180910390f35b610226610221366004612922565b61060f565b005b60015461023b906001600160a01b031681565b6040516001600160a01b03909116815260200161020a565b610266610261366004612978565b610709565b60405161020a9b9a999897969594939291906129a1565b61022661028b366004612a9e565b6107d3565b60075461023b906001600160a01b031681565b60035461023b906001600160a01b031681565b6102c96102c4366004612978565b610859565b60405161020a9190612b0f565b600b545b60405190815260200161020a565b60025461023b906001600160a01b031681565b610226610309366004612b29565b61094a565b61032161031c366004612978565b610a14565b60405161020a9190612b4b565b610226610d0d565b60095461023b906001600160a01b031681565b60045461023b906001600160a01b031681565b61022661036a366004612cdc565b610d21565b6101fd61037d366004612978565b610d79565b610395610390366004612978565b610eea565b60405161020a9493929190612d18565b6000546001600160a01b031661023b565b6102266103c4366004612d68565b610f46565b6102266103d73660046126c2565b610fdc565b60085461023b906001600160a01b031681565b6102da6103fd366004612e11565b6110a5565b610226610410366004612e4b565b6110d6565b6102c9610423366004612e84565b6112e4565b60055461023b906001600160a01b031681565b60065461023b906001600160a01b031681565b600a546104649060ff8082169161010090041682565b6040805160ff93841681529290911660208301520161020a565b6102da61048c366004612b29565b6113b4565b6102da61049f366004612ea1565b6113d0565b6102266104b2366004612e84565b61183f565b60606000826001600160401b038111156104d3576104d36127e1565b60405190808252806020026020018201604052801561050c57816020015b6104f9612535565b8152602001906001900390816104f15790505b50905060005b8381101561060557600c85858381811061052e5761052e612eee565b905060200201358154811061054557610545612eee565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16600381111561059657610596612736565b60038111156105a7576105a7612736565b8152604080518082019091526003929092015460ff808216845261010090910416602083810191909152015282518390839081106105e7576105e7612eee565b602002602001018190525080806105fd90612f1a565b915050610512565b5090505b92915050565b60005b835181101561070257600c80546001810182556000919091526004027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701858155845185908390811061066757610667612eee565b602090810291909101015160018083019190915560028201805460ff19168280021790555060408051808201825260ff868116808352908616602092830181905260038501805461ffff19169092176101009091021790556000888152600d90915220600c546106d990600190612f33565b8154600181018355600092835260209092209091015550806106fa81612f1a565b915050610612565b5050505050565b600b818154811061071957600080fd5b6000918252602091829020601090910201805460028201546003830154600484015460408051608081018252600587015460ff81811683526101008083048216848c0152620100008304821684860152630100000090920481166060840152600689015460078a015460088b015460098c0154600a8d01548851808a01909952600b909d015480861689529590950484169c87019c909c529882169b5096999598949792966001600160a01b03169592949293919216908b565b6009546001600160a01b03163314806107f657506006546001600160a01b031633145b6108475760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420616374696f6e732f706c617965727320636f6e74726163740000000060448201526064015b60405180910390fd5b61085483838360006118b8565b505050565b60606000600b838154811061087057610870612eee565b9060005260206000209060100201600101805490506001600160401b0381111561089c5761089c6127e1565b6040519080825280602002602001820160405280156108c5578160200160208202803683370190505b50905060005b815181101561094357600b84815481106108e7576108e7612eee565b9060005260206000209060100201600101818154811061090957610909612eee565b906000526020600020015482828151811061092657610926612eee565b60209081029190910101528061093b81612f1a565b9150506108cb565b5092915050565b6000600b838154811061095f5761095f612eee565b60009182526020909120600654601090920201600881015460078201546009830154600a840154604051636d291bbb60e01b81529496506001600160a01b0390951694636d291bbb946109c594899490938b939192600b8b019260ff1690600401612f46565b600060405180830381600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b505060006008840181905560098401555050600a01805460ff191690555050565b610a1c61258e565b600b8281548110610a2f57610a2f612eee565b600091825260209182902060408051610200810182526010909302909101805460ff1615158352600181018054835181870281018701909452808452939491938583019392830182828015610aa357602002820191906000526020600020905b815481526020019060010190808311610a8f575b505050918352505060028201546020808301919091526003830154604080840191909152600484015460608085019190915281516080818101845260058088015460ff80821685526101008083048216988601989098526201000082048116968501969096526301000000900485169383019390935285015260068501546001600160a01b031660a0850152600785015460c0850152600885015460e0850152600985015492840192909252600a840154610120909301921690811115610b6c57610b6c612736565b6005811115610b7d57610b7d612736565b8152604080518082018252600b84015460ff80821683526101009091041660208281019190915280840191909152600c84018054835181840281018401855281815293909401939091830182828015610bf557602002820191906000526020600020905b815481526020019060010190808311610be1575b50505050508152602001600d8201805480602002602001604051908101604052809291908181526020018280548015610c4d57602002820191906000526020600020905b815481526020019060010190808311610c39575b50505050508152602001600e8201805480602002602001604051908101604052809291908181526020018280548015610ca557602002820191906000526020600020905b815481526020019060010190808311610c91575b50505050508152602001600f8201805480602002602001604051908101604052809291908181526020018280548015610cfd57602002820191906000526020600020905b815481526020019060010190808311610ce9575b5050505050815250509050919050565b610d156121a0565b610d1f60006121fa565b565b6000546001600160a01b03163314610d675760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b604482015260640161083e565b610d73848484846118b8565b50505050565b6000818152600d6020526040812054606091906001600160401b03811115610da357610da36127e1565b604051908082528060200260200182016040528015610ddc57816020015b610dc9612535565b815260200190600190039081610dc15790505b50905060005b8151811015610943576000848152600d602052604090208054600c919083908110610e0f57610e0f612eee565b906000526020600020015481548110610e2a57610e2a612eee565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166003811115610e7b57610e7b612736565b6003811115610e8c57610e8c612736565b8152604080518082019091526003929092015460ff80821684526101009091041660208381019190915201528251839083908110610ecc57610ecc612eee565b60200260200101819052508080610ee290612f1a565b915050610de2565b600c8181548110610efa57600080fd5b60009182526020918290206004909102018054600182015460028301546040805180820190915260039094015460ff818116865261010090910481169585019590955291945092169084565b610f4e6121a0565b600180546001600160a01b03199081166001600160a01b039a8b1617909155600280548216988a1698909817909755600380548816968916969096179095556007805487169488169490941790935560098054861692871692909217909155600480548516918616919091179055600580548416918516919091179055600680549092169216919091179055565b6005546001600160a01b0316331461102b5760405162461bcd60e51b8152602060048201526012602482015271139bdd081a5d195b5cc818dbdb9d1c9858dd60721b604482015260640161083e565b60005b8181101561085457600c83838381811061104a5761104a612eee565b905060200201358154811061106157611061612eee565b600091825260208220600490910201818155600181019190915560028101805460ff19169055600301805461ffff191690558061109d81612f1a565b91505061102e565b600e60205281600052604060002081815481106110c157600080fd5b90600052602060002001600091509150505481565b6009546001600160a01b031633146111275760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604482015260640161083e565b8061118b5760065460405163ce93229760e01b8152600481018490526001600160a01b039091169063ce93229790602401600060405180830381600087803b15801561117257600080fd5b505af1158015611186573d6000803e3d6000fd5b505050505b6006546040516310f67fb360e01b8152600481018490526000916001600160a01b0316906310f67fb390602401600060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111fd919081019061306e565b90506000600b858154811061121457611214612eee565b9060005260206000209060100201905060038260c0015160ff16106107025760065460405163065c363f60e41b8152600481018690526001600160a01b03909116906365c363f090602401600060405180830381600087803b15801561127957600080fd5b505af115801561128d573d6000803e3d6000fd5b505050506001818101546112a19190612f33565b816002015410156112c8576002810180549060006112be83612f1a565b9190505550610702565b6112d685826007015461224a565b600060028201555050505050565b6001600160a01b0381166000908152600e6020526040812054606091906001600160401b03811115611318576113186127e1565b604051908082528060200260200182016040528015611341578160200160208202803683370190505b50905060005b8151811015610943576001600160a01b0384166000908152600e6020526040902080548290811061137a5761137a612eee565b906000526020600020015482828151811061139757611397612eee565b6020908102919091010152806113ac81612f1a565b915050611347565b600d60205281600052604060002081815481106110c157600080fd5b6007546000906001600160a01b031633146114225760405162461bcd60e51b8152602060048201526012602482015271139bdd081b1bd8989e4818dbdb9d1c9858dd60721b604482015260640161083e565b600b80546001808201835560009283527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db96010909202918201805460ff191690911781557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbd82019290925585516114c0917f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba01906020880190612662565b5060038082018590556040805160808101825260008082526020820181905291810182905260600181905260058301805463ffffffff1916905590546006830180546001600160a01b0319166001600160a01b039092169190911790558390036115a757600360009054906101000a90046001600160a01b03166001600160a01b031663f01fc35a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d91906131ba565b600782015561161c565b60035460405163148e052f60e21b8152600481018590526001600160a01b039091169063523814bc906024016020604051808303816000875af11580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161691906131ba565b60078201555b60005b61162a600186612f33565b811161176957600782015460408051808201909152600a5460ff8082168352610100909104166020820152600184018054611684939291908590811061167257611672612eee565b906000526020600020015460006118b8565b60065486516000916001600160a01b031690636621a421908990859081106116ae576116ae612eee565b60200260200101516040518263ffffffff1660e01b81526004016116d491815260200190565b602060405180830381865afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171591906131d3565b6001600160a01b0381166000908152600e60205260409020600b549192509061174090600190612f33565b81546001810183556000928352602090922090910155508061176181612f1a565b91505061161f565b506000604051806101e00160405280600181526020016002815260200160038152602001600481526020016005815260200160068152602001600781526020016008815260200160098152602001600a8152602001600b8152602001600c8152602001600d8152602001600e8152602001600f81525090508082600c0190600f6117f4929190612662565b50611804600d830182600f612662565b50611814600e830182600f612662565b50611825600f808401908390612662565b50600b5461183590600190612f33565b9695505050505050565b6118476121a0565b6001600160a01b0381166118ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161083e565b6118b5816121fa565b50565b600654600b80546001600160a01b0390921691638d491b3e918691869190899081106118e6576118e6612eee565b9060005260206000209060100201600701546040518463ffffffff1660e01b8152600401611916939291906131f0565b6020604051808303816000875af1158015611935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611959919061321f565b610d7357600354600b80546000926001600160a01b0316916381bad36d918890811061198757611987612eee565b90600052602060002090601002016007015486600001518760200151866040518563ffffffff1660e01b81526004016119dd949392919093845260ff928316602085015291166040830152606082015260800190565b6020604051808303816000875af11580156119fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2091906131ba565b600354600b80549293506000926001600160a01b03909216916358058283919089908110611a5057611a50612eee565b906000526020600020906010020160070154846040518363ffffffff1660e01b8152600401611a89929190918252602082015260400190565b60a060405180830381865afa158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca919061323c565b9050600282118015611aef5750600081516005811115611aec57611aec612736565b14155b1561219857600181516005811115611b0957611b09612736565b03611b5c57600b8681548110611b2157611b21612eee565b600091825260208220600560109092020101805460ff1691611b42836132ce565b91906101000a81548160ff021916908360ff160217905550505b600281516005811115611b7157611b71612736565b03611bcc57600b8681548110611b8957611b89612eee565b600091825260209091206010909102016005018054610100900460ff16906001611bb2836132ce565b91906101000a81548160ff021916908360ff160217905550505b600381516005811115611be157611be1612736565b03611c3d57600b8681548110611bf957611bf9612eee565b60009182526020909120601090910201600501805462010000900460ff16906002611c23836132ce565b91906101000a81548160ff021916908360ff160217905550505b600481516005811115611c5257611c52612736565b03611caf57600b8681548110611c6a57611c6a612eee565b6000918252602090912060109091020160050180546301000000900460ff16906003611c95836132ce565b91906101000a81548160ff021916908360ff160217905550505b602081015115611e2e5760048054602083015160405163c82c37b960e01b8152928301526000916001600160a01b039091169063c82c37b990602401600060405180830381865afa158015611d08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d30919081019061337a565b90508060200151611e285784600b8881548110611d4f57611d4f612eee565b9060005260206000209060100201600801819055508160200151600b8881548110611d7c57611d7c612eee565b9060005260206000209060100201600901819055506005600b8881548110611da657611da6612eee565b60009182526020909120600a60109092020101805460ff19166001836005811115611dd357611dd3612736565b021790555085600b8881548110611dec57611dec612eee565b60009182526020918290208351600b6010909302909101919091018054939092015160ff9081166101000261ffff199094169116179190911790555b50612198565b600081516005811115611e4357611e43612736565b146121985783600b8781548110611e5c57611e5c612eee565b90600052602060002090601002016008018190555084600b8781548110611e8557611e85612eee565b60009182526020918290208351600b6010909302909101919091018054939092015160ff9081166101000261ffff19909416911617919091179055600181516005811115611ed557611ed5612736565b03611f7657611f06600b8781548110611ef057611ef0612eee565b9060005260206000209060100201600c016123a3565b600b8781548110611f1957611f19612eee565b9060005260206000209060100201600901819055506001600b8781548110611f4357611f43612eee565b60009182526020909120600a60109092020101805460ff19166001836005811115611f7057611f70612736565b02179055505b600281516005811115611f8b57611f8b612736565b0361202c57611fbc600b8781548110611fa657611fa6612eee565b9060005260206000209060100201600d016123a3565b600b8781548110611fcf57611fcf612eee565b9060005260206000209060100201600901819055506002600b8781548110611ff957611ff9612eee565b60009182526020909120600a60109092020101805460ff1916600183600581111561202657612026612736565b02179055505b60038151600581111561204157612041612736565b036120e257612072600b878154811061205c5761205c612eee565b9060005260206000209060100201600e016123a3565b600b878154811061208557612085612eee565b9060005260206000209060100201600901819055506003600b87815481106120af576120af612eee565b60009182526020909120600a60109092020101805460ff191660018360058111156120dc576120dc612736565b02179055505b6004815160058111156120f7576120f7612736565b0361219857612128600b878154811061211257612112612eee565b9060005260206000209060100201600f016123a3565b600b878154811061213b5761213b612eee565b9060005260206000209060100201600901819055506004600b878154811061216557612165612eee565b60009182526020909120600a60109092020101805460ff1916600183600581111561219257612192612736565b02179055505b505050505050565b6000546001600160a01b03163314610d1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161083e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000600b838154811061225f5761225f612eee565b60009182526020909120600354604051630b06115560e31b815260048101869052601090930290910192506001600160a01b0316906358308aa890602401600060405180830381600087803b1580156122b757600080fd5b505af11580156122cb573d6000803e3d6000fd5b505060035460405163c6b41b4560e01b815260048101869052600160248201526001600160a01b03909116925063c6b41b459150604401600060405180830381600087803b15801561231c57600080fd5b505af1158015612330573d6000803e3d6000fd5b5050600654600784015460405163668a7f3b60e01b81526001600160a01b03909216935063668a7f3b925061236c91600186019060040161346b565b600060405180830381600087803b15801561238657600080fd5b505af115801561239a573d6000803e3d6000fd5b50505050505050565b805460009081906123b690600190612f33565b90505b80156124d25760025460405163ce28613f60e01b815260006004820181905260ff84166024830152916001600160a01b03169063ce28613f906044016020604051808303816000875af1158015612414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243891906134be565b9050838160ff168154811061244f5761244f612eee565b906000526020600020015484838154811061246c5761246c612eee565b906000526020600020015485848154811061248957612489612eee565b906000526020600020016000878560ff16815481106124aa576124aa612eee565b60009182526020909120019290925591909155508190506124ca816134db565b9150506123b9565b50815460009083906124e690600190612f33565b815481106124f6576124f6612eee565b9060005260206000200154905082805480612513576125136134f2565b600190038181906000526020600020016000905590558060ff16915050919050565b604051806080016040528060008152602001600081526020016000600381111561256157612561612736565b81526020016125896040518060400160405280600060ff168152602001600060ff1681525090565b905290565b60408051610200810182526000808252606060208084018290528385018390528184018390526080808501849052855190810186528381529081018390529384018290528301529060a0820190815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000600581111561261857612618612736565b81526020016126406040518060400160405280600060ff168152602001600060ff1681525090565b8152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090810192821561269d579160200282015b8281111561269d578251825591602001919060010190612682565b506126a99291506126ad565b5090565b5b808211156126a957600081556001016126ae565b600080602083850312156126d557600080fd5b82356001600160401b03808211156126ec57600080fd5b818501915085601f83011261270057600080fd5b81358181111561270f57600080fd5b8660208260051b850101111561272457600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052602160045260246000fd5b6004811061275c5761275c612736565b9052565b602080825282518282018190526000919060409081850190868401855b828110156127d4578151805185528681015187860152858101516127a38787018261274c565b50606090810151805160ff908116928701929092526020015116608085015260a0909301929085019060010161277d565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612819576128196127e1565b60405290565b6040516101c081016001600160401b0381118282101715612819576128196127e1565b60405160e081016001600160401b0381118282101715612819576128196127e1565b604051601f8201601f191681016001600160401b038111828210171561288c5761288c6127e1565b604052919050565b60006001600160401b038211156128ad576128ad6127e1565b5060051b60200190565b600082601f8301126128c857600080fd5b813560206128dd6128d883612894565b612864565b82815260059290921b840181019181810190868411156128fc57600080fd5b8286015b848110156129175780358352918301918301612900565b509695505050505050565b6000806000806080858703121561293857600080fd5b8435935060208501356001600160401b0381111561295557600080fd5b612961878288016128b7565b949794965050505060408301359260600135919050565b60006020828403121561298a57600080fd5b5035919050565b6006811061275c5761275c612736565b8b1515815260208082018c905260408083018c905260608084018c90528a5160ff9081166080860152928b0151831660a0850152908a0151821660c08401528901511660e08201526101e081016001600160a01b038816610100830152610120820187905261014082018690526101608201859052612a24610180830185612991565b825160ff9081166101a08401526020840151166101c08301529c9b505050505050505050505050565b60ff811681146118b557600080fd5b600060408284031215612a6e57600080fd5b612a766127f7565b90508135612a8381612a4d565b81526020820135612a9381612a4d565b602082015292915050565b600080600060808486031215612ab357600080fd5b83359250612ac48560208601612a5c565b9150606084013590509250925092565b600081518084526020808501945080840160005b83811015612b0457815187529582019590820190600101612ae8565b509495945050505050565b602081526000612b226020830184612ad4565b9392505050565b60008060408385031215612b3c57600080fd5b50508035926020909101359150565b60208152612b5e60208201835115159052565b60006020830151610280806040850152612b7c6102a0850183612ad4565b91506040850151606085015260608501516080850152608085015160a085015260a0850151612bdb60c086018260ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b5060c0850151610140612bf8818701836001600160a01b03169052565b60e087015161016087810191909152610100880151610180808901919091526101208901516101a0808a01919091529289015193506101c092612c3d848a0186612991565b9189015193506101e091612c6389840186805160ff908116835260209182015116910152565b818a01519450601f19915081898803016102208a0152612c838786612ad4565b9650808a01519450508088870301610240890152612ca18685612ad4565b95508289015193508088870301610260890152612cbe8685612ad4565b95508189015193508088870301858901525050506118358382612ad4565b60008060008060a08587031215612cf257600080fd5b84359350612d038660208701612a5c565b93969395505050506060820135916080013590565b8481526020810184905260a08101612d33604083018561274c565b825160ff9081166060840152602084015116608083015295945050505050565b6001600160a01b03811681146118b557600080fd5b600080600080600080600080610100898b031215612d8557600080fd5b8835612d9081612d53565b97506020890135612da081612d53565b96506040890135612db081612d53565b95506060890135612dc081612d53565b94506080890135612dd081612d53565b935060a0890135612de081612d53565b925060c0890135612df081612d53565b915060e0890135612e0081612d53565b809150509295985092959890939650565b60008060408385031215612e2457600080fd5b8235612e2f81612d53565b946020939093013593505050565b80151581146118b557600080fd5b600080600060608486031215612e6057600080fd5b83359250602084013591506040840135612e7981612e3d565b809150509250925092565b600060208284031215612e9657600080fd5b8135612b2281612d53565b600080600060608486031215612eb657600080fd5b83356001600160401b03811115612ecc57600080fd5b612ed8868287016128b7565b9660208601359650604090950135949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f2c57612f2c612f04565b5060010190565b8181038181111561060957610609612f04565b600061010082019050888252876020830152866040830152856060830152845460ff8116608084015260ff8160081c1660a0840152508360c0830152612f8f60e0830184612991565b98975050505050505050565b8051612fa681612d53565b919050565b8051612fa681612a4d565b600060408284031215612fc857600080fd5b612fd06127f7565b90508151612fdd81612a4d565b81526020820151612a9381612a4d565b8051600081900b8114612fa657600080fd5b600082601f83011261301057600080fd5b815160206130206128d883612894565b82815260059290921b8401810191818101908684111561303f57600080fd5b8286015b8481101561291757805161305681612a4d565b8352918301918301613043565b8051612fa681612e3d565b60006020828403121561308057600080fd5b81516001600160401b038082111561309757600080fd5b908301906101e082860312156130ac57600080fd5b6130b461281f565b6130bd83612f9b565b81526130cb60208401612f9b565b6020820152604083015160408201526130e78660608501612fb6565b60608201526130f860a08401612fed565b608082015261310960c08401612fab565b60a082015261311a60e08401612fab565b60c082015261010061312d818501612fab565b60e0830152610120808501518481111561314657600080fd5b61315289828801612fff565b83850152506101409350613167848601612fab565b908301525061016061317a848201613063565b83830152610180925061318e838501613063565b908201526101a06131a0848201613063565b928201929092526101c09290920151908201529392505050565b6000602082840312156131cc57600080fd5b5051919050565b6000602082840312156131e557600080fd5b8151612b2281612d53565b6080810161320e8286805160ff908116835260209182015116910152565b604082019390935260600152919050565b60006020828403121561323157600080fd5b8151612b2281612e3d565b600060a0828403121561324e57600080fd5b60405160a081018181106001600160401b0382111715613270576132706127e1565b60405282516006811061328257600080fd5b815260208381015190820152604083015161329c81612a4d565b604082015260608301516132af81612a4d565b606082015260808301516132c281612e3d565b60808201529392505050565b600060ff821660ff81036132e4576132e4612f04565b60010192915050565b600082601f8301126132fe57600080fd5b8151602061330e6128d883612894565b82815260069290921b8401810191818101908684111561332d57600080fd5b8286015b84811015612917576040818903121561334a5760008081fd5b6133526127f7565b8151601781106133625760008081fd5b81528185015185820152835291830191604001613331565b60006020828403121561338c57600080fd5b81516001600160401b03808211156133a357600080fd5b9083019060e082860312156133b757600080fd5b6133bf612842565b825181526133cf60208401613063565b60208201526133e060408401612fab565b60408201526133f160608401612fab565b606082015260808301518281111561340857600080fd5b613414878286016132ed565b60808301525060a08301518281111561342c57600080fd5b613438878286016132ed565b60a08301525060c08301518281111561345057600080fd5b61345c878286016132ed565b60c08301525095945050505050565b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b818110156134b157845483526001948501949284019201613495565b5090979650505050505050565b6000602082840312156134d057600080fd5b8151612b2281612a4d565b6000816134ea576134ea612f04565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e38a49c45b67e2bd9fcbd1e8c6b541c37bfb2cbd7dc4d85eaf824a723b2cec8564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638bf52bc31161010f578063aa6e8030116100a2578063dc769ee811610071578063dc769ee81461044e578063e67d0e791461047e578063f101de9a14610491578063f2fde38b146104a457600080fd5b8063aa6e803014610402578063afd62bb214610415578063c06fad0614610428578063dc0b35641461043b57600080fd5b8063921d2799116100de578063921d2799146103b65780639bda278a146103c95780639fca1ee1146103dc578063a99d2a8b146103ef57600080fd5b80638bf52bc31461035c5780638ccaedfb1461036f5780638d4723ee146103825780638da5cb5b146103a557600080fd5b806340d4fd78116101875780636fe99c18116101565780636fe99c181461030e578063715018a61461032e5780637b45c0d4146103365780637ddae1031461034957600080fd5b806340d4fd78146102b657806346f2434b146102d65780635a29638d146102e857806364f66467146102fb57600080fd5b8063117a5b90116101c3578063117a5b9014610253578063175142251461027d578063336d7d7b146102905780633deaec2b146102a357600080fd5b806305892ff6146101ea5780630d8354681461021357806310a2cd0d14610228575b600080fd5b6101fd6101f83660046126c2565b6104b7565b60405161020a9190612760565b60405180910390f35b610226610221366004612922565b61060f565b005b60015461023b906001600160a01b031681565b6040516001600160a01b03909116815260200161020a565b610266610261366004612978565b610709565b60405161020a9b9a999897969594939291906129a1565b61022661028b366004612a9e565b6107d3565b60075461023b906001600160a01b031681565b60035461023b906001600160a01b031681565b6102c96102c4366004612978565b610859565b60405161020a9190612b0f565b600b545b60405190815260200161020a565b60025461023b906001600160a01b031681565b610226610309366004612b29565b61094a565b61032161031c366004612978565b610a14565b60405161020a9190612b4b565b610226610d0d565b60095461023b906001600160a01b031681565b60045461023b906001600160a01b031681565b61022661036a366004612cdc565b610d21565b6101fd61037d366004612978565b610d79565b610395610390366004612978565b610eea565b60405161020a9493929190612d18565b6000546001600160a01b031661023b565b6102266103c4366004612d68565b610f46565b6102266103d73660046126c2565b610fdc565b60085461023b906001600160a01b031681565b6102da6103fd366004612e11565b6110a5565b610226610410366004612e4b565b6110d6565b6102c9610423366004612e84565b6112e4565b60055461023b906001600160a01b031681565b60065461023b906001600160a01b031681565b600a546104649060ff8082169161010090041682565b6040805160ff93841681529290911660208301520161020a565b6102da61048c366004612b29565b6113b4565b6102da61049f366004612ea1565b6113d0565b6102266104b2366004612e84565b61183f565b60606000826001600160401b038111156104d3576104d36127e1565b60405190808252806020026020018201604052801561050c57816020015b6104f9612535565b8152602001906001900390816104f15790505b50905060005b8381101561060557600c85858381811061052e5761052e612eee565b905060200201358154811061054557610545612eee565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16600381111561059657610596612736565b60038111156105a7576105a7612736565b8152604080518082019091526003929092015460ff808216845261010090910416602083810191909152015282518390839081106105e7576105e7612eee565b602002602001018190525080806105fd90612f1a565b915050610512565b5090505b92915050565b60005b835181101561070257600c80546001810182556000919091526004027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701858155845185908390811061066757610667612eee565b602090810291909101015160018083019190915560028201805460ff19168280021790555060408051808201825260ff868116808352908616602092830181905260038501805461ffff19169092176101009091021790556000888152600d90915220600c546106d990600190612f33565b8154600181018355600092835260209092209091015550806106fa81612f1a565b915050610612565b5050505050565b600b818154811061071957600080fd5b6000918252602091829020601090910201805460028201546003830154600484015460408051608081018252600587015460ff81811683526101008083048216848c0152620100008304821684860152630100000090920481166060840152600689015460078a015460088b015460098c0154600a8d01548851808a01909952600b909d015480861689529590950484169c87019c909c529882169b5096999598949792966001600160a01b03169592949293919216908b565b6009546001600160a01b03163314806107f657506006546001600160a01b031633145b6108475760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420616374696f6e732f706c617965727320636f6e74726163740000000060448201526064015b60405180910390fd5b61085483838360006118b8565b505050565b60606000600b838154811061087057610870612eee565b9060005260206000209060100201600101805490506001600160401b0381111561089c5761089c6127e1565b6040519080825280602002602001820160405280156108c5578160200160208202803683370190505b50905060005b815181101561094357600b84815481106108e7576108e7612eee565b9060005260206000209060100201600101818154811061090957610909612eee565b906000526020600020015482828151811061092657610926612eee565b60209081029190910101528061093b81612f1a565b9150506108cb565b5092915050565b6000600b838154811061095f5761095f612eee565b60009182526020909120600654601090920201600881015460078201546009830154600a840154604051636d291bbb60e01b81529496506001600160a01b0390951694636d291bbb946109c594899490938b939192600b8b019260ff1690600401612f46565b600060405180830381600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b505060006008840181905560098401555050600a01805460ff191690555050565b610a1c61258e565b600b8281548110610a2f57610a2f612eee565b600091825260209182902060408051610200810182526010909302909101805460ff1615158352600181018054835181870281018701909452808452939491938583019392830182828015610aa357602002820191906000526020600020905b815481526020019060010190808311610a8f575b505050918352505060028201546020808301919091526003830154604080840191909152600484015460608085019190915281516080818101845260058088015460ff80821685526101008083048216988601989098526201000082048116968501969096526301000000900485169383019390935285015260068501546001600160a01b031660a0850152600785015460c0850152600885015460e0850152600985015492840192909252600a840154610120909301921690811115610b6c57610b6c612736565b6005811115610b7d57610b7d612736565b8152604080518082018252600b84015460ff80821683526101009091041660208281019190915280840191909152600c84018054835181840281018401855281815293909401939091830182828015610bf557602002820191906000526020600020905b815481526020019060010190808311610be1575b50505050508152602001600d8201805480602002602001604051908101604052809291908181526020018280548015610c4d57602002820191906000526020600020905b815481526020019060010190808311610c39575b50505050508152602001600e8201805480602002602001604051908101604052809291908181526020018280548015610ca557602002820191906000526020600020905b815481526020019060010190808311610c91575b50505050508152602001600f8201805480602002602001604051908101604052809291908181526020018280548015610cfd57602002820191906000526020600020905b815481526020019060010190808311610ce9575b5050505050815250509050919050565b610d156121a0565b610d1f60006121fa565b565b6000546001600160a01b03163314610d675760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b604482015260640161083e565b610d73848484846118b8565b50505050565b6000818152600d6020526040812054606091906001600160401b03811115610da357610da36127e1565b604051908082528060200260200182016040528015610ddc57816020015b610dc9612535565b815260200190600190039081610dc15790505b50905060005b8151811015610943576000848152600d602052604090208054600c919083908110610e0f57610e0f612eee565b906000526020600020015481548110610e2a57610e2a612eee565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166003811115610e7b57610e7b612736565b6003811115610e8c57610e8c612736565b8152604080518082019091526003929092015460ff80821684526101009091041660208381019190915201528251839083908110610ecc57610ecc612eee565b60200260200101819052508080610ee290612f1a565b915050610de2565b600c8181548110610efa57600080fd5b60009182526020918290206004909102018054600182015460028301546040805180820190915260039094015460ff818116865261010090910481169585019590955291945092169084565b610f4e6121a0565b600180546001600160a01b03199081166001600160a01b039a8b1617909155600280548216988a1698909817909755600380548816968916969096179095556007805487169488169490941790935560098054861692871692909217909155600480548516918616919091179055600580548416918516919091179055600680549092169216919091179055565b6005546001600160a01b0316331461102b5760405162461bcd60e51b8152602060048201526012602482015271139bdd081a5d195b5cc818dbdb9d1c9858dd60721b604482015260640161083e565b60005b8181101561085457600c83838381811061104a5761104a612eee565b905060200201358154811061106157611061612eee565b600091825260208220600490910201818155600181019190915560028101805460ff19169055600301805461ffff191690558061109d81612f1a565b91505061102e565b600e60205281600052604060002081815481106110c157600080fd5b90600052602060002001600091509150505481565b6009546001600160a01b031633146111275760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604482015260640161083e565b8061118b5760065460405163ce93229760e01b8152600481018490526001600160a01b039091169063ce93229790602401600060405180830381600087803b15801561117257600080fd5b505af1158015611186573d6000803e3d6000fd5b505050505b6006546040516310f67fb360e01b8152600481018490526000916001600160a01b0316906310f67fb390602401600060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111fd919081019061306e565b90506000600b858154811061121457611214612eee565b9060005260206000209060100201905060038260c0015160ff16106107025760065460405163065c363f60e41b8152600481018690526001600160a01b03909116906365c363f090602401600060405180830381600087803b15801561127957600080fd5b505af115801561128d573d6000803e3d6000fd5b505050506001818101546112a19190612f33565b816002015410156112c8576002810180549060006112be83612f1a565b9190505550610702565b6112d685826007015461224a565b600060028201555050505050565b6001600160a01b0381166000908152600e6020526040812054606091906001600160401b03811115611318576113186127e1565b604051908082528060200260200182016040528015611341578160200160208202803683370190505b50905060005b8151811015610943576001600160a01b0384166000908152600e6020526040902080548290811061137a5761137a612eee565b906000526020600020015482828151811061139757611397612eee565b6020908102919091010152806113ac81612f1a565b915050611347565b600d60205281600052604060002081815481106110c157600080fd5b6007546000906001600160a01b031633146114225760405162461bcd60e51b8152602060048201526012602482015271139bdd081b1bd8989e4818dbdb9d1c9858dd60721b604482015260640161083e565b600b80546001808201835560009283527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db96010909202918201805460ff191690911781557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbd82019290925585516114c0917f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba01906020880190612662565b5060038082018590556040805160808101825260008082526020820181905291810182905260600181905260058301805463ffffffff1916905590546006830180546001600160a01b0319166001600160a01b039092169190911790558390036115a757600360009054906101000a90046001600160a01b03166001600160a01b031663f01fc35a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d91906131ba565b600782015561161c565b60035460405163148e052f60e21b8152600481018590526001600160a01b039091169063523814bc906024016020604051808303816000875af11580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161691906131ba565b60078201555b60005b61162a600186612f33565b811161176957600782015460408051808201909152600a5460ff8082168352610100909104166020820152600184018054611684939291908590811061167257611672612eee565b906000526020600020015460006118b8565b60065486516000916001600160a01b031690636621a421908990859081106116ae576116ae612eee565b60200260200101516040518263ffffffff1660e01b81526004016116d491815260200190565b602060405180830381865afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171591906131d3565b6001600160a01b0381166000908152600e60205260409020600b549192509061174090600190612f33565b81546001810183556000928352602090922090910155508061176181612f1a565b91505061161f565b506000604051806101e00160405280600181526020016002815260200160038152602001600481526020016005815260200160068152602001600781526020016008815260200160098152602001600a8152602001600b8152602001600c8152602001600d8152602001600e8152602001600f81525090508082600c0190600f6117f4929190612662565b50611804600d830182600f612662565b50611814600e830182600f612662565b50611825600f808401908390612662565b50600b5461183590600190612f33565b9695505050505050565b6118476121a0565b6001600160a01b0381166118ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161083e565b6118b5816121fa565b50565b600654600b80546001600160a01b0390921691638d491b3e918691869190899081106118e6576118e6612eee565b9060005260206000209060100201600701546040518463ffffffff1660e01b8152600401611916939291906131f0565b6020604051808303816000875af1158015611935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611959919061321f565b610d7357600354600b80546000926001600160a01b0316916381bad36d918890811061198757611987612eee565b90600052602060002090601002016007015486600001518760200151866040518563ffffffff1660e01b81526004016119dd949392919093845260ff928316602085015291166040830152606082015260800190565b6020604051808303816000875af11580156119fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2091906131ba565b600354600b80549293506000926001600160a01b03909216916358058283919089908110611a5057611a50612eee565b906000526020600020906010020160070154846040518363ffffffff1660e01b8152600401611a89929190918252602082015260400190565b60a060405180830381865afa158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca919061323c565b9050600282118015611aef5750600081516005811115611aec57611aec612736565b14155b1561219857600181516005811115611b0957611b09612736565b03611b5c57600b8681548110611b2157611b21612eee565b600091825260208220600560109092020101805460ff1691611b42836132ce565b91906101000a81548160ff021916908360ff160217905550505b600281516005811115611b7157611b71612736565b03611bcc57600b8681548110611b8957611b89612eee565b600091825260209091206010909102016005018054610100900460ff16906001611bb2836132ce565b91906101000a81548160ff021916908360ff160217905550505b600381516005811115611be157611be1612736565b03611c3d57600b8681548110611bf957611bf9612eee565b60009182526020909120601090910201600501805462010000900460ff16906002611c23836132ce565b91906101000a81548160ff021916908360ff160217905550505b600481516005811115611c5257611c52612736565b03611caf57600b8681548110611c6a57611c6a612eee565b6000918252602090912060109091020160050180546301000000900460ff16906003611c95836132ce565b91906101000a81548160ff021916908360ff160217905550505b602081015115611e2e5760048054602083015160405163c82c37b960e01b8152928301526000916001600160a01b039091169063c82c37b990602401600060405180830381865afa158015611d08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d30919081019061337a565b90508060200151611e285784600b8881548110611d4f57611d4f612eee565b9060005260206000209060100201600801819055508160200151600b8881548110611d7c57611d7c612eee565b9060005260206000209060100201600901819055506005600b8881548110611da657611da6612eee565b60009182526020909120600a60109092020101805460ff19166001836005811115611dd357611dd3612736565b021790555085600b8881548110611dec57611dec612eee565b60009182526020918290208351600b6010909302909101919091018054939092015160ff9081166101000261ffff199094169116179190911790555b50612198565b600081516005811115611e4357611e43612736565b146121985783600b8781548110611e5c57611e5c612eee565b90600052602060002090601002016008018190555084600b8781548110611e8557611e85612eee565b60009182526020918290208351600b6010909302909101919091018054939092015160ff9081166101000261ffff19909416911617919091179055600181516005811115611ed557611ed5612736565b03611f7657611f06600b8781548110611ef057611ef0612eee565b9060005260206000209060100201600c016123a3565b600b8781548110611f1957611f19612eee565b9060005260206000209060100201600901819055506001600b8781548110611f4357611f43612eee565b60009182526020909120600a60109092020101805460ff19166001836005811115611f7057611f70612736565b02179055505b600281516005811115611f8b57611f8b612736565b0361202c57611fbc600b8781548110611fa657611fa6612eee565b9060005260206000209060100201600d016123a3565b600b8781548110611fcf57611fcf612eee565b9060005260206000209060100201600901819055506002600b8781548110611ff957611ff9612eee565b60009182526020909120600a60109092020101805460ff1916600183600581111561202657612026612736565b02179055505b60038151600581111561204157612041612736565b036120e257612072600b878154811061205c5761205c612eee565b9060005260206000209060100201600e016123a3565b600b878154811061208557612085612eee565b9060005260206000209060100201600901819055506003600b87815481106120af576120af612eee565b60009182526020909120600a60109092020101805460ff191660018360058111156120dc576120dc612736565b02179055505b6004815160058111156120f7576120f7612736565b0361219857612128600b878154811061211257612112612eee565b9060005260206000209060100201600f016123a3565b600b878154811061213b5761213b612eee565b9060005260206000209060100201600901819055506004600b878154811061216557612165612eee565b60009182526020909120600a60109092020101805460ff1916600183600581111561219257612192612736565b02179055505b505050505050565b6000546001600160a01b03163314610d1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161083e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000600b838154811061225f5761225f612eee565b60009182526020909120600354604051630b06115560e31b815260048101869052601090930290910192506001600160a01b0316906358308aa890602401600060405180830381600087803b1580156122b757600080fd5b505af11580156122cb573d6000803e3d6000fd5b505060035460405163c6b41b4560e01b815260048101869052600160248201526001600160a01b03909116925063c6b41b459150604401600060405180830381600087803b15801561231c57600080fd5b505af1158015612330573d6000803e3d6000fd5b5050600654600784015460405163668a7f3b60e01b81526001600160a01b03909216935063668a7f3b925061236c91600186019060040161346b565b600060405180830381600087803b15801561238657600080fd5b505af115801561239a573d6000803e3d6000fd5b50505050505050565b805460009081906123b690600190612f33565b90505b80156124d25760025460405163ce28613f60e01b815260006004820181905260ff84166024830152916001600160a01b03169063ce28613f906044016020604051808303816000875af1158015612414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243891906134be565b9050838160ff168154811061244f5761244f612eee565b906000526020600020015484838154811061246c5761246c612eee565b906000526020600020015485848154811061248957612489612eee565b906000526020600020016000878560ff16815481106124aa576124aa612eee565b60009182526020909120019290925591909155508190506124ca816134db565b9150506123b9565b50815460009083906124e690600190612f33565b815481106124f6576124f6612eee565b9060005260206000200154905082805480612513576125136134f2565b600190038181906000526020600020016000905590558060ff16915050919050565b604051806080016040528060008152602001600081526020016000600381111561256157612561612736565b81526020016125896040518060400160405280600060ff168152602001600060ff1681525090565b905290565b60408051610200810182526000808252606060208084018290528385018390528184018390526080808501849052855190810186528381529081018390529384018290528301529060a0820190815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000600581111561261857612618612736565b81526020016126406040518060400160405280600060ff168152602001600060ff1681525090565b8152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090810192821561269d579160200282015b8281111561269d578251825591602001919060010190612682565b506126a99291506126ad565b5090565b5b808211156126a957600081556001016126ae565b600080602083850312156126d557600080fd5b82356001600160401b03808211156126ec57600080fd5b818501915085601f83011261270057600080fd5b81358181111561270f57600080fd5b8660208260051b850101111561272457600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052602160045260246000fd5b6004811061275c5761275c612736565b9052565b602080825282518282018190526000919060409081850190868401855b828110156127d4578151805185528681015187860152858101516127a38787018261274c565b50606090810151805160ff908116928701929092526020015116608085015260a0909301929085019060010161277d565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612819576128196127e1565b60405290565b6040516101c081016001600160401b0381118282101715612819576128196127e1565b60405160e081016001600160401b0381118282101715612819576128196127e1565b604051601f8201601f191681016001600160401b038111828210171561288c5761288c6127e1565b604052919050565b60006001600160401b038211156128ad576128ad6127e1565b5060051b60200190565b600082601f8301126128c857600080fd5b813560206128dd6128d883612894565b612864565b82815260059290921b840181019181810190868411156128fc57600080fd5b8286015b848110156129175780358352918301918301612900565b509695505050505050565b6000806000806080858703121561293857600080fd5b8435935060208501356001600160401b0381111561295557600080fd5b612961878288016128b7565b949794965050505060408301359260600135919050565b60006020828403121561298a57600080fd5b5035919050565b6006811061275c5761275c612736565b8b1515815260208082018c905260408083018c905260608084018c90528a5160ff9081166080860152928b0151831660a0850152908a0151821660c08401528901511660e08201526101e081016001600160a01b038816610100830152610120820187905261014082018690526101608201859052612a24610180830185612991565b825160ff9081166101a08401526020840151166101c08301529c9b505050505050505050505050565b60ff811681146118b557600080fd5b600060408284031215612a6e57600080fd5b612a766127f7565b90508135612a8381612a4d565b81526020820135612a9381612a4d565b602082015292915050565b600080600060808486031215612ab357600080fd5b83359250612ac48560208601612a5c565b9150606084013590509250925092565b600081518084526020808501945080840160005b83811015612b0457815187529582019590820190600101612ae8565b509495945050505050565b602081526000612b226020830184612ad4565b9392505050565b60008060408385031215612b3c57600080fd5b50508035926020909101359150565b60208152612b5e60208201835115159052565b60006020830151610280806040850152612b7c6102a0850183612ad4565b91506040850151606085015260608501516080850152608085015160a085015260a0850151612bdb60c086018260ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b5060c0850151610140612bf8818701836001600160a01b03169052565b60e087015161016087810191909152610100880151610180808901919091526101208901516101a0808a01919091529289015193506101c092612c3d848a0186612991565b9189015193506101e091612c6389840186805160ff908116835260209182015116910152565b818a01519450601f19915081898803016102208a0152612c838786612ad4565b9650808a01519450508088870301610240890152612ca18685612ad4565b95508289015193508088870301610260890152612cbe8685612ad4565b95508189015193508088870301858901525050506118358382612ad4565b60008060008060a08587031215612cf257600080fd5b84359350612d038660208701612a5c565b93969395505050506060820135916080013590565b8481526020810184905260a08101612d33604083018561274c565b825160ff9081166060840152602084015116608083015295945050505050565b6001600160a01b03811681146118b557600080fd5b600080600080600080600080610100898b031215612d8557600080fd5b8835612d9081612d53565b97506020890135612da081612d53565b96506040890135612db081612d53565b95506060890135612dc081612d53565b94506080890135612dd081612d53565b935060a0890135612de081612d53565b925060c0890135612df081612d53565b915060e0890135612e0081612d53565b809150509295985092959890939650565b60008060408385031215612e2457600080fd5b8235612e2f81612d53565b946020939093013593505050565b80151581146118b557600080fd5b600080600060608486031215612e6057600080fd5b83359250602084013591506040840135612e7981612e3d565b809150509250925092565b600060208284031215612e9657600080fd5b8135612b2281612d53565b600080600060608486031215612eb657600080fd5b83356001600160401b03811115612ecc57600080fd5b612ed8868287016128b7565b9660208601359650604090950135949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f2c57612f2c612f04565b5060010190565b8181038181111561060957610609612f04565b600061010082019050888252876020830152866040830152856060830152845460ff8116608084015260ff8160081c1660a0840152508360c0830152612f8f60e0830184612991565b98975050505050505050565b8051612fa681612d53565b919050565b8051612fa681612a4d565b600060408284031215612fc857600080fd5b612fd06127f7565b90508151612fdd81612a4d565b81526020820151612a9381612a4d565b8051600081900b8114612fa657600080fd5b600082601f83011261301057600080fd5b815160206130206128d883612894565b82815260059290921b8401810191818101908684111561303f57600080fd5b8286015b8481101561291757805161305681612a4d565b8352918301918301613043565b8051612fa681612e3d565b60006020828403121561308057600080fd5b81516001600160401b038082111561309757600080fd5b908301906101e082860312156130ac57600080fd5b6130b461281f565b6130bd83612f9b565b81526130cb60208401612f9b565b6020820152604083015160408201526130e78660608501612fb6565b60608201526130f860a08401612fed565b608082015261310960c08401612fab565b60a082015261311a60e08401612fab565b60c082015261010061312d818501612fab565b60e0830152610120808501518481111561314657600080fd5b61315289828801612fff565b83850152506101409350613167848601612fab565b908301525061016061317a848201613063565b83830152610180925061318e838501613063565b908201526101a06131a0848201613063565b928201929092526101c09290920151908201529392505050565b6000602082840312156131cc57600080fd5b5051919050565b6000602082840312156131e557600080fd5b8151612b2281612d53565b6080810161320e8286805160ff908116835260209182015116910152565b604082019390935260600152919050565b60006020828403121561323157600080fd5b8151612b2281612e3d565b600060a0828403121561324e57600080fd5b60405160a081018181106001600160401b0382111715613270576132706127e1565b60405282516006811061328257600080fd5b815260208381015190820152604083015161329c81612a4d565b604082015260608301516132af81612a4d565b606082015260808301516132c281612e3d565b60808201529392505050565b600060ff821660ff81036132e4576132e4612f04565b60010192915050565b600082601f8301126132fe57600080fd5b8151602061330e6128d883612894565b82815260069290921b8401810191818101908684111561332d57600080fd5b8286015b84811015612917576040818903121561334a5760008081fd5b6133526127f7565b8151601781106133625760008081fd5b81528185015185820152835291830191604001613331565b60006020828403121561338c57600080fd5b81516001600160401b03808211156133a357600080fd5b9083019060e082860312156133b757600080fd5b6133bf612842565b825181526133cf60208401613063565b60208201526133e060408401612fab565b60408201526133f160608401612fab565b606082015260808301518281111561340857600080fd5b613414878286016132ed565b60808301525060a08301518281111561342c57600080fd5b613438878286016132ed565b60a08301525060c08301518281111561345057600080fd5b61345c878286016132ed565b60c08301525095945050505050565b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b818110156134b157845483526001948501949284019201613495565b5090979650505050505050565b6000602082840312156134d057600080fd5b8151612b2281612a4d565b6000816134ea576134ea612f04565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e38a49c45b67e2bd9fcbd1e8c6b541c37bfb2cbd7dc4d85eaf824a723b2cec8564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8522,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "chars",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CharInterface)8315"
      },
      {
        "astId": 8525,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)8325"
      },
      {
        "astId": 8528,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "maps",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MapInterface)8438"
      },
      {
        "astId": 8531,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "bcEvents",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(EventsInterface)8301"
      },
      {
        "astId": 8534,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "items",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ItemsInterface)8452"
      },
      {
        "astId": 8537,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "players",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(PlayersInterface)8517"
      },
      {
        "astId": 8539,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "lobbiesAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8541,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "charsAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8543,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8623,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "StartLocation",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Position)14801_storage"
      },
      {
        "astId": 8627,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "games",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Game)14892_storage)dyn_storage"
      },
      {
        "astId": 8631,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "worldItems",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(WorldItem)14787_storage)dyn_storage"
      },
      {
        "astId": 8636,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "gameIdToWorldItemIds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8641,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "addressToGame",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)14892_storage)dyn_storage": {
        "base": "t_struct(Game)14892_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WorldItem)14787_storage)dyn_storage": {
        "base": "t_struct(WorldItem)14787_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.WorldItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CharInterface)8315": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(EventsInterface)8301": {
        "encoding": "inplace",
        "label": "contract EventsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)8452": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)8438": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PlayersInterface)8517": {
        "encoding": "inplace",
        "label": "contract PlayersInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)8325": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)14740": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(WorldItemStatus)14745": {
        "encoding": "inplace",
        "label": "enum BCTypes.WorldItemStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(EventTracker)14796_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.EventTracker",
        "members": [
          {
            "astId": 14789,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "bugEvents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 14791,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mysteryEvents",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 14793,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "scavEvents",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 14795,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "shipEvents",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)14892_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Game",
        "members": [
          {
            "astId": 14853,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 14856,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "playerIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 14858,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "currentPlayerTurnIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14860,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "numPlayers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14862,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "turnsTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14865,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventTracker",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(EventTracker)14796_storage"
          },
          {
            "astId": 14867,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapContract",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 14869,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 14871,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventPlayerId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 14873,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventNumber",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 14876,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventType",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(BCEventType)14740"
          },
          {
            "astId": 14879,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventPosition",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(Position)14801_storage"
          },
          {
            "astId": 14882,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedBugEvents",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 14885,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedMysteryEvents",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 14888,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedScavEvents",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 14891,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedShipEvents",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(Position)14801_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 14798,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 14800,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WorldItem)14787_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.WorldItem",
        "members": [
          {
            "astId": 14778,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14780,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "bcItemId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14783,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(WorldItemStatus)14745"
          },
          {
            "astId": 14786,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "position",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Position)14801_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}