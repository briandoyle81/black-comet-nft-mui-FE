{
  "address": "0xAAf117392aE4c3e68fE5ac0C8285367D73102e72",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "charContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "healthDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "inventoryIDs",
              "type": "uint8[]"
            },
            {
              "internalType": "bool",
              "name": "canHarmOthers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct BCTypes.Player",
          "name": "player",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "ActionCompleteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_charId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.Followthrough",
          "name": "_followthrough",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_1stDirection",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_2ndDirection",
          "type": "uint256"
        }
      ],
      "name": "doAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "extGetGamePlayerIndexes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "turnsTaken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bugEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mysteryEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scavEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shipEvents",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.EventTracker",
          "name": "eventTracker",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "mapContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mapId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "charContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "position",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "healthDmgTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "armorDmgTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "actionsTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "dataTokens",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "canHarmOthers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "dead",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roomTileAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lobbiesAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_playerIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_numPlayers",
          "type": "uint256"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a2564f8594c6bfdd9a6846ca4b6bcbcd011a5cab803712811571ffa9919babc",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0xAAf117392aE4c3e68fE5ac0C8285367D73102e72",
    "transactionIndex": 16,
    "gasUsed": "4118885",
    "logsBloom": "0x
    "blockHash": "0x852806f2ffc72cc77257988e21273c0ec898f6fe3bdc1cfd0523b8a10a851a91",
    "transactionHash": "0x0a2564f8594c6bfdd9a6846ca4b6bcbcd011a5cab803712811571ffa9919babc",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 28137406,
        "transactionHash": "0x0a2564f8594c6bfdd9a6846ca4b6bcbcd011a5cab803712811571ffa9919babc",
        "address": "0xAAf117392aE4c3e68fE5ac0C8285367D73102e72",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x852806f2ffc72cc77257988e21273c0ec898f6fe3bdc1cfd0523b8a10a851a91"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 28137406,
        "transactionHash": "0x0a2564f8594c6bfdd9a6846ca4b6bcbcd011a5cab803712811571ffa9919babc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002495429d3d3d000000000000000000000000000000000000000000000000002f99331218ab6dc900000000000000000000000000000000000000000000256548a7e726ca630a2f0000000000000000000000000000000000000000000000002f749dcf7b6e30c900000000000000000000000000000000000000000000256548cc7c6967a0472f",
        "logIndex": 90,
        "blockHash": "0x852806f2ffc72cc77257988e21273c0ec898f6fe3bdc1cfd0523b8a10a851a91"
      }
    ],
    "blockNumber": 28137406,
    "cumulativeGasUsed": "6576330",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "b07a6ef6bab0d7eb84d5aff8eb7847b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"healthDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"inventoryIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct BCTypes.Player\",\"name\":\"player\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"ActionCompleteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_charId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.Followthrough\",\"name\":\"_followthrough\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_1stDirection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_2ndDirection\",\"type\":\"uint256\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"extGetGamePlayerIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"mapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"healthDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roomTileAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lobbiesAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_numPlayers\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCGames.sol\":\"BCGames\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BCGames.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// Stores information for events that happen in a specific room\\n\\ninterface RoomTileInterface {\\n    // function roomTiles(uint _id) external view returns(RoomTiles.RoomTile memory);\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n    // Right now just the Donghaijiu\\n    // function starterTiles(uint _id) external view returns(RoomTiles.RoomTile memory);\\n    // function getNumStarterTiles() external view returns(uint256);\\n}\\n\\ninterface CharInterface {\\n    function characters(uint _id) external view returns(BCTypes.Character memory);\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll() external returns (uint8);\\n    function abs(int x) external pure returns(int);\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n    function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) external view returns (BCTypes.Door memory);\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) external;\\n    function discoverRoom(uint _mapId, uint _row, uint _col) external returns (bool);\\n    function resetOpenDoors(uint _mapId) external;\\n}\\n\\ncontract BCGames is Ownable {\\n    // TODO: Where is right place for these???\\n    // TODO: Go back to matching name of contract\\n    RoomTileInterface public roomTiles;\\n    CharInterface public chars;\\n    UtilsInterface public utils;\\n    MapInterface public maps;\\n\\n    address public lobbiesAddress;\\n\\n    function setContractAddresses(\\n        address _roomTileAddress,\\n        address _charAddress,\\n        address _utilsAddress,\\n        address _mapsAddress,\\n        address _lobbiesAddress)\\n        public onlyOwner {\\n        // TODO set all addresses\\n        roomTiles = RoomTileInterface(_roomTileAddress);\\n        chars = CharInterface(_charAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        maps = MapInterface(_mapsAddress);\\n        lobbiesAddress = _lobbiesAddress;\\n    }\\n\\n    event DiceRollEvent(uint roll, uint against);\\n    event ActionCompleteEvent(BCTypes.Player player, BCTypes.Action action);\\n    // event Received();\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3;\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    // TODO: Again confirm this is done via reference to pointer\\n    BCTypes.Player[] public players;\\n\\n    BCTypes.Game[] public games;\\n\\n    function addPlayer(address _charContractAddress, uint _charId, address _owner) external returns (uint) {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        // TODO: Decide on allowing more than one valid contract for chars (etc.)\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n\\n        BCTypes.Player storage newPlayer = players.push();\\n        newPlayer.charContractAddress = _charContractAddress;\\n        newPlayer.owner = _owner;\\n        newPlayer.characterId = _charId;\\n        return uint(players.length-1);\\n    }\\n\\n    function startGame(uint[] memory _playerIndexes, uint _numPlayers) public {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n        BCTypes.Game storage newGame = games.push();\\n        newGame.active = true;\\n        newGame.turnsTaken = 0;\\n        newGame.playerIndexes = _playerIndexes;\\n        newGame.numPlayers = _numPlayers;\\n        newGame.eventTracker = BCTypes.EventTracker(0, 0, 0, 0);\\n\\n        newGame.mapContract = address(maps); // TODO: Use this\\n        newGame.mapId = maps.createMap();\\n\\n        // Move the players to the start // TODO: Hardcoded\\n        for (uint i = 0; i < _numPlayers; i++) {\\n            // Warning: using _movePlayer here will attempt to discover, etc.\\n            _movePlayer(newGame.mapId, BCTypes.Position(8, 5), newGame.playerIndexes[i]);\\n        }\\n\\n        // TODO DEAL WITH ITEMS\\n\\n\\n\\n        // TODO: Player who pays to start gets to go first?\\n        // TODO: Event\\n    }\\n\\n    // For move, direction is first move\\n    function doAction(\\n        uint _gameId,\\n        uint _playerId,\\n        BCTypes.Action _action,\\n        BCTypes.Followthrough _followthrough,\\n        // Using room positions requires more checks, try to avoid\\n        // Position memory _roomPos, // For followthrough move, shoot, etc.\\n        uint _1stDirection, // NSEW 4==in room\\n        uint _2ndDirection  // NSEW 4==in room\\n        ) public\\n    {\\n        // Universal requirements for all actions\\n        // TODO: Player must not be dead!\\n        // TODO: Optimize?  Would it actually be better to make a local copy of the player stats?\\n        BCTypes.Player storage currentPlayer = players[_playerId];\\n        BCTypes.Game storage currentGame = games[_gameId];\\n        // TODO: Hardcoding\\n        // BCTypes.GameTile[][] memory =\\n        BCTypes.Character memory currentChar = chars.characters(currentPlayer.characterId);\\n\\n        require(msg.sender == currentPlayer.owner, \\\"Sender not player owner\\\");\\n        require(currentPlayer.actionsTaken < DEFAULT_ACTIONS_NUM, \\\"No actions left\\\"); // TODO: Confirm this won't ever trigger // TODO: Get effects and items\\n        // console.log(\\\"_playerId\\\", _playerId);\\n        // console.log(\\\"Current turn\\\", currentGame.playerIndexes[currentGame.currentPlayerTurnIndex]);\\n\\n        require(_playerId == currentGame.playerIndexes[currentGame.currentPlayerTurnIndex], \\\"Not your turn\\\");\\n\\n        // uint[4] memory currentRoomDoors = currentGame.board[currentPlayer.position.row][currentPlayer.position.col].doors;\\n        // Door storage firstRefDoor = currentGame.doors[currentRoomDoors[_1stDirection]];\\n\\n        if (_action == BCTypes.Action.PASS) {\\n            // Do nothing\\n        } else if (_action == BCTypes.Action.MOVE) {\\n            // TODO: Handle using door number 4 to represent in room and DRY\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    firstRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    firstRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"1st Door not open/breached/unlocked\\\");\\n\\n            if(firstRefDoor.status != BCTypes.DoorStatus.BREACHED) {\\n                maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection, BCTypes.DoorStatus.OPEN);\\n            }\\n\\n            // Main move\\n            BCTypes.Position memory targetRoomPos = utils.getNeighborRoom(_1stDirection, currentPlayer.position);\\n\\n            // Followthrough\\n            if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                BCTypes.Position memory neighborRoom = utils.getNeighborRoom(_2ndDirection, targetRoomPos);\\n                BCTypes.Door memory secondRefDoor = maps.getDoor(currentGame.mapId, neighborRoom.row, neighborRoom.col, _2ndDirection);\\n                require(secondRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    secondRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    secondRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"2nd Door not open/breached/unlocked\\\");\\n                // TODO: Require second room to be explored\\n                targetRoomPos = neighborRoom;\\n\\n                if(secondRefDoor.status != BCTypes.DoorStatus.BREACHED) {\\n                    maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _2ndDirection, BCTypes.DoorStatus.OPEN);\\n                }\\n            }\\n            _movePlayer(currentGame.mapId, targetRoomPos, _playerId);\\n\\n        } else if (_action == BCTypes.Action.HACK) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n            // TODO: Finalize challenge roll design\\n            // TODO: Get effects and items\\n            uint roll = utils.roll();\\n\\n            // Roll of 1 always fails\\n            if (roll + currentChar.traits.hack - firstRefDoor.vsHack > DEFAULT_ROLL_RES && roll > 1) {\\n                maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection, BCTypes.DoorStatus.OPEN);\\n                // TODO: DRY - consolidate with breach\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    _movePlayer(currentGame.mapId, utils.getNeighborRoom(_1stDirection, currentPlayer.position), _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n            } else {\\n                // TODO: Emit event for failed roll\\n            }\\n            emit DiceRollEvent(roll, firstRefDoor.vsHack);\\n        } else if (_action == BCTypes.Action.BREACH) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n            // TODO: Finalize challenge roll design\\n            // TODO: Get effects and items\\n            uint roll = utils.roll();\\n            // Roll of 1 always fails\\n            if (roll + currentChar.traits.breach - firstRefDoor.vsBreach > DEFAULT_ROLL_RES && roll > 1) {\\n                maps.setDoorFromPos(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection, BCTypes.DoorStatus.BREACHED);\\n                // TODO: DRY - consolidate with hack\\n                // console.log(\\\"Roll succeeded\\\");\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    _movePlayer(currentGame.mapId, utils.getNeighborRoom(_1stDirection, currentPlayer.position), _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n                // TODO: Handle breaching into space\\n            } else {\\n                // TODO: Emit event for failed roll\\n                // console.log(\\\"failed roll\\\");\\n            }\\n            emit DiceRollEvent(roll, firstRefDoor.vsBreach);\\n        } else {\\n            revert(\\\"ERROR: Bad action config\\\");\\n        }\\n\\n        currentPlayer.actionsTaken++;\\n        if (currentPlayer.actionsTaken >= DEFAULT_ACTIONS_NUM) {\\n            // TODO: Get items and abilities for actions\\n            // TODO: This will prevent free actions after last\\n            currentPlayer.actionsTaken = 0;\\n            if (currentGame.currentPlayerTurnIndex < currentGame.playerIndexes.length-1) {\\n                currentGame.currentPlayerTurnIndex++;\\n            } else {\\n                // TODO: Consider shuffling the index here\\n                // TODO: Trigger denizen turn\\n                _endPlayerTurn(currentGame.mapId);\\n                currentGame.currentPlayerTurnIndex = 0;\\n            }\\n        }\\n\\n        emit ActionCompleteEvent(currentPlayer, _action);\\n    }\\n\\n    function _endPlayerTurn(uint _mapId) internal {\\n        // TODO: All denizen logic\\n        maps.resetOpenDoors(_mapId);\\n    }\\n\\n    function _movePlayer(uint _mapId, BCTypes.Position memory _position, uint _playerId) internal {\\n        // TODO: Require move to ship tile\\n        players[_playerId].position = _position;\\n\\n        // Discover room and process event, if undiscovered\\n        if (maps.discoverRoom(_mapId, _position.row, _position.col)) {\\n            // TODO: In room event or draw event\\n            // In-room event maps.roomList[maps[_mapId].roomId].eventNum;\\n        }\\n\\n\\n        // TODO: Emit movement\\n    }\\n\\n    function extGetGamePlayerIndexes(uint _gameId) public view returns (uint[] memory) {\\n        uint[] memory indexes = new uint[](games[_gameId].playerIndexes.length);\\n        for (uint i = 0; i < indexes.length; i++) {\\n            // console.log(\\\"i\\\", i);\\n            // console.log(\\\"PlayerId\\\", games[_gameId].playerIndexes[i]);\\n            indexes[i] = games[_gameId].playerIndexes[i];\\n        }\\n        return indexes;\\n    }\\n\\n    function transferFundsOut() public onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    // function onERC721Received(\\n    //     address _operator,\\n    //     address _from,\\n    //     uint256 _tokenId,\\n    //     bytes calldata _data\\n    // )\\n    //     external\\n    //     override\\n    //     returns(bytes4)\\n    // {\\n    //     _operator;\\n    //     _from;\\n    //     _tokenId;\\n    //     _data;\\n    //     emit Received();\\n    //     return 0x150b7a02;\\n    // }\\n}\\n\",\"keccak256\":\"0x043205426976529a620c9226791774a2b4dadeb0ed6c649e4658b846f1912e71\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors; // Ordering\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        // TODO: Should games just always be 3 or 4 players???\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n\\n        // uint8 currentPlayerTurn;\\n        // uint8 startPlayerIndex;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n        enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        string name; // One time cost and convenient // TODO: Except it gets copied every time.  Delete later\\n        // string artLink; // Don't need to know art, names, or desc in-contract\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        // uint8 numDoors; // TODO: Decide whether or not to implement\\n        // uint8 totalDoorStrength;\\n        // uint8 numWindows;\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasVent;\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Tie to universal inventory\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame;\\n        bool dead;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x46fcd68cc677217ace21c2d96979b2dd9cd52686c8dfb9431c8f34274a95e946\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806368030c7211610097578063f069869911610066578063f06986991461027d578063f2fde38b14610299578063f7157f64146102b5578063f71d96cb146102d357610100565b806368030c721461021d578063715018a6146102395780638da5cb5b14610243578063e847ae1e1461026157610100565b80633838aed1116100d35780633838aed1146101a75780633deaec2b146101b157806340d4fd78146101cf5780635a29638d146101ff57610100565b806308178b3c1461010557806310a2cd0d14610135578063117a5b9014610153578063336d7d7b14610189575b600080fd5b61011f600480360381019061011a919061248d565b61030c565b60405161012c91906124ef565b60405180910390f35b61013d61046d565b60405161014a9190612569565b60405180910390f35b61016d60048036038101906101689190612584565b610493565b604051610180979695949392919061264c565b60405180910390f35b610191610590565b60405161019e91906126be565b60405180910390f35b6101af6105b6565b005b6101b961060e565b6040516101c691906126fa565b60405180910390f35b6101e960048036038101906101e49190612584565b610634565b6040516101f691906127d3565b60405180910390f35b610207610735565b6040516102149190612816565b60405180910390f35b6102376004803603810190610232919061298a565b61075b565b005b610241610a83565b005b61024b610a97565b60405161025891906126be565b60405180910390f35b61027b600480360381019061027691906129e6565b610ac0565b005b61029760048036038101906102929190612aab565b610c14565b005b6102b360048036038101906102ae9190612b38565b611ea6565b005b6102bd611f2a565b6040516102ca9190612b86565b60405180910390f35b6102ed60048036038101906102e89190612584565b611f50565b6040516103039a99989796959493929190612bdf565b60405180910390f35b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590612cd9565b60405180910390fd5b600060066001816001815401808255809150500390600052602060002090600802019050848160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083816002018190555060016006805490506104639190612d28565b9150509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600781815481106104a357600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900460ff1690806002015490806003015490806004015490806005016040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681526020016000820160039054906101000a900460ff1660ff1660ff1681525050908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070154905087565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105be612086565b6105c6610a97565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561060b573d6000803e3d6000fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060006007838154811061064c5761064b612d5c565b5b90600052602060002090600802016001018054905067ffffffffffffffff81111561067a57610679612847565b5b6040519080825280602002602001820160405280156106a85781602001602082028036833780820191505090505b50905060005b815181101561072b57600784815481106106cb576106ca612d5c565b5b906000526020600020906008020160010181815481106106ee576106ed612d5c565b5b906000526020600020015482828151811061070c5761070b612d5c565b5b602002602001018181525050808061072390612d8b565b9150506106ae565b5080915050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290612cd9565b60405180910390fd5b60006007600181600181540180825580915050039060005260206000209060080201905060018160000160006101000a81548160ff021916908315150217905550600081600401819055508281600101908051906020019061084e92919061237b565b508181600301819055506040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152508160050160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff160217905550905050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f01fc35a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c9190612de9565b816007018190555060005b82811015610a7d57610a6a82600701546040518060400160405280600860ff168152602001600560ff16815250846001018481548110610a5a57610a59612d5c565b5b9060005260206000200154612104565b8080610a7590612d8b565b915050610a17565b50505050565b610a8b612086565b610a95600061221f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ac8612086565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b600060068681548110610c2a57610c29612d5c565b5b90600052602060002090600802019050600060078881548110610c5057610c4f612d5c565b5b906000526020600020906008020190506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634810bc5984600201546040518263ffffffff1660e01b8152600401610cc191906124ef565b6101c060405180830381865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d03919061302d565b90508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8e906130a7565b60405180910390fd5b60038360040160029054906101000a900460ff1660ff1610610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de590613113565b60405180910390fd5b81600101826002015481548110610e0857610e07612d5c565b5b90600052602060002001548814610e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4b9061317f565b60405180910390fd5b600380811115610e6757610e6661319f565b5b876003811115610e7a57610e7961319f565b5b1415610e8557611d97565b60026003811115610e9957610e9861319f565b5b876003811115610eac57610eab61319f565b5b1415611509576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b8152600401610f4194939291906131ff565b606060405180830381865afa158015610f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8291906132cd565b905060026004811115610f9857610f9761319f565b5b81604001516004811115610faf57610fae61319f565b5b1480610fe3575060036004811115610fca57610fc961319f565b5b81604001516004811115610fe157610fe061319f565b5b145b80610ff557506000816020015160ff16145b611034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102b9061336c565b60405180910390fd5b600360048111156110485761104761319f565b5b8160400151600481111561105f5761105e61319f565b5b1461112757600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b484600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a60026040518663ffffffff1660e01b81526004016110f49594939291906133d4565b600060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050505b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88876003016040518363ffffffff1660e01b81526004016111899291906134c2565b6040805180830381865afa1580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c9919061353b565b90506001808111156111de576111dd61319f565b5b8860018111156111f1576111f061319f565b5b14156114f3576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88846040518363ffffffff1660e01b8152600401611256929190613568565b6040805180830381865afa158015611272573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611296919061353b565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88760070154846000015185602001518c6040518563ffffffff1660e01b815260040161130794939291906131ff565b606060405180830381865afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134891906132cd565b90506002600481111561135e5761135d61319f565b5b816040015160048111156113755761137461319f565b5b14806113a95750600360048111156113905761138f61319f565b5b816040015160048111156113a7576113a661319f565b5b145b806113bb57506000816020015160ff16145b6113fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f190613603565b60405180910390fd5b819250600360048111156114115761141061319f565b5b816040015160048111156114285761142761319f565b5b146114f057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b487600701548960030160000160009054906101000a900460ff168a60030160000160019054906101000a900460ff168c60026040518663ffffffff1660e01b81526004016114bd9594939291906133d4565b600060405180830381600087803b1580156114d757600080fd5b505af11580156114eb573d6000803e3d6000fd5b505050505b50505b6115028460070154828c612104565b5050611d96565b6000600381111561151d5761151c61319f565b5b8760038111156115305761152f61319f565b5b1415611931576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b81526004016115c594939291906131ff565b606060405180830381865afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160691906132cd565b90506001600481111561161c5761161b61319f565b5b816040015160048111156116335761163261319f565b5b14611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166a9061366f565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd5e3c5d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611708919061368f565b60ff1690506003826020015160ff1684602001516060015160ff168361172e91906136bc565b6117389190612d28565b1180156117455750600181115b156118ec57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b485600701548760030160000160009054906101000a900460ff168860030160000160019054906101000a900460ff168b60026040518663ffffffff1660e01b81526004016117da9594939291906133d4565b600060405180830381600087803b1580156117f457600080fd5b505af1158015611808573d6000803e3d6000fd5b5050505060018081111561181f5761181e61319f565b5b8860018111156118325761183161319f565b5b14156118e7576118e68460070154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a896003016040518363ffffffff1660e01b81526004016118a09291906134c2565b6040805180830381865afa1580156118bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e0919061353b565b8c612104565b5b6118ed565b5b7ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c51818360200151604051611922929190613712565b60405180910390a15050611d95565b600160038111156119455761194461319f565b5b8760038111156119585761195761319f565b5b1415611d59576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd884600701548660030160000160009054906101000a900460ff168760030160000160019054906101000a900460ff168a6040518563ffffffff1660e01b81526004016119ed94939291906131ff565b606060405180830381865afa158015611a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2e91906132cd565b905060016004811115611a4457611a4361319f565b5b81604001516004811115611a5b57611a5a61319f565b5b14611a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a929061366f565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd5e3c5d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b30919061368f565b60ff1690506003826000015160ff1684602001516080015160ff1683611b5691906136bc565b611b609190612d28565b118015611b6d5750600181115b15611d1457600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b485600701548760030160000160009054906101000a900460ff168860030160000160019054906101000a900460ff168b60036040518663ffffffff1660e01b8152600401611c029594939291906133d4565b600060405180830381600087803b158015611c1c57600080fd5b505af1158015611c30573d6000803e3d6000fd5b50505050600180811115611c4757611c4661319f565b5b886001811115611c5a57611c5961319f565b5b1415611d0f57611d0e8460070154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a896003016040518363ffffffff1660e01b8152600401611cc89291906134c2565b6040805180830381865afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d08919061353b565b8c612104565b5b611d15565b5b7ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c51818360000151604051611d4a929190613712565b60405180910390a15050611d94565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8b90613787565b60405180910390fd5b5b5b5b82600401600281819054906101000a900460ff1680929190611db8906137a7565b91906101000a81548160ff021916908360ff1602179055505060038360040160029054906101000a900460ff1660ff1610611e625760008360040160026101000a81548160ff021916908360ff16021790555060018260010180549050611e1f9190612d28565b82600201541015611e4957816002016000815480929190611e3f90612d8b565b9190505550611e61565b611e5682600701546122e3565b600082600201819055505b5b7f5ee92b787f1f770bf0b268fd0a0f8dd6c0823885f0701390320add0930f192fb8388604051611e9392919061476d565b60405180910390a1505050505050505050565b611eae612086565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f159061480f565b60405180910390fd5b611f278161221f565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068181548110611f6057600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015490806003016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060040160029054906101000a900460ff16908060040160039054906101000a900460ff16908060070160009054906101000a900460ff16908060070160019054906101000a900460ff1690508a565b61208e612373565b73ffffffffffffffffffffffffffffffffffffffff166120ac610a97565b73ffffffffffffffffffffffffffffffffffffffff1614612102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f99061487b565b60405180910390fd5b565b816006828154811061211957612118612d5c565b5b906000526020600020906008020160030160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663471b675984846000015185602001516040518463ffffffff1660e01b81526004016121d69392919061489b565b6020604051808303816000875af11580156121f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221991906148d2565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358308aa8826040518263ffffffff1660e01b815260040161233e91906124ef565b600060405180830381600087803b15801561235857600080fd5b505af115801561236c573d6000803e3d6000fd5b5050505050565b600033905090565b8280548282559060005260206000209081019282156123b7579160200282015b828111156123b657825182559160200191906001019061239b565b5b5090506123c491906123c8565b5090565b5b808211156123e15760008160009055506001016123c9565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612424826123f9565b9050919050565b61243481612419565b811461243f57600080fd5b50565b6000813590506124518161242b565b92915050565b6000819050919050565b61246a81612457565b811461247557600080fd5b50565b60008135905061248781612461565b92915050565b6000806000606084860312156124a6576124a56123ef565b5b60006124b486828701612442565b93505060206124c586828701612478565b92505060406124d686828701612442565b9150509250925092565b6124e981612457565b82525050565b600060208201905061250460008301846124e0565b92915050565b6000819050919050565b600061252f61252a612525846123f9565b61250a565b6123f9565b9050919050565b600061254182612514565b9050919050565b600061255382612536565b9050919050565b61256381612548565b82525050565b600060208201905061257e600083018461255a565b92915050565b60006020828403121561259a576125996123ef565b5b60006125a884828501612478565b91505092915050565b60008115159050919050565b6125c6816125b1565b82525050565b600060ff82169050919050565b6125e2816125cc565b82525050565b6080820160008201516125fe60008501826125d9565b50602082015161261160208501826125d9565b50604082015161262460408501826125d9565b50606082015161263760608501826125d9565b50505050565b61264681612419565b82525050565b600061014082019050612662600083018a6125bd565b61266f60208301896124e0565b61267c60408301886124e0565b61268960608301876124e0565b61269660808301866125e8565b6126a461010083018561263d565b6126b26101208301846124e0565b98975050505050505050565b60006020820190506126d3600083018461263d565b92915050565b60006126e482612536565b9050919050565b6126f4816126d9565b82525050565b600060208201905061270f60008301846126eb565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61274a81612457565b82525050565b600061275c8383612741565b60208301905092915050565b6000602082019050919050565b600061278082612715565b61278a8185612720565b935061279583612731565b8060005b838110156127c65781516127ad8882612750565b97506127b883612768565b925050600181019050612799565b5085935050505092915050565b600060208201905081810360008301526127ed8184612775565b905092915050565b600061280082612536565b9050919050565b612810816127f5565b82525050565b600060208201905061282b6000830184612807565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61287f82612836565b810181811067ffffffffffffffff8211171561289e5761289d612847565b5b80604052505050565b60006128b16123e5565b90506128bd8282612876565b919050565b600067ffffffffffffffff8211156128dd576128dc612847565b5b602082029050602081019050919050565b600080fd5b6000612906612901846128c2565b6128a7565b90508083825260208201905060208402830185811115612929576129286128ee565b5b835b81811015612952578061293e8882612478565b84526020840193505060208101905061292b565b5050509392505050565b600082601f83011261297157612970612831565b5b81356129818482602086016128f3565b91505092915050565b600080604083850312156129a1576129a06123ef565b5b600083013567ffffffffffffffff8111156129bf576129be6123f4565b5b6129cb8582860161295c565b92505060206129dc85828601612478565b9150509250929050565b600080600080600060a08688031215612a0257612a016123ef565b5b6000612a1088828901612442565b9550506020612a2188828901612442565b9450506040612a3288828901612442565b9350506060612a4388828901612442565b9250506080612a5488828901612442565b9150509295509295909350565b60048110612a6e57600080fd5b50565b600081359050612a8081612a61565b92915050565b60028110612a9357600080fd5b50565b600081359050612aa581612a86565b92915050565b60008060008060008060c08789031215612ac857612ac76123ef565b5b6000612ad689828a01612478565b9650506020612ae789828a01612478565b9550506040612af889828a01612a71565b9450506060612b0989828a01612a96565b9350506080612b1a89828a01612478565b92505060a0612b2b89828a01612478565b9150509295509295509295565b600060208284031215612b4e57612b4d6123ef565b5b6000612b5c84828501612442565b91505092915050565b6000612b7082612536565b9050919050565b612b8081612b65565b82525050565b6000602082019050612b9b6000830184612b77565b92915050565b604082016000820151612bb760008501826125d9565b506020820151612bca60208501826125d9565b50505050565b612bd9816125cc565b82525050565b600061016082019050612bf5600083018d61263d565b612c02602083018c61263d565b612c0f604083018b6124e0565b612c1c606083018a612ba1565b612c2960a0830189612bd0565b612c3660c0830188612bd0565b612c4360e0830187612bd0565b612c51610100830186612bd0565b612c5f6101208301856125bd565b612c6d6101408301846125bd565b9b9a5050505050505050505050565b600082825260208201905092915050565b7f4e6f74206c6f62627920636f6e74726163740000000000000000000000000000600082015250565b6000612cc3601283612c7c565b9150612cce82612c8d565b602082019050919050565b60006020820190508181036000830152612cf281612cb6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d3382612457565b9150612d3e83612457565b925082821015612d5157612d50612cf9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612d9682612457565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612dc957612dc8612cf9565b5b600182019050919050565b600081519050612de381612461565b92915050565b600060208284031215612dff57612dfe6123ef565b5b6000612e0d84828501612dd4565b91505092915050565b600080fd5b6000819050919050565b612e2e81612e1b565b8114612e3957600080fd5b50565b600081519050612e4b81612e25565b92915050565b612e5a816125cc565b8114612e6557600080fd5b50565b600081519050612e7781612e51565b92915050565b600060e08284031215612e9357612e92612e16565b5b612e9d60e06128a7565b90506000612ead84828501612e68565b6000830152506020612ec184828501612e68565b6020830152506040612ed584828501612e68565b6040830152506060612ee984828501612e68565b6060830152506080612efd84828501612e68565b60808301525060a0612f1184828501612e68565b60a08301525060c0612f2584828501612e68565b60c08301525092915050565b612f3a816125b1565b8114612f4557600080fd5b50565b600081519050612f5781612f31565b92915050565b60006101c08284031215612f7457612f73612e16565b5b612f7f6101006128a7565b90506000612f8f84828501612e3c565b6000830152506020612fa384828501612e7d565b602083015250610100612fb884828501612e68565b604083015250610120612fcd84828501612e68565b606083015250610140612fe284828501612e68565b608083015250610160612ff784828501612e68565b60a08301525061018061300c84828501612f48565b60c0830152506101a061302184828501612f48565b60e08301525092915050565b60006101c08284031215613044576130436123ef565b5b600061305284828501612f5d565b91505092915050565b7f53656e646572206e6f7420706c61796572206f776e6572000000000000000000600082015250565b6000613091601783612c7c565b915061309c8261305b565b602082019050919050565b600060208201905081810360008301526130c081613084565b9050919050565b7f4e6f20616374696f6e73206c6566740000000000000000000000000000000000600082015250565b60006130fd600f83612c7c565b9150613108826130c7565b602082019050919050565b6000602082019050818103600083015261312c816130f0565b9050919050565b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000600082015250565b6000613169600d83612c7c565b915061317482613133565b602082019050919050565b600060208201905081810360008301526131988161315c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006131e96131e46131df846125cc565b61250a565b612457565b9050919050565b6131f9816131ce565b82525050565b600060808201905061321460008301876124e0565b61322160208301866131f0565b61322e60408301856131f0565b61323b60608301846124e0565b95945050505050565b6005811061325157600080fd5b50565b60008151905061326381613244565b92915050565b60006060828403121561327f5761327e612e16565b5b61328960606128a7565b9050600061329984828501612e68565b60008301525060206132ad84828501612e68565b60208301525060406132c184828501613254565b60408301525092915050565b6000606082840312156132e3576132e26123ef565b5b60006132f184828501613269565b91505092915050565b7f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b6000613356602383612c7c565b9150613361826132fa565b604082019050919050565b6000602082019050818103600083015261338581613349565b9050919050565b6005811061339d5761339c61319f565b5b50565b60008190506133ae8261338c565b919050565b60006133be826133a0565b9050919050565b6133ce816133b3565b82525050565b600060a0820190506133e960008301886124e0565b6133f660208301876131f0565b61340360408301866131f0565b61341060608301856124e0565b61341d60808301846133c5565b9695505050505050565b60008160001c9050919050565b600060ff82169050919050565b600061345461344f83613427565b613434565b9050919050565b60008160081c9050919050565b600061347b6134768361345b565b613434565b9050919050565b60408201600080830154905061349781613441565b6134a460008601826125d9565b506134ae81613468565b6134bb60208601826125d9565b5050505050565b60006060820190506134d760008301856124e0565b6134e46020830184613482565b9392505050565b60006040828403121561350157613500612e16565b5b61350b60406128a7565b9050600061351b84828501612e68565b600083015250602061352f84828501612e68565b60208301525092915050565b600060408284031215613551576135506123ef565b5b600061355f848285016134eb565b91505092915050565b600060608201905061357d60008301856124e0565b61358a6020830184612ba1565b9392505050565b7f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b60006135ed602383612c7c565b91506135f882613591565b604082019050919050565b6000602082019050818103600083015261361c816135e0565b9050919050565b7f446f6f72206e6f7420636c6f7365640000000000000000000000000000000000600082015250565b6000613659600f83612c7c565b915061366482613623565b602082019050919050565b600060208201905081810360008301526136888161364c565b9050919050565b6000602082840312156136a5576136a46123ef565b5b60006136b384828501612e68565b91505092915050565b60006136c782612457565b91506136d283612457565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561370757613706612cf9565b5b828201905092915050565b600060408201905061372760008301856124e0565b61373460208301846131f0565b9392505050565b7f4552524f523a2042616420616374696f6e20636f6e6669670000000000000000600082015250565b6000613771601883612c7c565b915061377c8261373b565b602082019050919050565b600060208201905081810360008301526137a081613764565b9050919050565b60006137b2826125cc565b915060ff8214156137c6576137c5612cf9565b5b600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138046137ff83613427565b6137d1565b9050919050565b61381481612419565b82525050565b6000819050919050565b600061383761383283613427565b61381a565b9050919050565b60408201600080830154905061385381613441565b61386060008601826125d9565b5061386a81613468565b61387760208601826125d9565b5050505050565b60008160101c9050919050565b600061389e6138998361387e565b613434565b9050919050565b60008160181c9050919050565b60006138c56138c0836138a5565b613434565b9050919050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160201c9050919050565b600061391d613918836138fd565b613434565b9050919050565b60008160281c9050919050565b600061394461393f83613924565b613434565b9050919050565b60008160301c9050919050565b600061396b6139668361394b565b613434565b9050919050565b60008160381c9050919050565b600061399261398d83613972565b613434565b9050919050565b60008160401c9050919050565b60006139b96139b483613999565b613434565b9050919050565b60008160481c9050919050565b60006139e06139db836139c0565b613434565b9050919050565b60008160501c9050919050565b6000613a07613a02836139e7565b613434565b9050919050565b60008160581c9050919050565b6000613a2e613a2983613a0e565b613434565b9050919050565b60008160601c9050919050565b6000613a55613a5083613a35565b613434565b9050919050565b60008160681c9050919050565b6000613a7c613a7783613a5c565b613434565b9050919050565b60008160701c9050919050565b6000613aa3613a9e83613a83565b613434565b9050919050565b60008160781c9050919050565b6000613aca613ac583613aaa565b613434565b9050919050565b60008160801c9050919050565b6000613af1613aec83613ad1565b613434565b9050919050565b60008160881c9050919050565b6000613b18613b1383613af8565b613434565b9050919050565b60008160901c9050919050565b6000613b3f613b3a83613b1f565b613434565b9050919050565b60008160981c9050919050565b6000613b66613b6183613b46565b613434565b9050919050565b60008160a01c9050919050565b6000613b8d613b8883613b6d565b613434565b9050919050565b60008160a81c9050919050565b6000613bb4613baf83613b94565b613434565b9050919050565b60008160b01c9050919050565b6000613bdb613bd683613bbb565b613434565b9050919050565b60008160b81c9050919050565b6000613c02613bfd83613be2565b613434565b9050919050565b60008160c01c9050919050565b6000613c29613c2483613c09565b613434565b9050919050565b60008160c81c9050919050565b6000613c50613c4b83613c30565b613434565b9050919050565b60008160d01c9050919050565b6000613c77613c7283613c57565b613434565b9050919050565b60008160d81c9050919050565b6000613c9e613c9983613c7e565b613434565b9050919050565b60008160e01c9050919050565b6000613cc5613cc083613ca5565b613434565b9050919050565b60008160e81c9050919050565b6000613cec613ce783613ccc565b613434565b9050919050565b60008160f01c9050919050565b6000613d13613d0e83613cf3565b613434565b9050919050565b60008160f81c9050919050565b6000613d3a613d3583613d1a565b613434565b9050919050565b6000613d4c826138cc565b613d5681856138d7565b935083613d62846138e8565b600060011561408f575b8360016020038201101561408e578154613d8e88613d8983613441565b6125d9565b602088019750613da688613da183613468565b6125d9565b602088019750613dbe88613db98361388b565b6125d9565b602088019750613dd688613dd1836138b2565b6125d9565b602088019750613dee88613de98361390a565b6125d9565b602088019750613e0688613e0183613931565b6125d9565b602088019750613e1e88613e1983613958565b6125d9565b602088019750613e3688613e318361397f565b6125d9565b602088019750613e4e88613e49836139a6565b6125d9565b602088019750613e6688613e61836139cd565b6125d9565b602088019750613e7e88613e79836139f4565b6125d9565b602088019750613e9688613e9183613a1b565b6125d9565b602088019750613eae88613ea983613a42565b6125d9565b602088019750613ec688613ec183613a69565b6125d9565b602088019750613ede88613ed983613a90565b6125d9565b602088019750613ef688613ef183613ab7565b6125d9565b602088019750613f0e88613f0983613ade565b6125d9565b602088019750613f2688613f2183613b05565b6125d9565b602088019750613f3e88613f3983613b2c565b6125d9565b602088019750613f5688613f5183613b53565b6125d9565b602088019750613f6e88613f6983613b7a565b6125d9565b602088019750613f8688613f8183613ba1565b6125d9565b602088019750613f9e88613f9983613bc8565b6125d9565b602088019750613fb688613fb183613bef565b6125d9565b602088019750613fce88613fc983613c16565b6125d9565b602088019750613fe688613fe183613c3d565b6125d9565b602088019750613ffe88613ff983613c64565b6125d9565b6020880197506140168861401183613c8b565b6125d9565b60208801975061402e8861402983613cb2565b6125d9565b6020880197506140468861404183613cd9565b6125d9565b60208801975061405e8861405983613d00565b6125d9565b6020880197506140768861407183613d27565b6125d9565b60208801975060018301925050602081019050613d6c565b5b60011561457a578154848210156140bf576140b2886140ad83613441565b6125d9565b6020880197506001820191505b848210156140e6576140d9886140d483613468565b6125d9565b6020880197506001820191505b8482101561410d57614100886140fb8361388b565b6125d9565b6020880197506001820191505b848210156141345761412788614122836138b2565b6125d9565b6020880197506001820191505b8482101561415b5761414e886141498361390a565b6125d9565b6020880197506001820191505b84821015614182576141758861417083613931565b6125d9565b6020880197506001820191505b848210156141a95761419c8861419783613958565b6125d9565b6020880197506001820191505b848210156141d0576141c3886141be8361397f565b6125d9565b6020880197506001820191505b848210156141f7576141ea886141e5836139a6565b6125d9565b6020880197506001820191505b8482101561421e576142118861420c836139cd565b6125d9565b6020880197506001820191505b848210156142455761423888614233836139f4565b6125d9565b6020880197506001820191505b8482101561426c5761425f8861425a83613a1b565b6125d9565b6020880197506001820191505b84821015614293576142868861428183613a42565b6125d9565b6020880197506001820191505b848210156142ba576142ad886142a883613a69565b6125d9565b6020880197506001820191505b848210156142e1576142d4886142cf83613a90565b6125d9565b6020880197506001820191505b84821015614308576142fb886142f683613ab7565b6125d9565b6020880197506001820191505b8482101561432f576143228861431d83613ade565b6125d9565b6020880197506001820191505b84821015614356576143498861434483613b05565b6125d9565b6020880197506001820191505b8482101561437d576143708861436b83613b2c565b6125d9565b6020880197506001820191505b848210156143a4576143978861439283613b53565b6125d9565b6020880197506001820191505b848210156143cb576143be886143b983613b7a565b6125d9565b6020880197506001820191505b848210156143f2576143e5886143e083613ba1565b6125d9565b6020880197506001820191505b848210156144195761440c8861440783613bc8565b6125d9565b6020880197506001820191505b84821015614440576144338861442e83613bef565b6125d9565b6020880197506001820191505b848210156144675761445a8861445583613c16565b6125d9565b6020880197506001820191505b8482101561448e576144818861447c83613c3d565b6125d9565b6020880197506001820191505b848210156144b5576144a8886144a383613c64565b6125d9565b6020880197506001820191505b848210156144dc576144cf886144ca83613c8b565b6125d9565b6020880197506001820191505b84821015614503576144f6886144f183613cb2565b6125d9565b6020880197506001820191505b8482101561452a5761451d8861451883613cd9565b6125d9565b6020880197506001820191505b84821015614551576145448861453f83613d00565b6125d9565b6020880197506001820191505b848210156145785761456b8861456683613d27565b6125d9565b6020880197506001820191505b505b8694505050505092915050565b600060ff82169050919050565b60006145a76145a283613427565b614587565b9050919050565b6145b7816125b1565b82525050565b60006145d06145cb8361345b565b614587565b9050919050565b60006101a0830160008084015490506145ef816137f1565b6145fc600087018261380b565b506001840154905061460d816137f1565b61461a602087018261380b565b506002840154905061462b81613824565b6146386040870182612741565b506003840161464a606087018261383e565b506004840154905061465b81613441565b61466860a08701826125d9565b5061467281613468565b61467f60c08701826125d9565b506146898161388b565b61469660e08701826125d9565b506146a0816138b2565b6146ae6101008701826125d9565b50600584018583036101208701526146c68382613d41565b925050600684018583036101408701526146e08382613d41565b925050600784015490506146f381614594565b6147016101608701826145ae565b5061470b816145bd565b6147196101808701826145ae565b50819250505092915050565b600481106147365761473561319f565b5b50565b600081905061474782614725565b919050565b600061475782614739565b9050919050565b6147678161474c565b82525050565b6000604082019050818103600083015261478781856145d7565b9050614796602083018461475e565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006147f9602683612c7c565b91506148048261479d565b604082019050919050565b60006020820190508181036000830152614828816147ec565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614865602083612c7c565b91506148708261482f565b602082019050919050565b6000602082019050818103600083015261489481614858565b9050919050565b60006060820190506148b060008301866124e0565b6148bd60208301856131f0565b6148ca60408301846131f0565b949350505050565b6000602082840312156148e8576148e76123ef565b5b60006148f684828501612f48565b9150509291505056fea2646970667358221220590e1d4242e5ef631f8d5bc2ff78b9d47cd8356a44d4a09dffc0c10cf84ad21464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 271,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "roomTiles",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(RoomTileInterface)153"
      },
      {
        "astId": 274,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "chars",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(CharInterface)162"
      },
      {
        "astId": 277,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "utils",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(UtilsInterface)206"
      },
      {
        "astId": 280,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "maps",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MapInterface)266"
      },
      {
        "astId": 282,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "lobbiesAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 350,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "players",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Player)1181_storage)dyn_storage"
      },
      {
        "astId": 354,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "games",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Game)1276_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)1276_storage)dyn_storage": {
        "base": "t_struct(Game)1276_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Player)1181_storage)dyn_storage": {
        "base": "t_struct(Player)1181_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Player[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CharInterface)162": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)266": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(RoomTileInterface)153": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)206": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_struct(EventTracker)1200_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.EventTracker",
        "members": [
          {
            "astId": 1193,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "bugEvents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1195,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mysteryEvents",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1197,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "scavEvents",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1199,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "shipEvents",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)1276_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Game",
        "members": [
          {
            "astId": 1259,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1262,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "playerIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1264,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "currentPlayerTurnIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1266,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "numPlayers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1268,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "turnsTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1271,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventTracker",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(EventTracker)1200_storage"
          },
          {
            "astId": 1273,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapContract",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1275,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Player)1181_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Player",
        "members": [
          {
            "astId": 1155,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1157,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "charContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1159,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "characterId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1162,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "position",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Position)1205_storage"
          },
          {
            "astId": 1164,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "healthDmgTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1166,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "armorDmgTaken",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1168,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "actionsTaken",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1170,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "dataTokens",
            "offset": 3,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1173,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "currentEffects",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1176,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "inventoryIDs",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1178,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "canHarmOthers",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1180,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "dead",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Position)1205_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 1202,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1204,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}