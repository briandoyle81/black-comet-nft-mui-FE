{
  "address": "0x52D825A065e9a7F4D0D6fcD89a4b572Ff1fd5984",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.DenizenType",
          "name": "denizenType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denizenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerTarget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "damage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "turnabout",
          "type": "uint256"
        }
      ],
      "name": "DenizenAttack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "DenizenTurnOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.DenizenType",
          "name": "denizenType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denizenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "damage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "turnabout",
          "type": "uint256"
        }
      ],
      "name": "PlayerAttack",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "StartLocation",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "row",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "col",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DenizenType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "addDenizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bcEvents",
      "outputs": [
        {
          "internalType": "contract EventsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debugRoomId",
          "type": "uint256"
        }
      ],
      "name": "debugMovePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BCTypes.DenizenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "denizenDef",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BCTypes.DenizenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "denizenDmg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BCTypes.DenizenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "denizenHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BCTypes.DenizenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "denizenMovement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BCTypes.DenizenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "denizenOff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_free",
          "type": "bool"
        }
      ],
      "name": "endPlayerAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "denizenTurn",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "playerIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "currentPlayerTurnIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numPlayers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "turnsTaken",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "bugEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "mysteryEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "scavEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "shipEvents",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.EventTracker",
              "name": "eventTracker",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "mapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventNumber",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "eventPosition",
              "type": "tuple"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedBugEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedMysteryEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedScavEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedShipEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "turnTimeLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "DEBUG_returnAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum BCTypes.DenizenType",
                  "name": "denizenType",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "row",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "col",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct BCTypes.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "healthRemaining",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "looted",
                  "type": "bool"
                }
              ],
              "internalType": "struct BCTypes.Denizen[]",
              "name": "denizens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct BCTypes.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "extGetGamePlayerIndexes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "extGetGamesOfPlayer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extGetNumGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "extMovePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "forceNextTurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "denizenTurn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "turnsTaken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bugEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mysteryEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scavEvents",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shipEvents",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.EventTracker",
          "name": "eventTracker",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eventPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eventNumber",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "eventPosition",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "turnTimeLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTurnTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "DEBUG_returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getDenizensInGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.DenizenType",
              "name": "denizenType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "healthRemaining",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Denizen[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_charId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentPlayerTurnIndex",
          "type": "uint256"
        }
      ],
      "name": "leaveGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos2",
          "type": "tuple"
        }
      ],
      "name": "manhattanDistance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denizenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerAttackRating",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_playerPosition",
          "type": "tuple"
        }
      ],
      "name": "playerAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "players",
      "outputs": [
        {
          "internalType": "contract PlayersInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "processDenizenMoves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "resolveEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lobbiesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eventsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denizenId",
          "type": "uint256"
        }
      ],
      "name": "setDenizenLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_playerIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debugRoomId",
          "type": "uint256"
        }
      ],
      "name": "startGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf019065564fb81ae7a22a9b13103c2e0bd64d79182bdc1eb9d66cf6b22a8335",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x52D825A065e9a7F4D0D6fcD89a4b572Ff1fd5984",
    "transactionIndex": 2,
    "gasUsed": "6289113",
    "logsBloom": "0x
    "blockHash": "0x103ce0034ee21bd4100b13c509be26c5d350ff88e3ef8dbc17774d044e89f943",
    "transactionHash": "0xdf019065564fb81ae7a22a9b13103c2e0bd64d79182bdc1eb9d66cf6b22a8335",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 37189334,
        "transactionHash": "0xdf019065564fb81ae7a22a9b13103c2e0bd64d79182bdc1eb9d66cf6b22a8335",
        "address": "0x52D825A065e9a7F4D0D6fcD89a4b572Ff1fd5984",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x103ce0034ee21bd4100b13c509be26c5d350ff88e3ef8dbc17774d044e89f943"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 37189334,
        "transactionHash": "0xdf019065564fb81ae7a22a9b13103c2e0bd64d79182bdc1eb9d66cf6b22a8335",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003f3a8cf53295510000000000000000000000000000000000000000000000000657f6de099e1c36000000000000000000000000000000000000000000000b9d01fe1808ec2321160000000000000000000000000000000000000000000000000618bc51146b86e5000000000000000000000000000000000000000000000b9d023d5295e155b667",
        "logIndex": 19,
        "blockHash": "0x103ce0034ee21bd4100b13c509be26c5d350ff88e3ef8dbc17774d044e89f943"
      }
    ],
    "blockNumber": 37189334,
    "cumulativeGasUsed": "7028503",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "53bf44f095d7d70fd7cc81c3226ef8f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"denizenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denizenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"damage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnabout\",\"type\":\"uint256\"}],\"name\":\"DenizenAttack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"DenizenTurnOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"denizenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denizenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"damage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnabout\",\"type\":\"uint256\"}],\"name\":\"PlayerAttack\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StartLocation\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"addDenizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcEvents\",\"outputs\":[{\"internalType\":\"contract EventsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debugRoomId\",\"type\":\"uint256\"}],\"name\":\"debugMovePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"denizenDef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"denizenDmg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"denizenHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"denizenMovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"denizenOff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"endPlayerAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetGame\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"denizenTurn\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedBugEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedMysteryEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedScavEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedShipEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"turnTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DEBUG_returnAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"denizenType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"healthRemaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Denizen[]\",\"name\":\"denizens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BCTypes.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"extGetGamePlayerIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"extGetGamesOfPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extGetNumGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"extMovePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"forceNextTurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"denizenTurn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"turnTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DEBUG_returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getDenizensInGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DenizenType\",\"name\":\"denizenType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"healthRemaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Denizen[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentPlayerTurnIndex\",\"type\":\"uint256\"}],\"name\":\"leaveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos2\",\"type\":\"tuple\"}],\"name\":\"manhattanDistance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denizenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerAttackRating\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_playerPosition\",\"type\":\"tuple\"}],\"name\":\"playerAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"players\",\"outputs\":[{\"internalType\":\"contract PlayersInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"processDenizenMoves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"resolveEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lobbiesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eventsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denizenId\",\"type\":\"uint256\"}],\"name\":\"setDenizenLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debugRoomId\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCGames.sol\":\"BCGames\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BCEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// NOTES\\n// Placing enemies must always have the effects in the order of:\\n// - numEnemyToPlace\\n// - EnemyType\\n// - EnemyPlacement\\n\\n// Stores information for events that happen in a specific room or from a card\\n// TODO: CRITICAL -> Unit tests for event and effect validity\\ncontract BCEvents is Ownable {\\n    enum EnemyPlacement {\\n        NONE,\\n        IN_ROOM,\\n        LAST_ROOM,\\n        ALL_ADJACENT\\n    }\\n    enum MovePlayer {\\n        NONE,\\n        HOME,\\n        LAST_ROOM,\\n        RANDOM,\\n        PORTAL,\\n        REACTOR\\n    }\\n\\n    enum EffectTypes {\\n        empty,\\n        permanant,\\n        fullHealth,\\n        instantDeath,\\n        placeHazard,\\n        grantEgg,\\n        healAmt,\\n        healArmorAmt,\\n        hazardDamage,\\n        physicalDamage,\\n        numEnemyToPlace,\\n        enemyType,\\n        whereToPlace,\\n        grantData,\\n        grantNumItems,\\n        takeNumItems,\\n        dropNumItems, // drop items in the room in unknown state\\n        moveType,\\n        trapPlayerEscapeRoll,\\n        grantAbility,\\n        loseTurn,\\n        lockDoorStrength,\\n        traitModifiersID\\n    }\\n\\n    // Effects are mapped by the effect type to an int:\\n    // CRITICAL:  1 == true, not present is false\\n    // Numbers are cast to enum as above\\n    // Uint effects are as normal\\n\\n    struct Effect {\\n        EffectTypes effect;\\n        uint value;\\n    }\\n\\n    struct BCEvent {\\n        // TODO: and replace name and text with a unique ID\\n        uint id; // TODO: Eval system, for now X000NN is for cards and 2000NN is for tiles\\n        // TODO: Change `permanant` to a number to serve as turns allowed?\\n        bool permanent; // Draw card before use allowed.  As an action - both can be derived from this\\n        // TODO: Permanent events conflict with and prevent card events in a room, this upsets balance!\\n        uint8 rollForLow; // On or below (unused if zero)\\n        uint8 rollForHigh; // On or above (unused if zero)\\n        // If both roll items are zero, player can choose any non\\n        Effect[] defaultEffect; // TODO: Eval doing it this way vs. using index and storing in array\\n        Effect[] lowEffect;\\n        Effect[] highEffect;\\n    }\\n\\n    Effect[][] public effectsList; // Used to support creating empty Effects // TODO: Is this the best pattern?\\n\\n    BCEvent[] public bcRoomEvents;\\n\\n    BCEvent[] public bcBugCardEvents;\\n    BCEvent[] public bcMysteryCardEvents;\\n    BCEvent[] public bcScavCardEvents;\\n    BCEvent[] public bcShipCardEvents;\\n\\n    constructor() {\\n        effectsList.push(); // Push empty effect into [0], but this is probably unnecessary\\n        _initializeDefaultRoomEvents();\\n        _initializeDefaultRoomEvents_2();\\n        _initializeDefaultBugCardEvents();\\n        _initializeDefaultMysteryCardEvents();\\n        _initializeDefaultScavCardEvents();\\n        _initializeDefaultShipCardEvents();\\n    }\\n\\n    function extGetRoomEvent(uint _id) public view returns (BCEvent memory) {\\n        return bcRoomEvents[_id];\\n    }\\n\\n    function extGetCardEvent(\\n        uint _id,\\n        BCTypes.BCEventType _type\\n    ) public view returns (BCEvent memory) {\\n        if (_type == BCTypes.BCEventType.BUG) {\\n            return bcBugCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.MYSTERY) {\\n            return bcMysteryCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SCAVENGER) {\\n            return bcScavCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SHIP_SECURITY) {\\n            return bcShipCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.NONE) {\\n            // Return an empty event\\n            // TODO: check for side effects of type\\n            return bcBugCardEvents[0];\\n        } else {\\n            console.log(\\\"Bad Event of type:\\\", uint(_type));\\n            revert(\\\"Bad event type\\\");\\n        }\\n    }\\n\\n    function extGetEffects(\\n        BCTypes.BCEventType _eventType,\\n        uint _id\\n    ) public view returns (Effect[][] memory) {\\n        // TODO: Hardcoded length??\\n        Effect[][] memory currentEffects = new Effect[][](3);\\n        BCEvent storage currentEvent;\\n        if (_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcRoomEvents[_id];\\n        } else {\\n            if (_eventType == BCTypes.BCEventType.BUG) {\\n                currentEvent = bcBugCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.MYSTERY) {\\n                currentEvent = bcMysteryCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SCAVENGER) {\\n                currentEvent = bcScavCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                currentEvent = bcShipCardEvents[_id];\\n            } else {\\n                revert(\\\"Bad event type\\\");\\n            }\\n        }\\n\\n        currentEffects[0] = currentEvent.defaultEffect;\\n        // TODO: This is ineffecient if most effects don't have all three\\n        currentEffects[1] = currentEvent.lowEffect;\\n        currentEffects[2] = currentEvent.highEffect;\\n\\n        return currentEffects;\\n    }\\n\\n    // TODO: REFACTOR WHEN TRAIT MOD SYSTEM IMPLEMENTED!!!\\n    // For _effect 0 -> default, 1 -> low, 2-> high\\n    // function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) public view returns (BCTypes.Traits memory) {\\n    //     BCEvent storage currentEvent;\\n    //     if(_roomEvent) {\\n    //         currentEvent = bcRoomEvents[_id];\\n    //     } else {\\n    //         currentEvent = bcCardEvents[_id];\\n    //     }\\n\\n    //     if(_effect == 0) {\\n    //         return currentEvent.defaultEffect.traitModifiers;\\n    //     } else if (_effect == 1) {\\n    //         return currentEvent.lowEffect.traitModifiers;\\n    //     } else if (_effect == 2) {\\n    //         return currentEvent.highEffect.traitModifiers;\\n    //     } else {\\n    //         revert (\\\"Effect must be 0, 1, or 2\\\");\\n    //     }\\n    // }\\n\\n    function _initializeDefaultBugCardEvents() internal {\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcBugCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 There's Something in the Walls\\n        // TODO\\n        Effect[] storage somethingInWallsDefault = effectsList.push();\\n        somethingInWallsDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        somethingInWallsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        somethingInWallsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage somethingInWalls = bcBugCardEvents.push();\\n        somethingInWalls.id = 300001; // Bug events start with 3\\n        somethingInWalls.permanent = false;\\n        // somethingInWalls.rollForLow = 0;\\n        // somethingInWalls.rollForHigh = 0; //TODO: Can save gas/space not doing this, but less explicit\\n\\n        somethingInWalls.defaultEffect = somethingInWallsDefault;\\n        // somethingInWalls.lowEffect = emptyEffect;\\n        // somethingInWalls.highEffect = emptyEffect;\\n\\n        // 2 Something Bit Me // TODO: Appears not to hurt player\\n        Effect[] storage somethingBitMeDefault = effectsList.push();\\n        somethingBitMeDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n\\n        BCEvent storage somethingBitMe = bcBugCardEvents.push();\\n        somethingBitMe.id = 300002;\\n        somethingBitMe.permanent = false;\\n        // somethingBitMe.rollForLow = 0;\\n        // somethingBitMe.rollForHigh = 0;\\n\\n        somethingBitMe.defaultEffect = somethingBitMeDefault;\\n        // somethingBitMe.lowEffect = emptyEffect;\\n        // somethingBitMe.highEffect = emptyEffect;\\n\\n        // 3 Game Over Man, Game Over!\\n        // TODO\\n        Effect[] storage gameOverDefault = effectsList.push();\\n        gameOverDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage gameOver = bcBugCardEvents.push();\\n        gameOver.id = 300003;\\n        gameOver.permanent = false;\\n        // gameOver.rollForLow = 0;\\n        // gameOver.rollForHigh = 0;\\n\\n        gameOver.defaultEffect = gameOverDefault;\\n        // gameOver.lowEffect = emptyEffect;\\n        // gameOver.highEffect = emptyEffect;\\n\\n        // 4 Packrat\\n        Effect[] storage packratDefault = effectsList.push();\\n        packratDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage packrat = bcBugCardEvents.push();\\n        packrat.id = 300004;\\n        packrat.permanent = false;\\n        // packrat.rollForLow = 0;\\n        // packrat.rollForHigh = 0;\\n\\n        packrat.defaultEffect = packratDefault;\\n        // packrat.lowEffect = emptyEffect;\\n        // packrat.highEffect = emptyEffect;\\n\\n        // 5 What is this stuff?\\n        // TODO\\n        Effect[] storage whatIsThisDefault = effectsList.push();\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: Ignored by bugs\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: -1 to all rolls\\n\\n        BCEvent storage whatIsThis = bcBugCardEvents.push();\\n        whatIsThis.id = 300005;\\n        whatIsThis.permanent = false;\\n        // whatIsThis.rollForLow = 0;\\n        // whatIsThis.rollForHigh = 0;\\n\\n        whatIsThis.defaultEffect = whatIsThisDefault;\\n\\n        // 6 Packrat Nest\\n        // TODO\\n        Effect[] storage packratNestDefault = effectsList.push();\\n        packratNestDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage packratNest = bcBugCardEvents.push();\\n        packratNest.id = 300006;\\n        packratNest.permanent = false;\\n\\n        packratNest.defaultEffect = packratNestDefault;\\n\\n        // 7 Clever Girls\\n        // TODO\\n        Effect[] storage cleverGirlsDefault = effectsList.push();\\n        cleverGirlsDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        cleverGirlsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        cleverGirlsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM))\\n        );\\n\\n        BCEvent storage cleverGirls = bcBugCardEvents.push();\\n        cleverGirls.id = 300007;\\n\\n        cleverGirls.defaultEffect = cleverGirlsDefault;\\n\\n        // 8 Warrior\\n        // TODO\\n        Effect[] storage warriorDefault = effectsList.push();\\n        warriorDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        warriorDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        warriorDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage warrior = bcBugCardEvents.push();\\n        warrior.id = 300008;\\n\\n        warrior.defaultEffect = warriorDefault;\\n\\n        // 9 Good Girl\\n        // TODO\\n        Effect[] storage goodGirlDefault = effectsList.push();\\n        goodGirlDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage goodGirl = bcBugCardEvents.push();\\n        goodGirl.id = 300009;\\n\\n        goodGirl.defaultEffect = goodGirlDefault;\\n\\n        // 10 What's that Smell?\\n        Effect[] storage whatsThatSmellDefault = effectsList.push();\\n        whatsThatSmellDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        whatsThatSmellDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage whatsThatSmell = bcBugCardEvents.push();\\n        whatsThatSmell.id = 300010;\\n\\n        whatsThatSmell.defaultEffect = whatsThatSmellDefault;\\n\\n        // 11 Spider's Web\\n        // TODO\\n        Effect[] storage spidersWebDefault = effectsList.push();\\n        spidersWebDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        spidersWebDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage spidersWebLow = effectsList.push();\\n        spidersWebLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        spidersWebLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage spidersWebHigh = effectsList.push();\\n        spidersWebHigh.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage spidersWeb = bcBugCardEvents.push();\\n        spidersWeb.id = 300011;\\n        spidersWeb.rollForLow = 1;\\n        spidersWeb.rollForHigh = 6;\\n\\n        spidersWeb.defaultEffect = spidersWebDefault;\\n        spidersWeb.lowEffect = spidersWebLow;\\n        spidersWeb.highEffect = spidersWebHigh;\\n\\n        // 12 Something is following me...\\n        // TODO\\n        Effect[] storage followingMeDefault = effectsList.push();\\n        followingMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        followingMeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        followingMeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM))\\n        );\\n\\n        BCEvent storage followingMe = bcBugCardEvents.push();\\n        followingMe.id = 300012;\\n\\n        followingMe.defaultEffect = followingMeDefault;\\n\\n        // 13 Sneak Attack\\n        Effect[] storage sneakAttackDefault = effectsList.push();\\n        sneakAttackDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        sneakAttackDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        sneakAttackDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage sneakAttack = bcBugCardEvents.push();\\n        sneakAttack.id = 300013;\\n\\n        sneakAttack.defaultEffect = sneakAttackDefault;\\n\\n        // 14 Feeding Time\\n        // TODO\\n        Effect[] storage feedingTimeDefault = effectsList.push();\\n        feedingTimeDefault.push(Effect(EffectTypes.dropNumItems, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        feedingTimeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        feedingTimeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage feedingTime = bcBugCardEvents.push();\\n        feedingTime.id = 300014;\\n\\n        feedingTime.defaultEffect = feedingTimeDefault;\\n\\n        // 15 Pardon m---aaaaah!\\n        Effect[] storage pardonMeDefault = effectsList.push();\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.LAST_ROOM))\\n        );\\n        pardonMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage pardonMe = bcBugCardEvents.push();\\n        pardonMe.id = 300015;\\n\\n        pardonMe.defaultEffect = pardonMeDefault;\\n    }\\n\\n    function _initializeDefaultMysteryCardEvents() internal {\\n        BCEvent storage noEvent = bcMysteryCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 Mesmer\\n        Effect[] storage mesmerDefault = effectsList.push();\\n        mesmerDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage mesmer = bcMysteryCardEvents.push();\\n        mesmer.id = 400001;\\n\\n        mesmer.defaultEffect = mesmerDefault;\\n\\n        // 2 Portal\\n        // TODO\\n        Effect[] storage portalDefault = effectsList.push();\\n        portalDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.PORTAL))\\n        );\\n\\n        BCEvent storage portal = bcMysteryCardEvents.push();\\n        portal.id = 400002;\\n\\n        portal.defaultEffect = portalDefault;\\n\\n        // 3 The Kirk Method\\n        // TODO\\n        Effect[] storage kirkMethodDefault = effectsList.push();\\n        kirkMethodDefault.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        Effect[] storage kirkMethodLow = effectsList.push();\\n        kirkMethodLow.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        // TODO: Add ability -1 to all rolls\\n\\n        Effect[] storage kirkMethodHigh = effectsList.push();\\n        kirkMethodHigh.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodHigh.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage kirkMethod = bcMysteryCardEvents.push();\\n        kirkMethod.id = 400003;\\n\\n        kirkMethod.defaultEffect = kirkMethodDefault;\\n        kirkMethod.lowEffect = kirkMethodLow;\\n        kirkMethod.highEffect = kirkMethodHigh;\\n\\n        // 4 Brownie\\n        // TODO: This is a choice event, choices are not implemented\\n        Effect[] storage brownieDefault = effectsList.push();\\n\\n        BCEvent storage brownie = bcMysteryCardEvents.push();\\n        brownie.id = 400004;\\n\\n        brownie.defaultEffect = brownieDefault;\\n\\n        // 5 I gotta get out of here!\\n        // TODO\\n        Effect[] storage getOutDefault = effectsList.push();\\n        getOutDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        // getOutDefault.push(Effect()) // TODO: Move player to nearest window or reeval.  This would be expensive to bfs.\\n\\n        BCEvent storage getOut = bcMysteryCardEvents.push();\\n        getOut.id = 400005;\\n\\n        getOut.defaultEffect = getOutDefault;\\n\\n        // 6 Incident Boundry\\n        // TODO\\n        Effect[] storage incidentBoundryDefault = effectsList.push();\\n        incidentBoundryDefault.push(Effect(EffectTypes.physicalDamage, 1)); // TODO: Should armor prevent this?\\n\\n        BCEvent storage incidentBoundry = bcMysteryCardEvents.push();\\n        incidentBoundry.id = 400006;\\n\\n        incidentBoundry.defaultEffect = incidentBoundryDefault;\\n\\n        // 7 Fugue State\\n        // TODO: May need to replace this one, very complicated to implement, meaningless single player\\n        Effect[] storage fugueStateDefault = effectsList.push();\\n\\n        BCEvent storage fugueState = bcMysteryCardEvents.push();\\n        fugueState.id = 400007;\\n\\n        fugueState.defaultEffect = fugueStateDefault;\\n\\n        // 8 Horror\\n        // TODO: Another challenging event to implement, would need BFS and custom code to break doors, and move player there\\n        Effect[] storage horrorDefault = effectsList.push();\\n\\n        BCEvent storage horror = bcMysteryCardEvents.push();\\n        horror.id = 400008;\\n\\n        horror.defaultEffect = horrorDefault;\\n\\n        // 9 Voices\\n        // TODO\\n        Effect[] storage voicesDefault = effectsList.push();\\n\\n        BCEvent storage voices = bcMysteryCardEvents.push();\\n        voices.id = 400009;\\n\\n        voices.defaultEffect = voicesDefault;\\n\\n        // 10 The Lottery\\n        Effect[] storage lotteryDefault = effectsList.push();\\n\\n        Effect[] storage lotteryLow = effectsList.push();\\n        lotteryLow.push(Effect(EffectTypes.instantDeath, 1));\\n\\n        BCEvent storage lottery = bcMysteryCardEvents.push();\\n        lottery.id = 400010;\\n        lottery.rollForLow = 1;\\n\\n        lottery.defaultEffect = lotteryDefault;\\n        lottery.lowEffect = lotteryLow;\\n\\n        // 11 Missing Numbers\\n        // TODO\\n        Effect[] storage missingNumbersDefault = effectsList.push();\\n\\n        Effect[] storage missingNumbersLow = effectsList.push();\\n\\n        Effect[] storage missingNumbersHigh = effectsList.push();\\n\\n        BCEvent storage missingNumbers = bcMysteryCardEvents.push();\\n        missingNumbers.id = 400011;\\n        missingNumbers.rollForLow = 1;\\n        missingNumbers.rollForHigh = 6;\\n\\n        missingNumbers.defaultEffect = missingNumbersDefault;\\n        missingNumbers.lowEffect = missingNumbersLow;\\n        missingNumbers.highEffect = missingNumbersHigh;\\n\\n        // 12 Tesseract\\n        // TODO\\n        Effect[] storage tesseractDefault = effectsList.push();\\n        tesseractDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage tesseract = bcMysteryCardEvents.push();\\n        tesseract.id = 400012;\\n\\n        tesseract.defaultEffect = tesseractDefault;\\n\\n        // 13 Glitch In the Spaceship\\n        // TODO\\n        Effect[] storage glitchDefault = effectsList.push();\\n\\n        BCEvent storage glitch = bcMysteryCardEvents.push();\\n        glitch.id = 400013;\\n\\n        glitch.defaultEffect = glitchDefault;\\n\\n        // 14 Ephemeral Form\\n        // TODO\\n        Effect[] storage ephemeralFormDefault = effectsList.push();\\n\\n        BCEvent storage ephemeralForm = bcMysteryCardEvents.push();\\n        ephemeralForm.id = 400014;\\n\\n        ephemeralForm.defaultEffect = ephemeralFormDefault;\\n\\n        // 15 TISATAAFL\\n        // TODO\\n        Effect[] storage tisataaflDefault = effectsList.push();\\n        tisataaflDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        tisataaflDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        BCEvent storage tisataafl = bcMysteryCardEvents.push();\\n        tisataafl.id = 400015;\\n\\n        tisataafl.defaultEffect = tisataaflDefault;\\n    }\\n\\n    function _initializeDefaultScavCardEvents() internal {\\n        BCEvent storage noEvent = bcScavCardEvents.push();\\n        noEvent.id = 500000;\\n\\n        // 1 Crazed Prophet\\n        // TODO\\n        Effect[] storage crazedProphetDefault = effectsList.push();\\n        crazedProphetDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage crazedProphet = bcScavCardEvents.push();\\n        crazedProphet.id = 500001;\\n\\n        crazedProphet.defaultEffect = crazedProphetDefault;\\n\\n        // 2 Blackjack\\n        // TODO: Is this broken like packrat?  How can it not be?\\n        // I did die I think that removes the item before the next item is resolved\\n        Effect[] storage blackjackDefault = effectsList.push();\\n        blackjackDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        blackjackDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage blackjack = bcScavCardEvents.push();\\n        blackjack.id = 500002;\\n\\n        blackjack.defaultEffect = blackjackDefault;\\n\\n        // 3 Toll\\n        // TODO\\n        Effect[] storage tollDefault = effectsList.push();\\n\\n        BCEvent storage toll = bcScavCardEvents.push();\\n        toll.id = 500003;\\n\\n        toll.defaultEffect = tollDefault;\\n\\n        // 4 Bear Trap\\n        // TODO: This appears to have placed a hazard at least once\\n        // TODO: 2 dice, place enemy if free self failed\\n        Effect[] storage bearTrapDefault = effectsList.push();\\n        bearTrapDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage bearTrap = bcScavCardEvents.push();\\n        bearTrap.id = 500004;\\n\\n        bearTrap.defaultEffect = bearTrapDefault;\\n\\n        // 5 Cooking Badly\\n        Effect[] storage cookingBadlyDefault = effectsList.push();\\n        cookingBadlyDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage cookingBadly = bcScavCardEvents.push();\\n        cookingBadly.id = 500005;\\n\\n        cookingBadly.defaultEffect = cookingBadlyDefault;\\n\\n        // 6 Garbage Collection\\n        // TODO:\\n        Effect[] storage garbageCollectionDefault = effectsList.push();\\n        garbageCollectionDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage garbageCollection = bcScavCardEvents.push();\\n        garbageCollection.id = 500006;\\n\\n        garbageCollection.defaultEffect = garbageCollectionDefault;\\n\\n        // 7 You scratch my back... // TODO: Need variant for single player\\n        // Or just make it discard a card and draw a card\\n        // TODO:\\n        Effect[] storage scratchDefault = effectsList.push();\\n        scratchDefault.push(Effect(EffectTypes.takeNumItems, 1)); // TODO: Also need to implement picking an item to discard\\n        scratchDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage scratch = bcScavCardEvents.push();\\n        scratch.id = 500007;\\n\\n        scratch.defaultEffect = scratchDefault;\\n\\n        // 8 Bully\\n        // TODO: Choice\\n        Effect[] storage bullyDefault = effectsList.push();\\n\\n        BCEvent storage bully = bcScavCardEvents.push();\\n        bully.id = 500008;\\n\\n        bully.defaultEffect = bullyDefault;\\n\\n        // 9 Arm Rassling\\n        // TODO: Choice\\n        Effect[] storage armRasslingDefault = effectsList.push();\\n\\n        BCEvent storage armRassling = bcScavCardEvents.push();\\n        armRassling.id = 500009;\\n\\n        armRassling.defaultEffect = armRasslingDefault;\\n\\n        // 10 Hitman\\n        // TODO: Solo player variant, pick player to kill, pick discard\\n        Effect[] storage hitmanDefault = effectsList.push();\\n\\n        BCEvent storage hitman = bcScavCardEvents.push();\\n        hitman.id = 500010;\\n\\n        hitman.defaultEffect = hitmanDefault;\\n\\n        // 11 Mad Mel\\n        // TODO\\n        Effect[] storage madMelDefault = effectsList.push();\\n        madMelDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        madMelDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        madMelDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        madMelDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage madMel = bcScavCardEvents.push();\\n        madMel.id = 500011;\\n\\n        madMel.defaultEffect = madMelDefault;\\n\\n        // 12 Scavangus Interruptus\\n        // TODO\\n        Effect[] storage scavangusInterruptusDefault = effectsList.push();\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.numEnemyToPlace, 2)\\n        );\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM)))\\n        );\\n\\n        BCEvent storage scavangusInterruptus = bcScavCardEvents.push();\\n        scavangusInterruptus.id = 500012;\\n\\n        scavangusInterruptus.defaultEffect = scavangusInterruptusDefault;\\n\\n        // 13 I'm sleeping here!\\n        // TODO\\n        Effect[] storage imSleepingDefault = effectsList.push();\\n        imSleepingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        imSleepingDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        imSleepingDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM)))\\n        );\\n\\n        BCEvent storage imSleeping = bcScavCardEvents.push();\\n        imSleeping.id = 500013;\\n\\n        imSleeping.defaultEffect = imSleepingDefault;\\n\\n        // 14 I'm not following you!\\n        Effect[] storage notFollowingDefault = effectsList.push();\\n        notFollowingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notFollowingDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        notFollowingDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.LAST_ROOM)))\\n        );\\n\\n        BCEvent storage notFollowing = bcScavCardEvents.push();\\n        notFollowing.id = 500014;\\n\\n        notFollowing.defaultEffect = notFollowingDefault;\\n\\n        // 15 You Are Not Alone\\n\\n        // TODO CRITICAL -> this event breaks the map\\n        // Should work now, forgot to push zero here.\\n        Effect[] storage notAloneDefault = effectsList.push();\\n        notAloneDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notAloneDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        notAloneDefault.push(\\n            Effect(\\n                EffectTypes.whereToPlace,\\n                (uint(EnemyPlacement.ALL_ADJACENT))\\n            )\\n        );\\n\\n        BCEvent storage notAlone = bcScavCardEvents.push();\\n        notAlone.id = 500015;\\n\\n        notAlone.defaultEffect = notAloneDefault;\\n    }\\n\\n    function _initializeDefaultShipCardEvents() internal {\\n        // TODO: Only 2 events spawns a sentry robot.  Evaluate.\\n        // Though saving murder bots for crisises is interesting too\\n\\n        BCEvent storage noEvent = bcShipCardEvents.push();\\n        noEvent.id = 600000;\\n\\n        // 1 Snitch\\n        // TODO: Need target player mechanism and place in that room\\n        Effect[] storage snitchDefault = effectsList.push();\\n\\n        BCEvent storage snitch = bcShipCardEvents.push();\\n        snitch.id = 600001;\\n\\n        snitch.defaultEffect = snitchDefault;\\n\\n        // 2 Alarm\\n        Effect[] storage alarmDefault = effectsList.push();\\n        alarmDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        alarmDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.ROBOT))\\n        );\\n        alarmDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage alarm = bcShipCardEvents.push();\\n        alarm.id = 600002;\\n\\n        alarm.defaultEffect = alarmDefault;\\n\\n        // 3 Lockdown\\n        // TODO: Need to permanantly lock the walls\\n        // For now, just locking the doors at strength 5\\n        Effect[] storage lockdownDefault = effectsList.push();\\n        lockdownDefault.push(Effect(EffectTypes.lockDoorStrength, 5));\\n\\n        BCEvent storage lockdown = bcShipCardEvents.push();\\n        lockdown.id = 600003;\\n\\n        lockdown.defaultEffect = lockdownDefault;\\n\\n        // 4 Vent the Ship\\n        Effect[] storage ventDefault = effectsList.push();\\n        ventDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        ventDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage vent = bcShipCardEvents.push();\\n        vent.id = 600004;\\n\\n        vent.defaultEffect = ventDefault;\\n\\n        // 5 Maintenance Hatch\\n        // TODO: Impelement hatch\\n        Effect[] storage hatchDefault = effectsList.push();\\n\\n        BCEvent storage hatch = bcShipCardEvents.push();\\n        hatch.id = 600005;\\n\\n        hatch.defaultEffect = hatchDefault;\\n\\n        // 6 Replicator\\n        // TODO: Need to track discarded/destroyed items\\n        // TODO: Allowing item duplicates or reviving dead items has major implications for UiF.  However, it would be super cool properly controlled!\\n        Effect[] storage replicatorDefault = effectsList.push();\\n        // TODO: For now, just granting an item\\n        replicatorDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage replicator = bcShipCardEvents.push();\\n        replicator.id = 600006;\\n\\n        replicator.defaultEffect = replicatorDefault;\\n\\n        // 7 First Aid Station\\n        Effect[] storage firstAidDefault = effectsList.push();\\n        firstAidDefault.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage firstAid = bcShipCardEvents.push();\\n        firstAid.id = 600007;\\n\\n        firstAid.defaultEffect = firstAidDefault;\\n\\n        // 8 ATM\\n        // TODO: Two Dice\\n        // TODO: Choice to walk away\\n        Effect[] storage atmDefault = effectsList.push();\\n\\n        Effect[] storage atmLow = effectsList.push();\\n        atmLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        atmLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        atmLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        // TODO: Add second high?\\n        Effect[] storage atmHigh = effectsList.push();\\n        atmHigh.push(Effect(EffectTypes.grantData, 2)); // Avg of 1 and 3\\n\\n        BCEvent storage atm = bcShipCardEvents.push();\\n        atm.id = 60008;\\n\\n        atm.defaultEffect = atmDefault;\\n        atm.lowEffect = atmLow;\\n        atm.highEffect = atmHigh;\\n\\n        // 9 Blooper Reel\\n        Effect[] storage blooperDefault = effectsList.push();\\n        blooperDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage blooper = bcShipCardEvents.push();\\n        blooper.id = 600009;\\n\\n        blooper.defaultEffect = blooperDefault;\\n\\n        // 10 Locker\\n        // TODO\\n        Effect[] storage lockerDefault = effectsList.push();\\n        lockerDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage locker = bcShipCardEvents.push();\\n        locker.id = 600010;\\n\\n        locker.defaultEffect = lockerDefault;\\n\\n        // 11 Contraband\\n        // TODO: CHOICE\\n        Effect[] storage contrabandDefault = effectsList.push();\\n\\n        BCEvent storage contraband = bcShipCardEvents.push();\\n        contraband.id = 600011;\\n\\n        contraband.defaultEffect = contrabandDefault;\\n\\n        // 12 Fire // TODO: This is identical to Vent the Ship!\\n        Effect[] storage fireDefault = effectsList.push();\\n        fireDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        fireDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage fire = bcShipCardEvents.push();\\n        fire.id = 600012;\\n\\n        fire.defaultEffect = fireDefault;\\n\\n        // 13 Janitorial Misconduct\\n        // TODO: Need ability to force dropping an item at a location\\n        Effect[] storage janitorialMisconductDefault = effectsList.push();\\n\\n        BCEvent storage janitorialMisconduct = bcShipCardEvents.push();\\n        janitorialMisconduct.id = 600013;\\n\\n        janitorialMisconduct.defaultEffect = janitorialMisconductDefault;\\n\\n        // 14 Target Acquired\\n        // TODO\\n        Effect[] storage targetAcquiredDefault = effectsList.push();\\n        targetAcquiredDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        targetAcquiredDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        targetAcquiredDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage targetAcquired = bcShipCardEvents.push();\\n        targetAcquired.id = 600014;\\n\\n        targetAcquired.defaultEffect = targetAcquiredDefault;\\n\\n        // 15 Security!\\n        // TODO\\n        Effect[] storage securityDefault = effectsList.push();\\n        securityDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        securityDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        securityDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage security = bcShipCardEvents.push();\\n        security.id = 600015;\\n\\n        security.defaultEffect = securityDefault;\\n    }\\n\\n    function _initializeDefaultRoomEvents() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcRoomEvents.push();\\n        noEvent.id = 0;\\n        noEvent.permanent = false;\\n        noEvent.rollForLow = 0;\\n        noEvent.rollForHigh = 0;\\n\\n        noEvent.defaultEffect = emptyEffect;\\n        noEvent.lowEffect = emptyEffect;\\n        noEvent.highEffect = emptyEffect;\\n\\n        // 1 Breached Reactor\\n        // Done\\n        Effect[] storage breachedReactorDefault = effectsList.push();\\n        breachedReactorDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        breachedReactorDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        BCEvent storage breachedReactor = bcRoomEvents.push();\\n        breachedReactor.id = 200001;\\n        breachedReactor.permanent = false;\\n        breachedReactor.rollForLow = 0;\\n        breachedReactor.rollForHigh = 0;\\n\\n        breachedReactor.defaultEffect = breachedReactorDefault;\\n        breachedReactor.lowEffect = emptyEffect;\\n        breachedReactor.highEffect = emptyEffect;\\n        //     bcRoomEvents.push(BCEvent(\\n        //         // \\\"Breached Reactor\\\",\\n        //         // \\\"As you enter the room, the reactor explodes!  Take 1 hazard damage.\\\",\\n        //         200001,\\n        //         false,\\n        //         0,\\n        //         0, // TODO:  Explore adding choices to these ones\\n        //         breachedReactorDefault,\\n        //         emptyEffect,\\n        //         emptyEffect\\n        //     ));\\n\\n        // 2 Bug Nest\\n        // TODO\\n        Effect[] storage bugNestLow = effectsList.push();\\n        bugNestLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        bugNestLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        bugNestLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage bugNestHigh = effectsList.push();\\n        bugNestHigh.push(Effect(EffectTypes.grantEgg, 1)); // TRUE\\n\\n        BCEvent storage bugNest = bcRoomEvents.push();\\n        bugNest.id = 200002;\\n        bugNest.permanent = true; // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n        bugNest.rollForLow = 2;\\n        bugNest.rollForHigh = 6;\\n\\n        bugNest.defaultEffect = emptyEffect;\\n        bugNest.lowEffect = bugNestLow;\\n        bugNest.highEffect = bugNestHigh;\\n\\n        // 3 Crossroads\\n        // TODO\\n        Effect[] storage crossroadsDefault = effectsList.push();\\n        crossroadsDefault.push(Effect(EffectTypes.numEnemyToPlace, 3));\\n        crossroadsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        crossroadsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage crossroads = bcRoomEvents.push();\\n        crossroads.id = 200003;\\n        crossroads.permanent = false;\\n        crossroads.rollForLow = 0;\\n        crossroads.rollForHigh = 0;\\n\\n        crossroads.defaultEffect = crossroadsDefault;\\n        crossroads.lowEffect = emptyEffect;\\n        crossroads.highEffect = emptyEffect;\\n\\n        // 4 Engineering Catwalk\\n        Effect[] storage catwalkDefault = effectsList.push();\\n        catwalkDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.REACTOR))\\n        );\\n\\n        BCEvent storage catwalk = bcRoomEvents.push();\\n        catwalk.id = 200004;\\n        catwalk.permanent = true;\\n        catwalk.rollForLow = 0;\\n        catwalk.rollForHigh = 0;\\n\\n        catwalk.defaultEffect = catwalkDefault;\\n        catwalk.lowEffect = emptyEffect;\\n        catwalk.highEffect = emptyEffect;\\n\\n        // 5 Hull Breach\\n        // Done\\n        Effect[] storage hullBreachDefault = effectsList.push();\\n        hullBreachDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n\\n        Effect[] storage hullBreachLow = effectsList.push();\\n        hullBreachLow.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        hullBreachLow.push(Effect(EffectTypes.instantDeath, 1)); // TRUE\\n\\n        BCEvent storage hullBreach = bcRoomEvents.push();\\n        hullBreach.id = 200005;\\n        hullBreach.permanent = false;\\n        hullBreach.rollForLow = 1;\\n        hullBreach.rollForHigh = 0;\\n\\n        hullBreach.defaultEffect = hullBreachDefault;\\n        hullBreach.lowEffect = hullBreachLow;\\n        hullBreach.highEffect = emptyEffect;\\n\\n        // 6 Medbay\\n        // TODO: No hostiles in room\\n        // HACK:  Full health + heal amount 1 indicates heal to full health +1\\n        Effect[] storage medbayDefault = effectsList.push();\\n        medbayDefault.push(Effect(EffectTypes.fullHealth, 1)); // TRUE\\n\\n        BCEvent storage medbay = bcRoomEvents.push();\\n        medbay.id = 200006;\\n        medbay.permanent = true;\\n        medbay.rollForLow = 0;\\n        medbay.rollForHigh = 0;\\n\\n        medbay.defaultEffect = medbayDefault;\\n        medbay.lowEffect = emptyEffect;\\n        medbay.highEffect = emptyEffect;\\n    }\\n\\n    function _initializeDefaultRoomEvents_2() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // 7 Showers\\n        // Done\\n        Effect[] storage showersDefault = effectsList.push();\\n        showersDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage showers = bcRoomEvents.push();\\n        showers.id = 200007;\\n        showers.permanent = false;\\n        showers.rollForLow = 0;\\n        showers.rollForHigh = 0;\\n\\n        showers.defaultEffect = showersDefault;\\n        showers.lowEffect = emptyEffect;\\n        showers.highEffect = emptyEffect;\\n\\n        // 8 Trash Compactor\\n        // TODO - Locking doors is done, crushing players and items is not\\n        Effect[] storage trashCompactorDefault = effectsList.push();\\n        trashCompactorDefault.push(Effect(EffectTypes.lockDoorStrength, 4));\\n\\n        BCEvent storage trashCompactor = bcRoomEvents.push();\\n        trashCompactor.id = 200008;\\n        trashCompactor.permanent = false;\\n        trashCompactor.rollForLow = 0;\\n        trashCompactor.rollForHigh = 0;\\n\\n        trashCompactor.defaultEffect = trashCompactorDefault;\\n        trashCompactor.lowEffect = emptyEffect;\\n        trashCompactor.highEffect = emptyEffect;\\n\\n        // 9 Ship Services\\n        // TODO: Let player select which services to use.\\n        // TODO\\n        Effect[] storage shipServicesDefault = effectsList.push();\\n        shipServicesDefault.push(Effect(EffectTypes.fullHealth, 0)); // TODO: Prevent this from stripping extra health\\n        // TODO: Sell items to company\\n        // TODO: Buy items from company (only multiplayer?)\\n\\n        BCEvent storage shipServices = bcRoomEvents.push();\\n        shipServices.id = 200009;\\n        shipServices.permanent = true;\\n\\n        shipServices.defaultEffect = shipServicesDefault;\\n    }\\n}\\n\",\"keccak256\":\"0xa77ac1454dd1da98c9a7ef0426f80c7e13d6400ee8b02b2cf44f61bfc28f816e\",\"license\":\"UNLICENSED\"},\"contracts/BCGames.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// import \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCEvents.sol\\\";\\nimport \\\"./BCUtils.sol\\\";\\n\\ninterface EventsInterface {\\n    function extGetRoomEvent(\\n        uint _id\\n    ) external view returns (BCEvents.BCEvent memory);\\n\\n    function extGetCardEvent(\\n        uint _id\\n    ) external view returns (BCEvents.BCEvent memory);\\n\\n    function extGetEffects(\\n        bool _roomEvent,\\n        uint _id\\n    ) external view returns (BCEvents.Effect[][] memory);\\n\\n    function extGetTraitModForEffect(\\n        bool _roomEvent,\\n        uint _id,\\n        uint _effect\\n    ) external view returns (BCTypes.Traits memory);\\n}\\n\\ninterface CharInterface {\\n    function characters(\\n        uint _id\\n    ) external view returns (BCTypes.Character memory);\\n\\n    function incrementCloneNumber(uint _charId) external;\\n\\n    function leaveGame(uint _charId) external;\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n\\n    function debugBuildMapOneRoom(uint _roomId) external returns (uint);\\n\\n    function extGetBoard(\\n        uint _mapId\\n    ) external view returns (BCTypes.GameTile[][] memory);\\n\\n    function extGetGameTile(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) external view returns (BCTypes.GameTile memory);\\n\\n    function getDoor(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction\\n    ) external view returns (BCTypes.Door memory);\\n\\n    function extGetDoors(\\n        uint _mapId\\n    ) external view returns (BCTypes.Door[] memory);\\n\\n    function setDoorFromPos(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction,\\n        BCTypes.DoorStatus _status,\\n        uint _strength\\n    ) external;\\n\\n    function discoverRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint debugRoomId\\n    ) external returns (uint);\\n\\n    function resetOpenDoors(uint _mapId) external;\\n\\n    function extGetRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) external view returns (BCTypes.RoomTile memory);\\n\\n    function extGetRoomById(\\n        uint _mapId,\\n        uint _roomId\\n    ) external view returns (BCTypes.RoomTile memory);\\n\\n    function extSetHazardStatus(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        bool _hasHazard\\n    ) external;\\n\\n    function extSpreadHazards(uint _mapId, uint _distance) external;\\n\\n    function getLineOfSight(\\n        uint _mapId,\\n        BCTypes.Position memory _first,\\n        BCTypes.Position memory _second,\\n        bool _ignoreClosed\\n    ) external view returns (bool);\\n\\n    function moveToOrCloser(\\n        uint _mapId,\\n        BCTypes.Position memory _start,\\n        BCTypes.Position memory _finish,\\n        bool _ignoreClosed,\\n        bool _useVents,\\n        uint _moveLimit\\n    ) external view returns (BCTypes.Position memory);\\n}\\n\\ninterface ItemsInterface {\\n    function getItemIDsByPlayer(\\n        uint _playerID\\n    ) external view returns (uint[] memory);\\n\\n    function destroyItem(uint _itemId) external;\\n\\n    function takeItemsHome(uint _playerId, uint _gameId) external;\\n\\n    function addItemsToGame(uint _gameId, uint[] memory _playerIds) external;\\n}\\n\\ninterface PlayersInterface {\\n    function extChooseEffect(\\n        uint _choice,\\n        uint _eventPlayerId,\\n        uint _gameId,\\n        uint _mapId,\\n        BCTypes.Position memory _position,\\n        uint _eventNumber,\\n        BCTypes.BCEventType _eventType\\n    ) external;\\n\\n    function extMovePlayer(\\n        BCTypes.Position memory _position,\\n        uint _playerId,\\n        uint _mapId\\n    ) external returns (bool);\\n\\n    function extHurtPlayer(uint _playerId, uint _amount, bool _hazard) external;\\n\\n    function extGetPlayerOwner(uint _id) external view returns (address);\\n\\n    function applyHazardDamage(uint _mapId, uint[] memory _players) external;\\n\\n    function resetPlayerActions(uint _playerId) external;\\n\\n    function incrementPlayerActions(uint _playerId) external;\\n\\n    function extGetPlayer(\\n        uint _id\\n    ) external view returns (BCTypes.Player memory);\\n\\n    function extGetActionsTaken(uint _id) external view returns (uint);\\n\\n    function setPlayersGameId(uint[] memory ids, uint _gameId) external;\\n}\\n\\ncontract BCGames is Ownable, BCUtils {\\n    CharInterface public chars;\\n    MapInterface public maps;\\n    EventsInterface public bcEvents;\\n    ItemsInterface public items;\\n    PlayersInterface public players;\\n\\n    address public lobbiesAddress;\\n    address public charsAddress;\\n    address public actionsAddress;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _mapsAddress,\\n        address _lobbiesAddress,\\n        address _actionsAddress,\\n        address _eventsAddress,\\n        address _itemsAddress,\\n        address _playersAddress\\n    ) public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        // bcChars = BCChars(_charAddress);\\n        maps = MapInterface(_mapsAddress);\\n        // bcMaps = Maps(_mapsAddress);\\n        lobbiesAddress = _lobbiesAddress;\\n        actionsAddress = _actionsAddress;\\n        bcEvents = EventsInterface(_eventsAddress);\\n        items = ItemsInterface(_itemsAddress);\\n        players = PlayersInterface(_playersAddress);\\n    }\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3;\\n\\n    uint8 constant SPACE_ROOM = 0;\\n\\n    BCTypes.Position public StartLocation = BCTypes.Position(10, 6); // TODO: duped on maps\\n\\n    BCTypes.Game[] public games;\\n\\n    mapping(address => uint[]) public addressToGame; // Don't use set, never removed from\\n    mapping(BCTypes.DenizenType => uint) public denizenHealth;\\n    mapping(BCTypes.DenizenType => uint) public denizenDef; // Resistance to getting hit\\n    mapping(BCTypes.DenizenType => uint) public denizenOff; // Skill at hitting\\n    mapping(BCTypes.DenizenType => uint) public denizenDmg; // Damage done per successful hit\\n    // TODO: Consider splitting melee and shoot for denizens\\n    mapping(BCTypes.DenizenType => uint) public denizenMovement;\\n\\n    event DenizenAttack(\\n        uint gameId,\\n        BCTypes.DenizenType denizenType,\\n        uint denizenId,\\n        uint playerTarget,\\n        uint damage,\\n        uint turnabout\\n    );\\n\\n    event DenizenTurnOver(uint gameId);\\n\\n    event PlayerAttack(\\n        // TODO: Handle PVP\\n        uint gameId,\\n        uint playerId,\\n        BCTypes.DenizenType denizenType,\\n        uint denizenId,\\n        uint damage,\\n        uint turnabout\\n    );\\n\\n    constructor() {\\n        // TODO: CRITICAL!!! BURN GAME 0\\n        denizenHealth[BCTypes.DenizenType.BUG] = 2;\\n        denizenHealth[BCTypes.DenizenType.SCAV] = 3;\\n        denizenHealth[BCTypes.DenizenType.TURRET] = 2;\\n        denizenHealth[BCTypes.DenizenType.ROBOT] = 5;\\n        denizenHealth[BCTypes.DenizenType.QUEEN] = 100;\\n        denizenHealth[BCTypes.DenizenType.BUTCHER] = 50;\\n        denizenHealth[BCTypes.DenizenType.BEHEMOTH] = 200;\\n        denizenHealth[BCTypes.DenizenType.DOCTOR] = 25;\\n\\n        denizenDef[BCTypes.DenizenType.BUG] = 3;\\n        denizenDef[BCTypes.DenizenType.SCAV] = 3;\\n        denizenDef[BCTypes.DenizenType.TURRET] = 4;\\n        denizenDef[BCTypes.DenizenType.ROBOT] = 6;\\n        denizenDef[BCTypes.DenizenType.QUEEN] = 10;\\n        denizenDef[BCTypes.DenizenType.BUTCHER] = 8;\\n        denizenDef[BCTypes.DenizenType.BEHEMOTH] = 12;\\n        denizenDef[BCTypes.DenizenType.DOCTOR] = 4;\\n\\n        denizenOff[BCTypes.DenizenType.BUG] = 4;\\n        denizenOff[BCTypes.DenizenType.SCAV] = 3;\\n        denizenOff[BCTypes.DenizenType.TURRET] = 3;\\n        denizenOff[BCTypes.DenizenType.ROBOT] = 3;\\n        denizenOff[BCTypes.DenizenType.QUEEN] = 8;\\n        denizenOff[BCTypes.DenizenType.BUTCHER] = 6;\\n        denizenOff[BCTypes.DenizenType.BEHEMOTH] = 7;\\n        denizenOff[BCTypes.DenizenType.DOCTOR] = 10;\\n\\n        denizenDmg[BCTypes.DenizenType.BUG] = 1;\\n        denizenDmg[BCTypes.DenizenType.SCAV] = 1;\\n        denizenDmg[BCTypes.DenizenType.TURRET] = 1;\\n        denizenDmg[BCTypes.DenizenType.ROBOT] = 1;\\n        denizenDmg[BCTypes.DenizenType.QUEEN] = 8;\\n        denizenDmg[BCTypes.DenizenType.BUTCHER] = 6;\\n        denizenDmg[BCTypes.DenizenType.BEHEMOTH] = 4;\\n        denizenDmg[BCTypes.DenizenType.DOCTOR] = 16;\\n\\n        denizenMovement[BCTypes.DenizenType.BUG] = 3;\\n        denizenMovement[BCTypes.DenizenType.SCAV] = 3;\\n        denizenMovement[BCTypes.DenizenType.TURRET] = 0;\\n        denizenMovement[BCTypes.DenizenType.ROBOT] = 2;\\n        denizenMovement[BCTypes.DenizenType.QUEEN] = 6;\\n        denizenMovement[BCTypes.DenizenType.BUTCHER] = 3;\\n        denizenMovement[BCTypes.DenizenType.BEHEMOTH] = 3;\\n        denizenMovement[BCTypes.DenizenType.DOCTOR] = 4;\\n    }\\n\\n    function startGame(\\n        uint[] memory _playerIndexes,\\n        uint _numPlayers,\\n        uint _debugRoomId\\n    ) public returns (uint) {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        // TODO: Add turn and overall time limits for game\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n        BCTypes.Game storage newGame = games.push();\\n        uint gameId = games.length - 1;\\n        newGame.active = true;\\n        newGame.turnsTaken = 0;\\n        newGame.playerIndexes = _playerIndexes;\\n        newGame.numPlayers = _numPlayers;\\n        newGame.eventTracker = BCTypes.EventTracker(0, 0, 0, 0);\\n\\n        // TODO: CRITICAL -> Remove DEBUG\\n        if (_debugRoomId == 0) {\\n            newGame.mapId = maps.createMap();\\n        } else {\\n            newGame.mapId = maps.debugBuildMapOneRoom(_debugRoomId);\\n        }\\n        // Move the players to the start // TODO: Hardcoded\\n        // And map the owners to this game\\n        for (uint i = 0; i <= _numPlayers - 1; i++) {\\n            // Warning: using _movePlayer here will attempt to discover, etc.\\n            _movePlayer(\\n                newGame.mapId,\\n                StartLocation,\\n                newGame.playerIndexes[i],\\n                0\\n            );\\n            address joiner = players.extGetPlayerOwner(_playerIndexes[i]);\\n            addressToGame[joiner].push(gameId);\\n        }\\n\\n        players.setPlayersGameId(_playerIndexes, gameId); // TODO: FFS\\n        items.addItemsToGame(gameId, _playerIndexes);\\n\\n        // Create trackers for card events (this is pass by value)\\n        uint[15] memory unusedArr = [\\n            uint(1),\\n            2,\\n            3,\\n            4,\\n            5,\\n            6,\\n            7,\\n            8,\\n            9,\\n            10,\\n            11,\\n            12,\\n            13,\\n            14,\\n            15\\n        ];\\n        newGame.unusedBugEvents = unusedArr;\\n        newGame.unusedMysteryEvents = unusedArr;\\n        newGame.unusedScavEvents = unusedArr;\\n        newGame.unusedShipEvents = unusedArr;\\n\\n        newGame.turnTimeLimit = 5 minutes; // TODO: Add option for 24 hours\\n        newGame.lastTurnTimestamp = block.timestamp;\\n\\n        // TODO DEAL WITH ITEMS\\n\\n        // TODO: Player who pays to start gets to go first?\\n        // TODO: Event\\n        return gameId;\\n    }\\n\\n    function leaveGame(\\n        uint _gameId,\\n        uint _playerId,\\n        uint _charId,\\n        uint _currentPlayerTurnIndex\\n    ) public onlyActions {\\n        // TODO: -> Critical, confirm this is sufficient protection\\n        // require(\\n        //     msg.sender == actionsAddress,\\n        //     \\\"Not actions contract - leaveGame\\\"\\n        // );\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        // TODO: Payout for data (or maybe don't do here, need to be at end to get)\\n        // TODO: Give option to keep or sell still held items\\n        // Thinking to make a cost to smuggle items out, but free to carry\\n        // No payout if you leave early\\n        items.takeItemsHome(_playerId, _gameId);\\n\\n        chars.leaveGame(_charId);\\n\\n        uint[] memory newPlayerIndexes = new uint[](\\n            currentGame.playerIndexes.length - 1\\n        );\\n        uint cursor = 0;\\n\\n        for (uint i = 0; i < currentGame.playerIndexes.length; i++) {\\n            if (i == _currentPlayerTurnIndex) {\\n                continue;\\n            }\\n            newPlayerIndexes[cursor] = currentGame.playerIndexes[i];\\n            cursor++;\\n        }\\n\\n        currentGame.playerIndexes = newPlayerIndexes;\\n        currentGame.numPlayers--;\\n\\n        // Snipping out the leaving player will set the turn to the next\\n        // player.  If this player was the last, we need to set it to 0\\n        if (\\n            currentGame.currentPlayerTurnIndex ==\\n            currentGame.playerIndexes.length\\n        ) {\\n            currentGame.currentPlayerTurnIndex = 0;\\n        }\\n\\n        if (currentGame.playerIndexes.length == 0) {\\n            _endGame(currentGame);\\n        }\\n    }\\n\\n    function _endGame(BCTypes.Game storage _currentGame) internal {\\n        _currentGame.active = false;\\n    }\\n\\n    // TODO: Call the choices 'Risk' and 'Caution'\\n    // TODO: Will be used to add choice later, ie drop items but no risk of death\\n    function resolveEvent(uint _gameId, uint _choice) public {\\n        BCTypes.Game storage eventGame = games[_gameId];\\n        require(\\n            msg.sender == players.extGetPlayerOwner(eventGame.eventPlayerId),\\n            \\\"Event not for your player\\\"\\n        );\\n\\n        _resolveEvent(_gameId, _choice);\\n    }\\n\\n    // Separate internal function to allow this contract to call in `forceNextTurn`\\n    function _resolveEvent(uint _gameId, uint _choice) internal {\\n        BCTypes.Game storage eventGame = games[_gameId];\\n        players.extChooseEffect(\\n            _choice,\\n            eventGame.eventPlayerId,\\n            _gameId,\\n            eventGame.mapId,\\n            eventGame.eventPosition,\\n            eventGame.eventNumber,\\n            eventGame.eventType\\n        );\\n\\n        eventGame.eventPlayerId = 0;\\n        eventGame.eventNumber = 0;\\n        eventGame.eventType = BCTypes.BCEventType.NONE;\\n    }\\n\\n    function endPlayerAction(\\n        uint _gameId,\\n        uint _playerId,\\n        bool _free\\n    ) public onlyActions {\\n        if (!_free) {\\n            players.incrementPlayerActions(_playerId);\\n        }\\n\\n        uint actionsTaken = players.extGetActionsTaken(_playerId);\\n\\n        // TODO: Revise this to handle manual passing the turn\\n        if (actionsTaken >= DEFAULT_ACTIONS_NUM) {\\n            _endPlayerTurn(_gameId, _playerId);\\n        }\\n    }\\n\\n    function _endPlayerTurn(uint _gameId, uint _playerId) internal {\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        // TODO: Get items and abilities for actions\\n        // TODO: This will prevent free actions after last\\n        // TODO: Add FE and BE mechanisim to have a default checkbox \\\"Pass the turn\\\"\\n        players.resetPlayerActions(_playerId);\\n        currentGame.lastTurnTimestamp = block.timestamp;\\n        if (\\n            currentGame.currentPlayerTurnIndex <\\n            currentGame.playerIndexes.length - 1\\n        ) {\\n            currentGame.currentPlayerTurnIndex++;\\n        } else {\\n            _endPlayerRound(_gameId, currentGame.mapId);\\n            currentGame.currentPlayerTurnIndex = 0;\\n        }\\n    }\\n\\n    function _endPlayerRound(uint _gameId, uint _mapId) internal {\\n        BCTypes.Game storage currentGame = games[_gameId];\\n        currentGame.turnsTaken++;\\n        // TODO: Shuffling the player indexes here to create a random order for next turns\\n\\n        // TODO: Consider closing doors after denizens move, particularly if vents don't happen\\n        maps.resetOpenDoors(_mapId);\\n        // TODO: Add ability to change distance for endgame\\n        maps.extSpreadHazards(_mapId, 1);\\n        // TODO: Hazards should damage denizens\\n\\n        players.applyHazardDamage(currentGame.mapId, currentGame.playerIndexes);\\n        currentGame.denizenTurn = true;\\n\\n        // TODO: Decrement timers.  MAKE SURE IT'S OK TO DO THIS BEFORE DENIZENS GO!\\n    }\\n\\n    function processDenizenMoves(uint _gameId) external {\\n        // TODO: Confirm no need to restrict this from anyone doing it\\n        // TODO: Either only first player can do it or maybe need to add time\\n        // Risk is another player could skip first player  or force them to do denizen\\n\\n        BCTypes.Game storage currentGame = games[_gameId];\\n        // Get the map // TODO: See if there is a cheaper option\\n        BCTypes.GameTile[][] memory board = maps.extGetBoard(currentGame.mapId);\\n        BCTypes.Player[] memory currentPlayers = new BCTypes.Player[](\\n            currentGame.playerIndexes.length\\n        );\\n\\n        for (uint i = 0; i < currentPlayers.length; i++) {\\n            currentPlayers[i] = players.extGetPlayer(\\n                currentGame.playerIndexes[i]\\n            );\\n        }\\n\\n        // TODO: Critical -> It's possible this could get big enough to break the block limit\\n        // TODO: Critical -> Find a way to distribute the cost, or just force last person to do it and randomize order  each turn\\n        // TODO: Decide whether or not to implement Bugs first, Scavs, Second, Security Third\\n        // TODO: Decide if it's viable to preserve denizen vs denizen combat\\n        // TODO: Denizens shouldn't move onto hazards\\n\\n        BCTypes.Denizen[] storage denizens = games[_gameId].denizens;\\n        for (uint i = 0; i < denizens.length; i++) {\\n            BCTypes.Denizen storage denizen = denizens[i];\\n\\n            // Not an elegant way to apply hazard damage then skip if it dies\\n            if (denizen.healthRemaining == 0) {\\n                continue;\\n            }\\n\\n            if (board[denizen.position.row][denizen.position.col].hasHazard) {\\n                denizen.healthRemaining--;\\n            }\\n\\n            // Check again to see if it's dead now\\n            if (denizen.healthRemaining == 0) {\\n                continue;\\n            }\\n\\n            // TODO: Pick randomly or all\\n            uint closestPlayerIndex = 9999; // Hack needed because 0 has meaning\\n            uint closestPlayerDistance = type(uint).max;\\n\\n            for (uint k = 0; k < currentPlayers.length; k++) {\\n                // Safe in Donghaijiu\\n                if (\\n                    currentPlayers[k].position.row == StartLocation.row &&\\n                    currentPlayers[k].position.col == StartLocation.col\\n                ) {\\n                    continue;\\n                }\\n                // DFS would be better but is way more costly\\n                uint manhattan = manhattanDistance(\\n                    denizen.position,\\n                    currentPlayers[k].position\\n                );\\n                if (manhattan == 0) {\\n                    closestPlayerIndex = k;\\n                    closestPlayerDistance = manhattan;\\n                } else if (manhattan <= closestPlayerDistance) {\\n                    closestPlayerIndex = k;\\n                    closestPlayerDistance = manhattan;\\n                }\\n            }\\n\\n            // If all players are in Donghaiziu, do nothing\\n            // TODO: this is probably exploitable to kill denizens with hazards at no risk\\n            // TODO: If this happens once we can probably just exit the denizen turn and set denizen turn to false\\n            if (closestPlayerIndex == 9999) {\\n                continue;\\n            }\\n\\n            if (denizen.denizenType == BCTypes.DenizenType.BUG) {\\n                // Attempt to attack player in room\\n                if (closestPlayerDistance == 0) {\\n                    _denizenAttack(\\n                        _gameId,\\n                        denizen,\\n                        currentPlayers[closestPlayerIndex],\\n                        closestPlayerDistance\\n                    );\\n                    continue;\\n                } else if (\\n                    closestPlayerDistance <=\\n                    denizenMovement[BCTypes.DenizenType.BUG]\\n                ) {\\n                    // Move then attack if in same room\\n                    denizen.position = maps.moveToOrCloser(\\n                        currentGame.mapId,\\n                        denizen.position,\\n                        currentPlayers[closestPlayerIndex].position,\\n                        false,\\n                        true,\\n                        denizenMovement[BCTypes.DenizenType.BUG]\\n                    );\\n                    if (\\n                        denizen.position.row ==\\n                        currentPlayers[closestPlayerIndex].position.row &&\\n                        denizen.position.col ==\\n                        currentPlayers[closestPlayerIndex].position.col\\n                    ) {\\n                        _denizenAttack(\\n                            _gameId,\\n                            denizen,\\n                            currentPlayers[closestPlayerIndex],\\n                            closestPlayerDistance\\n                        );\\n                    }\\n                    continue;\\n                }\\n                // Do nothing if can't detect a player to move to\\n            }\\n\\n            if (denizen.denizenType == BCTypes.DenizenType.SCAV) {\\n                // TODO: Somehow, scavs are getting in the Donghaijiu\\n                // Run then shoot if player in room\\n                if (closestPlayerDistance == 0) {\\n                    // TODO: don't all flee to the first room they can\\n                    // TODO: This is going to cause spacefaring denizens because some doors open to space\\n                    BCTypes.Door[] memory doors = maps.extGetDoors(_gameId);\\n                    for (uint k = 0; k < 4; k++) {\\n                        if (\\n                            doors[k].status == BCTypes.DoorStatus.OPEN ||\\n                            doors[k].status == BCTypes.DoorStatus.CLOSED ||\\n                            doors[k].status == BCTypes.DoorStatus.BREACHED\\n                        ) {\\n                            denizen.position = getNeighborRoom(\\n                                k,\\n                                denizen.position\\n                            );\\n                        }\\n                    }\\n\\n                    // Don't check for LOS, door is open from moving\\n                    _denizenAttack(\\n                        _gameId,\\n                        denizen,\\n                        currentPlayers[closestPlayerIndex],\\n                        1\\n                    );\\n\\n                    continue;\\n                } else if (\\n                    maps.getLineOfSight(\\n                        currentGame.mapId,\\n                        denizen.position,\\n                        currentPlayers[closestPlayerIndex].position,\\n                        false\\n                    )\\n                ) {\\n                    // TODO: Above should be can see a player (or closest player for now)\\n                    _denizenAttack(\\n                        _gameId,\\n                        denizen,\\n                        currentPlayers[closestPlayerIndex],\\n                        closestPlayerDistance\\n                    );\\n                    continue;\\n                }\\n                // Wander  if can't detect a player to move to\\n                // TODO\\n            }\\n\\n            if (denizen.denizenType == BCTypes.DenizenType.TURRET) {\\n                // TODO: Decide if this should be all players in LOS\\n                // For now, shoot the closest player if it is in a straight line through doors\\n                if (\\n                    closestPlayerDistance < 9999 &&\\n                    maps.getLineOfSight(\\n                        currentGame.mapId,\\n                        denizen.position,\\n                        currentPlayers[closestPlayerIndex].position,\\n                        true\\n                    )\\n                ) {\\n                    _denizenAttack(\\n                        _gameId,\\n                        denizen,\\n                        currentPlayers[closestPlayerIndex],\\n                        closestPlayerDistance\\n                    );\\n                    continue;\\n                }\\n            }\\n\\n            if (denizen.denizenType == BCTypes.DenizenType.ROBOT) {\\n                // Attempt to attack player in room\\n                if (closestPlayerDistance == 0) {\\n                    _denizenAttack(\\n                        _gameId,\\n                        denizen,\\n                        currentPlayers[closestPlayerIndex],\\n                        closestPlayerDistance\\n                    );\\n                    continue;\\n                } else if (\\n                    closestPlayerDistance <=\\n                    denizenMovement[BCTypes.DenizenType.ROBOT]\\n                ) {\\n                    denizen.position = maps.moveToOrCloser(\\n                        currentGame.mapId,\\n                        denizen.position,\\n                        currentPlayers[closestPlayerIndex].position,\\n                        true,\\n                        false,\\n                        denizenMovement[BCTypes.DenizenType.ROBOT]\\n                    );\\n\\n                    continue;\\n                } else if (closestPlayerDistance < 9999) {\\n                    denizen.position = maps.moveToOrCloser(\\n                        currentGame.mapId,\\n                        denizen.position,\\n                        currentPlayers[closestPlayerIndex].position,\\n                        true,\\n                        false,\\n                        denizenMovement[BCTypes.DenizenType.ROBOT]\\n                    );\\n                    if (\\n                        maps.getLineOfSight(\\n                            currentGame.mapId,\\n                            denizen.position,\\n                            currentPlayers[closestPlayerIndex].position,\\n                            true\\n                        )\\n                    ) {\\n                        _denizenAttack(\\n                            _gameId,\\n                            denizen,\\n                            currentPlayers[closestPlayerIndex],\\n                            closestPlayerDistance\\n                        );\\n                    }\\n                    continue;\\n                } else if (closestPlayerDistance < 9999) {\\n                    continue;\\n                }\\n\\n                // Do nothing if can't detect a player to move to\\n            }\\n        }\\n\\n        currentGame.denizenTurn = false;\\n    }\\n\\n    // TODO: Determine if these need to be generalized to handle denizen v denizen and player vs player\\n    // TODO: DRY turnabout (may be saving a lot of gas this way though)\\n    // TODO: CRITICAL -> Add tests\\n    function playerAttack(\\n        uint _gameId,\\n        uint _denizenId,\\n        uint _playerId,\\n        uint _playerAttackRating, // Can be melee or ranged, selected in Actions contract\\n        BCTypes.Position memory _playerPosition\\n    ) external onlyActions {\\n        uint damageDone;\\n        uint turnaboutDamage;\\n\\n        BCTypes.Denizen storage denizen = games[_gameId].denizens[_denizenId];\\n        require(denizen.healthRemaining > 0, \\\"Can't attack dead denizen\\\");\\n\\n        if (\\n            !(_playerPosition.row == denizen.position.row &&\\n                _playerPosition.col == denizen.position.col) ||\\n            !maps.getLineOfSight(\\n                games[_gameId].mapId,\\n                _playerPosition,\\n                denizen.position,\\n                false\\n            )\\n        ) {\\n            revert(\\\"Not in room and can't see to attack\\\");\\n        }\\n\\n        // Player attacks denizen\\n        if (\\n            resolveChallenge(\\n                _gameId,\\n                uint(denizenDef[denizen.denizenType]),\\n                _playerAttackRating\\n            )\\n        ) {\\n            damageDone = 1; // TODO: Update if player damage can be higher with weapons\\n            denizen.healthRemaining--;\\n        }\\n\\n        // Turnabout\\n        // In room or is Robot, turret, or scav\\n        if (denizen.healthRemaining > 0) {\\n            if (\\n                (_playerPosition.row == denizen.position.row &&\\n                    _playerPosition.col == denizen.position.col) ||\\n                (denizen.denizenType != BCTypes.DenizenType.BUG &&\\n                    denizen.denizenType != BCTypes.DenizenType.QUEEN &&\\n                    denizen.denizenType != BCTypes.DenizenType.BUTCHER)\\n            ) {\\n                turnaboutDamage = denizenDmg[denizen.denizenType];\\n                players.extHurtPlayer(_playerId, damageDone, false);\\n            }\\n        }\\n\\n        emit PlayerAttack(\\n            _gameId,\\n            _playerId,\\n            denizen.denizenType,\\n            _denizenId,\\n            damageDone,\\n            turnaboutDamage\\n        );\\n    }\\n\\n    function _denizenAttack(\\n        uint _gameId,\\n        BCTypes.Denizen storage _denizen,\\n        BCTypes.Player memory _player,\\n        uint _distance\\n    ) private {\\n        uint damageDone;\\n        uint turnaboutDamage;\\n\\n        // Denizen Attacks Player\\n        if (\\n            resolveChallenge(\\n                _gameId,\\n                uint(denizenOff[_denizen.denizenType]),\\n                uint(uint8(_player.currentTraits.defense))\\n            )\\n        ) {\\n            damageDone = denizenDmg[_denizen.denizenType];\\n            players.extHurtPlayer(_player.id, damageDone, false);\\n        }\\n\\n        // Turnabout\\n        if (_distance == 0 || _player.currentTraits.hasGun) {\\n            int8 attackRating;\\n            if (_distance == 0) {\\n                // Get the better of melee or shooting\\n                attackRating = _player.currentTraits.melee >\\n                    _player.currentTraits.shoot\\n                    ? _player.currentTraits.melee\\n                    : _player.currentTraits.shoot;\\n            } else {\\n                attackRating = _player.currentTraits.shoot;\\n            }\\n\\n            if (\\n                resolveChallenge(\\n                    _gameId,\\n                    uint(uint8(attackRating)),\\n                    uint(denizenDef[_denizen.denizenType])\\n                )\\n            ) {\\n                turnaboutDamage = 1; // TODO: Hardcoded player damage\\n                _denizen.healthRemaining--;\\n            }\\n        }\\n\\n        emit DenizenAttack(\\n            _gameId,\\n            _denizen.denizenType,\\n            _denizen.id,\\n            _player.id,\\n            damageDone,\\n            turnaboutDamage\\n        );\\n    }\\n\\n    function forceNextTurn(uint _gameId) public {\\n        // TODO: Limit to only players of current game\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        require(currentGame.denizenTurn == false, \\\"Can't force denizen turn\\\");\\n        require(\\n            currentGame.playerIndexes.length > 1,\\n            \\\"Can't force single player\\\"\\n        );\\n\\n        require(\\n            block.timestamp >\\n                currentGame.lastTurnTimestamp + currentGame.turnTimeLimit,\\n            \\\"Still within time limit\\\"\\n        );\\n\\n        // TODO: Include this in determining checks to prevent randos\\n        // Force resolution of event if one is present\\n        if (currentGame.eventNumber != 0) {\\n            _resolveEvent(_gameId, 0);\\n        }\\n\\n        // TODO: Critical -> This can be exploited to hold on to extra items for a turn or two\\n\\n        _endPlayerTurn(\\n            _gameId,\\n            currentGame.playerIndexes[currentGame.currentPlayerTurnIndex]\\n        );\\n    }\\n\\n    function extMovePlayer(\\n        uint _gameId,\\n        BCTypes.Position memory _position,\\n        uint _playerId\\n    ) public onlyActions {\\n        _movePlayer(_gameId, _position, _playerId, 0);\\n    }\\n\\n    function debugMovePlayer(\\n        uint _gameId,\\n        BCTypes.Position memory _position,\\n        uint _playerId,\\n        uint _debugRoomId\\n    ) public onlyOwner {\\n        _movePlayer(_gameId, _position, _playerId, _debugRoomId);\\n    }\\n\\n    function _movePlayer(\\n        uint _gameId,\\n        BCTypes.Position memory _position,\\n        uint _playerId,\\n        uint _debugRoomId\\n    ) internal {\\n        // TODO: May be unnecessary outside of testing bugs\\n        BCTypes.Game storage game = games[_gameId];\\n        require(\\n            _playerId == game.playerIndexes[0] ||\\n                _playerId == game.playerIndexes[1] ||\\n                _playerId == game.playerIndexes[2] ||\\n                _playerId == game.playerIndexes[3],\\n            \\\"Player not in this game\\\"\\n        );\\n        // extMovePlayer returns true if the player was killed by moving into space\\n        if (\\n            !players.extMovePlayer(_position, _playerId, games[_gameId].mapId)\\n        ) {\\n            // Discover room and process event, if undiscovered\\n            // If roomId is returned by maps.discoverRoom as 0, room was already discovered (it's not a space tile)\\n            // TODO: This is confusing, should not use 0 here to indicate not to trigger event\\n            uint discoveredRoomId = maps.discoverRoom(\\n                games[_gameId].mapId,\\n                _position.row,\\n                _position.col,\\n                _debugRoomId\\n            );\\n            BCTypes.RoomTile memory discoveredRoom = maps.extGetRoomById(\\n                games[_gameId].mapId,\\n                discoveredRoomId\\n            );\\n            if (\\n                discoveredRoomId > 2 &&\\n                discoveredRoom.eventType != BCTypes.BCEventType.NONE\\n            ) {\\n                // Increment the event tracker\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.BUG) {\\n                    games[_gameId].eventTracker.bugEvents++;\\n                }\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.MYSTERY) {\\n                    games[_gameId].eventTracker.mysteryEvents++;\\n                }\\n                if (discoveredRoom.eventType == BCTypes.BCEventType.SCAVENGER) {\\n                    games[_gameId].eventTracker.scavEvents++;\\n                }\\n                if (\\n                    discoveredRoom.eventType ==\\n                    BCTypes.BCEventType.SHIP_SECURITY\\n                ) {\\n                    games[_gameId].eventTracker.shipEvents++;\\n                }\\n\\n                if (discoveredRoom.eventNum > 0) {\\n                    // Set the in-room event ONLY if this is not a permanant event\\n                    BCEvents.BCEvent memory currentEvent = bcEvents\\n                        .extGetRoomEvent(discoveredRoom.eventNum);\\n                    if (!currentEvent.permanent) {\\n                        games[_gameId].eventPlayerId = _playerId;\\n                        games[_gameId].eventNumber = discoveredRoom.eventNum;\\n                        games[_gameId].eventType = BCTypes.BCEventType.ROOM;\\n                        games[_gameId].eventPosition = _position;\\n                    }\\n                } else if (\\n                    discoveredRoom.eventType != BCTypes.BCEventType.NONE\\n                ) {\\n                    games[_gameId].eventPlayerId = _playerId;\\n                    games[_gameId].eventPosition = _position;\\n                    // Draw a card for an event\\n                    // TODO: DRY with above\\n                    // TODO: Handle permanant card events like arm rassling, or remove from game\\n                    if (discoveredRoom.eventType == BCTypes.BCEventType.BUG) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedBugEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes.BCEventType.BUG;\\n                    }\\n                    if (\\n                        discoveredRoom.eventType == BCTypes.BCEventType.MYSTERY\\n                    ) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedMysteryEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes.BCEventType.MYSTERY;\\n                    }\\n                    if (\\n                        discoveredRoom.eventType ==\\n                        BCTypes.BCEventType.SCAVENGER\\n                    ) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedScavEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes\\n                            .BCEventType\\n                            .SCAVENGER;\\n                    }\\n                    if (\\n                        discoveredRoom.eventType ==\\n                        BCTypes.BCEventType.SHIP_SECURITY\\n                    ) {\\n                        games[_gameId].eventNumber = _getUnusedEvent(\\n                            games[_gameId].unusedShipEvents\\n                        );\\n                        games[_gameId].eventType = BCTypes\\n                            .BCEventType\\n                            .SHIP_SECURITY;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit DenizenTurnOver(_gameId);\\n    }\\n\\n    // TODO: Eval one call per placement action.  May save gas.  Currently calling this in a loop\\n    function addDenizen(\\n        uint _gameId,\\n        BCTypes.DenizenType _type,\\n        uint _row,\\n        uint _col\\n    ) public {\\n        // Per rules, no denizens on Donghaijiu\\n        if (_row == StartLocation.row && _col == StartLocation.col) {\\n            // TODO: Emit an event here to let FE know to tell player something else\\n            return;\\n        }\\n        // Players contract determines effects of an event\\n        require(msg.sender == address(players), \\\"Not players contract\\\");\\n        BCTypes.Game storage currentGame = games[_gameId];\\n\\n        uint denizenId = currentGame.denizens.length;\\n        currentGame.denizens.push(\\n            BCTypes.Denizen(\\n                denizenId,\\n                _gameId,\\n                _type,\\n                BCTypes.Position(uint8(_row), uint8(_col)),\\n                denizenHealth[_type],\\n                false\\n            )\\n        );\\n    }\\n\\n    function getDenizensInGame(\\n        uint _gameId\\n    ) public view returns (BCTypes.Denizen[] memory) {\\n        return games[_gameId].denizens;\\n    }\\n\\n    function setDenizenLooted(\\n        uint _gameId,\\n        uint _denizenId\\n    ) public onlyActions {\\n        games[_gameId].denizens[_denizenId].looted = true;\\n    }\\n\\n    function _getUnusedEvent(\\n        uint[] storage _unusedEventList\\n    ) internal returns (uint) {\\n        for (uint i = _unusedEventList.length - 1; i > 0; i--) {\\n            uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n            (_unusedEventList[i], _unusedEventList[k]) = (\\n                _unusedEventList[k],\\n                _unusedEventList[i]\\n            );\\n        }\\n\\n        uint eventId = _unusedEventList[_unusedEventList.length - 1];\\n        _unusedEventList.pop();\\n        return uint8(eventId);\\n    }\\n\\n    function extGetGamePlayerIndexes(\\n        uint _gameId\\n    ) public view returns (uint[] memory) {\\n        uint[] memory indexes = new uint[](games[_gameId].playerIndexes.length);\\n        for (uint i = 0; i < indexes.length; i++) {\\n            indexes[i] = games[_gameId].playerIndexes[i];\\n        }\\n        return indexes;\\n    }\\n\\n    function extGetGame(uint _id) public view returns (BCTypes.Game memory) {\\n        return games[_id];\\n    }\\n\\n    function extGetNumGames() public view returns (uint) {\\n        return games.length;\\n    }\\n\\n    function extGetGamesOfPlayer(\\n        address _playerAddress\\n    ) public view returns (uint[] memory) {\\n        uint[] memory gamesList = new uint[](\\n            addressToGame[_playerAddress].length\\n        );\\n\\n        for (uint i = 0; i < gamesList.length; i++) {\\n            gamesList[i] = addressToGame[_playerAddress][i];\\n        }\\n\\n        return gamesList;\\n    }\\n\\n    modifier onlyActions() {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract\\\");\\n        _;\\n    }\\n\\n    // TODO: CRITICAL - REMOVE THIS\\n    // Space limit\\n    // function DEBUGforceSpawnDenizen(\\n    //     uint _gameId,\\n    //     BCTypes.DenizenType _denizenType,\\n    //     uint _row,\\n    //     uint _col\\n    // ) public onlyOwner {\\n    //     BCTypes.Game storage currentGame = games[_gameId];\\n\\n    //     uint denizenId = currentGame.denizens.length;\\n    //     currentGame.denizens.push(\\n    //         BCTypes.Denizen(\\n    //             denizenId,\\n    //             _gameId,\\n    //             _denizenType,\\n    //             BCTypes.Position(uint8(_row), uint8(_col)),\\n    //             denizenHealth[_denizenType],\\n    //             false\\n    //         )\\n    //     );\\n    // }\\n}\\n\",\"keccak256\":\"0xf2a6141013774cd6879aa728e4038f69c289174997c150a4e3dddacc7ecfe2bc\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n    // From BCGames.sol\\n    enum DoorStatus {\\n        NO_DOOR,\\n        CLOSED,\\n        OPEN,\\n        BREACHED,\\n        WINDOW\\n    }\\n    enum Action {\\n        HACK,\\n        BREACH,\\n        MOVE,\\n        PASS,\\n        LOOT,\\n        USE_ROOM,\\n        USE_ITEM,\\n        DROP_ITEMS,\\n        PICK_ITEMS,\\n        LEAVE_GAME,\\n        MELEE_ATTACK,\\n        SHOOT_ATTACK,\\n        LOOT_DENIZEN\\n    } // TODO: Add rest\\n    enum Followthrough {\\n        NONE,\\n        MOVE\\n    }\\n    enum BCEventType {\\n        NONE,\\n        BUG,\\n        MYSTERY,\\n        SCAVENGER,\\n        SHIP_SECURITY,\\n        ROOM // TODO: Is this still useful\\n    }\\n    enum WorldItemStatus {\\n        DESTROYED,\\n        HELD,\\n        ON_GROUND,\\n        DISCARDED,\\n        OUT_OF_GAME\\n    }\\n\\n    enum ItemCategory {\\n        COMPANY,\\n        ARTIFACT,\\n        SCAVENGER\\n    }\\n    enum ItemType {\\n        CONSUMABLE,\\n        HEALTH,\\n        CARRY,\\n        DEFENSE,\\n        HACK,\\n        BREACH,\\n        HAZARD,\\n        ARMOR,\\n        RANGED,\\n        MELEE,\\n        SPECIAL\\n    }\\n\\n    enum DenizenType {\\n        NONE,\\n        BUG,\\n        SCAV,\\n        TURRET,\\n        ROBOT,\\n        QUEEN,\\n        BUTCHER,\\n        BEHEMOTH,\\n        DOCTOR\\n    }\\n\\n    // WARNING: At stack limit\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n        uint id; // playerId;\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n        Position position;\\n        Position lastPos;\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken; // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n        uint8 dataTokens; // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n        // Flags\\n        // bool canHarmOthers; // Need stack space\\n        bool dead;\\n        // bool hasGun;\\n        // bool hasEgg; // Need stack space\\n\\n        uint gameId;\\n    }\\n\\n    struct Denizen {\\n        uint id;\\n        uint gameId;\\n        DenizenType denizenType; // Traits are derived from type. //TODO: rename to type\\n        Position position;\\n        uint healthRemaining; // Denizen is dead if this is zero\\n        bool looted;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n        uint[4] doors; // n, s, e, w // TODO: Make an enum for this.  Also,, this should be named doorIds\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n        // Row, Col => GameTile\\n        mapping(uint => mapping(uint => GameTile)) board;\\n        mapping(uint => Door) doors;\\n        uint8 numDoors;\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n        bool denizenTurn;\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        uint turnsTaken;\\n        EventTracker eventTracker;\\n        // address mapContract;\\n        uint mapId;\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n        uint DEBUG_returnAmount;\\n        BCTypes.Denizen[] denizens;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n        uint8 numItems;\\n        uint8 numData;\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n        // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n        bool hasGun;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber; // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame;\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n        uint weight;\\n        ItemCategory itemCategory;\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n        ItemType itemType;\\n        uint8 power; // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n        WorldItemStatus status;\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0x477323252e35faa4f9c657bcd1dc9ffb87c487d2c2e5c7c0e8508c55059df5d7\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) public returns(uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns(uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return(keccak256(abi.encodePacked(TODO_randomSeed, blockhash(block.number-1), msg.sender)));\\n    }\\n\\n    function abs(int x) public pure returns (int) { // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(uint _min, uint _max, uint _val, uint _valMax) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = adjustedMax * _val / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(bytes32 _hash, uint256 _size, uint256 _offset) public pure returns(uint8) {\\n        bytes32 mask = bytes32((2**_size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(uint _traitNum, uint _subTraitNum) public pure returns(uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) public pure returns(uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row-1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row+1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col+1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col-1);\\n        }\\n        string memory message = string.concat(\\\"Invalid direction: \\\", Strings.toString(_direction));\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(uint _gameId, uint _for, uint _against) public returns(bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if(_direction == 0) {\\n            return 1;\\n        }\\n        if(_direction == 1) {\\n            return 0;\\n        }\\n        if(_direction == 2) {\\n            return 3;\\n        }\\n        if(_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n\\n    function manhattanDistance(BCTypes.Position memory _pos1, BCTypes.Position memory _pos2) public pure returns (uint) {\\n        uint row = uint(abs(int(int8(_pos1.row)) - int(int8(_pos2.row))));\\n        uint col = uint(abs(int(int8(_pos1.col)) - int(int8(_pos2.col))));\\n        return row + col;\\n    }\\n}\\n\",\"keccak256\":\"0xa9dbd4335b75cd9990f13f41de3c0a4caf68b523cef3de10b05bc676188d23ba\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600060015560c0604052600a6080819052600660a052805461ffff191661060a1790553480156200002f57600080fd5b506200003b33620005f8565b60027ffd54ff1ed53f34a900b24c5ba64f85761163b5d82d98a47b9bd80e45466993c581905560037f10a81eed9d63d16face5e76357905348e6253d3394086026bb2bf2145d7cc2498190557f26b4a10d0f0b04925c23bd4480ee147c916e5e87a7d68206a533dad160ac81e282905560057fafafe8948a4ed9d478b1e9a5780b119b5edd00ea7d07bc35bef7c814824eb94b5560647fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd21495560327fa48544818c2c710afa9849c61ec9c60e8acdb3eaa2885f33b37e118cc8fd04ac5560c87fb91432bedff11256dbe14161d3606a2657bc9dacf8742f6b817d871dd53fb9765560197f0b705463cf5f7356780ee6e96132d37412c1b5816a4d207b8dcd42c349767457557fa7c5ba7114a813b50159add3a36832908dc83db71d0b9a24c2ad0f83be9582078190557f9adb202b1492743bc00c81d33cdc6423fa8c79109027eb6a845391e8fc1f048181905560047fe0283e559c29e31ee7f56467acc9dd307779c843a883aeeb3bf5c6128c90814481905560067fa1d6913cd9e08c872be3e7525cca82e4fc0fc298a783f19022be725b19be685a819055600a7fb9bec7e2561f624fe753ff070f1599b306cbf59fafd4e8d5a8184a1ea1841bce81905560087f92b4482321f41ce3aa65f798bda23d0d12a60fc5f212868a548ddb00aa49de72819055600c7f376529bb8a2d41b4a589a133407fc64f3212472dbd74744348be1098bf7ba08d557feab6bc3746954d8a0719de62c86ea908d362be2a58c781ada1046727253f9df28490557f169f97de0d9a84d840042b17d3c6b9638b3d6fd9024c9eb0c7a306a17b49f88f8490557fa74ba3945261e09fde15ba3db55005b205e61eeb4ad811ac0faa2b315bffeead8590557f45f76dafbbad695564362934e24d72eedc57f9fc1a65f39bca62176cc82968288590557f367ccd2d0ac16bf7110a5dffe0801fdc9452a95a1adb7e1a12fe97dd3e9a4edd8590557f6bda57492eba051cb4a12a1e19df47c9755d78165341d4009b1d09b3f36162048190557fb5a1e7cda73b1608e93d4d50ab796c3d35aa6216cb006a1f920df154d13ff61883905560077f73dfc495eb54bd6713ffc079b9f5e40f2fecd3793d143759ba0128fbedb40254557f49a9092dc5c03b26195f6621c97b5cf515cb77afe659e3fe008a73456354eb689190915560017f8c6065603763fec3f5742441d3833f3f43b982453612d76adb39a885e3006b5f8190557f853b2fefe141400fef543280f93d98bd49996069f632d0d20236afeeed8e46a28190557fb3edd0d534d647cffdae9f1294f11ad21f3fcf2814bea44c92bbb8d384a57d9e8190557f1588ac671d87f82adc0e6ae8ab009c0de98f92a20243897597e566bc59b9c126557f61a7346ab5ebdac457db2a901eaf1b805239b6049a1b2f34bab85e2e274f39cb8190557f20edfb71820f6f00f6a84ccfefb91587cd9f849f8349b0a3182a4795899d9cd98290557f4ef6145e44e4298293af15ae5f84f922a836b1d6db608fd5008f32a528b312a983905560107f5f04e77c60ed37290f5789e2e9c5d396103f3c4b14614065cbb4c8362609d5a55560116020527f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b5528490557f08037d7b151cc412d25674a4e66b334d9ae9d2e5517a7feaae5cdb828bf1c62884905560007f9bfbaa59f8e10e7868f8b402de9d605a390c45ddaebd8c9de3c6f31e733c87ff8190557f251164fe1d8864fe5e86082eae9c288bc2b58695a4d28538dfe86e9e4f175585959095557fc550213cee30afd5e67ccba7be3d381bbc169034ae08eb3ec9168caca9fe55e7919091557ffb9ce45064c7e7d9bf9deb4750ba7c94ab3d6e7418c5d76bf69966d39a9d42f68390557f98ae0176de2844d118e1a6decfe92f97691bedbc578c71fc8d5c4374be77e50c9290925591527f5fae251ae169e8e40026ce4ce85a026bc3adcccdc8459be361195e4cd924077f5562000648565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b615fdb80620006586000396000f3fe608060405234801561001057600080fd5b506004361061029f5760003560e01c80638214f22211610167578063ce28613f116100ce578063dce6c5da11610087578063dce6c5da1461068d578063ed9067fa146106ad578063f101de9a146106c0578063f10bff2b146106d3578063f2fde38b146106e6578063fa3993c2146106f957600080fd5b8063ce28613f146105e4578063d72be09d146105f7578063d78e7d861461060a578063d8a030821461062a578063dc0b35641461064a578063dc769ee81461065d57600080fd5b8063a99d2a8b11610120578063a99d2a8b14610558578063aa6e80301461056b578063afd62bb21461057e578063bb24866714610591578063c06fad06146105b1578063c6850f7c146105c457600080fd5b80638214f222146104db5780638bf52bc3146104ee5780638da5cb5b14610501578063951fc3fe1461051257806397f34c3f146105325780639fca1ee11461054557600080fd5b806340d4fd781161020b57806364db84bf116101c457806364db84bf1461046757806364f664671461047a5780636fe99c181461048d578063715018a6146104ad5780637b45c0d4146104b55780637ddae103146104c857600080fd5b806340d4fd78146103d157806343d7c3be146103f157806346f2434b14610404578063530116961461040c57806354731422146104315780635dc969671461044457600080fd5b80631e1de2051161025d5780631e1de2051461036a5780631f7b4f3014610372578063336d7d7b146103855780633aa07d64146103985780633deaec2b146103ab5780633f090e3d146103be57600080fd5b8062e3d898146102a457806310a2cd0d146102d7578063117a5b9014610302578063175142251461032f5780631b5ac4b5146103445780631cef40f614610357575b600080fd5b6102c46102b236600461487b565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b6002546102ea906001600160a01b031681565b6040516001600160a01b0390911681526020016102ce565b610315610310366004614896565b61070c565b6040516102ce9e9d9c9b9a999897969594939291906148d9565b61034261033d366004614ac5565b6107e1565b005b6102c4610352366004614896565b610826565b610342610365366004614afb565b610846565b6102c4610a2f565b6102c4610380366004614896565b610aa7565b6007546102ea906001600160a01b031681565b6103426103a6366004614b36565b610b03565b6003546102ea906001600160a01b031681565b6103426103cc366004614b80565b610f1d565b6103e46103df366004614896565b61115d565b6040516102ce9190614bed565b6103426103ff366004614c00565b61124e565b600b546102c4565b61041f61041a366004614b80565b6112d5565b60405160ff90911681526020016102ce565b61034261043f366004614896565b611312565b610457610452366004614c22565b61148c565b60405190151581526020016102ce565b6102c4610475366004614c00565b611529565b610342610488366004614c00565b611541565b6104a061049b366004614896565b611646565b6040516102ce9190614ce3565b610342611a47565b6009546102ea906001600160a01b031681565b6004546102ea906001600160a01b031681565b6102c46104e9366004614896565b611a5b565b6103426104fc366004614eb7565b611ad5565b6000546001600160a01b03166102ea565b610525610520366004614ef3565b611ae9565b6040516102ce9190614f20565b61041f610540366004614c22565b611c13565b6008546102ea906001600160a01b031681565b6102c4610566366004614f53565b611c3e565b610342610579366004614f8d565b611c6f565b6103e461058c366004614fc6565b611d7f565b6102c461059f36600461487b565b60116020526000908152604090205481565b6005546102ea906001600160a01b031681565b6102c46105d236600461487b565b60106020526000908152604090205481565b61041f6105f2366004614fe3565b611e4f565b61034261060536600461501c565b611eff565b6102c461061836600461487b565b600f6020526000908152604090205481565b61063d610638366004614896565b611f85565b6040516102ce91906150b2565b6006546102ea906001600160a01b031681565b600a546106739060ff8082169161010090041682565b6040805160ff9384168152929091166020830152016102ce565b6102c461069b36600461487b565b600e6020526000908152604090205481565b6103426106bb366004614896565b61209c565b6102c46106ce3660046150e8565b612e4e565b6102c46106e136600461518d565b61331c565b6103426106f4366004614fc6565b613369565b6102c461070736600461518d565b6133e2565b600b818154811061071c57600080fd5b6000918252602091829020601390910201805460028201546003830154600484015460408051608081018252600587015460ff81811683526101008083048216848c0152620100008304821684860152630100000090920481166060840152600689015460078a015460088b015460098c01548751808901909852600a8d0154808616895286900485169d88019d909d52600f8c015460108d01546011909d0154858d169f5095909b0484169c999b989a97999598929791969095909316939091908e565b6009546001600160a01b031633146108145760405162461bcd60e51b815260040161080b906151b9565b60405180910390fd5b61082183838360006134aa565b505050565b60008082121561083e57610839826151fd565b610840565b815b92915050565b600a5460ff16821480156108635750600a54610100900460ff1681145b610a29576006546001600160a01b031633146108b85760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b604482015260640161080b565b6000600b85815481106108cd576108cd615219565b90600052602060002090601302019050600081601201805490509050816012016040518060c00160405280838152602001888152602001876008811115610916576109166148af565b815260200160405180604001604052808860ff1681526020018760ff168152508152602001600d6000896008811115610951576109516148af565b6008811115610962576109626148af565b8152602080820192909252604090810160009081205484529282018390528454600181810187559584529282902084516006909402019283559083015182850155820151600282018054939492939192909160ff1916908360088111156109cb576109cb6148af565b02179055506060820151805160038301805460209093015160ff9081166101000261ffff199094169216919091179190911790556080820151600482015560a0909101516005909101805491151560ff199290921691909117905550505b50505050565b6001805460009182610a408361522f565b9190505550600154600143610a559190615248565b4033604051602001610a8c93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b600080610ab660016006611e4f565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c518382604051610af5929190918252602082015260400190565b60405180910390a192915050565b6009546001600160a01b03163314610b2d5760405162461bcd60e51b815260040161080b906151b9565b6000806000600b8881548110610b4557610b45615219565b90600052602060002090601302016012018781548110610b6757610b67615219565b906000526020600020906006020190506000816004015411610bcb5760405162461bcd60e51b815260206004820152601960248201527f43616e27742061747461636b20646561642064656e697a656e00000000000000604482015260640161080b565b6003810154845160ff9081169116148015610bf957506003810154602085015160ff90811661010090920416145b1580610ca55750600354600b80546001600160a01b0390921691632ec6572a91908b908110610c2a57610c2a615219565b906000526020600020906013020160060154868460030160006040518563ffffffff1660e01b8152600401610c62949392919061525b565b602060405180830381865afa158015610c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca391906152b4565b155b15610cfe5760405162461bcd60e51b815260206004820152602360248201527f4e6f7420696e20726f6f6d20616e642063616e27742073656520746f2061747460448201526261636b60e81b606482015260840161080b565b6002810154610d49908990600e9060009060ff166008811115610d2357610d236148af565b6008811115610d3457610d346148af565b8152602001908152602001600020548761148c565b15610d6a5760048101805460019450906000610d64836152d1565b91905055505b600481015415610ec8576003810154845160ff9081169116148015610da257506003810154602085015160ff90811661010090920416145b80610e0f57506001600282015460ff166008811115610dc357610dc36148af565b14158015610dea57506005600282015460ff166008811115610de757610de76148af565b14155b8015610e0f57506006600282015460ff166008811115610e0c57610e0c6148af565b14155b15610ec857600281015460109060009060ff166008811115610e3357610e336148af565b6008811115610e4457610e446148af565b81526020810191909152604090810160009081205460065492516301ba1eb160e31b8152600481018a905260248101879052604481019290925293506001600160a01b0390911690630dd0f58890606401600060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050505b60028101546040517f8e8341e4cf4165f5b8133f6805aa5cd98756c5203c1756d9eec0af9cef617d4391610f0b918b918a9160ff909116908c90899089906152e8565b60405180910390a15050505050505050565b6009546001600160a01b03163314610f475760405162461bcd60e51b815260040161080b906151b9565b6000600b8581548110610f5c57610f5c615219565b60009182526020909120600554604051635f87260160e01b81526004810188905260248101899052601390930290910192506001600160a01b031690635f87260190604401600060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b5050600254604051631ff77ac560e11b8152600481018790526001600160a01b039091169250633feef58a9150602401600060405180830381600087803b15801561101957600080fd5b505af115801561102d573d6000803e3d6000fd5b5050505060018181015460009161104391615248565b6001600160401b0381111561105a5761105a61499f565b604051908082528060200260200182016040528015611083578160200160208202803683370190505b5090506000805b60018401548110156110fa578085146110e8578360010181815481106110b2576110b2615219565b90600052602060002001548383815181106110cf576110cf615219565b6020908102919091010152816110e48161522f565b9250505b806110f28161522f565b91505061108a565b508151611110906001850190602085019061471f565b50600383018054906000611123836152d1565b9091555050600183015460028401540361113f57600060028401555b600183015460000361115457825460ff191683555b50505050505050565b60606000600b838154811061117457611174615219565b9060005260206000209060130201600101805490506001600160401b038111156111a0576111a061499f565b6040519080825280602002602001820160405280156111c9578160200160208202803683370190505b50905060005b815181101561124757600b84815481106111eb576111eb615219565b9060005260206000209060130201600101818154811061120d5761120d615219565b906000526020600020015482828151811061122a5761122a615219565b60209081029190910101528061123f8161522f565b9150506111cf565b5092915050565b6009546001600160a01b031633146112785760405162461bcd60e51b815260040161080b906151b9565b6001600b838154811061128d5761128d615219565b906000526020600020906013020160120182815481106112af576112af615219565b60009182526020909120600690910201600501805460ff19169115159190911790555050565b6000806112e28686615248565b90506000836112f18684615320565b6112fb919061534d565b90506113078782615361565b979650505050505050565b6000600b828154811061132757611327615219565b600091825260209091206013909102018054909150610100900460ff16156113915760405162461bcd60e51b815260206004820152601860248201527f43616e277420666f7263652064656e697a656e207475726e0000000000000000604482015260640161080b565b600181810154116113e45760405162461bcd60e51b815260206004820152601960248201527f43616e277420666f7263652073696e676c6520706c6179657200000000000000604482015260640161080b565b80600f015481601001546113f89190615361565b42116114465760405162461bcd60e51b815260206004820152601760248201527f5374696c6c2077697468696e2074696d65206c696d6974000000000000000000604482015260640161080b565b60088101541561145b5761145b826000613ed9565b611488828260010183600201548154811061147857611478615219565b9060005260206000200154613fa5565b5050565b60008061149885610aa7565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a1806001036114f5576000915050611522565b6003836115028684615361565b61150c9190615374565b131561151c576001915050611522565b60009150505b9392505050565b600081611537846004615320565b6115229190615361565b6000600b838154811061155657611556615219565b600091825260209091206006546013909202016007810154604051636621a42160e01b815260048101919091529092506001600160a01b0390911690636621a42190602401602060405180830381865afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc919061539f565b6001600160a01b0316336001600160a01b03161461163c5760405162461bcd60e51b815260206004820152601960248201527f4576656e74206e6f7420666f7220796f757220706c6179657200000000000000604482015260640161080b565b6108218383613ed9565b61164e61476a565b600b828154811061166157611661615219565b600091825260209182902060408051610280810182526013909302909101805460ff808216151585526101009091041615158385015260018101805483518187028101870185528181529495929493860193928301828280156116e357602002820191906000526020600020905b8154815260200190600101908083116116cf575b505050918352505060028201546020808301919091526003830154604080840191909152600484015460608085019190915281516080818101845260058088015460ff808216855261010080830482169886019890985262010000820481169685019690965263010000009004851693830193909352850152600685015460a0850152600785015460c0850152600885015460e085015260098501549290930192911690811115611796576117966148af565b60058111156117a7576117a76148af565b8152604080518082018252600a84015460ff80821683526101009091041660208281019190915280840191909152600b8401805483518184028101840185528181529390940193909183018282801561181f57602002820191906000526020600020905b81548152602001906001019080831161180b575b50505050508152602001600c820180548060200260200160405190810160405280929190818152602001828054801561187757602002820191906000526020600020905b815481526020019060010190808311611863575b50505050508152602001600d82018054806020026020016040519081016040528092919081815260200182805480156118cf57602002820191906000526020600020905b8154815260200190600101908083116118bb575b50505050508152602001600e820180548060200260200160405190810160405280929190818152602001828054801561192757602002820191906000526020600020905b815481526020019060010190808311611913575b50505050508152602001600f8201548152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b82821015611a3957838290600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660088111156119ce576119ce6148af565b60088111156119df576119df6148af565b8152604080518082018252600384015460ff80821683526101009091048116602083810191909152808501929092526004850154928401929092526005909301541615156060909101529082526001929092019101611973565b505050915250909392505050565b611a4f614081565b611a5960006140db565b565b600081600003611a6d57506001919050565b81600103611a7d57506000919050565b81600203611a8d57506003919050565b81600303611a9d57506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b604482015260640161080b565b611add614081565b610a29848484846134aa565b604080518082019091526000808252602082015282600003611b3b57604051806040016040528060018460000151611b2191906153bc565b60ff168152602001836020015160ff168152509050610840565b82600103611b5f57604051806040016040528083600001516001611b2191906153d5565b82600203611b9c576040518060400160405280836000015160ff16815260200183602001516001611b9091906153d5565b60ff1690529050610840565b82600303611bcd576040518060400160405280836000015160ff16815260200160018460200151611b9091906153bc565b6000611bd88461412b565b604051602001611be89190615412565b60405160208183030381529060405290508060405162461bcd60e51b815260040161080b919061544d565b600080826001611c24866002615564565b611c2e9190615248565b901b8516831c9150509392505050565b600c6020528160005260406000208181548110611c5a57600080fd5b90600052602060002001600091509150505481565b6009546001600160a01b03163314611c995760405162461bcd60e51b815260040161080b906151b9565b80611cfd5760065460405163ce93229760e01b8152600481018490526001600160a01b039091169063ce93229790602401600060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b505050505b6006546040516347d0e3c960e01b8152600481018490526000916001600160a01b0316906347d0e3c990602401602060405180830381865afa158015611d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6b9190615570565b905060038110610a2957610a298484613fa5565b6001600160a01b0381166000908152600c6020526040812054606091906001600160401b03811115611db357611db361499f565b604051908082528060200260200182016040528015611ddc578160200160208202803683370190505b50905060005b8151811015611247576001600160a01b0384166000908152600c60205260409020805482908110611e1557611e15615219565b9060005260206000200154828281518110611e3257611e32615219565b602090810291909101015280611e478161522f565b915050611de2565b6001805460009182611e608361522f565b9190505550600033600154600143611e789190615248565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000611ecc85856153bc565b611ed79060016153d5565b90508460ff168160ff1683611eec9190615589565b611ef69190615361565b95945050505050565b611f07614081565b600280546001600160a01b03199081166001600160a01b03998a1617909155600380548216978916979097179096556007805487169588169590951790945560098054861693871693909317909255600480548516918616919091179055600580548416918516919091179055600680549092169216919091179055565b6060600b8281548110611f9a57611f9a615219565b9060005260206000209060130201601201805480602002602001604051908101604052809291908181526020016000905b8282101561209157838290600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166008811115612026576120266148af565b6008811115612037576120376148af565b8152604080518082018252600384015460ff80821683526101009091048116602083810191909152808501929092526004850154928401929092526005909301541615156060909101529082526001929092019101611fcb565b505050509050919050565b6000600b82815481106120b1576120b1615219565b600091825260208220600354601392909202016006810154604051630f78220b60e11b815260048101919091529093506001600160a01b0390911690631ef0441690602401600060405180830381865afa158015612113573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261213b9190810190615615565b60018301549091506000906001600160401b0381111561215d5761215d61499f565b60405190808252806020026020018201604052801561226157816020015b61224e604080516101c081018252600080825260208083018290528284018290528351610100810185528281528082018390528085018390526060808201849052608080830185905260a080840186905260c0840186905260e0840186905291860192909252855180870187528481528084018590529185019190915284518086019095528285529084019190915290919082019081526000602082018190526040820181905260608083018290526080830182905260a083015260c0820181905260e082018190526101009091015290565b81526020019060019003908161217b5790505b50905060005b815181101561233a576006546001850180546001600160a01b03909216916310f67fb391908490811061229c5761229c615219565b90600052602060002001546040518263ffffffff1660e01b81526004016122c591815260200190565b600060405180830381865afa1580156122e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261230a919081019061592a565b82828151811061231c5761231c615219565b602002602001018190525080806123329061522f565b915050612267565b506000600b858154811061235057612350615219565b9060005260206000209060130201601201905060005b8154811015612e3d57600082828154811061238357612383615219565b9060005260206000209060060201905080600401546000036123a55750612e2b565b60038101548551869160ff169081106123c0576123c0615219565b60200260200101518160030160000160019054906101000a900460ff1660ff16815181106123f0576123f0615219565b602002602001015160c001511561241957600481018054906000612413836152d1565b91905055505b806004015460000361242b5750612e2b565b61270f60001960005b865181101561253457600a54875160ff9091169088908390811061245a5761245a615219565b6020026020010151608001516000015160ff161480156124ab5750600a54875161010090910460ff169088908390811061249657612496615219565b6020026020010151608001516020015160ff16145b6125225760408051808201909152600385015460ff808216835261010090910416602082015287516000916124fd918a90859081106124ec576124ec615219565b60200260200101516080015161331c565b90508060000361251257819350809250612520565b828111612520578193508092505b505b8061252c8161522f565b915050612434565b508161270f0361254657505050612e2b565b6001600284015460ff166008811115612561576125616148af565b0361275d578060000361259b57612593898488858151811061258557612585615219565b602002602001015184614233565b505050612e2b565b600160005260116020527f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b55254811161275d576003805460068a015488516001600160a01b03909216926345e1e03c92908701908a908790811061260057612600615219565b602002602001015160800151600060016011600060016008811115612627576126276148af565b6008811115612638576126386148af565b8152602001908152602001600020546040518763ffffffff1660e01b815260040161266896959493929190615a75565b6040805180830381865afa158015612684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a89190615ac3565b805160038501805460209093015160ff9081166101000261ffff1990941692169190911791909117905585518690839081106126e6576126e6615219565b60209081029190910101516080015151600384015460ff9081169116148015612741575085828151811061271c5761271c615219565b6020908102919091018101516080015101516003840154610100900460ff9081169116145b1561259357612593898488858151811061258557612585615219565b60028084015460ff166008811115612777576127776148af565b03612a045780600003612947576003546040516369568fd560e01b8152600481018b90526000916001600160a01b0316906369568fd590602401600060405180830381865afa1580156127ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127f69190810190615adf565b905060005b600481101561291757600282828151811061281857612818615219565b6020026020010151604001516004811115612835576128356148af565b148061286f5750600182828151811061285057612850615219565b602002602001015160400151600481111561286d5761286d6148af565b145b806128a85750600382828151811061288957612889615219565b60200260200101516040015160048111156128a6576128a66148af565b145b156129055760408051808201909152600386015460ff80821683526101009091041660208201526128da908290611ae9565b805160038701805460209093015160ff9081166101000261ffff199094169216919091179190911790555b8061290f8161522f565b9150506127fb565b5061293e8a8589868151811061292f5761292f615219565b60200260200101516001614233565b50505050612e2b565b6003805460068a015488516001600160a01b0390921692632ec6572a92908701908a908790811061297a5761297a615219565b60200260200101516080015160006040518563ffffffff1660e01b81526004016129a79493929190615bbc565b602060405180830381865afa1580156129c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e891906152b4565b15612a0457612593898488858151811061258557612585615219565b6003600284015460ff166008811115612a1f57612a1f6148af565b03612aed5761270f81108015612ad157506003805460068a015488516001600160a01b0390921692632ec6572a92908701908a9087908110612a6357612a63615219565b60200260200101516080015160016040518563ffffffff1660e01b8152600401612a909493929190615bbc565b602060405180830381865afa158015612aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad191906152b4565b15612aed57612593898488858151811061258557612585615219565b6004600284015460ff166008811115612b0857612b086148af565b03612e275780600003612b2c57612593898488858151811061258557612585615219565b600460005260116020527f251164fe1d8864fe5e86082eae9c288bc2b58695a4d28538dfe86e9e4f175585548111612c6a576003805460068a015488516001600160a01b03909216926345e1e03c92908701908a9087908110612b9157612b91615219565b602002602001015160800151600160006011600060046008811115612bb857612bb86148af565b6008811115612bc957612bc96148af565b8152602001908152602001600020546040518763ffffffff1660e01b8152600401612bf996959493929190615a75565b6040805180830381865afa158015612c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c399190615ac3565b80516003909401805460209092015160ff9081166101000261ffff199093169516949094171790925550612e2b9050565b61270f811015612e15576003805460068a015488516001600160a01b03909216926345e1e03c92908701908a9087908110612ca757612ca7615219565b602002602001015160800151600160006011600060046008811115612cce57612cce6148af565b6008811115612cdf57612cdf6148af565b8152602001908152602001600020546040518763ffffffff1660e01b8152600401612d0f96959493929190615a75565b6040805180830381865afa158015612d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4f9190615ac3565b80516003808601805460209094015160ff9081166101000261ffff19909516931692909217929092178155905460068a015488516001600160a01b0390921692632ec6572a928a9087908110612da757612da7615219565b60200260200101516080015160016040518563ffffffff1660e01b8152600401612dd49493929190615bbc565b602060405180830381865afa158015612df1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274191906152b4565b61270f811015612e2757505050612e2b565b5050505b80612e358161522f565b915050612366565b5050825461ff001916909255505050565b6007546000906001600160a01b03163314612ea05760405162461bcd60e51b8152602060048201526012602482015271139bdd081b1bd8989e4818dbdb9d1c9858dd60721b604482015260640161080b565b600b80546001818101808455600093845260139092027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9019291612ee49190615248565b825460ff191660019081178455600060048501558751919250612f0f9190840190602089019061471f565b50600382018590556040805160808101825260008082526020820181905291810182905260600181905260058301805463ffffffff19169055849003612fd257600360009054906101000a90046001600160a01b03166001600160a01b031663f01fc35a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc89190615570565b6006830155613047565b60035460405163148e052f60e21b8152600481018690526001600160a01b039091169063523814bc906024016020604051808303816000875af115801561301d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130419190615570565b60068301555b60005b613055600187615248565b811161317d57600683015460408051808201909152600a5460ff80821683526101009091041660208201526001850180546130af939291908590811061309d5761309d615219565b906000526020600020015460006134aa565b60065487516000916001600160a01b031690636621a421908a90859081106130d9576130d9615219565b60200260200101516040518263ffffffff1660e01b81526004016130ff91815260200190565b602060405180830381865afa15801561311c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613140919061539f565b6001600160a01b03166000908152600c602090815260408220805460018101825590835291200183905550806131758161522f565b91505061304a565b5060065460405163e7169ec560e01b81526001600160a01b039091169063e7169ec5906131b09089908590600401615bf7565b600060405180830381600087803b1580156131ca57600080fd5b505af11580156131de573d6000803e3d6000fd5b5050600554604051633b09709560e21b81526001600160a01b03909116925063ec25c25491506132149084908a90600401615c19565b600060405180830381600087803b15801561322e57600080fd5b505af1158015613242573d6000803e3d6000fd5b505050506000604051806101e00160405280600181526020016002815260200160038152602001600481526020016005815260200160068152602001600781526020016008815260200160098152602001600a8152602001600b8152602001600c8152602001600d8152602001600e8152602001600f81525090508083600b0190600f6132d092919061471f565b506132e0600c840182600f61471f565b506132f0600d840182600f61471f565b50613300600e840182600f61471f565b505061012c600f83015542601090920191909155949350505050565b60008061333c836000015160000b856000015160000b6103529190615374565b9050600061335d846020015160000b866020015160000b6103529190615374565b9050611ef68183615361565b613371614081565b6001600160a01b0381166133d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161080b565b6133df816140db565b50565b805182516000916133f291615c32565b60000b60010361340457506000610840565b815183516134129190615c32565b60000b1961342257506001610840565b816020015183602001516134369190615c32565b60000b1961344657506002610840565b8160200151836020015161345a9190615c32565b60000b60010361346c57506003610840565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b604482015260640161080b565b6000600b85815481106134bf576134bf615219565b90600052602060002090601302019050806001016000815481106134e5576134e5615219565b906000526020600020015483148061351c57508060010160018154811061350e5761350e615219565b906000526020600020015483145b8061354657508060010160028154811061353857613538615219565b906000526020600020015483145b8061357057508060010160038154811061356257613562615219565b906000526020600020015483145b6135bc5760405162461bcd60e51b815260206004820152601760248201527f506c61796572206e6f7420696e20746869732067616d65000000000000000000604482015260640161080b565b600654600b80546001600160a01b0390921691638d491b3e9187918791908a9081106135ea576135ea615219565b9060005260206000209060130201600601546040518463ffffffff1660e01b815260040161361a93929190615c53565b6020604051808303816000875af1158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d91906152b4565b613e9f57600354600b80546000926001600160a01b0316916381bad36d918990811061368b5761368b615219565b90600052602060002090601302016006015487600001518860200151876040518563ffffffff1660e01b81526004016136e1949392919093845260ff928316602085015291166040830152606082015260800190565b6020604051808303816000875af1158015613700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137249190615570565b600354600b80549293506000926001600160a01b0390921691635805828391908a90811061375457613754615219565b906000526020600020906013020160060154846040518363ffffffff1660e01b815260040161378d929190918252602082015260400190565b60a060405180830381865afa1580156137aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ce9190615c82565b90506002821180156137f357506000815160058111156137f0576137f06148af565b14155b15613e9c5760018151600581111561380d5761380d6148af565b0361386057600b878154811061382557613825615219565b600091825260208220600560139092020101805460ff169161384683615d14565b91906101000a81548160ff021916908360ff160217905550505b600281516005811115613875576138756148af565b036138d057600b878154811061388d5761388d615219565b600091825260209091206013909102016005018054610100900460ff169060016138b683615d14565b91906101000a81548160ff021916908360ff160217905550505b6003815160058111156138e5576138e56148af565b0361394157600b87815481106138fd576138fd615219565b60009182526020909120601390910201600501805462010000900460ff1690600261392783615d14565b91906101000a81548160ff021916908360ff160217905550505b600481516005811115613956576139566148af565b036139b357600b878154811061396e5761396e615219565b6000918252602090912060139091020160050180546301000000900460ff1690600361399983615d14565b91906101000a81548160ff021916908360ff160217905550505b602081015115613b325760048054602083015160405163c82c37b960e01b8152928301526000916001600160a01b039091169063c82c37b990602401600060405180830381865afa158015613a0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a349190810190615dc0565b90508060200151613b2c5785600b8981548110613a5357613a53615219565b9060005260206000209060130201600701819055508160200151600b8981548110613a8057613a80615219565b9060005260206000209060130201600801819055506005600b8981548110613aaa57613aaa615219565b60009182526020909120600960139092020101805460ff19166001836005811115613ad757613ad76148af565b021790555086600b8981548110613af057613af0615219565b60009182526020918290208351600a6013909302909101919091018054939092015160ff9081166101000261ffff199094169116179190911790555b50613e9c565b600081516005811115613b4757613b476148af565b14613e9c5784600b8881548110613b6057613b60615219565b90600052602060002090601302016007018190555085600b8881548110613b8957613b89615219565b60009182526020918290208351600a6013909302909101919091018054939092015160ff9081166101000261ffff19909416911617919091179055600181516005811115613bd957613bd96148af565b03613c7a57613c0a600b8881548110613bf457613bf4615219565b9060005260206000209060130201600b0161447b565b600b8881548110613c1d57613c1d615219565b9060005260206000209060130201600801819055506001600b8881548110613c4757613c47615219565b60009182526020909120600960139092020101805460ff19166001836005811115613c7457613c746148af565b02179055505b600281516005811115613c8f57613c8f6148af565b03613d3057613cc0600b8881548110613caa57613caa615219565b9060005260206000209060130201600c0161447b565b600b8881548110613cd357613cd3615219565b9060005260206000209060130201600801819055506002600b8881548110613cfd57613cfd615219565b60009182526020909120600960139092020101805460ff19166001836005811115613d2a57613d2a6148af565b02179055505b600381516005811115613d4557613d456148af565b03613de657613d76600b8881548110613d6057613d60615219565b9060005260206000209060130201600d0161447b565b600b8881548110613d8957613d89615219565b9060005260206000209060130201600801819055506003600b8881548110613db357613db3615219565b60009182526020909120600960139092020101805460ff19166001836005811115613de057613de06148af565b02179055505b600481516005811115613dfb57613dfb6148af565b03613e9c57613e2c600b8881548110613e1657613e16615219565b9060005260206000209060130201600e0161447b565b600b8881548110613e3f57613e3f615219565b9060005260206000209060130201600801819055506004600b8881548110613e6957613e69615219565b60009182526020909120600960139092020101805460ff19166001836005811115613e9657613e966148af565b02179055505b50505b6040518581527f0b902bf94ea0561a1c7b03fed6f663a1ae180c3c6d92b1b529718058696a4c389060200160405180910390a15050505050565b6000600b8381548110613eee57613eee615219565b6000918252602090912060068054601390930290910160078101549181015460088201546009830154604051636d291bbb60e01b81529396506001600160a01b0390951694636d291bbb94613f5694899491938b93600a8b019260ff90911690600401615eb1565b600060405180830381600087803b158015613f7057600080fd5b505af1158015613f84573d6000803e3d6000fd5b505060006007840181905560088401555050600901805460ff191690555050565b6000600b8381548110613fba57613fba615219565b6000918252602090912060065460405163065c363f60e41b815260048101869052601390930290910192506001600160a01b0316906365c363f090602401600060405180830381600087803b15801561401257600080fd5b505af1158015614026573d6000803e3d6000fd5b505042601084015550506001808201546140409190615248565b816002015410156140675760028101805490600061405d8361522f565b9190505550505050565b6140758382600601546145a1565b60006002820155505050565b6000546001600160a01b03163314611a595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161080b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816000036141525750506040805180820190915260018152600360fc1b602082015290565b8160005b811561417c57806141668161522f565b91506141759050600a8361534d565b9150614156565b6000816001600160401b038111156141965761419661499f565b6040519080825280601f01601f1916602001820160405280156141c0576020820181803683370190505b5090505b841561422b576141d5600183615248565b91506141e2600a86615589565b6141ed906030615361565b60f81b81838151811061420257614202615219565b60200101906001600160f81b031916908160001a905350614224600a8661534d565b94506141c4565b949350505050565b6002830154600090819061428d908790600f90849060ff16600881111561425c5761425c6148af565b600881111561426d5761426d6148af565b81526020019081526020016000205486606001516040015160ff1661148c565b1561434957600285015460109060009060ff1660088111156142b1576142b16148af565b60088111156142c2576142c26148af565b8152602081019190915260409081016000908120546006548784015193516301ba1eb160e31b8152600481019490945260248401829052604484019290925293506001600160a01b031690630dd0f58890606401600060405180830381600087803b15801561433057600080fd5b505af1158015614344573d6000803e3d6000fd5b505050505b82158061435b5750836060015160e001515b15614422576000836000036143a657846060015160a0015160000b856060015160c0015160000b1361439557846060015160a0015161439f565b846060015160c001515b90506143b1565b50606084015160a001515b60028601546143ff90889060ff80851691600e916000911660088111156143da576143da6148af565b60088111156143eb576143eb6148af565b81526020019081526020016000205461148c565b15614420576004860180546001935090600061441a836152d1565b91905055505b505b6002850154855460408087015190517fbec470141b1ce95021ad88998cf463bb41483dbb4fa04b0f5f9e34541c7336a49361446b938b9360ff9092169290919088908890615f05565b60405180910390a1505050505050565b8054600090819061448e90600190615248565b90505b801561453e5760006144a4600083611e4f565b9050838160ff16815481106144bb576144bb615219565b90600052602060002001548483815481106144d8576144d8615219565b90600052602060002001548584815481106144f5576144f5615219565b906000526020600020016000878560ff168154811061451657614516615219565b6000918252602090912001929092559190915550819050614536816152d1565b915050614491565b508154600090839061455290600190615248565b8154811061456257614562615219565b906000526020600020015490508280548061457f5761457f615f3c565b600190038181906000526020600020016000905590558060ff16915050919050565b6000600b83815481106145b6576145b6615219565b906000526020600020906013020190508060040160008154809291906145db9061522f565b9091555050600354604051630b06115560e31b8152600481018490526001600160a01b03909116906358308aa890602401600060405180830381600087803b15801561462657600080fd5b505af115801561463a573d6000803e3d6000fd5b505060035460405163c6b41b4560e01b815260048101869052600160248201526001600160a01b03909116925063c6b41b459150604401600060405180830381600087803b15801561468b57600080fd5b505af115801561469f573d6000803e3d6000fd5b5050600680549084015460405163668a7f3b60e01b81526001600160a01b03909216935063668a7f3b92506146db916001860190600401615f52565b600060405180830381600087803b1580156146f557600080fd5b505af1158015614709573d6000803e3d6000fd5b5050825461ff0019166101001790925550505050565b82805482825590600052602060002090810192821561475a579160200282015b8281111561475a57825182559160200191906001019061473f565b50614766929150614852565b5090565b6040805161028081018252600080825260208083018290526060838501819052808401839052608080850184905260a0850184905285519081018652838152918201839052938101829052928301529060c08201908152602001600081526020016000815260200160008152602001600060058111156147ec576147ec6148af565b81526020016148146040518060400160405280600060ff168152602001600060ff1681525090565b815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001606081525090565b5b808211156147665760008155600101614853565b80356009811061487657600080fd5b919050565b60006020828403121561488d57600080fd5b61152282614867565b6000602082840312156148a857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600681106148d5576148d56148af565b9052565b6000610240820190508f151582528e151560208301528d60408301528c60608301528b608083015261493b60a083018c60ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b89610120830152886101408301528761016083015261495e6101808301886148c5565b855160ff9081166101a08401526020870151166101c0830152846101e083015283610200830152826102208301529f9e505050505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156149d7576149d761499f565b60405290565b60405160e081016001600160401b03811182821017156149d7576149d761499f565b6040516101c081016001600160401b03811182821017156149d7576149d761499f565b604051606081016001600160401b03811182821017156149d7576149d761499f565b604051601f8201601f191681016001600160401b0381118282101715614a6c57614a6c61499f565b604052919050565b60ff811681146133df57600080fd5b600060408284031215614a9557600080fd5b614a9d6149b5565b90508135614aaa81614a74565b81526020820135614aba81614a74565b602082015292915050565b600080600060808486031215614ada57600080fd5b83359250614aeb8560208601614a83565b9150606084013590509250925092565b60008060008060808587031215614b1157600080fd5b84359350614b2160208601614867565b93969395505050506040820135916060013590565b600080600080600060c08688031215614b4e57600080fd5b85359450602086013593506040860135925060608601359150614b748760808801614a83565b90509295509295909350565b60008060008060808587031215614b9657600080fd5b5050823594602084013594506040840135936060013592509050565b600081518084526020808501945080840160005b83811015614be257815187529582019590820190600101614bc6565b509495945050505050565b6020815260006115226020830184614bb2565b60008060408385031215614c1357600080fd5b50508035926020909101359150565b600080600060608486031215614c3757600080fd5b505081359360208301359350604090920135919050565b600981106148d5576148d56148af565b600081518084526020808501945080840160005b83811015614be2578151805188528381015184890152604080820151614c9a828b0182614c4e565b5050606081810151805160ff9081168b84015260208201511660808b01525050608081015160a0898101919091520151151560c088015260e09096019590820190600101614c72565b60208152614cf660208201835115159052565b60006020830151614d0b604084018215159052565b506040830151610300806060850152614d28610320850183614bb2565b915060608501516080850152608085015160a085015260a085015160c085015260c0850151614d8760e086018260ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b5060e085015161016081818701526101008701519150610180828188015261012088015192506101a0838189015261014089015193506101c0614dcc818a01866148c5565b9289015193506101e092614df289850186805160ff908116835260209182015116910152565b828a01519450601f199250610220838a890301818b0152614e138887614bb2565b9750828b015195506102409250838a890301838b0152614e338887614bb2565b9750818b015195506102609150838a890301828b0152614e538887614bb2565b9750848b01519550838a8903016102808b0152614e708887614bb2565b6102008c01516102a08c0152908b01516102c08b0152918a01516102e08a01528901518882039092018589015294509150614ead90508382614c5e565b9695505050505050565b60008060008060a08587031215614ecd57600080fd5b84359350614ede8660208701614a83565b93969395505050506060820135916080013590565b60008060608385031215614f0657600080fd5b82359150614f178460208501614a83565b90509250929050565b604081016108408284805160ff908116835260209182015116910152565b6001600160a01b03811681146133df57600080fd5b60008060408385031215614f6657600080fd5b8235614f7181614f3e565b946020939093013593505050565b80151581146133df57600080fd5b600080600060608486031215614fa257600080fd5b83359250602084013591506040840135614fbb81614f7f565b809150509250925092565b600060208284031215614fd857600080fd5b813561152281614f3e565b60008060408385031215614ff657600080fd5b823561500181614a74565b9150602083013561501181614a74565b809150509250929050565b600080600080600080600060e0888a03121561503757600080fd5b873561504281614f3e565b9650602088013561505281614f3e565b9550604088013561506281614f3e565b9450606088013561507281614f3e565b9350608088013561508281614f3e565b925060a088013561509281614f3e565b915060c08801356150a281614f3e565b8091505092959891949750929550565b6020815260006115226020830184614c5e565b60006001600160401b038211156150de576150de61499f565b5060051b60200190565b6000806000606084860312156150fd57600080fd5b83356001600160401b0381111561511357600080fd5b8401601f8101861361512457600080fd5b80356020615139615134836150c5565b614a44565b82815260059290921b8301810191818101908984111561515857600080fd5b938201935b838510156151765784358252938201939082019061515d565b999188013598505060409096013595945050505050565b600080608083850312156151a057600080fd5b6151aa8484614a83565b9150614f178460408501614a83565b602080825260149082015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201615212576152126151e7565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600060018201615241576152416151e7565b5060010190565b81810381811115610840576108406151e7565b84815260c0810161527f6020830186805160ff908116835260209182015116910152565b835460ff808216606085015260089190911c1660808301525b82151560a083015295945050505050565b805161487681614f7f565b6000602082840312156152c657600080fd5b815161152281614f7f565b6000816152e0576152e06151e7565b506000190190565b8681526020810186905260c081016153036040830187614c4e565b8460608301528360808301528260a0830152979650505050505050565b8082028115828204841417610840576108406151e7565b634e487b7160e01b600052601260045260246000fd5b60008261535c5761535c615337565b500490565b80820180821115610840576108406151e7565b8181036000831280158383131683831282161715611247576112476151e7565b805161487681614f3e565b6000602082840312156153b157600080fd5b815161152281614f3e565b60ff8281168282160390811115610840576108406151e7565b60ff8181168382160190811115610840576108406151e7565b60005b838110156154095781810151838201526020016153f1565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b8152600082516154408160138501602087016153ee565b9190910160130192915050565b602081526000825180602084015261546c8160408501602087016153ee565b601f01601f19169190910160400192915050565b600181815b808511156154bb5781600019048211156154a1576154a16151e7565b808516156154ae57918102915b93841c9390800290615485565b509250929050565b6000826154d257506001610840565b816154df57506000610840565b81600181146154f557600281146154ff5761551b565b6001915050610840565b60ff841115615510576155106151e7565b50506001821b610840565b5060208310610133831016604e8410600b841016171561553e575081810a610840565b6155488383615480565b806000190482111561555c5761555c6151e7565b029392505050565b600061152283836154c3565b60006020828403121561558257600080fd5b5051919050565b60008261559857615598615337565b500690565b805161487681614a74565b600082601f8301126155b957600080fd5b604051608081018181106001600160401b03821117156155db576155db61499f565b6040528060808401858111156155f057600080fd5b845b8181101561560a5780518352602092830192016155f2565b509195945050505050565b6000602080838503121561562857600080fd5b82516001600160401b038082111561563f57600080fd5b818501915085601f83011261565357600080fd5b8151615661615134826150c5565b81815260059190911b8301840190848101908883111561568057600080fd5b8585015b8381101561579d5780518581111561569b57600080fd5b8601603f81018b136156ac57600080fd5b878101516156bc615134826150c5565b818152610140909102820160400190898101908d8311156156dc57600080fd5b6040840193505b8284101561578d57610140848f0312156156fc57600080fd5b6157046149dd565b845161570f81614a74565b8152848c015161571e81614a74565b818d015261572f8f604087016155a8565b604082015261574060c086016152a9565b606082015261575160e086016152a9565b608082015261576361010086016152a9565b60a082015261577561012086016152a9565b60c082015282526101409390930192908a01906156e3565b8652505050918601918601615684565b5098975050505050505050565b8051600081900b811461487657600080fd5b60006101008083850312156157d057600080fd5b604051908101906001600160401b03821181831017156157f2576157f261499f565b81604052809250615802846157aa565b8152615810602085016157aa565b6020820152615821604085016157aa565b6040820152615832606085016157aa565b6060820152615843608085016157aa565b608082015261585460a085016157aa565b60a082015261586560c085016157aa565b60c082015260e0840151915061587a82614f7f565b60e0015292915050565b60006040828403121561589657600080fd5b61589e6149b5565b905081516158ab81614a74565b81526020820151614aba81614a74565b600082601f8301126158cc57600080fd5b815160206158dc615134836150c5565b82815260059290921b840181019181810190868411156158fb57600080fd5b8286015b8481101561591f57805161591281614a74565b83529183019183016158ff565b509695505050505050565b60006020828403121561593c57600080fd5b81516001600160401b038082111561595357600080fd5b908301906102e0828603121561596857600080fd5b6159706149ff565b61597983615394565b8152602083015160208201526040830151604082015261599c86606085016157bc565b60608201526101606159b087828601615884565b60808301526101a06159c488828701615884565b60a08401526159d66101e086016157aa565b60c08401526159e8610200860161559d565b60e08401526159fa610220860161559d565b610100840152615a0d610240860161559d565b61012084015261026085015184811115615a2657600080fd5b615a32898288016158bb565b61014085015250615a46610280860161559d565b82840152615a576102a086016152a9565b6101808401526102c085015181840152505080935050505092915050565b958652935460ff80821660208089019190915260089290921c811660408801528451811660608801529301519092166080850152151560a0840152151560c083015260e08201526101000190565b600060408284031215615ad557600080fd5b6115228383615884565b60006020808385031215615af257600080fd5b82516001600160401b03811115615b0857600080fd5b8301601f81018513615b1957600080fd5b8051615b27615134826150c5565b81815260609182028301840191848201919088841115615b4657600080fd5b938501935b83851015615bb05780858a031215615b635760008081fd5b615b6b614a22565b8551615b7681614a74565b815285870151615b8581614a74565b8188015260408681015160058110615b9d5760008081fd5b9082015283529384019391850191615b4b565b50979650505050505050565b848152835460ff808216602084015260089190911c16604082015260c08101835160ff90811660608401526020850151166080830152615298565b604081526000615c0a6040830185614bb2565b90508260208301529392505050565b82815260406020820152600061422b6040830184614bb2565b600082810b9082900b03607f198112607f82131715610840576108406151e7565b60808101615c718286805160ff908116835260209182015116910152565b604082019390935260600152919050565b600060a08284031215615c9457600080fd5b60405160a081018181106001600160401b0382111715615cb657615cb661499f565b604052825160068110615cc857600080fd5b8152602083810151908201526040830151615ce281614a74565b60408201526060830151615cf581614a74565b60608201526080830151615d0881614f7f565b60808201529392505050565b600060ff821660ff8103615d2a57615d2a6151e7565b60010192915050565b600082601f830112615d4457600080fd5b81516020615d54615134836150c5565b82815260069290921b84018101918181019086841115615d7357600080fd5b8286015b8481101561591f5760408189031215615d905760008081fd5b615d986149b5565b815160178110615da85760008081fd5b81528185015185820152835291830191604001615d77565b600060208284031215615dd257600080fd5b81516001600160401b0380821115615de957600080fd5b9083019060e08286031215615dfd57600080fd5b615e056149dd565b82518152615e15602084016152a9565b6020820152615e266040840161559d565b6040820152615e376060840161559d565b6060820152608083015182811115615e4e57600080fd5b615e5a87828601615d33565b60808301525060a083015182811115615e7257600080fd5b615e7e87828601615d33565b60a08301525060c083015182811115615e9657600080fd5b615ea287828601615d33565b60c08301525095945050505050565b878152602081018790526040810186905260608101859052835460ff808216608084015260089190911c1660a082015261010081018360c0830152615ef960e08301846148c5565b98975050505050505050565b86815260c08101615f196020830188614c4e565b8560408301528460608301528360808301528260a0830152979650505050505050565b634e487b7160e01b600052603160045260246000fd5b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b81811015615f9857845483526001948501949284019201615f7c565b509097965050505050505056fea2646970667358221220b185f2361f37acd521ad97b34a2af15daffa906d6fc43f347b5d174f74e82afa64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061029f5760003560e01c80638214f22211610167578063ce28613f116100ce578063dce6c5da11610087578063dce6c5da1461068d578063ed9067fa146106ad578063f101de9a146106c0578063f10bff2b146106d3578063f2fde38b146106e6578063fa3993c2146106f957600080fd5b8063ce28613f146105e4578063d72be09d146105f7578063d78e7d861461060a578063d8a030821461062a578063dc0b35641461064a578063dc769ee81461065d57600080fd5b8063a99d2a8b11610120578063a99d2a8b14610558578063aa6e80301461056b578063afd62bb21461057e578063bb24866714610591578063c06fad06146105b1578063c6850f7c146105c457600080fd5b80638214f222146104db5780638bf52bc3146104ee5780638da5cb5b14610501578063951fc3fe1461051257806397f34c3f146105325780639fca1ee11461054557600080fd5b806340d4fd781161020b57806364db84bf116101c457806364db84bf1461046757806364f664671461047a5780636fe99c181461048d578063715018a6146104ad5780637b45c0d4146104b55780637ddae103146104c857600080fd5b806340d4fd78146103d157806343d7c3be146103f157806346f2434b14610404578063530116961461040c57806354731422146104315780635dc969671461044457600080fd5b80631e1de2051161025d5780631e1de2051461036a5780631f7b4f3014610372578063336d7d7b146103855780633aa07d64146103985780633deaec2b146103ab5780633f090e3d146103be57600080fd5b8062e3d898146102a457806310a2cd0d146102d7578063117a5b9014610302578063175142251461032f5780631b5ac4b5146103445780631cef40f614610357575b600080fd5b6102c46102b236600461487b565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b6002546102ea906001600160a01b031681565b6040516001600160a01b0390911681526020016102ce565b610315610310366004614896565b61070c565b6040516102ce9e9d9c9b9a999897969594939291906148d9565b61034261033d366004614ac5565b6107e1565b005b6102c4610352366004614896565b610826565b610342610365366004614afb565b610846565b6102c4610a2f565b6102c4610380366004614896565b610aa7565b6007546102ea906001600160a01b031681565b6103426103a6366004614b36565b610b03565b6003546102ea906001600160a01b031681565b6103426103cc366004614b80565b610f1d565b6103e46103df366004614896565b61115d565b6040516102ce9190614bed565b6103426103ff366004614c00565b61124e565b600b546102c4565b61041f61041a366004614b80565b6112d5565b60405160ff90911681526020016102ce565b61034261043f366004614896565b611312565b610457610452366004614c22565b61148c565b60405190151581526020016102ce565b6102c4610475366004614c00565b611529565b610342610488366004614c00565b611541565b6104a061049b366004614896565b611646565b6040516102ce9190614ce3565b610342611a47565b6009546102ea906001600160a01b031681565b6004546102ea906001600160a01b031681565b6102c46104e9366004614896565b611a5b565b6103426104fc366004614eb7565b611ad5565b6000546001600160a01b03166102ea565b610525610520366004614ef3565b611ae9565b6040516102ce9190614f20565b61041f610540366004614c22565b611c13565b6008546102ea906001600160a01b031681565b6102c4610566366004614f53565b611c3e565b610342610579366004614f8d565b611c6f565b6103e461058c366004614fc6565b611d7f565b6102c461059f36600461487b565b60116020526000908152604090205481565b6005546102ea906001600160a01b031681565b6102c46105d236600461487b565b60106020526000908152604090205481565b61041f6105f2366004614fe3565b611e4f565b61034261060536600461501c565b611eff565b6102c461061836600461487b565b600f6020526000908152604090205481565b61063d610638366004614896565b611f85565b6040516102ce91906150b2565b6006546102ea906001600160a01b031681565b600a546106739060ff8082169161010090041682565b6040805160ff9384168152929091166020830152016102ce565b6102c461069b36600461487b565b600e6020526000908152604090205481565b6103426106bb366004614896565b61209c565b6102c46106ce3660046150e8565b612e4e565b6102c46106e136600461518d565b61331c565b6103426106f4366004614fc6565b613369565b6102c461070736600461518d565b6133e2565b600b818154811061071c57600080fd5b6000918252602091829020601390910201805460028201546003830154600484015460408051608081018252600587015460ff81811683526101008083048216848c0152620100008304821684860152630100000090920481166060840152600689015460078a015460088b015460098c01548751808901909852600a8d0154808616895286900485169d88019d909d52600f8c015460108d01546011909d0154858d169f5095909b0484169c999b989a97999598929791969095909316939091908e565b6009546001600160a01b031633146108145760405162461bcd60e51b815260040161080b906151b9565b60405180910390fd5b61082183838360006134aa565b505050565b60008082121561083e57610839826151fd565b610840565b815b92915050565b600a5460ff16821480156108635750600a54610100900460ff1681145b610a29576006546001600160a01b031633146108b85760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b604482015260640161080b565b6000600b85815481106108cd576108cd615219565b90600052602060002090601302019050600081601201805490509050816012016040518060c00160405280838152602001888152602001876008811115610916576109166148af565b815260200160405180604001604052808860ff1681526020018760ff168152508152602001600d6000896008811115610951576109516148af565b6008811115610962576109626148af565b8152602080820192909252604090810160009081205484529282018390528454600181810187559584529282902084516006909402019283559083015182850155820151600282018054939492939192909160ff1916908360088111156109cb576109cb6148af565b02179055506060820151805160038301805460209093015160ff9081166101000261ffff199094169216919091179190911790556080820151600482015560a0909101516005909101805491151560ff199290921691909117905550505b50505050565b6001805460009182610a408361522f565b9190505550600154600143610a559190615248565b4033604051602001610a8c93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b600080610ab660016006611e4f565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c518382604051610af5929190918252602082015260400190565b60405180910390a192915050565b6009546001600160a01b03163314610b2d5760405162461bcd60e51b815260040161080b906151b9565b6000806000600b8881548110610b4557610b45615219565b90600052602060002090601302016012018781548110610b6757610b67615219565b906000526020600020906006020190506000816004015411610bcb5760405162461bcd60e51b815260206004820152601960248201527f43616e27742061747461636b20646561642064656e697a656e00000000000000604482015260640161080b565b6003810154845160ff9081169116148015610bf957506003810154602085015160ff90811661010090920416145b1580610ca55750600354600b80546001600160a01b0390921691632ec6572a91908b908110610c2a57610c2a615219565b906000526020600020906013020160060154868460030160006040518563ffffffff1660e01b8152600401610c62949392919061525b565b602060405180830381865afa158015610c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca391906152b4565b155b15610cfe5760405162461bcd60e51b815260206004820152602360248201527f4e6f7420696e20726f6f6d20616e642063616e27742073656520746f2061747460448201526261636b60e81b606482015260840161080b565b6002810154610d49908990600e9060009060ff166008811115610d2357610d236148af565b6008811115610d3457610d346148af565b8152602001908152602001600020548761148c565b15610d6a5760048101805460019450906000610d64836152d1565b91905055505b600481015415610ec8576003810154845160ff9081169116148015610da257506003810154602085015160ff90811661010090920416145b80610e0f57506001600282015460ff166008811115610dc357610dc36148af565b14158015610dea57506005600282015460ff166008811115610de757610de76148af565b14155b8015610e0f57506006600282015460ff166008811115610e0c57610e0c6148af565b14155b15610ec857600281015460109060009060ff166008811115610e3357610e336148af565b6008811115610e4457610e446148af565b81526020810191909152604090810160009081205460065492516301ba1eb160e31b8152600481018a905260248101879052604481019290925293506001600160a01b0390911690630dd0f58890606401600060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050505b60028101546040517f8e8341e4cf4165f5b8133f6805aa5cd98756c5203c1756d9eec0af9cef617d4391610f0b918b918a9160ff909116908c90899089906152e8565b60405180910390a15050505050505050565b6009546001600160a01b03163314610f475760405162461bcd60e51b815260040161080b906151b9565b6000600b8581548110610f5c57610f5c615219565b60009182526020909120600554604051635f87260160e01b81526004810188905260248101899052601390930290910192506001600160a01b031690635f87260190604401600060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b5050600254604051631ff77ac560e11b8152600481018790526001600160a01b039091169250633feef58a9150602401600060405180830381600087803b15801561101957600080fd5b505af115801561102d573d6000803e3d6000fd5b5050505060018181015460009161104391615248565b6001600160401b0381111561105a5761105a61499f565b604051908082528060200260200182016040528015611083578160200160208202803683370190505b5090506000805b60018401548110156110fa578085146110e8578360010181815481106110b2576110b2615219565b90600052602060002001548383815181106110cf576110cf615219565b6020908102919091010152816110e48161522f565b9250505b806110f28161522f565b91505061108a565b508151611110906001850190602085019061471f565b50600383018054906000611123836152d1565b9091555050600183015460028401540361113f57600060028401555b600183015460000361115457825460ff191683555b50505050505050565b60606000600b838154811061117457611174615219565b9060005260206000209060130201600101805490506001600160401b038111156111a0576111a061499f565b6040519080825280602002602001820160405280156111c9578160200160208202803683370190505b50905060005b815181101561124757600b84815481106111eb576111eb615219565b9060005260206000209060130201600101818154811061120d5761120d615219565b906000526020600020015482828151811061122a5761122a615219565b60209081029190910101528061123f8161522f565b9150506111cf565b5092915050565b6009546001600160a01b031633146112785760405162461bcd60e51b815260040161080b906151b9565b6001600b838154811061128d5761128d615219565b906000526020600020906013020160120182815481106112af576112af615219565b60009182526020909120600690910201600501805460ff19169115159190911790555050565b6000806112e28686615248565b90506000836112f18684615320565b6112fb919061534d565b90506113078782615361565b979650505050505050565b6000600b828154811061132757611327615219565b600091825260209091206013909102018054909150610100900460ff16156113915760405162461bcd60e51b815260206004820152601860248201527f43616e277420666f7263652064656e697a656e207475726e0000000000000000604482015260640161080b565b600181810154116113e45760405162461bcd60e51b815260206004820152601960248201527f43616e277420666f7263652073696e676c6520706c6179657200000000000000604482015260640161080b565b80600f015481601001546113f89190615361565b42116114465760405162461bcd60e51b815260206004820152601760248201527f5374696c6c2077697468696e2074696d65206c696d6974000000000000000000604482015260640161080b565b60088101541561145b5761145b826000613ed9565b611488828260010183600201548154811061147857611478615219565b9060005260206000200154613fa5565b5050565b60008061149885610aa7565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a1806001036114f5576000915050611522565b6003836115028684615361565b61150c9190615374565b131561151c576001915050611522565b60009150505b9392505050565b600081611537846004615320565b6115229190615361565b6000600b838154811061155657611556615219565b600091825260209091206006546013909202016007810154604051636621a42160e01b815260048101919091529092506001600160a01b0390911690636621a42190602401602060405180830381865afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc919061539f565b6001600160a01b0316336001600160a01b03161461163c5760405162461bcd60e51b815260206004820152601960248201527f4576656e74206e6f7420666f7220796f757220706c6179657200000000000000604482015260640161080b565b6108218383613ed9565b61164e61476a565b600b828154811061166157611661615219565b600091825260209182902060408051610280810182526013909302909101805460ff808216151585526101009091041615158385015260018101805483518187028101870185528181529495929493860193928301828280156116e357602002820191906000526020600020905b8154815260200190600101908083116116cf575b505050918352505060028201546020808301919091526003830154604080840191909152600484015460608085019190915281516080818101845260058088015460ff808216855261010080830482169886019890985262010000820481169685019690965263010000009004851693830193909352850152600685015460a0850152600785015460c0850152600885015460e085015260098501549290930192911690811115611796576117966148af565b60058111156117a7576117a76148af565b8152604080518082018252600a84015460ff80821683526101009091041660208281019190915280840191909152600b8401805483518184028101840185528181529390940193909183018282801561181f57602002820191906000526020600020905b81548152602001906001019080831161180b575b50505050508152602001600c820180548060200260200160405190810160405280929190818152602001828054801561187757602002820191906000526020600020905b815481526020019060010190808311611863575b50505050508152602001600d82018054806020026020016040519081016040528092919081815260200182805480156118cf57602002820191906000526020600020905b8154815260200190600101908083116118bb575b50505050508152602001600e820180548060200260200160405190810160405280929190818152602001828054801561192757602002820191906000526020600020905b815481526020019060010190808311611913575b50505050508152602001600f8201548152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b82821015611a3957838290600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660088111156119ce576119ce6148af565b60088111156119df576119df6148af565b8152604080518082018252600384015460ff80821683526101009091048116602083810191909152808501929092526004850154928401929092526005909301541615156060909101529082526001929092019101611973565b505050915250909392505050565b611a4f614081565b611a5960006140db565b565b600081600003611a6d57506001919050565b81600103611a7d57506000919050565b81600203611a8d57506003919050565b81600303611a9d57506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b604482015260640161080b565b611add614081565b610a29848484846134aa565b604080518082019091526000808252602082015282600003611b3b57604051806040016040528060018460000151611b2191906153bc565b60ff168152602001836020015160ff168152509050610840565b82600103611b5f57604051806040016040528083600001516001611b2191906153d5565b82600203611b9c576040518060400160405280836000015160ff16815260200183602001516001611b9091906153d5565b60ff1690529050610840565b82600303611bcd576040518060400160405280836000015160ff16815260200160018460200151611b9091906153bc565b6000611bd88461412b565b604051602001611be89190615412565b60405160208183030381529060405290508060405162461bcd60e51b815260040161080b919061544d565b600080826001611c24866002615564565b611c2e9190615248565b901b8516831c9150509392505050565b600c6020528160005260406000208181548110611c5a57600080fd5b90600052602060002001600091509150505481565b6009546001600160a01b03163314611c995760405162461bcd60e51b815260040161080b906151b9565b80611cfd5760065460405163ce93229760e01b8152600481018490526001600160a01b039091169063ce93229790602401600060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b505050505b6006546040516347d0e3c960e01b8152600481018490526000916001600160a01b0316906347d0e3c990602401602060405180830381865afa158015611d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6b9190615570565b905060038110610a2957610a298484613fa5565b6001600160a01b0381166000908152600c6020526040812054606091906001600160401b03811115611db357611db361499f565b604051908082528060200260200182016040528015611ddc578160200160208202803683370190505b50905060005b8151811015611247576001600160a01b0384166000908152600c60205260409020805482908110611e1557611e15615219565b9060005260206000200154828281518110611e3257611e32615219565b602090810291909101015280611e478161522f565b915050611de2565b6001805460009182611e608361522f565b9190505550600033600154600143611e789190615248565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000611ecc85856153bc565b611ed79060016153d5565b90508460ff168160ff1683611eec9190615589565b611ef69190615361565b95945050505050565b611f07614081565b600280546001600160a01b03199081166001600160a01b03998a1617909155600380548216978916979097179096556007805487169588169590951790945560098054861693871693909317909255600480548516918616919091179055600580548416918516919091179055600680549092169216919091179055565b6060600b8281548110611f9a57611f9a615219565b9060005260206000209060130201601201805480602002602001604051908101604052809291908181526020016000905b8282101561209157838290600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166008811115612026576120266148af565b6008811115612037576120376148af565b8152604080518082018252600384015460ff80821683526101009091048116602083810191909152808501929092526004850154928401929092526005909301541615156060909101529082526001929092019101611fcb565b505050509050919050565b6000600b82815481106120b1576120b1615219565b600091825260208220600354601392909202016006810154604051630f78220b60e11b815260048101919091529093506001600160a01b0390911690631ef0441690602401600060405180830381865afa158015612113573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261213b9190810190615615565b60018301549091506000906001600160401b0381111561215d5761215d61499f565b60405190808252806020026020018201604052801561226157816020015b61224e604080516101c081018252600080825260208083018290528284018290528351610100810185528281528082018390528085018390526060808201849052608080830185905260a080840186905260c0840186905260e0840186905291860192909252855180870187528481528084018590529185019190915284518086019095528285529084019190915290919082019081526000602082018190526040820181905260608083018290526080830182905260a083015260c0820181905260e082018190526101009091015290565b81526020019060019003908161217b5790505b50905060005b815181101561233a576006546001850180546001600160a01b03909216916310f67fb391908490811061229c5761229c615219565b90600052602060002001546040518263ffffffff1660e01b81526004016122c591815260200190565b600060405180830381865afa1580156122e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261230a919081019061592a565b82828151811061231c5761231c615219565b602002602001018190525080806123329061522f565b915050612267565b506000600b858154811061235057612350615219565b9060005260206000209060130201601201905060005b8154811015612e3d57600082828154811061238357612383615219565b9060005260206000209060060201905080600401546000036123a55750612e2b565b60038101548551869160ff169081106123c0576123c0615219565b60200260200101518160030160000160019054906101000a900460ff1660ff16815181106123f0576123f0615219565b602002602001015160c001511561241957600481018054906000612413836152d1565b91905055505b806004015460000361242b5750612e2b565b61270f60001960005b865181101561253457600a54875160ff9091169088908390811061245a5761245a615219565b6020026020010151608001516000015160ff161480156124ab5750600a54875161010090910460ff169088908390811061249657612496615219565b6020026020010151608001516020015160ff16145b6125225760408051808201909152600385015460ff808216835261010090910416602082015287516000916124fd918a90859081106124ec576124ec615219565b60200260200101516080015161331c565b90508060000361251257819350809250612520565b828111612520578193508092505b505b8061252c8161522f565b915050612434565b508161270f0361254657505050612e2b565b6001600284015460ff166008811115612561576125616148af565b0361275d578060000361259b57612593898488858151811061258557612585615219565b602002602001015184614233565b505050612e2b565b600160005260116020527f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b55254811161275d576003805460068a015488516001600160a01b03909216926345e1e03c92908701908a908790811061260057612600615219565b602002602001015160800151600060016011600060016008811115612627576126276148af565b6008811115612638576126386148af565b8152602001908152602001600020546040518763ffffffff1660e01b815260040161266896959493929190615a75565b6040805180830381865afa158015612684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a89190615ac3565b805160038501805460209093015160ff9081166101000261ffff1990941692169190911791909117905585518690839081106126e6576126e6615219565b60209081029190910101516080015151600384015460ff9081169116148015612741575085828151811061271c5761271c615219565b6020908102919091018101516080015101516003840154610100900460ff9081169116145b1561259357612593898488858151811061258557612585615219565b60028084015460ff166008811115612777576127776148af565b03612a045780600003612947576003546040516369568fd560e01b8152600481018b90526000916001600160a01b0316906369568fd590602401600060405180830381865afa1580156127ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127f69190810190615adf565b905060005b600481101561291757600282828151811061281857612818615219565b6020026020010151604001516004811115612835576128356148af565b148061286f5750600182828151811061285057612850615219565b602002602001015160400151600481111561286d5761286d6148af565b145b806128a85750600382828151811061288957612889615219565b60200260200101516040015160048111156128a6576128a66148af565b145b156129055760408051808201909152600386015460ff80821683526101009091041660208201526128da908290611ae9565b805160038701805460209093015160ff9081166101000261ffff199094169216919091179190911790555b8061290f8161522f565b9150506127fb565b5061293e8a8589868151811061292f5761292f615219565b60200260200101516001614233565b50505050612e2b565b6003805460068a015488516001600160a01b0390921692632ec6572a92908701908a908790811061297a5761297a615219565b60200260200101516080015160006040518563ffffffff1660e01b81526004016129a79493929190615bbc565b602060405180830381865afa1580156129c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e891906152b4565b15612a0457612593898488858151811061258557612585615219565b6003600284015460ff166008811115612a1f57612a1f6148af565b03612aed5761270f81108015612ad157506003805460068a015488516001600160a01b0390921692632ec6572a92908701908a9087908110612a6357612a63615219565b60200260200101516080015160016040518563ffffffff1660e01b8152600401612a909493929190615bbc565b602060405180830381865afa158015612aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad191906152b4565b15612aed57612593898488858151811061258557612585615219565b6004600284015460ff166008811115612b0857612b086148af565b03612e275780600003612b2c57612593898488858151811061258557612585615219565b600460005260116020527f251164fe1d8864fe5e86082eae9c288bc2b58695a4d28538dfe86e9e4f175585548111612c6a576003805460068a015488516001600160a01b03909216926345e1e03c92908701908a9087908110612b9157612b91615219565b602002602001015160800151600160006011600060046008811115612bb857612bb86148af565b6008811115612bc957612bc96148af565b8152602001908152602001600020546040518763ffffffff1660e01b8152600401612bf996959493929190615a75565b6040805180830381865afa158015612c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c399190615ac3565b80516003909401805460209092015160ff9081166101000261ffff199093169516949094171790925550612e2b9050565b61270f811015612e15576003805460068a015488516001600160a01b03909216926345e1e03c92908701908a9087908110612ca757612ca7615219565b602002602001015160800151600160006011600060046008811115612cce57612cce6148af565b6008811115612cdf57612cdf6148af565b8152602001908152602001600020546040518763ffffffff1660e01b8152600401612d0f96959493929190615a75565b6040805180830381865afa158015612d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4f9190615ac3565b80516003808601805460209094015160ff9081166101000261ffff19909516931692909217929092178155905460068a015488516001600160a01b0390921692632ec6572a928a9087908110612da757612da7615219565b60200260200101516080015160016040518563ffffffff1660e01b8152600401612dd49493929190615bbc565b602060405180830381865afa158015612df1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274191906152b4565b61270f811015612e2757505050612e2b565b5050505b80612e358161522f565b915050612366565b5050825461ff001916909255505050565b6007546000906001600160a01b03163314612ea05760405162461bcd60e51b8152602060048201526012602482015271139bdd081b1bd8989e4818dbdb9d1c9858dd60721b604482015260640161080b565b600b80546001818101808455600093845260139092027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9019291612ee49190615248565b825460ff191660019081178455600060048501558751919250612f0f9190840190602089019061471f565b50600382018590556040805160808101825260008082526020820181905291810182905260600181905260058301805463ffffffff19169055849003612fd257600360009054906101000a90046001600160a01b03166001600160a01b031663f01fc35a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc89190615570565b6006830155613047565b60035460405163148e052f60e21b8152600481018690526001600160a01b039091169063523814bc906024016020604051808303816000875af115801561301d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130419190615570565b60068301555b60005b613055600187615248565b811161317d57600683015460408051808201909152600a5460ff80821683526101009091041660208201526001850180546130af939291908590811061309d5761309d615219565b906000526020600020015460006134aa565b60065487516000916001600160a01b031690636621a421908a90859081106130d9576130d9615219565b60200260200101516040518263ffffffff1660e01b81526004016130ff91815260200190565b602060405180830381865afa15801561311c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613140919061539f565b6001600160a01b03166000908152600c602090815260408220805460018101825590835291200183905550806131758161522f565b91505061304a565b5060065460405163e7169ec560e01b81526001600160a01b039091169063e7169ec5906131b09089908590600401615bf7565b600060405180830381600087803b1580156131ca57600080fd5b505af11580156131de573d6000803e3d6000fd5b5050600554604051633b09709560e21b81526001600160a01b03909116925063ec25c25491506132149084908a90600401615c19565b600060405180830381600087803b15801561322e57600080fd5b505af1158015613242573d6000803e3d6000fd5b505050506000604051806101e00160405280600181526020016002815260200160038152602001600481526020016005815260200160068152602001600781526020016008815260200160098152602001600a8152602001600b8152602001600c8152602001600d8152602001600e8152602001600f81525090508083600b0190600f6132d092919061471f565b506132e0600c840182600f61471f565b506132f0600d840182600f61471f565b50613300600e840182600f61471f565b505061012c600f83015542601090920191909155949350505050565b60008061333c836000015160000b856000015160000b6103529190615374565b9050600061335d846020015160000b866020015160000b6103529190615374565b9050611ef68183615361565b613371614081565b6001600160a01b0381166133d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161080b565b6133df816140db565b50565b805182516000916133f291615c32565b60000b60010361340457506000610840565b815183516134129190615c32565b60000b1961342257506001610840565b816020015183602001516134369190615c32565b60000b1961344657506002610840565b8160200151836020015161345a9190615c32565b60000b60010361346c57506003610840565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b604482015260640161080b565b6000600b85815481106134bf576134bf615219565b90600052602060002090601302019050806001016000815481106134e5576134e5615219565b906000526020600020015483148061351c57508060010160018154811061350e5761350e615219565b906000526020600020015483145b8061354657508060010160028154811061353857613538615219565b906000526020600020015483145b8061357057508060010160038154811061356257613562615219565b906000526020600020015483145b6135bc5760405162461bcd60e51b815260206004820152601760248201527f506c61796572206e6f7420696e20746869732067616d65000000000000000000604482015260640161080b565b600654600b80546001600160a01b0390921691638d491b3e9187918791908a9081106135ea576135ea615219565b9060005260206000209060130201600601546040518463ffffffff1660e01b815260040161361a93929190615c53565b6020604051808303816000875af1158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d91906152b4565b613e9f57600354600b80546000926001600160a01b0316916381bad36d918990811061368b5761368b615219565b90600052602060002090601302016006015487600001518860200151876040518563ffffffff1660e01b81526004016136e1949392919093845260ff928316602085015291166040830152606082015260800190565b6020604051808303816000875af1158015613700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137249190615570565b600354600b80549293506000926001600160a01b0390921691635805828391908a90811061375457613754615219565b906000526020600020906013020160060154846040518363ffffffff1660e01b815260040161378d929190918252602082015260400190565b60a060405180830381865afa1580156137aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ce9190615c82565b90506002821180156137f357506000815160058111156137f0576137f06148af565b14155b15613e9c5760018151600581111561380d5761380d6148af565b0361386057600b878154811061382557613825615219565b600091825260208220600560139092020101805460ff169161384683615d14565b91906101000a81548160ff021916908360ff160217905550505b600281516005811115613875576138756148af565b036138d057600b878154811061388d5761388d615219565b600091825260209091206013909102016005018054610100900460ff169060016138b683615d14565b91906101000a81548160ff021916908360ff160217905550505b6003815160058111156138e5576138e56148af565b0361394157600b87815481106138fd576138fd615219565b60009182526020909120601390910201600501805462010000900460ff1690600261392783615d14565b91906101000a81548160ff021916908360ff160217905550505b600481516005811115613956576139566148af565b036139b357600b878154811061396e5761396e615219565b6000918252602090912060139091020160050180546301000000900460ff1690600361399983615d14565b91906101000a81548160ff021916908360ff160217905550505b602081015115613b325760048054602083015160405163c82c37b960e01b8152928301526000916001600160a01b039091169063c82c37b990602401600060405180830381865afa158015613a0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a349190810190615dc0565b90508060200151613b2c5785600b8981548110613a5357613a53615219565b9060005260206000209060130201600701819055508160200151600b8981548110613a8057613a80615219565b9060005260206000209060130201600801819055506005600b8981548110613aaa57613aaa615219565b60009182526020909120600960139092020101805460ff19166001836005811115613ad757613ad76148af565b021790555086600b8981548110613af057613af0615219565b60009182526020918290208351600a6013909302909101919091018054939092015160ff9081166101000261ffff199094169116179190911790555b50613e9c565b600081516005811115613b4757613b476148af565b14613e9c5784600b8881548110613b6057613b60615219565b90600052602060002090601302016007018190555085600b8881548110613b8957613b89615219565b60009182526020918290208351600a6013909302909101919091018054939092015160ff9081166101000261ffff19909416911617919091179055600181516005811115613bd957613bd96148af565b03613c7a57613c0a600b8881548110613bf457613bf4615219565b9060005260206000209060130201600b0161447b565b600b8881548110613c1d57613c1d615219565b9060005260206000209060130201600801819055506001600b8881548110613c4757613c47615219565b60009182526020909120600960139092020101805460ff19166001836005811115613c7457613c746148af565b02179055505b600281516005811115613c8f57613c8f6148af565b03613d3057613cc0600b8881548110613caa57613caa615219565b9060005260206000209060130201600c0161447b565b600b8881548110613cd357613cd3615219565b9060005260206000209060130201600801819055506002600b8881548110613cfd57613cfd615219565b60009182526020909120600960139092020101805460ff19166001836005811115613d2a57613d2a6148af565b02179055505b600381516005811115613d4557613d456148af565b03613de657613d76600b8881548110613d6057613d60615219565b9060005260206000209060130201600d0161447b565b600b8881548110613d8957613d89615219565b9060005260206000209060130201600801819055506003600b8881548110613db357613db3615219565b60009182526020909120600960139092020101805460ff19166001836005811115613de057613de06148af565b02179055505b600481516005811115613dfb57613dfb6148af565b03613e9c57613e2c600b8881548110613e1657613e16615219565b9060005260206000209060130201600e0161447b565b600b8881548110613e3f57613e3f615219565b9060005260206000209060130201600801819055506004600b8881548110613e6957613e69615219565b60009182526020909120600960139092020101805460ff19166001836005811115613e9657613e966148af565b02179055505b50505b6040518581527f0b902bf94ea0561a1c7b03fed6f663a1ae180c3c6d92b1b529718058696a4c389060200160405180910390a15050505050565b6000600b8381548110613eee57613eee615219565b6000918252602090912060068054601390930290910160078101549181015460088201546009830154604051636d291bbb60e01b81529396506001600160a01b0390951694636d291bbb94613f5694899491938b93600a8b019260ff90911690600401615eb1565b600060405180830381600087803b158015613f7057600080fd5b505af1158015613f84573d6000803e3d6000fd5b505060006007840181905560088401555050600901805460ff191690555050565b6000600b8381548110613fba57613fba615219565b6000918252602090912060065460405163065c363f60e41b815260048101869052601390930290910192506001600160a01b0316906365c363f090602401600060405180830381600087803b15801561401257600080fd5b505af1158015614026573d6000803e3d6000fd5b505042601084015550506001808201546140409190615248565b816002015410156140675760028101805490600061405d8361522f565b9190505550505050565b6140758382600601546145a1565b60006002820155505050565b6000546001600160a01b03163314611a595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161080b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816000036141525750506040805180820190915260018152600360fc1b602082015290565b8160005b811561417c57806141668161522f565b91506141759050600a8361534d565b9150614156565b6000816001600160401b038111156141965761419661499f565b6040519080825280601f01601f1916602001820160405280156141c0576020820181803683370190505b5090505b841561422b576141d5600183615248565b91506141e2600a86615589565b6141ed906030615361565b60f81b81838151811061420257614202615219565b60200101906001600160f81b031916908160001a905350614224600a8661534d565b94506141c4565b949350505050565b6002830154600090819061428d908790600f90849060ff16600881111561425c5761425c6148af565b600881111561426d5761426d6148af565b81526020019081526020016000205486606001516040015160ff1661148c565b1561434957600285015460109060009060ff1660088111156142b1576142b16148af565b60088111156142c2576142c26148af565b8152602081019190915260409081016000908120546006548784015193516301ba1eb160e31b8152600481019490945260248401829052604484019290925293506001600160a01b031690630dd0f58890606401600060405180830381600087803b15801561433057600080fd5b505af1158015614344573d6000803e3d6000fd5b505050505b82158061435b5750836060015160e001515b15614422576000836000036143a657846060015160a0015160000b856060015160c0015160000b1361439557846060015160a0015161439f565b846060015160c001515b90506143b1565b50606084015160a001515b60028601546143ff90889060ff80851691600e916000911660088111156143da576143da6148af565b60088111156143eb576143eb6148af565b81526020019081526020016000205461148c565b15614420576004860180546001935090600061441a836152d1565b91905055505b505b6002850154855460408087015190517fbec470141b1ce95021ad88998cf463bb41483dbb4fa04b0f5f9e34541c7336a49361446b938b9360ff9092169290919088908890615f05565b60405180910390a1505050505050565b8054600090819061448e90600190615248565b90505b801561453e5760006144a4600083611e4f565b9050838160ff16815481106144bb576144bb615219565b90600052602060002001548483815481106144d8576144d8615219565b90600052602060002001548584815481106144f5576144f5615219565b906000526020600020016000878560ff168154811061451657614516615219565b6000918252602090912001929092559190915550819050614536816152d1565b915050614491565b508154600090839061455290600190615248565b8154811061456257614562615219565b906000526020600020015490508280548061457f5761457f615f3c565b600190038181906000526020600020016000905590558060ff16915050919050565b6000600b83815481106145b6576145b6615219565b906000526020600020906013020190508060040160008154809291906145db9061522f565b9091555050600354604051630b06115560e31b8152600481018490526001600160a01b03909116906358308aa890602401600060405180830381600087803b15801561462657600080fd5b505af115801561463a573d6000803e3d6000fd5b505060035460405163c6b41b4560e01b815260048101869052600160248201526001600160a01b03909116925063c6b41b459150604401600060405180830381600087803b15801561468b57600080fd5b505af115801561469f573d6000803e3d6000fd5b5050600680549084015460405163668a7f3b60e01b81526001600160a01b03909216935063668a7f3b92506146db916001860190600401615f52565b600060405180830381600087803b1580156146f557600080fd5b505af1158015614709573d6000803e3d6000fd5b5050825461ff0019166101001790925550505050565b82805482825590600052602060002090810192821561475a579160200282015b8281111561475a57825182559160200191906001019061473f565b50614766929150614852565b5090565b6040805161028081018252600080825260208083018290526060838501819052808401839052608080850184905260a0850184905285519081018652838152918201839052938101829052928301529060c08201908152602001600081526020016000815260200160008152602001600060058111156147ec576147ec6148af565b81526020016148146040518060400160405280600060ff168152602001600060ff1681525090565b815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001606081525090565b5b808211156147665760008155600101614853565b80356009811061487657600080fd5b919050565b60006020828403121561488d57600080fd5b61152282614867565b6000602082840312156148a857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600681106148d5576148d56148af565b9052565b6000610240820190508f151582528e151560208301528d60408301528c60608301528b608083015261493b60a083018c60ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b89610120830152886101408301528761016083015261495e6101808301886148c5565b855160ff9081166101a08401526020870151166101c0830152846101e083015283610200830152826102208301529f9e505050505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156149d7576149d761499f565b60405290565b60405160e081016001600160401b03811182821017156149d7576149d761499f565b6040516101c081016001600160401b03811182821017156149d7576149d761499f565b604051606081016001600160401b03811182821017156149d7576149d761499f565b604051601f8201601f191681016001600160401b0381118282101715614a6c57614a6c61499f565b604052919050565b60ff811681146133df57600080fd5b600060408284031215614a9557600080fd5b614a9d6149b5565b90508135614aaa81614a74565b81526020820135614aba81614a74565b602082015292915050565b600080600060808486031215614ada57600080fd5b83359250614aeb8560208601614a83565b9150606084013590509250925092565b60008060008060808587031215614b1157600080fd5b84359350614b2160208601614867565b93969395505050506040820135916060013590565b600080600080600060c08688031215614b4e57600080fd5b85359450602086013593506040860135925060608601359150614b748760808801614a83565b90509295509295909350565b60008060008060808587031215614b9657600080fd5b5050823594602084013594506040840135936060013592509050565b600081518084526020808501945080840160005b83811015614be257815187529582019590820190600101614bc6565b509495945050505050565b6020815260006115226020830184614bb2565b60008060408385031215614c1357600080fd5b50508035926020909101359150565b600080600060608486031215614c3757600080fd5b505081359360208301359350604090920135919050565b600981106148d5576148d56148af565b600081518084526020808501945080840160005b83811015614be2578151805188528381015184890152604080820151614c9a828b0182614c4e565b5050606081810151805160ff9081168b84015260208201511660808b01525050608081015160a0898101919091520151151560c088015260e09096019590820190600101614c72565b60208152614cf660208201835115159052565b60006020830151614d0b604084018215159052565b506040830151610300806060850152614d28610320850183614bb2565b915060608501516080850152608085015160a085015260a085015160c085015260c0850151614d8760e086018260ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b5060e085015161016081818701526101008701519150610180828188015261012088015192506101a0838189015261014089015193506101c0614dcc818a01866148c5565b9289015193506101e092614df289850186805160ff908116835260209182015116910152565b828a01519450601f199250610220838a890301818b0152614e138887614bb2565b9750828b015195506102409250838a890301838b0152614e338887614bb2565b9750818b015195506102609150838a890301828b0152614e538887614bb2565b9750848b01519550838a8903016102808b0152614e708887614bb2565b6102008c01516102a08c0152908b01516102c08b0152918a01516102e08a01528901518882039092018589015294509150614ead90508382614c5e565b9695505050505050565b60008060008060a08587031215614ecd57600080fd5b84359350614ede8660208701614a83565b93969395505050506060820135916080013590565b60008060608385031215614f0657600080fd5b82359150614f178460208501614a83565b90509250929050565b604081016108408284805160ff908116835260209182015116910152565b6001600160a01b03811681146133df57600080fd5b60008060408385031215614f6657600080fd5b8235614f7181614f3e565b946020939093013593505050565b80151581146133df57600080fd5b600080600060608486031215614fa257600080fd5b83359250602084013591506040840135614fbb81614f7f565b809150509250925092565b600060208284031215614fd857600080fd5b813561152281614f3e565b60008060408385031215614ff657600080fd5b823561500181614a74565b9150602083013561501181614a74565b809150509250929050565b600080600080600080600060e0888a03121561503757600080fd5b873561504281614f3e565b9650602088013561505281614f3e565b9550604088013561506281614f3e565b9450606088013561507281614f3e565b9350608088013561508281614f3e565b925060a088013561509281614f3e565b915060c08801356150a281614f3e565b8091505092959891949750929550565b6020815260006115226020830184614c5e565b60006001600160401b038211156150de576150de61499f565b5060051b60200190565b6000806000606084860312156150fd57600080fd5b83356001600160401b0381111561511357600080fd5b8401601f8101861361512457600080fd5b80356020615139615134836150c5565b614a44565b82815260059290921b8301810191818101908984111561515857600080fd5b938201935b838510156151765784358252938201939082019061515d565b999188013598505060409096013595945050505050565b600080608083850312156151a057600080fd5b6151aa8484614a83565b9150614f178460408501614a83565b602080825260149082015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201615212576152126151e7565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600060018201615241576152416151e7565b5060010190565b81810381811115610840576108406151e7565b84815260c0810161527f6020830186805160ff908116835260209182015116910152565b835460ff808216606085015260089190911c1660808301525b82151560a083015295945050505050565b805161487681614f7f565b6000602082840312156152c657600080fd5b815161152281614f7f565b6000816152e0576152e06151e7565b506000190190565b8681526020810186905260c081016153036040830187614c4e565b8460608301528360808301528260a0830152979650505050505050565b8082028115828204841417610840576108406151e7565b634e487b7160e01b600052601260045260246000fd5b60008261535c5761535c615337565b500490565b80820180821115610840576108406151e7565b8181036000831280158383131683831282161715611247576112476151e7565b805161487681614f3e565b6000602082840312156153b157600080fd5b815161152281614f3e565b60ff8281168282160390811115610840576108406151e7565b60ff8181168382160190811115610840576108406151e7565b60005b838110156154095781810151838201526020016153f1565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b8152600082516154408160138501602087016153ee565b9190910160130192915050565b602081526000825180602084015261546c8160408501602087016153ee565b601f01601f19169190910160400192915050565b600181815b808511156154bb5781600019048211156154a1576154a16151e7565b808516156154ae57918102915b93841c9390800290615485565b509250929050565b6000826154d257506001610840565b816154df57506000610840565b81600181146154f557600281146154ff5761551b565b6001915050610840565b60ff841115615510576155106151e7565b50506001821b610840565b5060208310610133831016604e8410600b841016171561553e575081810a610840565b6155488383615480565b806000190482111561555c5761555c6151e7565b029392505050565b600061152283836154c3565b60006020828403121561558257600080fd5b5051919050565b60008261559857615598615337565b500690565b805161487681614a74565b600082601f8301126155b957600080fd5b604051608081018181106001600160401b03821117156155db576155db61499f565b6040528060808401858111156155f057600080fd5b845b8181101561560a5780518352602092830192016155f2565b509195945050505050565b6000602080838503121561562857600080fd5b82516001600160401b038082111561563f57600080fd5b818501915085601f83011261565357600080fd5b8151615661615134826150c5565b81815260059190911b8301840190848101908883111561568057600080fd5b8585015b8381101561579d5780518581111561569b57600080fd5b8601603f81018b136156ac57600080fd5b878101516156bc615134826150c5565b818152610140909102820160400190898101908d8311156156dc57600080fd5b6040840193505b8284101561578d57610140848f0312156156fc57600080fd5b6157046149dd565b845161570f81614a74565b8152848c015161571e81614a74565b818d015261572f8f604087016155a8565b604082015261574060c086016152a9565b606082015261575160e086016152a9565b608082015261576361010086016152a9565b60a082015261577561012086016152a9565b60c082015282526101409390930192908a01906156e3565b8652505050918601918601615684565b5098975050505050505050565b8051600081900b811461487657600080fd5b60006101008083850312156157d057600080fd5b604051908101906001600160401b03821181831017156157f2576157f261499f565b81604052809250615802846157aa565b8152615810602085016157aa565b6020820152615821604085016157aa565b6040820152615832606085016157aa565b6060820152615843608085016157aa565b608082015261585460a085016157aa565b60a082015261586560c085016157aa565b60c082015260e0840151915061587a82614f7f565b60e0015292915050565b60006040828403121561589657600080fd5b61589e6149b5565b905081516158ab81614a74565b81526020820151614aba81614a74565b600082601f8301126158cc57600080fd5b815160206158dc615134836150c5565b82815260059290921b840181019181810190868411156158fb57600080fd5b8286015b8481101561591f57805161591281614a74565b83529183019183016158ff565b509695505050505050565b60006020828403121561593c57600080fd5b81516001600160401b038082111561595357600080fd5b908301906102e0828603121561596857600080fd5b6159706149ff565b61597983615394565b8152602083015160208201526040830151604082015261599c86606085016157bc565b60608201526101606159b087828601615884565b60808301526101a06159c488828701615884565b60a08401526159d66101e086016157aa565b60c08401526159e8610200860161559d565b60e08401526159fa610220860161559d565b610100840152615a0d610240860161559d565b61012084015261026085015184811115615a2657600080fd5b615a32898288016158bb565b61014085015250615a46610280860161559d565b82840152615a576102a086016152a9565b6101808401526102c085015181840152505080935050505092915050565b958652935460ff80821660208089019190915260089290921c811660408801528451811660608801529301519092166080850152151560a0840152151560c083015260e08201526101000190565b600060408284031215615ad557600080fd5b6115228383615884565b60006020808385031215615af257600080fd5b82516001600160401b03811115615b0857600080fd5b8301601f81018513615b1957600080fd5b8051615b27615134826150c5565b81815260609182028301840191848201919088841115615b4657600080fd5b938501935b83851015615bb05780858a031215615b635760008081fd5b615b6b614a22565b8551615b7681614a74565b815285870151615b8581614a74565b8188015260408681015160058110615b9d5760008081fd5b9082015283529384019391850191615b4b565b50979650505050505050565b848152835460ff808216602084015260089190911c16604082015260c08101835160ff90811660608401526020850151166080830152615298565b604081526000615c0a6040830185614bb2565b90508260208301529392505050565b82815260406020820152600061422b6040830184614bb2565b600082810b9082900b03607f198112607f82131715610840576108406151e7565b60808101615c718286805160ff908116835260209182015116910152565b604082019390935260600152919050565b600060a08284031215615c9457600080fd5b60405160a081018181106001600160401b0382111715615cb657615cb661499f565b604052825160068110615cc857600080fd5b8152602083810151908201526040830151615ce281614a74565b60408201526060830151615cf581614a74565b60608201526080830151615d0881614f7f565b60808201529392505050565b600060ff821660ff8103615d2a57615d2a6151e7565b60010192915050565b600082601f830112615d4457600080fd5b81516020615d54615134836150c5565b82815260069290921b84018101918181019086841115615d7357600080fd5b8286015b8481101561591f5760408189031215615d905760008081fd5b615d986149b5565b815160178110615da85760008081fd5b81528185015185820152835291830191604001615d77565b600060208284031215615dd257600080fd5b81516001600160401b0380821115615de957600080fd5b9083019060e08286031215615dfd57600080fd5b615e056149dd565b82518152615e15602084016152a9565b6020820152615e266040840161559d565b6040820152615e376060840161559d565b6060820152608083015182811115615e4e57600080fd5b615e5a87828601615d33565b60808301525060a083015182811115615e7257600080fd5b615e7e87828601615d33565b60a08301525060c083015182811115615e9657600080fd5b615ea287828601615d33565b60c08301525095945050505050565b878152602081018790526040810186905260608101859052835460ff808216608084015260089190911c1660a082015261010081018360c0830152615ef960e08301846148c5565b98975050505050505050565b86815260c08101615f196020830188614c4e565b8560408301528460608301528360808301528260a0830152979650505050505050565b634e487b7160e01b600052603160045260246000fd5b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b81811015615f9857845483526001948501949284019201615f7c565b509097965050505050505056fea2646970667358221220b185f2361f37acd521ad97b34a2af15daffa906d6fc43f347b5d174f74e82afa64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19653,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9483,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "chars",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(CharInterface)9191"
      },
      {
        "astId": 9486,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "maps",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MapInterface)9358"
      },
      {
        "astId": 9489,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "bcEvents",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(EventsInterface)9172"
      },
      {
        "astId": 9492,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "items",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ItemsInterface)9387"
      },
      {
        "astId": 9495,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "players",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(PlayersInterface)9476"
      },
      {
        "astId": 9497,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "lobbiesAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9499,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "charsAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9501,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9573,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "StartLocation",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Position)19434_storage"
      },
      {
        "astId": 9577,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "games",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Game)19535_storage)dyn_storage"
      },
      {
        "astId": 9582,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "addressToGame",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9587,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "denizenHealth",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_enum(DenizenType)19372,t_uint256)"
      },
      {
        "astId": 9592,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "denizenDef",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_enum(DenizenType)19372,t_uint256)"
      },
      {
        "astId": 9597,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "denizenOff",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(DenizenType)19372,t_uint256)"
      },
      {
        "astId": 9602,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "denizenDmg",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_enum(DenizenType)19372,t_uint256)"
      },
      {
        "astId": 9607,
        "contract": "contracts/BCGames.sol:BCGames",
        "label": "denizenMovement",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_enum(DenizenType)19372,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Denizen)19420_storage)dyn_storage": {
        "base": "t_struct(Denizen)19420_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Denizen[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Game)19535_storage)dyn_storage": {
        "base": "t_struct(Game)19535_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CharInterface)9191": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(EventsInterface)9172": {
        "encoding": "inplace",
        "label": "contract EventsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)9387": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)9358": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PlayersInterface)9476": {
        "encoding": "inplace",
        "label": "contract PlayersInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)19340": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DenizenType)19372": {
        "encoding": "inplace",
        "label": "enum BCTypes.DenizenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_enum(DenizenType)19372,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(DenizenType)19372",
        "label": "mapping(enum BCTypes.DenizenType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Denizen)19420_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Denizen",
        "members": [
          {
            "astId": 19407,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19409,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "gameId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19412,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "denizenType",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(DenizenType)19372"
          },
          {
            "astId": 19415,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "position",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Position)19434_storage"
          },
          {
            "astId": 19417,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "healthRemaining",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19419,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "looted",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(EventTracker)19429_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.EventTracker",
        "members": [
          {
            "astId": 19422,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "bugEvents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 19424,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mysteryEvents",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 19426,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "scavEvents",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 19428,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "shipEvents",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)19535_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Game",
        "members": [
          {
            "astId": 19486,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19488,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "denizenTurn",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19491,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "playerIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 19493,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "currentPlayerTurnIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19495,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "numPlayers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19497,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "turnsTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19500,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventTracker",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(EventTracker)19429_storage"
          },
          {
            "astId": 19502,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "mapId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 19504,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventPlayerId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 19506,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventNumber",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 19509,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventType",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(BCEventType)19340"
          },
          {
            "astId": 19512,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "eventPosition",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Position)19434_storage"
          },
          {
            "astId": 19515,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedBugEvents",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 19518,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedMysteryEvents",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 19521,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedScavEvents",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 19524,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "unusedShipEvents",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 19526,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "turnTimeLimit",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 19528,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "lastTurnTimestamp",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 19530,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "DEBUG_returnAmount",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 19534,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "denizens",
            "offset": 0,
            "slot": "18",
            "type": "t_array(t_struct(Denizen)19420_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_struct(Position)19434_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 19431,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 19433,
            "contract": "contracts/BCGames.sol:BCGames",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}