{
  "address": "0xd602382D8Bbf86664b8f6b9b7429EBBAeA7B84C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "rollForLow",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "rollForHigh",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "enum BCEvents.EffectTypes",
                  "name": "effect",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BCEvents.Effect[]",
              "name": "defaultEffect",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum BCEvents.EffectTypes",
                  "name": "effect",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BCEvents.Effect[]",
              "name": "lowEffect",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum BCEvents.EffectTypes",
                  "name": "effect",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BCEvents.Effect[]",
              "name": "highEffect",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct BCEvents.BCEvent",
          "name": "bcEvent",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum BCEvents.EffectTypes",
              "name": "effect",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct BCEvents.Effect[]",
          "name": "appliedBCEffects",
          "type": "tuple[]"
        }
      ],
      "name": "EventResolvedEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "StartLocation",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "row",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "col",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_charId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        }
      ],
      "name": "addPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_players",
          "type": "uint256[]"
        }
      ],
      "name": "applyHazardDamage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bcEvents",
      "outputs": [
        {
          "internalType": "contract EventsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "decrementNumItemsHeld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_effectNum",
          "type": "uint256"
        }
      ],
      "name": "extApplyEffect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_eventPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_eventNumber",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "_eventType",
          "type": "uint8"
        }
      ],
      "name": "extChooseEffect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetActionsTaken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int8",
                  "name": "health",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "carry",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "defense",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "hack",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "breach",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "shoot",
                  "type": "int8"
                },
                {
                  "internalType": "int8",
                  "name": "melee",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "hasGun",
                  "type": "bool"
                }
              ],
              "internalType": "struct BCTypes.Traits",
              "name": "currentTraits",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "lastPos",
              "type": "tuple"
            },
            {
              "internalType": "int8",
              "name": "healthDmgTaken",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8",
              "name": "numItemsHeld",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "internalType": "struct BCTypes.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetPlayerOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hazard",
          "type": "bool"
        }
      ],
      "name": "extHurtPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extMovePlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "games",
      "outputs": [
        {
          "internalType": "contract GamesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getEventBlocks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_amount",
          "type": "uint8"
        }
      ],
      "name": "grantDataToPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "incrementNumItemsHeld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "incrementPlayerActions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos2",
          "type": "tuple"
        }
      ],
      "name": "manhattanDistance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "health",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "carry",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "defense",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "hack",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "breach",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "shoot",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "melee",
              "type": "int8"
            },
            {
              "internalType": "bool",
              "name": "hasGun",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Traits",
          "name": "currentTraits",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "position",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "lastPos",
          "type": "tuple"
        },
        {
          "internalType": "int8",
          "name": "healthDmgTaken",
          "type": "int8"
        },
        {
          "internalType": "uint8",
          "name": "armorDmgTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "actionsTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "dataTokens",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numItemsHeld",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "dead",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "resetPlayerActions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lobbiesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eventsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gamesAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "setPlayersGameId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_charId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "updatePlayerTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e9b147441f9b1da11866ec4ec46c43ba5579b4dfe965bbe092f513eb76f5b8e",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xd602382D8Bbf86664b8f6b9b7429EBBAeA7B84C9",
    "transactionIndex": 7,
    "gasUsed": "4201728",
    "logsBloom": "0x
    "blockHash": "0x226218523f8e0e269ab8fe1f677cb0a922cbf3ac3bb4962bd9c8d6b961491315",
    "transactionHash": "0x6e9b147441f9b1da11866ec4ec46c43ba5579b4dfe965bbe092f513eb76f5b8e",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 38207506,
        "transactionHash": "0x6e9b147441f9b1da11866ec4ec46c43ba5579b4dfe965bbe092f513eb76f5b8e",
        "address": "0xd602382D8Bbf86664b8f6b9b7429EBBAeA7B84C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x226218523f8e0e269ab8fe1f677cb0a922cbf3ac3bb4962bd9c8d6b961491315"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 38207506,
        "transactionHash": "0x6e9b147441f9b1da11866ec4ec46c43ba5579b4dfe965bbe092f513eb76f5b8e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000265d1ff18ab00000000000000000000000000000000000000000000000000002c842b1825da70f000000000000000000000000000000000000000000003343af0c5a05a189a65200000000000000000000000000000000000000000000000002a1e59190d2f70f000000000000000000000000000000000000000000003343af32b72593145652",
        "logIndex": 35,
        "blockHash": "0x226218523f8e0e269ab8fe1f677cb0a922cbf3ac3bb4962bd9c8d6b961491315"
      }
    ],
    "blockNumber": 38207506,
    "cumulativeGasUsed": "4888972",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7fe7d74cf5e99a055f186c111b0acb37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"rollForLow\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rollForHigh\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"defaultEffect\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"lowEffect\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"highEffect\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct BCEvents.BCEvent\",\"name\":\"bcEvent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"appliedBCEffects\",\"type\":\"tuple[]\"}],\"name\":\"EventResolvedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StartLocation\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_charId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"}],\"name\":\"addPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_players\",\"type\":\"uint256[]\"}],\"name\":\"applyHazardDamage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcEvents\",\"outputs\":[{\"internalType\":\"contract EventsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"decrementNumItemsHeld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_effectNum\",\"type\":\"uint256\"}],\"name\":\"extApplyEffect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"_eventType\",\"type\":\"uint8\"}],\"name\":\"extChooseEffect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetActionsTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"health\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"carry\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"hack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"breach\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"shoot\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"melee\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"hasGun\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Traits\",\"name\":\"currentTraits\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"lastPos\",\"type\":\"tuple\"},{\"internalType\":\"int8\",\"name\":\"healthDmgTaken\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"numItemsHeld\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"internalType\":\"struct BCTypes.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetPlayerOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hazard\",\"type\":\"bool\"}],\"name\":\"extHurtPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extMovePlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GamesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getEventBlocks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"}],\"name\":\"grantDataToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"incrementNumItemsHeld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"incrementPlayerActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos2\",\"type\":\"tuple\"}],\"name\":\"manhattanDistance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"health\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"carry\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"hack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"breach\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"shoot\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"melee\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"hasGun\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Traits\",\"name\":\"currentTraits\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"lastPos\",\"type\":\"tuple\"},{\"internalType\":\"int8\",\"name\":\"healthDmgTaken\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numItemsHeld\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"resetPlayerActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lobbiesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eventsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gamesAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"setPlayersGameId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_charId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"updatePlayerTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCPlayers.sol\":\"BCPlayers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BCEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// NOTES\\n// Placing enemies must always have the effects in the order of:\\n// - numEnemyToPlace\\n// - EnemyType\\n// - EnemyPlacement\\n\\n// Stores information for events that happen in a specific room or from a card\\n// TODO: CRITICAL -> Unit tests for event and effect validity\\ncontract BCEvents is Ownable {\\n    enum EnemyPlacement {\\n        NONE,\\n        IN_ROOM,\\n        LAST_ROOM,\\n        ALL_ADJACENT\\n    }\\n    enum MovePlayer {\\n        NONE,\\n        HOME,\\n        LAST_ROOM,\\n        RANDOM,\\n        PORTAL,\\n        REACTOR\\n    }\\n\\n    enum EffectTypes {\\n        empty,\\n        permanant,\\n        fullHealth,\\n        instantDeath,\\n        placeHazard,\\n        grantEgg,\\n        healAmt,\\n        healArmorAmt,\\n        hazardDamage,\\n        physicalDamage,\\n        numEnemyToPlace,\\n        enemyType,\\n        whereToPlace,\\n        grantData,\\n        grantNumItems,\\n        takeNumItems,\\n        dropNumItems, // drop items in the room in unknown state\\n        moveType,\\n        trapPlayerEscapeRoll,\\n        grantAbility,\\n        loseTurn,\\n        lockDoorStrength,\\n        traitModifiersID\\n    }\\n\\n    // Effects are mapped by the effect type to an int:\\n    // CRITICAL:  1 == true, not present is false\\n    // Numbers are cast to enum as above\\n    // Uint effects are as normal\\n\\n    struct Effect {\\n        EffectTypes effect;\\n        uint value;\\n    }\\n\\n    struct BCEvent {\\n        // TODO: and replace name and text with a unique ID\\n        uint id; // TODO: Eval system, for now X000NN is for cards and 2000NN is for tiles\\n        // TODO: Change `permanant` to a number to serve as turns allowed?\\n        bool permanent; // Draw card before use allowed.  As an action - both can be derived from this\\n        // TODO: Permanent events conflict with and prevent card events in a room, this upsets balance!\\n        uint8 rollForLow; // On or below (unused if zero)\\n        uint8 rollForHigh; // On or above (unused if zero)\\n        // If both roll items are zero, player can choose any non\\n        Effect[] defaultEffect; // TODO: Eval doing it this way vs. using index and storing in array\\n        Effect[] lowEffect;\\n        Effect[] highEffect;\\n    }\\n\\n    Effect[][] public effectsList; // Used to support creating empty Effects // TODO: Is this the best pattern?\\n\\n    BCEvent[] public bcRoomEvents;\\n\\n    BCEvent[] public bcBugCardEvents;\\n    BCEvent[] public bcMysteryCardEvents;\\n    BCEvent[] public bcScavCardEvents;\\n    BCEvent[] public bcShipCardEvents;\\n\\n    constructor() {\\n        effectsList.push(); // Push empty effect into [0], but this is probably unnecessary\\n        _initializeDefaultRoomEvents();\\n        _initializeDefaultRoomEvents_2();\\n        _initializeDefaultBugCardEvents();\\n        _initializeDefaultMysteryCardEvents();\\n        _initializeDefaultScavCardEvents();\\n        _initializeDefaultShipCardEvents();\\n    }\\n\\n    function extGetRoomEvent(uint _id) public view returns (BCEvent memory) {\\n        return bcRoomEvents[_id];\\n    }\\n\\n    function extGetCardEvent(\\n        uint _id,\\n        BCTypes.BCEventType _type\\n    ) public view returns (BCEvent memory) {\\n        if (_type == BCTypes.BCEventType.BUG) {\\n            return bcBugCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.MYSTERY) {\\n            return bcMysteryCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SCAVENGER) {\\n            return bcScavCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SHIP_SECURITY) {\\n            return bcShipCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.NONE) {\\n            // Return an empty event\\n            // TODO: check for side effects of type\\n            return bcBugCardEvents[0];\\n        } else {\\n            console.log(\\\"Bad Event of type:\\\", uint(_type));\\n            revert(\\\"Bad event type\\\");\\n        }\\n    }\\n\\n    function extGetEffects(\\n        BCTypes.BCEventType _eventType,\\n        uint _id\\n    ) public view returns (Effect[][] memory) {\\n        // TODO: Hardcoded length??\\n        Effect[][] memory currentEffects = new Effect[][](3);\\n        BCEvent storage currentEvent;\\n        if (_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcRoomEvents[_id];\\n        } else {\\n            if (_eventType == BCTypes.BCEventType.BUG) {\\n                currentEvent = bcBugCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.MYSTERY) {\\n                currentEvent = bcMysteryCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SCAVENGER) {\\n                currentEvent = bcScavCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                currentEvent = bcShipCardEvents[_id];\\n            } else {\\n                revert(\\\"Bad event type\\\");\\n            }\\n        }\\n\\n        currentEffects[0] = currentEvent.defaultEffect;\\n        // TODO: This is ineffecient if most effects don't have all three\\n        currentEffects[1] = currentEvent.lowEffect;\\n        currentEffects[2] = currentEvent.highEffect;\\n\\n        return currentEffects;\\n    }\\n\\n    // TODO: REFACTOR WHEN TRAIT MOD SYSTEM IMPLEMENTED!!!\\n    // For _effect 0 -> default, 1 -> low, 2-> high\\n    // function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) public view returns (BCTypes.Traits memory) {\\n    //     BCEvent storage currentEvent;\\n    //     if(_roomEvent) {\\n    //         currentEvent = bcRoomEvents[_id];\\n    //     } else {\\n    //         currentEvent = bcCardEvents[_id];\\n    //     }\\n\\n    //     if(_effect == 0) {\\n    //         return currentEvent.defaultEffect.traitModifiers;\\n    //     } else if (_effect == 1) {\\n    //         return currentEvent.lowEffect.traitModifiers;\\n    //     } else if (_effect == 2) {\\n    //         return currentEvent.highEffect.traitModifiers;\\n    //     } else {\\n    //         revert (\\\"Effect must be 0, 1, or 2\\\");\\n    //     }\\n    // }\\n\\n    function _initializeDefaultBugCardEvents() internal {\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcBugCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 There's Something in the Walls\\n        // TODO\\n        Effect[] storage somethingInWallsDefault = effectsList.push();\\n        somethingInWallsDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        somethingInWallsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        somethingInWallsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage somethingInWalls = bcBugCardEvents.push();\\n        somethingInWalls.id = 300001; // Bug events start with 3\\n        somethingInWalls.permanent = false;\\n        // somethingInWalls.rollForLow = 0;\\n        // somethingInWalls.rollForHigh = 0; //TODO: Can save gas/space not doing this, but less explicit\\n\\n        somethingInWalls.defaultEffect = somethingInWallsDefault;\\n        // somethingInWalls.lowEffect = emptyEffect;\\n        // somethingInWalls.highEffect = emptyEffect;\\n\\n        // 2 Something Bit Me // TODO: Appears not to hurt player\\n        Effect[] storage somethingBitMeDefault = effectsList.push();\\n        somethingBitMeDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n\\n        BCEvent storage somethingBitMe = bcBugCardEvents.push();\\n        somethingBitMe.id = 300002;\\n        somethingBitMe.permanent = false;\\n        // somethingBitMe.rollForLow = 0;\\n        // somethingBitMe.rollForHigh = 0;\\n\\n        somethingBitMe.defaultEffect = somethingBitMeDefault;\\n        // somethingBitMe.lowEffect = emptyEffect;\\n        // somethingBitMe.highEffect = emptyEffect;\\n\\n        // 3 Game Over Man, Game Over!\\n        // TODO\\n        Effect[] storage gameOverDefault = effectsList.push();\\n        gameOverDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage gameOver = bcBugCardEvents.push();\\n        gameOver.id = 300003;\\n        gameOver.permanent = false;\\n        // gameOver.rollForLow = 0;\\n        // gameOver.rollForHigh = 0;\\n\\n        gameOver.defaultEffect = gameOverDefault;\\n        // gameOver.lowEffect = emptyEffect;\\n        // gameOver.highEffect = emptyEffect;\\n\\n        // 4 Packrat\\n        Effect[] storage packratDefault = effectsList.push();\\n        packratDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage packrat = bcBugCardEvents.push();\\n        packrat.id = 300004;\\n        packrat.permanent = false;\\n        // packrat.rollForLow = 0;\\n        // packrat.rollForHigh = 0;\\n\\n        packrat.defaultEffect = packratDefault;\\n        // packrat.lowEffect = emptyEffect;\\n        // packrat.highEffect = emptyEffect;\\n\\n        // 5 What is this stuff?\\n        // TODO\\n        Effect[] storage whatIsThisDefault = effectsList.push();\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: Ignored by bugs\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: -1 to all rolls\\n\\n        BCEvent storage whatIsThis = bcBugCardEvents.push();\\n        whatIsThis.id = 300005;\\n        whatIsThis.permanent = false;\\n        // whatIsThis.rollForLow = 0;\\n        // whatIsThis.rollForHigh = 0;\\n\\n        whatIsThis.defaultEffect = whatIsThisDefault;\\n\\n        // 6 Packrat Nest\\n        // TODO\\n        Effect[] storage packratNestDefault = effectsList.push();\\n        packratNestDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage packratNest = bcBugCardEvents.push();\\n        packratNest.id = 300006;\\n        packratNest.permanent = false;\\n\\n        packratNest.defaultEffect = packratNestDefault;\\n\\n        // 7 Clever Girls\\n        // TODO\\n        Effect[] storage cleverGirlsDefault = effectsList.push();\\n        cleverGirlsDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        cleverGirlsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        cleverGirlsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM))\\n        );\\n\\n        BCEvent storage cleverGirls = bcBugCardEvents.push();\\n        cleverGirls.id = 300007;\\n\\n        cleverGirls.defaultEffect = cleverGirlsDefault;\\n\\n        // 8 Warrior\\n        // TODO\\n        Effect[] storage warriorDefault = effectsList.push();\\n        warriorDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        warriorDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        warriorDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage warrior = bcBugCardEvents.push();\\n        warrior.id = 300008;\\n\\n        warrior.defaultEffect = warriorDefault;\\n\\n        // 9 Good Girl\\n        // TODO\\n        Effect[] storage goodGirlDefault = effectsList.push();\\n        goodGirlDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage goodGirl = bcBugCardEvents.push();\\n        goodGirl.id = 300009;\\n\\n        goodGirl.defaultEffect = goodGirlDefault;\\n\\n        // 10 What's that Smell?\\n        Effect[] storage whatsThatSmellDefault = effectsList.push();\\n        whatsThatSmellDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        whatsThatSmellDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage whatsThatSmell = bcBugCardEvents.push();\\n        whatsThatSmell.id = 300010;\\n\\n        whatsThatSmell.defaultEffect = whatsThatSmellDefault;\\n\\n        // 11 Spider's Web\\n        // TODO\\n        Effect[] storage spidersWebDefault = effectsList.push();\\n        spidersWebDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        spidersWebDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage spidersWebLow = effectsList.push();\\n        spidersWebLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        spidersWebLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage spidersWebHigh = effectsList.push();\\n        spidersWebHigh.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage spidersWeb = bcBugCardEvents.push();\\n        spidersWeb.id = 300011;\\n        spidersWeb.rollForLow = 1;\\n        spidersWeb.rollForHigh = 6;\\n\\n        spidersWeb.defaultEffect = spidersWebDefault;\\n        spidersWeb.lowEffect = spidersWebLow;\\n        spidersWeb.highEffect = spidersWebHigh;\\n\\n        // 12 Something is following me...\\n        // TODO\\n        Effect[] storage followingMeDefault = effectsList.push();\\n        followingMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        followingMeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        followingMeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM))\\n        );\\n\\n        BCEvent storage followingMe = bcBugCardEvents.push();\\n        followingMe.id = 300012;\\n\\n        followingMe.defaultEffect = followingMeDefault;\\n\\n        // 13 Sneak Attack\\n        Effect[] storage sneakAttackDefault = effectsList.push();\\n        sneakAttackDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        sneakAttackDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        sneakAttackDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage sneakAttack = bcBugCardEvents.push();\\n        sneakAttack.id = 300013;\\n\\n        sneakAttack.defaultEffect = sneakAttackDefault;\\n\\n        // 14 Feeding Time\\n        // TODO\\n        Effect[] storage feedingTimeDefault = effectsList.push();\\n        feedingTimeDefault.push(Effect(EffectTypes.dropNumItems, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        feedingTimeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        feedingTimeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage feedingTime = bcBugCardEvents.push();\\n        feedingTime.id = 300014;\\n\\n        feedingTime.defaultEffect = feedingTimeDefault;\\n\\n        // 15 Pardon m---aaaaah!\\n        Effect[] storage pardonMeDefault = effectsList.push();\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.LAST_ROOM))\\n        );\\n        pardonMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        pardonMeDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage pardonMe = bcBugCardEvents.push();\\n        pardonMe.id = 300015;\\n\\n        pardonMe.defaultEffect = pardonMeDefault;\\n    }\\n\\n    function _initializeDefaultMysteryCardEvents() internal {\\n        BCEvent storage noEvent = bcMysteryCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 Mesmer\\n        Effect[] storage mesmerDefault = effectsList.push();\\n        mesmerDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage mesmer = bcMysteryCardEvents.push();\\n        mesmer.id = 400001;\\n\\n        mesmer.defaultEffect = mesmerDefault;\\n\\n        // 2 Portal\\n        // TODO\\n        Effect[] storage portalDefault = effectsList.push();\\n        portalDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.PORTAL))\\n        );\\n\\n        BCEvent storage portal = bcMysteryCardEvents.push();\\n        portal.id = 400002;\\n\\n        portal.defaultEffect = portalDefault;\\n\\n        // 3 The Kirk Method\\n        // TODO\\n        Effect[] storage kirkMethodDefault = effectsList.push();\\n        kirkMethodDefault.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        Effect[] storage kirkMethodLow = effectsList.push();\\n        kirkMethodLow.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        // TODO: Add ability -1 to all rolls\\n\\n        Effect[] storage kirkMethodHigh = effectsList.push();\\n        kirkMethodHigh.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodHigh.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage kirkMethod = bcMysteryCardEvents.push();\\n        kirkMethod.id = 400003;\\n\\n        kirkMethod.defaultEffect = kirkMethodDefault;\\n        kirkMethod.lowEffect = kirkMethodLow;\\n        kirkMethod.highEffect = kirkMethodHigh;\\n\\n        // 4 Brownie\\n        // TODO: This is a choice event, choices are not implemented\\n        Effect[] storage brownieDefault = effectsList.push();\\n\\n        BCEvent storage brownie = bcMysteryCardEvents.push();\\n        brownie.id = 400004;\\n\\n        brownie.defaultEffect = brownieDefault;\\n\\n        // 5 I gotta get out of here!\\n        // TODO\\n        Effect[] storage getOutDefault = effectsList.push();\\n        getOutDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        // getOutDefault.push(Effect()) // TODO: Move player to nearest window or reeval.  This would be expensive to bfs.\\n\\n        BCEvent storage getOut = bcMysteryCardEvents.push();\\n        getOut.id = 400005;\\n\\n        getOut.defaultEffect = getOutDefault;\\n\\n        // 6 Incident Boundry\\n        // TODO\\n        Effect[] storage incidentBoundryDefault = effectsList.push();\\n        incidentBoundryDefault.push(Effect(EffectTypes.physicalDamage, 1)); // TODO: Should armor prevent this?\\n\\n        BCEvent storage incidentBoundry = bcMysteryCardEvents.push();\\n        incidentBoundry.id = 400006;\\n\\n        incidentBoundry.defaultEffect = incidentBoundryDefault;\\n\\n        // 7 Fugue State\\n        // TODO: May need to replace this one, very complicated to implement, meaningless single player\\n        Effect[] storage fugueStateDefault = effectsList.push();\\n\\n        BCEvent storage fugueState = bcMysteryCardEvents.push();\\n        fugueState.id = 400007;\\n\\n        fugueState.defaultEffect = fugueStateDefault;\\n\\n        // 8 Horror\\n        // TODO: Another challenging event to implement, would need BFS and custom code to break doors, and move player there\\n        Effect[] storage horrorDefault = effectsList.push();\\n\\n        BCEvent storage horror = bcMysteryCardEvents.push();\\n        horror.id = 400008;\\n\\n        horror.defaultEffect = horrorDefault;\\n\\n        // 9 Voices\\n        // TODO\\n        Effect[] storage voicesDefault = effectsList.push();\\n\\n        BCEvent storage voices = bcMysteryCardEvents.push();\\n        voices.id = 400009;\\n\\n        voices.defaultEffect = voicesDefault;\\n\\n        // 10 The Lottery\\n        Effect[] storage lotteryDefault = effectsList.push();\\n\\n        Effect[] storage lotteryLow = effectsList.push();\\n        lotteryLow.push(Effect(EffectTypes.instantDeath, 1));\\n\\n        BCEvent storage lottery = bcMysteryCardEvents.push();\\n        lottery.id = 400010;\\n        lottery.rollForLow = 1;\\n\\n        lottery.defaultEffect = lotteryDefault;\\n        lottery.lowEffect = lotteryLow;\\n\\n        // 11 Missing Numbers\\n        // TODO\\n        Effect[] storage missingNumbersDefault = effectsList.push();\\n\\n        Effect[] storage missingNumbersLow = effectsList.push();\\n\\n        Effect[] storage missingNumbersHigh = effectsList.push();\\n\\n        BCEvent storage missingNumbers = bcMysteryCardEvents.push();\\n        missingNumbers.id = 400011;\\n        missingNumbers.rollForLow = 1;\\n        missingNumbers.rollForHigh = 6;\\n\\n        missingNumbers.defaultEffect = missingNumbersDefault;\\n        missingNumbers.lowEffect = missingNumbersLow;\\n        missingNumbers.highEffect = missingNumbersHigh;\\n\\n        // 12 Tesseract\\n        // TODO\\n        Effect[] storage tesseractDefault = effectsList.push();\\n        tesseractDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage tesseract = bcMysteryCardEvents.push();\\n        tesseract.id = 400012;\\n\\n        tesseract.defaultEffect = tesseractDefault;\\n\\n        // 13 Glitch In the Spaceship\\n        // TODO\\n        Effect[] storage glitchDefault = effectsList.push();\\n\\n        BCEvent storage glitch = bcMysteryCardEvents.push();\\n        glitch.id = 400013;\\n\\n        glitch.defaultEffect = glitchDefault;\\n\\n        // 14 Ephemeral Form\\n        // TODO\\n        Effect[] storage ephemeralFormDefault = effectsList.push();\\n\\n        BCEvent storage ephemeralForm = bcMysteryCardEvents.push();\\n        ephemeralForm.id = 400014;\\n\\n        ephemeralForm.defaultEffect = ephemeralFormDefault;\\n\\n        // 15 TISATAAFL\\n        // TODO\\n        Effect[] storage tisataaflDefault = effectsList.push();\\n        tisataaflDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        tisataaflDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        BCEvent storage tisataafl = bcMysteryCardEvents.push();\\n        tisataafl.id = 400015;\\n\\n        tisataafl.defaultEffect = tisataaflDefault;\\n    }\\n\\n    function _initializeDefaultScavCardEvents() internal {\\n        BCEvent storage noEvent = bcScavCardEvents.push();\\n        noEvent.id = 500000;\\n\\n        // 1 Crazed Prophet\\n        // TODO\\n        Effect[] storage crazedProphetDefault = effectsList.push();\\n        crazedProphetDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage crazedProphet = bcScavCardEvents.push();\\n        crazedProphet.id = 500001;\\n\\n        crazedProphet.defaultEffect = crazedProphetDefault;\\n\\n        // 2 Blackjack\\n        // TODO: Is this broken like packrat?  How can it not be?\\n        // I did die I think that removes the item before the next item is resolved\\n        Effect[] storage blackjackDefault = effectsList.push();\\n        blackjackDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        blackjackDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage blackjack = bcScavCardEvents.push();\\n        blackjack.id = 500002;\\n\\n        blackjack.defaultEffect = blackjackDefault;\\n\\n        // 3 Toll\\n        // TODO\\n        Effect[] storage tollDefault = effectsList.push();\\n\\n        BCEvent storage toll = bcScavCardEvents.push();\\n        toll.id = 500003;\\n\\n        toll.defaultEffect = tollDefault;\\n\\n        // 4 Bear Trap\\n        // TODO: This appears to have placed a hazard at least once\\n        // TODO: 2 dice, place enemy if free self failed\\n        Effect[] storage bearTrapDefault = effectsList.push();\\n        bearTrapDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage bearTrap = bcScavCardEvents.push();\\n        bearTrap.id = 500004;\\n\\n        bearTrap.defaultEffect = bearTrapDefault;\\n\\n        // 5 Cooking Badly\\n        Effect[] storage cookingBadlyDefault = effectsList.push();\\n        cookingBadlyDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage cookingBadly = bcScavCardEvents.push();\\n        cookingBadly.id = 500005;\\n\\n        cookingBadly.defaultEffect = cookingBadlyDefault;\\n\\n        // 6 Garbage Collection\\n        // TODO:\\n        Effect[] storage garbageCollectionDefault = effectsList.push();\\n        garbageCollectionDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage garbageCollection = bcScavCardEvents.push();\\n        garbageCollection.id = 500006;\\n\\n        garbageCollection.defaultEffect = garbageCollectionDefault;\\n\\n        // 7 You scratch my back... // TODO: Need variant for single player\\n        // Or just make it discard a card and draw a card\\n        // TODO:\\n        Effect[] storage scratchDefault = effectsList.push();\\n        scratchDefault.push(Effect(EffectTypes.takeNumItems, 1)); // TODO: Also need to implement picking an item to discard\\n        scratchDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage scratch = bcScavCardEvents.push();\\n        scratch.id = 500007;\\n\\n        scratch.defaultEffect = scratchDefault;\\n\\n        // 8 Bully\\n        // TODO: Choice\\n        Effect[] storage bullyDefault = effectsList.push();\\n\\n        BCEvent storage bully = bcScavCardEvents.push();\\n        bully.id = 500008;\\n\\n        bully.defaultEffect = bullyDefault;\\n\\n        // 9 Arm Rassling\\n        // TODO: Choice\\n        Effect[] storage armRasslingDefault = effectsList.push();\\n\\n        BCEvent storage armRassling = bcScavCardEvents.push();\\n        armRassling.id = 500009;\\n\\n        armRassling.defaultEffect = armRasslingDefault;\\n\\n        // 10 Hitman\\n        // TODO: Solo player variant, pick player to kill, pick discard\\n        Effect[] storage hitmanDefault = effectsList.push();\\n\\n        BCEvent storage hitman = bcScavCardEvents.push();\\n        hitman.id = 500010;\\n\\n        hitman.defaultEffect = hitmanDefault;\\n\\n        // 11 Mad Mel\\n        // TODO\\n        Effect[] storage madMelDefault = effectsList.push();\\n        madMelDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        madMelDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        madMelDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        madMelDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage madMel = bcScavCardEvents.push();\\n        madMel.id = 500011;\\n\\n        madMel.defaultEffect = madMelDefault;\\n\\n        // 12 Scavangus Interruptus\\n        // TODO\\n        Effect[] storage scavangusInterruptusDefault = effectsList.push();\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.numEnemyToPlace, 2)\\n        );\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        scavangusInterruptusDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM)))\\n        );\\n\\n        BCEvent storage scavangusInterruptus = bcScavCardEvents.push();\\n        scavangusInterruptus.id = 500012;\\n\\n        scavangusInterruptus.defaultEffect = scavangusInterruptusDefault;\\n\\n        // 13 I'm sleeping here!\\n        // TODO\\n        Effect[] storage imSleepingDefault = effectsList.push();\\n        imSleepingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        imSleepingDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        imSleepingDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM)))\\n        );\\n\\n        BCEvent storage imSleeping = bcScavCardEvents.push();\\n        imSleeping.id = 500013;\\n\\n        imSleeping.defaultEffect = imSleepingDefault;\\n\\n        // 14 I'm not following you!\\n        Effect[] storage notFollowingDefault = effectsList.push();\\n        notFollowingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notFollowingDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        notFollowingDefault.push(\\n            Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.LAST_ROOM)))\\n        );\\n\\n        BCEvent storage notFollowing = bcScavCardEvents.push();\\n        notFollowing.id = 500014;\\n\\n        notFollowing.defaultEffect = notFollowingDefault;\\n\\n        // 15 You Are Not Alone\\n\\n        // TODO CRITICAL -> this event breaks the map\\n        // Should work now, forgot to push zero here.\\n        Effect[] storage notAloneDefault = effectsList.push();\\n        notAloneDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notAloneDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        notAloneDefault.push(\\n            Effect(\\n                EffectTypes.whereToPlace,\\n                (uint(EnemyPlacement.ALL_ADJACENT))\\n            )\\n        );\\n\\n        BCEvent storage notAlone = bcScavCardEvents.push();\\n        notAlone.id = 500015;\\n\\n        notAlone.defaultEffect = notAloneDefault;\\n    }\\n\\n    function _initializeDefaultShipCardEvents() internal {\\n        // TODO: Only 2 events spawns a sentry robot.  Evaluate.\\n        // Though saving murder bots for crisises is interesting too\\n\\n        BCEvent storage noEvent = bcShipCardEvents.push();\\n        noEvent.id = 600000;\\n\\n        // 1 Snitch\\n        // TODO: Need target player mechanism and place in that room\\n        Effect[] storage snitchDefault = effectsList.push();\\n\\n        BCEvent storage snitch = bcShipCardEvents.push();\\n        snitch.id = 600001;\\n\\n        snitch.defaultEffect = snitchDefault;\\n\\n        // 2 Alarm\\n        Effect[] storage alarmDefault = effectsList.push();\\n        alarmDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        alarmDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.ROBOT))\\n        );\\n        alarmDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage alarm = bcShipCardEvents.push();\\n        alarm.id = 600002;\\n\\n        alarm.defaultEffect = alarmDefault;\\n\\n        // 3 Lockdown\\n        // TODO: Need to permanantly lock the walls\\n        // For now, just locking the doors at strength 5\\n        Effect[] storage lockdownDefault = effectsList.push();\\n        lockdownDefault.push(Effect(EffectTypes.lockDoorStrength, 5));\\n\\n        BCEvent storage lockdown = bcShipCardEvents.push();\\n        lockdown.id = 600003;\\n\\n        lockdown.defaultEffect = lockdownDefault;\\n\\n        // 4 Vent the Ship\\n        Effect[] storage ventDefault = effectsList.push();\\n        ventDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        ventDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage vent = bcShipCardEvents.push();\\n        vent.id = 600004;\\n\\n        vent.defaultEffect = ventDefault;\\n\\n        // 5 Maintenance Hatch\\n        // TODO: Impelement hatch\\n        Effect[] storage hatchDefault = effectsList.push();\\n\\n        BCEvent storage hatch = bcShipCardEvents.push();\\n        hatch.id = 600005;\\n\\n        hatch.defaultEffect = hatchDefault;\\n\\n        // 6 Replicator\\n        // TODO: Need to track discarded/destroyed items\\n        // TODO: Allowing item duplicates or reviving dead items has major implications for UiF.  However, it would be super cool properly controlled!\\n        Effect[] storage replicatorDefault = effectsList.push();\\n        // TODO: For now, just granting an item\\n        replicatorDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage replicator = bcShipCardEvents.push();\\n        replicator.id = 600006;\\n\\n        replicator.defaultEffect = replicatorDefault;\\n\\n        // 7 First Aid Station\\n        Effect[] storage firstAidDefault = effectsList.push();\\n        firstAidDefault.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage firstAid = bcShipCardEvents.push();\\n        firstAid.id = 600007;\\n\\n        firstAid.defaultEffect = firstAidDefault;\\n\\n        // 8 ATM\\n        // TODO: Two Dice\\n        // TODO: Choice to walk away\\n        Effect[] storage atmDefault = effectsList.push();\\n\\n        Effect[] storage atmLow = effectsList.push();\\n        atmLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        atmLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        atmLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        // TODO: Add second high?\\n        Effect[] storage atmHigh = effectsList.push();\\n        atmHigh.push(Effect(EffectTypes.grantData, 2)); // Avg of 1 and 3\\n\\n        BCEvent storage atm = bcShipCardEvents.push();\\n        atm.id = 60008;\\n\\n        atm.defaultEffect = atmDefault;\\n        atm.lowEffect = atmLow;\\n        atm.highEffect = atmHigh;\\n\\n        // 9 Blooper Reel\\n        Effect[] storage blooperDefault = effectsList.push();\\n        blooperDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage blooper = bcShipCardEvents.push();\\n        blooper.id = 600009;\\n\\n        blooper.defaultEffect = blooperDefault;\\n\\n        // 10 Locker\\n        // TODO\\n        Effect[] storage lockerDefault = effectsList.push();\\n        lockerDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage locker = bcShipCardEvents.push();\\n        locker.id = 600010;\\n\\n        locker.defaultEffect = lockerDefault;\\n\\n        // 11 Contraband\\n        // TODO: CHOICE\\n        Effect[] storage contrabandDefault = effectsList.push();\\n\\n        BCEvent storage contraband = bcShipCardEvents.push();\\n        contraband.id = 600011;\\n\\n        contraband.defaultEffect = contrabandDefault;\\n\\n        // 12 Fire // TODO: This is identical to Vent the Ship!\\n        Effect[] storage fireDefault = effectsList.push();\\n        fireDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        fireDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage fire = bcShipCardEvents.push();\\n        fire.id = 600012;\\n\\n        fire.defaultEffect = fireDefault;\\n\\n        // 13 Janitorial Misconduct\\n        // TODO: Need ability to force dropping an item at a location\\n        Effect[] storage janitorialMisconductDefault = effectsList.push();\\n\\n        BCEvent storage janitorialMisconduct = bcShipCardEvents.push();\\n        janitorialMisconduct.id = 600013;\\n\\n        janitorialMisconduct.defaultEffect = janitorialMisconductDefault;\\n\\n        // 14 Target Acquired\\n        // TODO\\n        Effect[] storage targetAcquiredDefault = effectsList.push();\\n        targetAcquiredDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        targetAcquiredDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        targetAcquiredDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage targetAcquired = bcShipCardEvents.push();\\n        targetAcquired.id = 600014;\\n\\n        targetAcquired.defaultEffect = targetAcquiredDefault;\\n\\n        // 15 Security!\\n        // TODO\\n        Effect[] storage securityDefault = effectsList.push();\\n        securityDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        securityDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.TURRET))\\n        );\\n        securityDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage security = bcShipCardEvents.push();\\n        security.id = 600015;\\n\\n        security.defaultEffect = securityDefault;\\n    }\\n\\n    function _initializeDefaultRoomEvents() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcRoomEvents.push();\\n        noEvent.id = 0;\\n        noEvent.permanent = false;\\n        noEvent.rollForLow = 0;\\n        noEvent.rollForHigh = 0;\\n\\n        noEvent.defaultEffect = emptyEffect;\\n        noEvent.lowEffect = emptyEffect;\\n        noEvent.highEffect = emptyEffect;\\n\\n        // 1 Breached Reactor\\n        // Done\\n        Effect[] storage breachedReactorDefault = effectsList.push();\\n        breachedReactorDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        breachedReactorDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        BCEvent storage breachedReactor = bcRoomEvents.push();\\n        breachedReactor.id = 200001;\\n        breachedReactor.permanent = false;\\n        breachedReactor.rollForLow = 0;\\n        breachedReactor.rollForHigh = 0;\\n\\n        breachedReactor.defaultEffect = breachedReactorDefault;\\n        breachedReactor.lowEffect = emptyEffect;\\n        breachedReactor.highEffect = emptyEffect;\\n        //     bcRoomEvents.push(BCEvent(\\n        //         // \\\"Breached Reactor\\\",\\n        //         // \\\"As you enter the room, the reactor explodes!  Take 1 hazard damage.\\\",\\n        //         200001,\\n        //         false,\\n        //         0,\\n        //         0, // TODO:  Explore adding choices to these ones\\n        //         breachedReactorDefault,\\n        //         emptyEffect,\\n        //         emptyEffect\\n        //     ));\\n\\n        // 2 Bug Nest\\n        // TODO\\n        Effect[] storage bugNestLow = effectsList.push();\\n        bugNestLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        bugNestLow.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.BUG))\\n        );\\n        bugNestLow.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        Effect[] storage bugNestHigh = effectsList.push();\\n        bugNestHigh.push(Effect(EffectTypes.grantEgg, 1)); // TRUE\\n\\n        BCEvent storage bugNest = bcRoomEvents.push();\\n        bugNest.id = 200002;\\n        bugNest.permanent = true; // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n        bugNest.rollForLow = 2;\\n        bugNest.rollForHigh = 6;\\n\\n        bugNest.defaultEffect = emptyEffect;\\n        bugNest.lowEffect = bugNestLow;\\n        bugNest.highEffect = bugNestHigh;\\n\\n        // 3 Crossroads\\n        // TODO\\n        Effect[] storage crossroadsDefault = effectsList.push();\\n        crossroadsDefault.push(Effect(EffectTypes.numEnemyToPlace, 3));\\n        crossroadsDefault.push(\\n            Effect(EffectTypes.enemyType, uint(BCTypes.DenizenType.SCAV))\\n        );\\n        crossroadsDefault.push(\\n            Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM))\\n        );\\n\\n        BCEvent storage crossroads = bcRoomEvents.push();\\n        crossroads.id = 200003;\\n        crossroads.permanent = false;\\n        crossroads.rollForLow = 0;\\n        crossroads.rollForHigh = 0;\\n\\n        crossroads.defaultEffect = crossroadsDefault;\\n        crossroads.lowEffect = emptyEffect;\\n        crossroads.highEffect = emptyEffect;\\n\\n        // 4 Engineering Catwalk\\n        Effect[] storage catwalkDefault = effectsList.push();\\n        catwalkDefault.push(\\n            Effect(EffectTypes.moveType, uint(MovePlayer.REACTOR))\\n        );\\n\\n        BCEvent storage catwalk = bcRoomEvents.push();\\n        catwalk.id = 200004;\\n        catwalk.permanent = true;\\n        catwalk.rollForLow = 0;\\n        catwalk.rollForHigh = 0;\\n\\n        catwalk.defaultEffect = catwalkDefault;\\n        catwalk.lowEffect = emptyEffect;\\n        catwalk.highEffect = emptyEffect;\\n\\n        // 5 Hull Breach\\n        // Done\\n        Effect[] storage hullBreachDefault = effectsList.push();\\n        hullBreachDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n\\n        Effect[] storage hullBreachLow = effectsList.push();\\n        hullBreachLow.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        hullBreachLow.push(Effect(EffectTypes.instantDeath, 1)); // TRUE\\n\\n        BCEvent storage hullBreach = bcRoomEvents.push();\\n        hullBreach.id = 200005;\\n        hullBreach.permanent = false;\\n        hullBreach.rollForLow = 1;\\n        hullBreach.rollForHigh = 0;\\n\\n        hullBreach.defaultEffect = hullBreachDefault;\\n        hullBreach.lowEffect = hullBreachLow;\\n        hullBreach.highEffect = emptyEffect;\\n\\n        // 6 Medbay\\n        // TODO: No hostiles in room\\n        // HACK:  Full health + heal amount 1 indicates heal to full health +1\\n        Effect[] storage medbayDefault = effectsList.push();\\n        medbayDefault.push(Effect(EffectTypes.fullHealth, 1)); // TRUE\\n\\n        BCEvent storage medbay = bcRoomEvents.push();\\n        medbay.id = 200006;\\n        medbay.permanent = true;\\n        medbay.rollForLow = 0;\\n        medbay.rollForHigh = 0;\\n\\n        medbay.defaultEffect = medbayDefault;\\n        medbay.lowEffect = emptyEffect;\\n        medbay.highEffect = emptyEffect;\\n    }\\n\\n    function _initializeDefaultRoomEvents_2() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // 7 Showers\\n        // Done\\n        Effect[] storage showersDefault = effectsList.push();\\n        showersDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage showers = bcRoomEvents.push();\\n        showers.id = 200007;\\n        showers.permanent = false;\\n        showers.rollForLow = 0;\\n        showers.rollForHigh = 0;\\n\\n        showers.defaultEffect = showersDefault;\\n        showers.lowEffect = emptyEffect;\\n        showers.highEffect = emptyEffect;\\n\\n        // 8 Trash Compactor\\n        // TODO - Locking doors is done, crushing players and items is not\\n        Effect[] storage trashCompactorDefault = effectsList.push();\\n        trashCompactorDefault.push(Effect(EffectTypes.lockDoorStrength, 4));\\n\\n        BCEvent storage trashCompactor = bcRoomEvents.push();\\n        trashCompactor.id = 200008;\\n        trashCompactor.permanent = false;\\n        trashCompactor.rollForLow = 0;\\n        trashCompactor.rollForHigh = 0;\\n\\n        trashCompactor.defaultEffect = trashCompactorDefault;\\n        trashCompactor.lowEffect = emptyEffect;\\n        trashCompactor.highEffect = emptyEffect;\\n\\n        // 9 Ship Services\\n        // TODO: Let player select which services to use.\\n        // TODO\\n        Effect[] storage shipServicesDefault = effectsList.push();\\n        shipServicesDefault.push(Effect(EffectTypes.fullHealth, 0)); // TODO: Prevent this from stripping extra health\\n        // TODO: Sell items to company\\n        // TODO: Buy items from company (only multiplayer?)\\n\\n        BCEvent storage shipServices = bcRoomEvents.push();\\n        shipServices.id = 200009;\\n        shipServices.permanent = true;\\n\\n        shipServices.defaultEffect = shipServicesDefault;\\n    }\\n}\\n\",\"keccak256\":\"0xa77ac1454dd1da98c9a7ef0426f80c7e13d6400ee8b02b2cf44f61bfc28f816e\",\"license\":\"UNLICENSED\"},\"contracts/BCPlayers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCEvents.sol\\\";\\n\\nimport \\\"./BCUtils.sol\\\";\\n\\ninterface EventsInterface {\\n    function extGetRoomEvent(\\n        uint _id\\n    ) external view returns (BCEvents.BCEvent memory);\\n\\n    function extGetCardEvent(\\n        uint _id,\\n        BCTypes.BCEventType _type\\n    ) external view returns (BCEvents.BCEvent memory);\\n\\n    function extGetEffects(\\n        BCTypes.BCEventType _eventType,\\n        uint _id\\n    ) external view returns (BCEvents.Effect[][] memory);\\n\\n    function extGetTraitModForEffect(\\n        bool _roomEvent,\\n        uint _id,\\n        uint _effect\\n    ) external view returns (BCTypes.Traits memory);\\n}\\n\\ninterface CharInterface {\\n    function characters(\\n        uint _id\\n    ) external view returns (BCTypes.Character memory);\\n\\n    function incrementCloneNumber(uint _charId) external;\\n\\n    function extGetChar(\\n        uint _charId\\n    ) external view returns (BCTypes.Character memory);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n\\n    function debugBuildMapOneRoom(uint _roomId) external returns (uint);\\n\\n    // function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function extGetGameTile(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) external view returns (BCTypes.GameTile memory);\\n\\n    function getDoor(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction\\n    ) external view returns (BCTypes.Door memory);\\n\\n    function setDoorFromPos(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction,\\n        BCTypes.DoorStatus _status,\\n        uint _strength\\n    ) external;\\n\\n    function resetOpenDoors(uint _mapId) external;\\n\\n    function extGetRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) external view returns (BCTypes.RoomTile memory);\\n\\n    function extGetRoomById(\\n        uint _mapId,\\n        uint _roomId\\n    ) external view returns (BCTypes.RoomTile memory);\\n\\n    function extSetHazardStatus(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        bool _hasHazard\\n    ) external;\\n\\n    function extSpreadHazards(uint _mapId, uint _distance) external;\\n\\n    function lockDownRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _strength\\n    ) external;\\n\\n    function extGetMainReactorCoords(\\n        uint _mapId\\n    ) external view returns (uint, uint);\\n\\n    function getDoorDirections(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) external view returns (bool[4] memory);\\n}\\n\\ninterface ItemsInterface {\\n    function getItemIDsByPlayer(\\n        uint _playerID\\n    ) external view returns (uint[] memory);\\n\\n    function destroyItem(uint _playerId, uint _itemId) external;\\n\\n    function getTraitModifiers(\\n        uint _playerId\\n    ) external view returns (BCTypes.Traits memory);\\n\\n    function dropAllItems(\\n        uint _gameId,\\n        uint _playerId,\\n        uint _row,\\n        uint _col\\n    ) external;\\n\\n    function addItemsToPlayer(\\n        uint _playerId,\\n        uint[] memory _itemIds,\\n        address _owner\\n    ) external;\\n}\\n\\ninterface GamesInterface {\\n    // function endPlayerRound(uint _gameId, uint _mapId) external;\\n    function extMovePlayer(\\n        uint _gameId,\\n        BCTypes.Position memory _position,\\n        uint _playerId\\n    ) external;\\n\\n    function addDenizen(\\n        uint _gameId,\\n        BCTypes.DenizenType _type,\\n        uint _row,\\n        uint _col\\n    ) external;\\n}\\n\\ncontract BCPlayers is Ownable, BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    CharInterface public chars;\\n    // UtilsInterface public utils;\\n    MapInterface public maps;\\n    EventsInterface public bcEvents;\\n    ItemsInterface public items;\\n    GamesInterface public games;\\n\\n    address public lobbiesAddress;\\n    address public charsAddress;\\n    address public actionsAddress;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _utilsAddress, // TODO: remove\\n        address _mapsAddress,\\n        address _lobbiesAddress,\\n        address _actionsAddress,\\n        address _eventsAddress,\\n        address _itemsAddress,\\n        address _gamesAddress\\n    ) public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        maps = MapInterface(_mapsAddress);\\n        lobbiesAddress = _lobbiesAddress;\\n        actionsAddress = _actionsAddress;\\n        bcEvents = EventsInterface(_eventsAddress);\\n        items = ItemsInterface(_itemsAddress);\\n        games = GamesInterface(_gamesAddress);\\n    }\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3;\\n\\n    uint8 constant SPACE_ROOM = 0;\\n\\n    BCTypes.Position public StartLocation = BCTypes.Position(10, 6); // TODO: duped on maps\\n\\n    BCTypes.Player[] public players;\\n\\n    // mapping(uint => EnumerableSet.UintSet) public gameToEventBlocks;\\n\\n    event EventResolvedEvent(\\n        uint gameId,\\n        uint playerId,\\n        BCEvents.BCEvent bcEvent,\\n        BCEvents.Effect[] appliedBCEffects\\n    );\\n\\n    constructor() {\\n        // Burn zero, used to mark empty\\n        BCTypes.Player memory empty;\\n        players.push(empty);\\n    }\\n\\n    function addPlayer(\\n        uint _charId,\\n        address _owner,\\n        uint[] memory _itemIds\\n    ) external returns (uint) {\\n        // TODO: Decide on allowing more than one valid contract for chars (etc.)\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n\\n        BCTypes.Player storage newPlayer = players.push();\\n        uint playerId = players.length - 1;\\n        newPlayer.owner = _owner;\\n        newPlayer.characterId = _charId;\\n        newPlayer.id = playerId;\\n        updatePlayerTraits(_charId, players.length - 1);\\n        // DO NOT attempt to set gameId here, players in lobbies are created before game\\n        // Add items here, but gameId is NOT set yet!\\n        newPlayer.numItemsHeld = uint8(_itemIds.length);\\n        items.addItemsToPlayer(playerId, _itemIds, _owner);\\n\\n        return uint(playerId);\\n    }\\n\\n    function setPlayersGameId(uint[] memory ids, uint _gameId) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            players[ids[i]].gameId = _gameId;\\n        }\\n    }\\n\\n    function updatePlayerTraits(uint _charId, uint _playerId) public {\\n        BCTypes.Traits memory baseTraits = chars.characters(_charId).traits;\\n        BCTypes.Traits memory modifiers = items.getTraitModifiers(_playerId);\\n\\n        BCTypes.Player storage currentPlayer = players[_playerId];\\n\\n        // TODO: Validate if gas savings with if statements (only write if changes)\\n        currentPlayer.currentTraits.health =\\n            baseTraits.health +\\n            modifiers.health;\\n        currentPlayer.currentTraits.carry = baseTraits.carry + modifiers.carry;\\n        currentPlayer.currentTraits.defense =\\n            baseTraits.defense +\\n            modifiers.defense;\\n        currentPlayer.currentTraits.hack = baseTraits.hack + modifiers.hack;\\n        currentPlayer.currentTraits.breach =\\n            baseTraits.breach +\\n            modifiers.breach;\\n        currentPlayer.currentTraits.shoot = baseTraits.shoot + modifiers.shoot;\\n        currentPlayer.currentTraits.melee = baseTraits.melee + modifiers.melee;\\n    }\\n\\n    function grantDataToPlayer(uint _playerId, uint8 _amount) public {\\n        require(\\n            msg.sender == actionsAddress,\\n            \\\"Not actions contract - grantDataToPlayer\\\"\\n        );\\n        players[_playerId].dataTokens += _amount;\\n\\n        // TODO: Event\\n    }\\n\\n    function extHurtPlayer(uint _playerId, uint _amount, bool _hazard) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        _hurtPlayer(_playerId, _amount, _hazard);\\n    }\\n\\n    function _hurtPlayer(uint _playerId, uint _amount, bool _hazard) internal {\\n        BCTypes.Player storage currentPlayer = players[_playerId];\\n        // TODO: The below worked in games, but not here!?!?!?!\\n        // Or maybe it does?\\n        // BCTypes.Character memory currentChar = chars.characters(\\n        //     currentPlayer.characterId\\n        // );\\n        // BCTypes.Character memory currentChar = chars.extGetChar(currentPlayer.characterId);\\n        // TODO: Handle hazard immunity\\n        // TODO: Handle armor\\n        currentPlayer.healthDmgTaken += int8(uint8(_amount));\\n        if (\\n            currentPlayer.healthDmgTaken >=\\n            int8(uint8(currentPlayer.currentTraits.health))\\n        ) {\\n            _respawnPlayer(_playerId);\\n        }\\n    }\\n\\n    function _respawnPlayer(uint _playerId) internal {\\n        BCTypes.Player storage currentPlayer = players[_playerId];\\n        // players[_playerId].dead = false;\\n        // TODO: Eval making this cost an action.  If so, need to handle 4/3 actions used\\n        // TODO: Destroy items instead of dropping, when appropriate\\n        items.dropAllItems(\\n            currentPlayer.gameId,\\n            _playerId,\\n            currentPlayer.position.row,\\n            currentPlayer.position.col\\n        );\\n\\n        currentPlayer.healthDmgTaken = 0;\\n        currentPlayer.numItemsHeld = 0;\\n        updatePlayerTraits(currentPlayer.characterId, _playerId);\\n        chars.incrementCloneNumber(players[_playerId].characterId);\\n        players[_playerId].position = StartLocation;\\n    }\\n\\n    // TODO: Currently this is only used for using a room, consider renaming\\n    function extApplyEffect(\\n        uint _playerId,\\n        uint _gameId,\\n        uint _mapId,\\n        BCTypes.Position memory _position,\\n        uint _eventId,\\n        uint _effectNum\\n    ) public {\\n        require(\\n            msg.sender == actionsAddress,\\n            \\\"Not actions contract - extApplyEffect\\\"\\n        );\\n        // TODO: Assumes this will always use the default effect\\n        BCEvents.Effect[] memory effect = bcEvents.extGetEffects(\\n            BCTypes.BCEventType.ROOM,\\n            _eventId\\n        )[_effectNum];\\n        _applyEffect(_playerId, _gameId, _mapId, _position, effect);\\n    }\\n\\n    function _applyEffect(\\n        uint _playerId,\\n        uint _gameId,\\n        uint _mapId,\\n        BCTypes.Position memory _position, // TODO: We always get player, that has position already\\n        BCEvents.Effect[] memory _effects\\n    ) internal {\\n        for (uint i = 0; i < _effects.length; i++) {\\n            console.log(\\\"Applying effect number\\\", i);\\n            BCTypes.Player storage currentPlayer = players[_playerId];\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.permanant) {\\n                // TODO\\n                // Implement this like with spawing enemies.  Put this first\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.fullHealth) {\\n                currentPlayer.healthDmgTaken =\\n                    0 -\\n                    int8(uint8(_effects[i].value));\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.instantDeath) {\\n                _respawnPlayer(_playerId);\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.placeHazard) {\\n                maps.extSetHazardStatus(\\n                    _mapId,\\n                    _position.row,\\n                    _position.col,\\n                    true\\n                );\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.grantEgg) {\\n                // TODO\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.healAmt) {\\n                currentPlayer.healthDmgTaken -= int8(uint8(_effects[i].value));\\n                if (currentPlayer.healthDmgTaken < 0) {\\n                    currentPlayer.healthDmgTaken = 0;\\n                }\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.healArmorAmt) {\\n                // TODO\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.hazardDamage) {\\n                _hurtPlayer(_playerId, _effects[i].value, true);\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.physicalDamage) {\\n                _hurtPlayer(_playerId, _effects[i].value, false);\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.numEnemyToPlace) {\\n                uint numToPlace = _effects[i].value;\\n\\n                // numEnemyToPlace will be first if we're placing enemies\\n                // numEnemyToPlace is the number PER placement location\\n\\n                // _effects[i+1] will always be EnemyType\\n                assert(\\n                    _effects[i + 1].effect == BCEvents.EffectTypes.enemyType\\n                );\\n                BCTypes.DenizenType denizenType = BCTypes.DenizenType(\\n                    _effects[1].value\\n                );\\n\\n                // _effects[i+2] will always be EnemyPlacement\\n                assert(\\n                    _effects[i + 2].effect == BCEvents.EffectTypes.whereToPlace\\n                );\\n                BCEvents.EnemyPlacement placement = BCEvents.EnemyPlacement(\\n                    _effects[2].value\\n                );\\n\\n                bool[4] memory doorDirections = maps.getDoorDirections(\\n                    _mapId,\\n                    _position.row,\\n                    _position.col\\n                );\\n\\n                if (placement == BCEvents.EnemyPlacement.ALL_ADJACENT) {\\n                    for (uint k = 0; k < 4; k++) {\\n                        if (doorDirections[k] == true) {\\n                            // TODO: We currently ALWAYS place exactly 1 enemy in each adjacent room\\n                            for (uint m = 0; m < numToPlace; m++) {\\n                                BCTypes.Position\\n                                    memory adjacent = getNeighborRoom(\\n                                        k,\\n                                        _position\\n                                    );\\n                                games.addDenizen(\\n                                    _gameId,\\n                                    denizenType,\\n                                    adjacent.row,\\n                                    adjacent.col\\n                                );\\n                            }\\n                        }\\n                    }\\n                    // We're done\\n                    break;\\n                }\\n\\n                // WARNING:  Below assumes only 3 possiblities for denizen placement: in room, last room, and all adjacent\\n\\n                for (uint k = 0; k < numToPlace; k++) {\\n                    games.addDenizen(\\n                        _gameId,\\n                        denizenType,\\n                        placement == BCEvents.EnemyPlacement.IN_ROOM\\n                            ? _position.row\\n                            : currentPlayer.lastPos.row,\\n                        placement == BCEvents.EnemyPlacement.IN_ROOM\\n                            ? _position.col\\n                            : currentPlayer.lastPos.col\\n                    );\\n                }\\n\\n                // Break, we've processed everything for this event\\n                break;\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.grantData) {\\n                grantDataToPlayer(_playerId, uint8(_effects[i].value));\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.grantNumItems) {\\n                // TODO:  This is complicated and will probably need to be two steps\\n                // Alternately, we could just always only grant 1 item (which may be the case already)\\n                // We won't know when the effect is drawn if the player will get items\\n                // Therefore, we don't know whether or not to require them to pay for items\\n            }\\n\\n            // TODO: Doesnt' work\\n            // ERC721 caller is not token owner or approved\\n            // Turned off burning NFT for now\\n            if (_effects[i].effect == BCEvents.EffectTypes.takeNumItems) {\\n                // TODO: CRITICAL -> Ensure complete test coverage\\n                uint remainingToTake = _effects[i].value;\\n                uint[] memory itemIds = items.getItemIDsByPlayer(_playerId);\\n                if (itemIds.length > 0) {\\n                    // Fischer-yates for random order to take\\n                    for (uint j = itemIds.length - 1; j > 0; j--) {\\n                        uint8 k = smallIntBetweenVals(0, uint8(j));\\n\\n                        (itemIds[j], itemIds[k]) = (itemIds[k], itemIds[j]);\\n                    }\\n\\n                    for (uint j = 0; i < itemIds.length; j++) {\\n                        items.destroyItem(_playerId, itemIds[j]);\\n                        decrementNumItemsHeld(_playerId, 1);\\n                        remainingToTake--;\\n                        if (remainingToTake == 0) {\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            // TODO: Other move types\\n            if (_effects[i].effect == BCEvents.EffectTypes.moveType) {\\n                if (_effects[i].value == uint(BCEvents.MovePlayer.REACTOR)) {\\n                    (uint row, uint col) = maps.extGetMainReactorCoords(_mapId);\\n                    // This is roundabout, but have the games contract move the player to discover the room\\n                    games.extMovePlayer(\\n                        _gameId,\\n                        BCTypes.Position(uint8(row), uint8(col)),\\n                        _playerId\\n                    );\\n                }\\n            }\\n\\n            if (\\n                _effects[i].effect == BCEvents.EffectTypes.trapPlayerEscapeRoll\\n            ) {\\n                // TODO\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.grantAbility) {\\n                // TODO\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.lockDoorStrength) {\\n                // maps.lockDownRoom(_mapId, _position.row, _position.col, _effect.lockDoorStrength);\\n                // Function above removed because of contract size.  Can refactor after removing debug mapgen\\n                for (uint k = 0; k < 4; k++) {\\n                    BCTypes.Door memory currentDoor = maps.getDoor(\\n                        _mapId,\\n                        _position.row,\\n                        _position.col,\\n                        k\\n                    );\\n                    if (\\n                        currentDoor.status == BCTypes.DoorStatus.CLOSED ||\\n                        currentDoor.status == BCTypes.DoorStatus.OPEN ||\\n                        currentDoor.status == BCTypes.DoorStatus.BREACHED\\n                    ) {\\n                        maps.setDoorFromPos(\\n                            _mapId,\\n                            _position.row,\\n                            _position.col,\\n                            k,\\n                            BCTypes.DoorStatus.CLOSED,\\n                            _effects[i].value\\n                        );\\n                    }\\n                }\\n            }\\n\\n            if (_effects[i].effect == BCEvents.EffectTypes.loseTurn) {\\n                // TODO\\n            }\\n\\n            // TODO: Handle trait modifiers\\n        }\\n    }\\n\\n    // Choose which effect to apply then apply it to resolve the event\\n    function extChooseEffect(\\n        uint _choice,\\n        uint _eventPlayerId,\\n        uint _gameId,\\n        uint _mapId,\\n        BCTypes.Position memory _position,\\n        uint _eventNumber,\\n        BCTypes.BCEventType _eventType\\n    ) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        BCEvents.BCEvent memory currentEvent;\\n\\n        if (_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcEvents.extGetRoomEvent(_eventNumber);\\n        } else {\\n            currentEvent = bcEvents.extGetCardEvent(_eventNumber, _eventType);\\n        }\\n        // TODO: Revisit this, should probably be picking an effect then fetching just that one\\n        BCEvents.Effect[][] memory currentEffects = bcEvents.extGetEffects(\\n            _eventType,\\n            _eventNumber\\n        );\\n        // TODO: Could always roll and skip this first level of if\\n        if (currentEvent.rollForLow == 0 && currentEvent.rollForHigh == 0) {\\n            // No rolls means defaultEffect happens automatically\\n            _applyEffect(\\n                _eventPlayerId,\\n                _gameId,\\n                _mapId,\\n                _position,\\n                currentEffects[0]\\n            );\\n            emit EventResolvedEvent(\\n                _gameId,\\n                _eventPlayerId,\\n                currentEvent,\\n                currentEffects[0]\\n            );\\n            gameToEventBlocks[_gameId].add(block.number);\\n        } else {\\n            uint roll = roll(_gameId);\\n            if (\\n                currentEvent.rollForLow != 0 && roll <= currentEvent.rollForLow\\n            ) {\\n                // Rolled for lowEffect\\n                _applyEffect(\\n                    _eventPlayerId,\\n                    _gameId,\\n                    _mapId,\\n                    _position,\\n                    currentEffects[1]\\n                );\\n                emit EventResolvedEvent(\\n                    _gameId,\\n                    _eventPlayerId,\\n                    currentEvent,\\n                    currentEffects[1]\\n                );\\n                gameToEventBlocks[_gameId].add(block.number);\\n            } else if (\\n                currentEvent.rollForHigh != 0 &&\\n                roll >= currentEvent.rollForHigh\\n            ) {\\n                // Rolled for highEffect\\n                _applyEffect(\\n                    _eventPlayerId,\\n                    _gameId,\\n                    _mapId,\\n                    _position,\\n                    currentEffects[2]\\n                );\\n                emit EventResolvedEvent(\\n                    _gameId,\\n                    _eventPlayerId,\\n                    currentEvent,\\n                    currentEffects[2]\\n                );\\n            } else {\\n                // Do the default anyway\\n                _applyEffect(\\n                    _eventPlayerId,\\n                    _gameId,\\n                    _mapId,\\n                    _position,\\n                    currentEffects[0]\\n                );\\n                emit EventResolvedEvent(\\n                    _gameId,\\n                    _eventPlayerId,\\n                    currentEvent,\\n                    currentEffects[0]\\n                );\\n                gameToEventBlocks[_gameId].add(block.number);\\n            }\\n        }\\n    }\\n\\n    function extMovePlayer(\\n        BCTypes.Position memory _position,\\n        uint _playerId,\\n        uint _mapId\\n    ) public returns (bool) {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        // TODO: Require move to ship tile?\\n        players[_playerId].lastPos = players[_playerId].position;\\n        players[_playerId].position = _position;\\n\\n        // Kill the player if they are in space\\n        if (\\n            maps.extGetGameTile(_mapId, _position.row, _position.col).roomId ==\\n            SPACE_ROOM\\n        ) {\\n            _respawnPlayer(_playerId);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function incrementNumItemsHeld(uint _playerId, uint _num) public {\\n        players[_playerId].numItemsHeld += uint8(_num);\\n    }\\n\\n    function decrementNumItemsHeld(uint _playerId, uint _num) public {\\n        players[_playerId].numItemsHeld -= uint8(_num);\\n    }\\n\\n    function resetPlayerActions(uint _playerId) public {\\n        require(msg.sender == address(games));\\n        players[_playerId].actionsTaken = 0;\\n    }\\n\\n    function incrementPlayerActions(uint _playerId) public {\\n        require(msg.sender == address(games));\\n        players[_playerId].actionsTaken++;\\n    }\\n\\n    function applyHazardDamage(uint _mapId, uint[] memory _players) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n\\n        for (uint i = 0; i <= _players.length - 1; i++) {\\n            BCTypes.Player storage currentPlayer = players[_players[i]];\\n            BCTypes.GameTile memory currentGameTile = maps.extGetGameTile(\\n                _mapId,\\n                currentPlayer.position.row,\\n                currentPlayer.position.col\\n            );\\n\\n            if (currentGameTile.hasHazard) {\\n                _hurtPlayer(_players[i], 1, true); // TODO: Hardcoded\\n            }\\n        }\\n    }\\n\\n    // TODO: Why do I need this here, but I can get chars from the automatic getter?\\n    function extGetPlayer(\\n        uint _id\\n    ) public view returns (BCTypes.Player memory) {\\n        return players[_id];\\n    }\\n\\n    function extGetPlayerOwner(uint _id) public view returns (address) {\\n        return players[_id].owner;\\n    }\\n\\n    function extGetActionsTaken(uint _id) public view returns (uint) {\\n        return players[_id].actionsTaken;\\n    }\\n}\\n\",\"keccak256\":\"0xae6b3870466eaecc5cd82237df9de87b2f456238236e2bc7c40cbbc5a1f9833a\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n    // From BCGames.sol\\n    enum DoorStatus {\\n        NO_DOOR,\\n        CLOSED,\\n        OPEN,\\n        BREACHED,\\n        WINDOW\\n    }\\n    enum Action {\\n        HACK,\\n        BREACH,\\n        MOVE,\\n        PASS,\\n        LOOT,\\n        USE_ROOM,\\n        USE_ITEM,\\n        DROP_ITEMS,\\n        PICK_ITEMS,\\n        LEAVE_GAME,\\n        MELEE_ATTACK,\\n        SHOOT_ATTACK,\\n        LOOT_DENIZEN\\n    } // TODO: Add rest\\n    enum Followthrough {\\n        NONE,\\n        MOVE\\n    }\\n    enum BCEventType {\\n        NONE,\\n        BUG,\\n        MYSTERY,\\n        SCAVENGER,\\n        SHIP_SECURITY,\\n        ROOM // TODO: Is this still useful\\n    }\\n    enum WorldItemStatus {\\n        DESTROYED,\\n        HELD,\\n        ON_GROUND,\\n        DISCARDED,\\n        OUT_OF_GAME\\n    }\\n\\n    enum ItemCategory {\\n        COMPANY,\\n        ARTIFACT,\\n        SCAVENGER\\n    }\\n    enum ItemType {\\n        CONSUMABLE,\\n        HEALTH,\\n        CARRY,\\n        DEFENSE,\\n        HACK,\\n        BREACH,\\n        HAZARD,\\n        ARMOR,\\n        RANGED,\\n        MELEE,\\n        SPECIAL\\n    }\\n\\n    enum DenizenType {\\n        NONE,\\n        BUG,\\n        SCAV,\\n        TURRET,\\n        ROBOT,\\n        QUEEN,\\n        BUTCHER,\\n        BEHEMOTH,\\n        DOCTOR\\n    }\\n\\n    // WARNING: At stack limit\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n        uint id; // playerId;\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n        Position position;\\n        Position lastPos;\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken; // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n        uint8 dataTokens; // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n        // Flags\\n        // bool canHarmOthers; // Need stack space\\n        bool dead;\\n        // bool hasGun;\\n        // bool hasEgg; // Need stack space\\n\\n        uint gameId;\\n    }\\n\\n    struct Denizen {\\n        uint id;\\n        uint gameId;\\n        DenizenType denizenType; // Traits are derived from type. //TODO: rename to type\\n        Position position;\\n        uint healthRemaining; // Denizen is dead if this is zero\\n        bool looted;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n        uint[4] doors; // n, s, e, w // TODO: Make an enum for this.  Also,, this should be named doorIds\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n        // Row, Col => GameTile\\n        mapping(uint => mapping(uint => GameTile)) board;\\n        mapping(uint => Door) doors;\\n        uint8 numDoors;\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n        bool denizenTurn;\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        uint turnsTaken;\\n        EventTracker eventTracker;\\n        // address mapContract;\\n        uint mapId;\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n        uint DEBUG_returnAmount;\\n        BCTypes.Denizen[] denizens;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n        uint8 numItems;\\n        uint8 numData;\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n        // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n        bool hasGun;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber; // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame;\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n        uint weight;\\n        ItemCategory itemCategory;\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n        ItemType itemType;\\n        uint8 power; // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n        WorldItemStatus status;\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0x477323252e35faa4f9c657bcd1dc9ffb87c487d2c2e5c7c0e8508c55059df5d7\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    uint constant DEFAULT_ROLL_RES = 3; // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    mapping(uint256 => EnumerableSet.UintSet) gameToEventBlocks;\\n\\n    function smallIntBetweenVals(\\n        uint8 _min,\\n        uint8 _max\\n    ) public returns (uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    msg.sender,\\n                    TODO_randomSeed,\\n                    blockhash(block.number - 1)\\n                )\\n            )\\n        );\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns (uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return (\\n            keccak256(\\n                abi.encodePacked(\\n                    TODO_randomSeed,\\n                    blockhash(block.number - 1),\\n                    msg.sender\\n                )\\n            )\\n        );\\n    }\\n\\n    function abs(int x) public pure returns (int) {\\n        // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(\\n        uint _min,\\n        uint _max,\\n        uint _val,\\n        uint _valMax\\n    ) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = (adjustedMax * _val) / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(\\n        bytes32 _hash,\\n        uint256 _size,\\n        uint256 _offset\\n    ) public pure returns (uint8) {\\n        bytes32 mask = bytes32((2 ** _size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(\\n        uint _traitNum,\\n        uint _subTraitNum\\n    ) public pure returns (uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(\\n        BCTypes.Position memory _firstRoom,\\n        BCTypes.Position memory _secondRoom\\n    ) public pure returns (uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(\\n        uint _direction,\\n        BCTypes.Position memory _start\\n    ) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row - 1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row + 1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col + 1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col - 1);\\n        }\\n        string memory message = string.concat(\\n            \\\"Invalid direction: \\\",\\n            Strings.toString(_direction)\\n        );\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(\\n        uint _gameId,\\n        uint _for,\\n        uint _against\\n    ) public returns (bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if (_direction == 0) {\\n            return 1;\\n        }\\n        if (_direction == 1) {\\n            return 0;\\n        }\\n        if (_direction == 2) {\\n            return 3;\\n        }\\n        if (_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n\\n    function manhattanDistance(\\n        BCTypes.Position memory _pos1,\\n        BCTypes.Position memory _pos2\\n    ) public pure returns (uint) {\\n        uint row = uint(abs(int(int8(_pos1.row)) - int(int8(_pos2.row))));\\n        uint col = uint(abs(int(int8(_pos1.col)) - int(int8(_pos2.col))));\\n        return row + col;\\n    }\\n\\n    function getEventBlocks(uint _gameId) public view returns (uint[] memory) {\\n        return gameToEventBlocks[_gameId].values();\\n    }\\n}\\n\",\"keccak256\":\"0x2d46431e29668b3c032cad26d21875d590d63c532d5a752475af7725b9197ccd\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9026,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9031,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "gameToEventBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2262_storage)"
      },
      {
        "astId": 6921,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "chars",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(CharInterface)6709"
      },
      {
        "astId": 6924,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "maps",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MapInterface)6842"
      },
      {
        "astId": 6927,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "bcEvents",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(EventsInterface)6687"
      },
      {
        "astId": 6930,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "items",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ItemsInterface)6887"
      },
      {
        "astId": 6933,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "games",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(GamesInterface)6910"
      },
      {
        "astId": 6935,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "lobbiesAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6937,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "charsAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6939,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7013,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "StartLocation",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Position)8802_storage"
      },
      {
        "astId": 7017,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "players",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Player)8773_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Player)8773_storage)dyn_storage": {
        "base": "t_struct(Player)8773_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Player[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CharInterface)6709": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(EventsInterface)6687": {
        "encoding": "inplace",
        "label": "contract EventsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(GamesInterface)6910": {
        "encoding": "inplace",
        "label": "contract GamesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)6887": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)6842": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(UintSet)2262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2262_storage"
      },
      "t_struct(Player)8773_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Player",
        "members": [
          {
            "astId": 8742,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8744,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "characterId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8746,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8749,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "currentTraits",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Traits)8940_storage"
          },
          {
            "astId": 8752,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "position",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Position)8802_storage"
          },
          {
            "astId": 8755,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "lastPos",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Position)8802_storage"
          },
          {
            "astId": 8757,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "healthDmgTaken",
            "offset": 0,
            "slot": "6",
            "type": "t_int8"
          },
          {
            "astId": 8759,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "armorDmgTaken",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 8761,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "actionsTaken",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 8763,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "dataTokens",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 8766,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "currentEffects",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 8768,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "numItemsHeld",
            "offset": 0,
            "slot": "8",
            "type": "t_uint8"
          },
          {
            "astId": 8770,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "dead",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 8772,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "gameId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Position)8802_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 8799,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8801,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)1804_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1799,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1803,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Traits)8940_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Traits",
        "members": [
          {
            "astId": 8925,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 8927,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "carry",
            "offset": 1,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 8929,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "defense",
            "offset": 2,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 8931,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "hack",
            "offset": 3,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 8933,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "breach",
            "offset": 4,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 8935,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "shoot",
            "offset": 5,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 8937,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "melee",
            "offset": 6,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 8939,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "hasGun",
            "offset": 7,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)2262_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2261,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1804_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}