{
  "address": "0xC7b154D89F5b2Fb34e9c86e22D1EeE476DC38350",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "rollForLow",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "rollForHigh",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "enum BCEvents.EffectTypes",
                  "name": "effect",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BCEvents.Effect[]",
              "name": "defaultEffect",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum BCEvents.EffectTypes",
                  "name": "effect",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BCEvents.Effect[]",
              "name": "lowEffect",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum BCEvents.EffectTypes",
                  "name": "effect",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BCEvents.Effect[]",
              "name": "highEffect",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct BCEvents.BCEvent",
          "name": "bcEvent",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum BCEvents.EffectTypes",
              "name": "effect",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct BCEvents.Effect[]",
          "name": "bcEffects",
          "type": "tuple[]"
        }
      ],
      "name": "EventResolvedEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "StartLocation",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "row",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "col",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_charId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_players",
          "type": "uint256[]"
        }
      ],
      "name": "applyHazardDamage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bcEvents",
      "outputs": [
        {
          "internalType": "contract EventsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_effectNum",
          "type": "uint256"
        }
      ],
      "name": "extApplyEffect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_eventPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_eventNumber",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "_eventType",
          "type": "uint8"
        }
      ],
      "name": "extChooseEffect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "charContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "int8",
              "name": "healthDmgTaken",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "inventoryIDs",
              "type": "uint8[]"
            },
            {
              "internalType": "bool",
              "name": "canHarmOthers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasEgg",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "extGetPlayerOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hazard",
          "type": "bool"
        }
      ],
      "name": "extHurtPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extMovePlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "games",
      "outputs": [
        {
          "internalType": "contract GamesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_amount",
          "type": "uint8"
        }
      ],
      "name": "grantDataToPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "incrementPlayerActions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "charContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "position",
          "type": "tuple"
        },
        {
          "internalType": "int8",
          "name": "healthDmgTaken",
          "type": "int8"
        },
        {
          "internalType": "uint8",
          "name": "armorDmgTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "actionsTaken",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "dataTokens",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "canHarmOthers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "dead",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasEgg",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "resetPlayerActions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lobbiesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eventsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gamesAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ac24c0a4f8651aa0ff5c0cb0f763eb5668012c77c6b1f21b501c0f1fdf96201",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xC7b154D89F5b2Fb34e9c86e22D1EeE476DC38350",
    "transactionIndex": 1,
    "gasUsed": "2677158",
    "logsBloom": "0x
    "blockHash": "0x35fe37460168688efc618ff4d17a2dd5bf34e17e608fa236bed5622e693e08f2",
    "transactionHash": "0x1ac24c0a4f8651aa0ff5c0cb0f763eb5668012c77c6b1f21b501c0f1fdf96201",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30390365,
        "transactionHash": "0x1ac24c0a4f8651aa0ff5c0cb0f763eb5668012c77c6b1f21b501c0f1fdf96201",
        "address": "0xC7b154D89F5b2Fb34e9c86e22D1EeE476DC38350",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x35fe37460168688efc618ff4d17a2dd5bf34e17e608fa236bed5622e693e08f2"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30390365,
        "transactionHash": "0x1ac24c0a4f8651aa0ff5c0cb0f763eb5668012c77c6b1f21b501c0f1fdf96201",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001a27de2f64aa7a0000000000000000000000000000000000000000000000001b8107d9c647057d0000000000000000000000000000000000000000000018b32f3e68e4bc2b423a0000000000000000000000000000000000000000000000001b66dffb96e25b030000000000000000000000000000000000000000000018b32f5890c2eb8fecb4",
        "logIndex": 3,
        "blockHash": "0x35fe37460168688efc618ff4d17a2dd5bf34e17e608fa236bed5622e693e08f2"
      }
    ],
    "blockNumber": 30390365,
    "cumulativeGasUsed": "2698158",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "927b54aab0ea7258e06983ba7a51e557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"rollForLow\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rollForHigh\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"defaultEffect\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"lowEffect\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"highEffect\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct BCEvents.BCEvent\",\"name\":\"bcEvent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum BCEvents.EffectTypes\",\"name\":\"effect\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BCEvents.Effect[]\",\"name\":\"bcEffects\",\"type\":\"tuple[]\"}],\"name\":\"EventResolvedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StartLocation\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_charId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_players\",\"type\":\"uint256[]\"}],\"name\":\"applyHazardDamage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcEvents\",\"outputs\":[{\"internalType\":\"contract EventsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_effectNum\",\"type\":\"uint256\"}],\"name\":\"extApplyEffect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"_eventType\",\"type\":\"uint8\"}],\"name\":\"extChooseEffect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"int8\",\"name\":\"healthDmgTaken\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"inventoryIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasEgg\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extGetPlayerOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hazard\",\"type\":\"bool\"}],\"name\":\"extHurtPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extMovePlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GamesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"}],\"name\":\"grantDataToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"incrementPlayerActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"int8\",\"name\":\"healthDmgTaken\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasEgg\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"resetPlayerActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lobbiesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eventsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gamesAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCPlayers.sol\":\"BCPlayers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BCEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// Stores information for events that happen in a specific room or from a card\\n\\ncontract BCEvents is Ownable {\\n\\n    enum EnemyPlacement { NONE, IN_ROOM, LAST_ROOM, ALL_ADJACENT }\\n    enum MovePlayer { NONE, HOME, LAST_ROOM, RANDOM, PORTAL, REACTOR }\\n    enum EnemyType { NONE, TURRET, ROBOT, SCAV, BUG }\\n    // ENEMY Types: 0 - turret, 1 - robot, 2 - scav, 3 - bug\\n\\n    enum EffectTypes {\\n        empty,\\n\\n        permanant,\\n        fullHealth,\\n        instantDeath,\\n        placeHazard,\\n        grantEgg,\\n\\n        healAmt,\\n        healArmorAmt,\\n        hazardDamage,\\n        physicalDamage,\\n\\n        numEnemyToPlace,\\n        enemyType,\\n        whereToPlace,\\n\\n        grantData,\\n        grantNumItems,\\n        takeNumItems,\\n        dropNumItems, // drop items in the room in unknown state\\n\\n        moveType,\\n        trapPlayerEscapeRoll,\\n        grantAbility,\\n\\n        loseTurn,\\n\\n        lockDoorStrength,\\n\\n        traitModifiersID\\n    }\\n\\n    // Effects are mapped by the effect type to an int:\\n    // CRITICAL:  1 == true, not present is false\\n    // Numbers are cast to enum as above\\n    // Uint effects are as normal\\n\\n    struct Effect {\\n        EffectTypes effect;\\n        uint value;\\n    }\\n\\n    struct BCEvent {\\n        // TODO: Only a one-time cost to put this here, probably leave for ease\\n        // TODO: Except there is probably a cost to read it from the chain, remove\\n        // TODO: and replace name and text with a unique ID\\n        // string name;\\n        // string text;\\n        uint id; // TODO: Eval system, for now 1000NN is for cards and 2000NN is for tiles\\n        // TODO: Change below to a number to serve as turns allowed?\\n        bool permanent; // Draw card before use allowed.  As an action - both can be derived from this\\n        uint8 rollForLow;  // On or below (unused if zero)\\n        uint8 rollForHigh; // On or above (unused if zero)\\n                           // If both roll items are zero, player can choose any non\\n        Effect[] defaultEffect;  // TODO: Eval doing it this way vs. using index and storing in array\\n        Effect[] lowEffect;\\n        Effect[] highEffect;\\n    }\\n\\n    Effect[][] public effectsList; // Used to support creating empty Effects // TODO: Is this the best pattern?\\n\\n    BCEvent[] public bcRoomEvents;\\n\\n    BCEvent[] public bcBugCardEvents;\\n    BCEvent[] public bcMysteryCardEvents;\\n    BCEvent[] public bcScavCardEvents;\\n    BCEvent[] public bcShipCardEvents;\\n\\n    constructor() {\\n        effectsList.push(); // Push empty effect into [0], but this is probably unnecessary\\n        _initializeDefaultRoomEvents();\\n        _initializeDefaultRoomEvents_2();\\n        _initializeDefaultBugCardEvents();\\n    }\\n\\n    function extGetRoomEvent(uint _id) public view returns (BCEvent memory) {\\n        return bcRoomEvents[_id];\\n    }\\n\\n    function extGetCardEvent(uint _id, BCTypes.BCEventType _type) public view returns (BCEvent memory) {\\n        if(_type == BCTypes.BCEventType.BUG) {\\n            return bcBugCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.MYSTERY) {\\n            return bcMysteryCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SCAVENGER) {\\n            return bcScavCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SHIP_SECURITY) {\\n            return bcShipCardEvents[_id];\\n        } else {\\n            revert(\\\"Bad event type\\\");\\n        }\\n    }\\n\\n    function extGetEffects(BCTypes.BCEventType _eventType, uint _id) public view returns (Effect[][] memory) {\\n        // TODO: Hardcoded length??\\n        Effect[][] memory currentEffects = new Effect[][](3);\\n        BCEvent storage currentEvent;\\n        if(_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcRoomEvents[_id];\\n        } else {\\n            if(_eventType == BCTypes.BCEventType.BUG) {\\n                currentEvent = bcBugCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.MYSTERY) {\\n                currentEvent = bcMysteryCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SCAVENGER) {\\n                currentEvent = bcScavCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                currentEvent = bcShipCardEvents[_id];\\n            } else {\\n                revert(\\\"Bad event type\\\");\\n            }\\n        }\\n\\n        currentEffects[0] = currentEvent.defaultEffect;\\n        // TODO: This is ineffecient if most effects don't have all three\\n        currentEffects[1] = currentEvent.lowEffect;\\n        currentEffects[2] = currentEvent.highEffect;\\n\\n        return currentEffects;\\n    }\\n\\n    // TODO: REFACTOR WHEN TRAIT MOD SYSTEM IMPLEMENTED!!!\\n    // For _effect 0 -> default, 1 -> low, 2-> high\\n    // function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) public view returns (BCTypes.Traits memory) {\\n    //     BCEvent storage currentEvent;\\n    //     if(_roomEvent) {\\n    //         currentEvent = bcRoomEvents[_id];\\n    //     } else {\\n    //         currentEvent = bcCardEvents[_id];\\n    //     }\\n\\n    //     if(_effect == 0) {\\n    //         return currentEvent.defaultEffect.traitModifiers;\\n    //     } else if (_effect == 1) {\\n    //         return currentEvent.lowEffect.traitModifiers;\\n    //     } else if (_effect == 2) {\\n    //         return currentEvent.highEffect.traitModifiers;\\n    //     } else {\\n    //         revert (\\\"Effect must be 0, 1, or 2\\\");\\n    //     }\\n    // }\\n\\n    function _initializeDefaultBugCardEvents() internal {\\n        // Effect[] storage emptyEffect = effectsList[0];\\n\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcBugCardEvents.push();\\n        noEvent.id = 0;\\n        // noEvent.permanent = false;\\n        // noEvent.rollForLow = 0;\\n        // noEvent.rollForHigh = 0;\\n\\n        // noEvent.defaultEffect = emptyEffect;\\n        // noEvent.lowEffect = emptyEffect;\\n        // noEvent.highEffect = emptyEffect;\\n\\n        // 1 There's Something in the Walls\\n        // TODO\\n        Effect[] storage somethingInWallsDefault = effectsList.push();\\n        somethingInWallsDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        somethingInWallsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        somethingInWallsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage somethingInWalls = bcBugCardEvents.push();\\n        somethingInWalls.id = 300001; // Bug events start with 3\\n        somethingInWalls.permanent = false;\\n        // somethingInWalls.rollForLow = 0;\\n        // somethingInWalls.rollForHigh = 0; //TODO: Can save gas/space not doing this, but less explicit\\n\\n        somethingInWalls.defaultEffect = somethingInWallsDefault;\\n        // somethingInWalls.lowEffect = emptyEffect;\\n        // somethingInWalls.highEffect = emptyEffect;\\n\\n        // 2 Something Bit Me\\n        Effect[] storage somethingBitMeDefault = effectsList.push();\\n        somethingBitMeDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n\\n        BCEvent storage somethingBitMe = bcBugCardEvents.push();\\n        somethingBitMe.id = 300002;\\n        somethingBitMe.permanent = false;\\n        // somethingBitMe.rollForLow = 0;\\n        // somethingBitMe.rollForHigh = 0;\\n\\n        somethingBitMe.defaultEffect = somethingBitMeDefault;\\n        // somethingBitMe.lowEffect = emptyEffect;\\n        // somethingBitMe.highEffect = emptyEffect;\\n\\n        // 3 Game Over Man, Game Over!\\n        // TODO\\n        Effect[] storage gameOverDefault = effectsList.push();\\n        gameOverDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage gameOver = bcBugCardEvents.push();\\n        gameOver.id = 300003;\\n        gameOver.permanent = false;\\n        // gameOver.rollForLow = 0;\\n        // gameOver.rollForHigh = 0;\\n\\n        gameOver.defaultEffect = gameOverDefault;\\n        // gameOver.lowEffect = emptyEffect;\\n        // gameOver.highEffect = emptyEffect;\\n\\n        // 4 Packrat\\n        Effect[] storage packratDefault = effectsList.push();\\n        packratDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage packrat = bcBugCardEvents.push();\\n        packrat.id = 300004;\\n        packrat.permanent = false;\\n        // packrat.rollForLow = 0;\\n        // packrat.rollForHigh = 0;\\n\\n        packrat.defaultEffect = packratDefault;\\n        // packrat.lowEffect = emptyEffect;\\n        // packrat.highEffect = emptyEffect;\\n\\n        // 5 What is this stuff?\\n        // TODO\\n        Effect[] storage whatIsThisDefault = effectsList.push();\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: Ignored by bugs\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: -1 to all rolls\\n\\n        BCEvent storage whatIsThis = bcBugCardEvents.push();\\n        whatIsThis.id = 300005;\\n        whatIsThis.permanent = false;\\n        // whatIsThis.rollForLow = 0;\\n        // whatIsThis.rollForHigh = 0;\\n\\n        whatIsThis.defaultEffect = whatIsThisDefault;\\n\\n        // 6 Packrat Nest\\n        // TODO\\n        Effect[] storage packratNestDefault = effectsList.push();\\n        packratNestDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage packratNest = bcBugCardEvents.push();\\n        packratNest.id = 300006;\\n        packratNest.permanent = false;\\n\\n        packratNest.defaultEffect = packratNestDefault;\\n\\n        // 7 Clever Girls\\n        // TODO\\n        Effect[] storage cleverGirlsDefault = effectsList.push();\\n        cleverGirlsDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        cleverGirlsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        cleverGirlsDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM)));\\n\\n        BCEvent storage cleverGirls = bcBugCardEvents.push();\\n        cleverGirls.id = 300007;\\n\\n        cleverGirls.defaultEffect = cleverGirlsDefault;\\n\\n        // 8 Warrior\\n        // TODO\\n        Effect[] storage warriorDefault = effectsList.push();\\n        warriorDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        warriorDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        warriorDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage warrior = bcBugCardEvents.push();\\n        warrior.id = 300008;\\n\\n        warrior.defaultEffect = warriorDefault;\\n\\n        // 9 Good Girl\\n        // TODO\\n        Effect[] storage goodGirlDefault = effectsList.push();\\n        goodGirlDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage goodGirl = bcBugCardEvents.push();\\n        goodGirl.id = 300009;\\n\\n        goodGirl.defaultEffect = goodGirlDefault;\\n\\n        // 10 What's that Smell?\\n        Effect[] storage whatsThatSmellDefault = effectsList.push();\\n        whatsThatSmellDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        whatsThatSmellDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage whatsThatSmell = bcBugCardEvents.push();\\n        whatsThatSmell.id = 300010;\\n\\n        whatsThatSmell.defaultEffect = whatsThatSmellDefault;\\n\\n        // 11 Spider's Web\\n        // TODO\\n        Effect[] storage spidersWebDefault = effectsList.push();\\n        spidersWebDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        spidersWebDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage spidersWebLow = effectsList.push();\\n        spidersWebLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        spidersWebLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage spidersWebHigh = effectsList.push();\\n        spidersWebHigh.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage spidersWeb = bcBugCardEvents.push();\\n        spidersWeb.id = 300011;\\n        spidersWeb.rollForLow = 1;\\n        spidersWeb.rollForHigh = 6;\\n\\n        spidersWeb.defaultEffect = spidersWebDefault;\\n        spidersWeb.lowEffect = spidersWebLow;\\n        spidersWeb.highEffect = spidersWebHigh;\\n\\n        // 12 Something is following me...\\n        // TODO\\n        Effect[] storage followingMeDefault = effectsList.push();\\n        followingMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        followingMeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        followingMeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM)));\\n\\n        BCEvent storage followingMe = bcBugCardEvents.push();\\n        followingMe.id = 300012;\\n\\n        followingMe.defaultEffect = followingMeDefault;\\n\\n        // 13 Sneak Attack\\n        Effect[] storage sneakAttackDefault = effectsList.push();\\n        sneakAttackDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        sneakAttackDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        sneakAttackDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage sneakAttack = bcBugCardEvents.push();\\n        sneakAttack.id = 300013;\\n\\n        sneakAttack.defaultEffect = sneakAttackDefault;\\n\\n        // 14 Feeding Time\\n        // TODO\\n        Effect[] storage feedingTimeDefault = effectsList.push();\\n        feedingTimeDefault.push(Effect(EffectTypes.dropNumItems, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        feedingTimeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage feedingTime = bcBugCardEvents.push();\\n        feedingTime.id = 100015;\\n\\n        feedingTime.defaultEffect = feedingTimeDefault;\\n    }\\n\\n    function _initializeDefaultRoomEvents() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcRoomEvents.push();\\n        noEvent.id = 0;\\n        noEvent.permanent = false;\\n        noEvent.rollForLow = 0;\\n        noEvent.rollForHigh = 0;\\n\\n        noEvent.defaultEffect = emptyEffect;\\n        noEvent.lowEffect = emptyEffect;\\n        noEvent.highEffect = emptyEffect;\\n\\n        // 1 Breached Reactor\\n        // Done\\n        Effect[] storage breachedReactorDefault = effectsList.push();\\n        breachedReactorDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        breachedReactorDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        BCEvent storage breachedReactor = bcRoomEvents.push();\\n        breachedReactor.id = 200001;\\n        breachedReactor.permanent = false;\\n        breachedReactor.rollForLow = 0;\\n        breachedReactor.rollForHigh = 0;\\n\\n        breachedReactor.defaultEffect = breachedReactorDefault;\\n        breachedReactor.lowEffect = emptyEffect;\\n        breachedReactor.highEffect = emptyEffect;\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Breached Reactor\\\",\\n    //         // \\\"As you enter the room, the reactor explodes!  Take 1 hazard damage.\\\",\\n    //         200001,\\n    //         false,\\n    //         0,\\n    //         0, // TODO:  Explore adding choices to these ones\\n    //         breachedReactorDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 2 Bug Nest\\n        // TODO\\n        Effect[] storage bugNestLow = effectsList.push();\\n        bugNestLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        bugNestLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        bugNestLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage bugNestHigh = effectsList.push();\\n        bugNestHigh.push(Effect(EffectTypes.grantEgg, 1)); // TRUE\\n\\n        BCEvent storage bugNest = bcRoomEvents.push();\\n        bugNest.id = 200002;\\n        bugNest.permanent = true; // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n        bugNest.rollForLow = 2;\\n        bugNest.rollForHigh = 6;\\n\\n        bugNest.defaultEffect = emptyEffect;\\n        bugNest.lowEffect = bugNestLow;\\n        bugNest.highEffect = bugNestHigh;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Bug Nest\\\",\\n    //         // \\\"As an action, attempt to harvest an egg.  Roll a die.  On a 6, take an egg token.  On a 1 or 2, take 1 physical damage and place a bug alien in the room.\\\",\\n    //         200002,\\n    //         true,  // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n    //         2,\\n    //         6,\\n    //         emptyEffect,\\n    //         bugNestLow,\\n    //         bugNestHigh\\n    //     ));\\n\\n        // 3 Crossroads\\n        // TODO\\n        Effect[] storage crossroadsDefault = effectsList.push();\\n        crossroadsDefault.push(Effect(EffectTypes.numEnemyToPlace, 3));\\n        crossroadsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        crossroadsDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage crossroads = bcRoomEvents.push();\\n        crossroads.id = 200003;\\n        crossroads.permanent = false;\\n        crossroads.rollForLow = 0;\\n        crossroads.rollForHigh = 0;\\n\\n        crossroads.defaultEffect = crossroadsDefault;\\n        crossroads.lowEffect = emptyEffect;\\n        crossroads.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Crossroads\\\",\\n    //         // \\\"You've crashed a party!  Place 3 scavengers in this room.\\\",\\n    //         200003,\\n    //         false,\\n    //         0,\\n    //         0,\\n\\n    //         crossroadsDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 4 Engineering Catwalk\\n        Effect[] storage catwalkDefault = effectsList.push();\\n        catwalkDefault.push(Effect(EffectTypes.moveType, uint(MovePlayer.REACTOR)));\\n\\n        BCEvent storage catwalk = bcRoomEvents.push();\\n        catwalk.id = 200004;\\n        catwalk.permanent = true;\\n        catwalk.rollForLow = 0;\\n        catwalk.rollForHigh = 0;\\n\\n        catwalk.defaultEffect = catwalkDefault;\\n        catwalk.lowEffect = emptyEffect;\\n        catwalk.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Engineering Catwalk\\\",\\n    //         // \\\"As an action, jump down to the Reactor Room, exploring if unexplored.\\\",\\n    //         200004,\\n    //         true,\\n    //         0,\\n    //         0,\\n    //         catwalkDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 5 Hull Breach\\n        // Done\\n        Effect[] storage hullBreachDefault = effectsList.push();\\n        hullBreachDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n\\n        Effect[] storage hullBreachLow = effectsList.push();\\n        hullBreachLow.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        hullBreachLow.push(Effect(EffectTypes.instantDeath, 1)); // TRUE\\n\\n        BCEvent storage hullBreach = bcRoomEvents.push();\\n        hullBreach.id = 200005;\\n        hullBreach.permanent = false;\\n        hullBreach.rollForLow = 1;\\n        hullBreach.rollForHigh = 0;\\n\\n        hullBreach.defaultEffect = hullBreachDefault;\\n        hullBreach.lowEffect = hullBreachLow;\\n        hullBreach.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Hull Breach\\\",\\n    //         // \\\"As you enter the room, a wall buckles and explodes into space!\\\",\\n    //         200005,\\n    //         false,\\n    //         1,\\n    //         0,\\n\\n    //         hullBreachDefault,\\n    //         hullBreachLow,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 6 Medbay\\n        // TODO: No hostiles in room\\n        // HACK:  Full health + heal amount 1 indicates heal to full health +1\\n        Effect[] storage medbayDefault = effectsList.push();\\n        medbayDefault.push(Effect(EffectTypes.fullHealth, 1)); // TRUE\\n\\n        BCEvent storage medbay = bcRoomEvents.push();\\n        medbay.id = 200006;\\n        medbay.permanent = true;\\n        medbay.rollForLow = 0;\\n        medbay.rollForHigh = 0;\\n\\n        medbay.defaultEffect = medbayDefault;\\n        medbay.lowEffect = emptyEffect;\\n        medbay.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Medbay\\\",\\n    //         // \\\"If there are no hostiles in this room, as an action, return to full health +1\\\",\\n    //         200006,\\n    //         true,\\n    //         0,\\n    //         0,\\n\\n    //         medbayDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n    }\\n\\n    function _initializeDefaultRoomEvents_2() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // 7 Showers\\n        // Done\\n        Effect[] storage showersDefault = effectsList.push();\\n        showersDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage showers = bcRoomEvents.push();\\n        showers.id = 200007;\\n        showers.permanent = false;\\n        showers.rollForLow = 0;\\n        showers.rollForHigh = 0;\\n\\n        showers.defaultEffect = showersDefault;\\n        showers.lowEffect = emptyEffect;\\n        showers.highEffect = emptyEffect;\\n\\n        //     bcRoomEvents.push(BCEvent(\\n        //     // \\\"Showers\\\",\\n        //     // \\\"As you explore this room, a horde of small bugs emerge from the drains.  They get inside your suit, biiting and stinging.  Take 1 hazard damage.\\\",\\n        //     200007,\\n        //     false,\\n        //     0,\\n        //     0,\\n\\n        //     showersDefault,\\n        //     emptyEffect,\\n        //     emptyEffect\\n        // ));\\n\\n        // 8 Trash Compactor\\n        // TODO - Locking doors is done, crushing players and items is not\\n        Effect[] storage trashCompactorDefault = effectsList.push();\\n        trashCompactorDefault.push(Effect(EffectTypes.lockDoorStrength, 4));\\n\\n        BCEvent storage trashCompactor = bcRoomEvents.push();\\n        trashCompactor.id = 200008;\\n        trashCompactor.permanent = false;\\n        trashCompactor.rollForLow = 0;\\n        trashCompactor.rollForHigh = 0;\\n\\n        trashCompactor.defaultEffect = trashCompactorDefault;\\n        trashCompactor.lowEffect = emptyEffect;\\n        trashCompactor.highEffect = emptyEffect;\\n\\n        // bcRoomEvents.push(BCEvent(\\n        //     // \\\"Trash Compactor\\\",\\n        //     // \\\"As you enter, the doors slam shut and the trash compactor comes to life!  In three turns, everything in the room will be destroyed!\\\",\\n        //     200008,\\n        //     false,\\n        //     0,\\n        //     0,\\n\\n        //     trashCompactorDefault,\\n        //     emptyEffect,\\n        //     emptyEffect\\n        // ));\\n    }\\n}\\n\",\"keccak256\":\"0x742108b7dd61977becb4c1c540251ead79d0b526fe29dd3c80e2dc6dc6f0f1f5\",\"license\":\"UNLICENSED\"},\"contracts/BCPlayers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCEvents.sol\\\";\\n// import \\\"./BCMaps.sol\\\";\\n\\ninterface EventsInterface {\\n    function extGetRoomEvent(uint _id) external view returns (BCEvents.BCEvent memory);\\n    function extGetCardEvent(uint _id) external view returns (BCEvents.BCEvent memory);\\n    function extGetEffects(BCTypes.BCEventType _eventType, uint _id) external view returns (BCEvents.Effect[][] memory);\\n    function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) external view returns (BCTypes.Traits memory);\\n}\\n\\ninterface CharInterface {\\n    function characters(uint _id) external view returns(BCTypes.Character memory);\\n    function incrementCloneNumber(uint _charId) external;\\n    function extGetChar(uint _charId) external view returns(BCTypes.Character memory);\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll(uint _gameId) external returns (uint);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n    function debugBuildMapOneRoom(uint _roomId) external returns(uint);\\n    // function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) external view returns (BCTypes.GameTile memory);\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) external view returns (BCTypes.Door memory);\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status, uint _strength) external;\\n    function resetOpenDoors(uint _mapId) external;\\n    function extGetRoom(uint _mapId, uint _row, uint _col) external view returns(BCTypes.RoomTile memory);\\n    function extGetRoomById(uint _mapId, uint _roomId) external view returns (BCTypes.RoomTile memory);\\n    function extSetHazardStatus(uint _mapId, uint _row, uint _col, bool _hasHazard) external;\\n    function extSpreadHazards(uint _mapId, uint _distance) external;\\n    function lockDownRoom(uint _mapId, uint _row, uint _col, uint _strength) external;\\n    function extGetMainReactorCoords(uint _mapId) external view returns (uint, uint);\\n}\\n\\ninterface ItemsInterface {\\n    function getItemIDsByPlayer(uint _playerID) external view returns (uint[] memory);\\n    function destroyItem(uint _itemId) external;\\n}\\n\\ninterface GamesInterface {\\n    // function endPlayerRound(uint _gameId, uint _mapId) external;\\n    function extMovePlayer(uint _gameId, BCTypes.Position memory _position, uint _playerId) external;\\n}\\n\\ncontract BCPlayers is Ownable {\\n    CharInterface public chars;\\n    UtilsInterface public utils;\\n    MapInterface public maps;\\n    EventsInterface public bcEvents;\\n    ItemsInterface public items;\\n    GamesInterface public games;\\n\\n    address public lobbiesAddress;\\n    address public charsAddress;\\n    address public actionsAddress;\\n\\n    // BCChars bcChars;\\n    // Maps bcMaps;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _utilsAddress,\\n        address _mapsAddress,\\n        address _lobbiesAddress,\\n        address _actionsAddress,\\n        address _eventsAddress,\\n        address _itemsAddress,\\n        address _gamesAddress)\\n        public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        // bcChars = BCChars(_charAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        maps = MapInterface(_mapsAddress);\\n        // bcMaps = Maps(_mapsAddress);\\n        lobbiesAddress = _lobbiesAddress;\\n        actionsAddress = _actionsAddress;\\n        bcEvents = EventsInterface(_eventsAddress);\\n        items = ItemsInterface(_itemsAddress);\\n        games = GamesInterface(_gamesAddress);\\n    }\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3;\\n\\n    uint8 constant SPACE_ROOM = 0;\\n\\n    BCTypes.Position public StartLocation = BCTypes.Position(10, 6); // TODO: duped on maps\\n\\n    BCTypes.Player[] public players;\\n\\n    event EventResolvedEvent(uint gameId, uint playerId, BCEvents.BCEvent bcEvent, BCEvents.Effect[] bcEffects);\\n\\n    constructor() {\\n        // TODO: CRITICAL!!! BURN PLAYER 0\\n    }\\n\\n    function addPlayer(address _charContractAddress, uint _charId, address _owner) external returns (uint) {\\n        // TODO: CRITICAL -> Add tests to confirm require works\\n        // TODO: Decide on allowing more than one valid contract for chars (etc.)\\n        require(msg.sender == lobbiesAddress, \\\"Not lobby contract\\\");\\n\\n        BCTypes.Player storage newPlayer = players.push();\\n        newPlayer.charContractAddress = _charContractAddress;\\n        newPlayer.owner = _owner;\\n        newPlayer.characterId = _charId;\\n        return uint(players.length-1);\\n    }\\n\\n    function grantDataToPlayer(uint _playerId, uint8 _amount) public {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract\\\");\\n        players[_playerId].dataTokens += _amount;\\n\\n\\n        // TODO: Event\\n    }\\n\\n    function extHurtPlayer(uint _playerId, uint _amount, bool _hazard) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        _hurtPlayer(_playerId, _amount, _hazard);\\n    }\\n\\n    function _hurtPlayer(uint _playerId, uint _amount, bool _hazard) internal {\\n        BCTypes.Player storage currentPlayer = players[_playerId];\\n        // TODO: The below worked in games, but not here!?!?!?!\\n        // Or maybe it does?\\n        BCTypes.Character memory currentChar = chars.characters(currentPlayer.characterId);\\n        // BCTypes.Character memory currentChar = chars.extGetChar(currentPlayer.characterId);\\n        // TODO: Handle hazard immunity\\n        // TODO: Handle armor\\n        currentPlayer.healthDmgTaken += int8(uint8(_amount));\\n        if(currentPlayer.healthDmgTaken >= int8(uint8(currentChar.traits.health))) {\\n            _respawnPlayer(_playerId);\\n        }\\n    }\\n\\n    function _respawnPlayer(uint _playerId) internal {\\n        BCTypes.Player storage currentPlayer = players[_playerId];\\n        // players[_playerId].dead = false;\\n        // TODO: Eval making this cost an action.  If so, need to handle 4/3 actions used\\n        // TODO: Drop or destroy items\\n        // TODO: CHARGE FOR THIS!\\n        currentPlayer.healthDmgTaken = 0;\\n        chars.incrementCloneNumber(players[_playerId].characterId);\\n        // TODO: Confirm I don't need any game stuff for moving player because a room won't be\\n        players[_playerId].position = StartLocation;\\n    }\\n\\n    // TODO: Currently this is only used for using a room, consider renaming\\n    function extApplyEffect(uint _playerId, uint _gameId, uint _mapId, BCTypes.Position memory _position, uint _eventId, uint _effectNum) public {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract\\\");\\n        // TODO: Assumes this will always use the default effect\\n        BCEvents.Effect[] memory effect = bcEvents.extGetEffects(BCTypes.BCEventType.ROOM, _eventId)[_effectNum];\\n        _applyEffect(_playerId, _gameId, _mapId, _position, effect);\\n    }\\n\\n    function _applyEffect(uint _playerId, uint _gameId, uint _mapId, BCTypes.Position memory _position, BCEvents.Effect[] memory _effects) internal {\\n        for(uint i = 0; i < _effects.length; i++) {\\n\\n            BCTypes.Player storage currentPlayer = players[_playerId];\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.permanant) {\\n                // TODO\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.fullHealth) {\\n                currentPlayer.healthDmgTaken = 0 - int8(uint8(_effects[i].value));\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.instantDeath) {\\n                _respawnPlayer(_playerId);\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.placeHazard) {\\n                maps.extSetHazardStatus(_mapId, _position.row, _position.col, true);\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.grantEgg) {\\n                // TODO\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.healAmt) {\\n                currentPlayer.healthDmgTaken -= int8(uint8(_effects[i].value));\\n                if(currentPlayer.healthDmgTaken < 0) {\\n                    currentPlayer.healthDmgTaken = 0;\\n                }\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.healArmorAmt) {\\n                // TODO\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.hazardDamage) {\\n                _hurtPlayer(_playerId, _effects[i].value, true);\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.physicalDamage) {\\n                _hurtPlayer(_playerId, _effects[i].value, false);\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.enemyType) {\\n                // TODO\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.grantData) {\\n                grantDataToPlayer(_playerId, uint8(_effects[i].value));\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.grantNumItems) {\\n                // TODO:  This is complicated and will probably need to be two steps\\n                // We won't know when the effect is drawn if the player will get items\\n                // Therefore, we don't know whether or not to require them to pay for items\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.takeNumItems) {\\n                // TODO: CRITICAL -> Ensure complete test coverage\\n                uint remainingToTake = _effects[i].value;\\n                uint[] memory itemIds = items.getItemIDsByPlayer(_playerId);\\n                if(itemIds.length > 0) {\\n                    // Fischer-yates for random order to take\\n                    for (uint j = itemIds.length-1; j > 0; j--) {\\n                        uint8 k = utils.smallIntBetweenVals(0, uint8(j));\\n\\n                        (itemIds[j], itemIds[k]) = (itemIds[k], itemIds[j]);\\n                    }\\n\\n                    for(uint j = 0; i < itemIds.length; j++) {\\n                        items.destroyItem(itemIds[j]);\\n\\n                        remainingToTake--;\\n                        if(remainingToTake == 0){\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            // TODO: Other move types\\n            if(_effects[i].effect == BCEvents.EffectTypes.moveType) {\\n                if (_effects[i].value == uint(BCEvents.MovePlayer.REACTOR)) {\\n                    (uint row, uint col) = maps.extGetMainReactorCoords(_mapId);\\n                    // This is roundabout, but have the games contract move the player to discover the room\\n                    games.extMovePlayer(_gameId, BCTypes.Position(uint8(row), uint8(col)), _playerId);\\n                }\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.trapPlayerEscapeRoll) {\\n                // TODO\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.grantAbility) {\\n                // TODO\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.lockDoorStrength) {\\n                // maps.lockDownRoom(_mapId, _position.row, _position.col, _effect.lockDoorStrength);\\n                // Function above removed because of contract size.  Can refactor after removing debug mapgen\\n                for(uint k = 0; k < 4; k++) {\\n                    BCTypes.Door memory currentDoor = maps.getDoor(_mapId, _position.row, _position.col, k);\\n                    if (currentDoor.status == BCTypes.DoorStatus.CLOSED ||\\n                        currentDoor.status == BCTypes.DoorStatus.OPEN ||\\n                        currentDoor.status == BCTypes.DoorStatus.BREACHED) {\\n                            maps.setDoorFromPos(_mapId, _position.row, _position.col, k, BCTypes.DoorStatus.CLOSED, _effects[i].value);\\n                    }\\n                }\\n            }\\n\\n            if(_effects[i].effect == BCEvents.EffectTypes.loseTurn) {\\n                // TODO\\n            }\\n\\n            // TODO: Handle trait modifiers\\n        }\\n    }\\n\\n    // Choose which effect to apply then apply it to resolve the event\\n    function extChooseEffect(uint _choice, uint _eventPlayerId, uint _gameId, uint _mapId, BCTypes.Position memory _position, uint _eventNumber, BCTypes.BCEventType _eventType) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        BCEvents.BCEvent memory currentEvent;\\n        BCEvents.Effect[] memory currentEffect;\\n        if(_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcEvents.extGetRoomEvent(_eventNumber);\\n        } else {\\n            // TODO:\\n            return;\\n            // currentEvent = bcEvents.extGetCardEvent(_eventNumber);\\n        }\\n        // TODO: Revisit this, should probably be picking an effect then fetching just that one\\n        BCEvents.Effect[][] memory currentEffects = bcEvents.extGetEffects(_eventType, _eventNumber);\\n        // TODO: Could always roll and skip this first level of if\\n        if(currentEvent.rollForLow == 0 && currentEvent.rollForHigh == 0) {\\n            // No rolls means defaultEffect happens automatically\\n            _applyEffect(_eventPlayerId, _gameId, _mapId, _position, currentEffects[0]);\\n        } else {\\n            uint roll = utils.roll(_gameId);\\n            if(currentEvent.rollForLow != 0 && roll <= currentEvent.rollForLow) {\\n                // Rolled for lowEffect\\n                _applyEffect(_eventPlayerId, _gameId, _mapId, _position, currentEffects[1]);\\n            } else if (currentEvent.rollForHigh != 0 && roll >= currentEvent.rollForHigh){\\n                // Rolled for highEffect\\n                _applyEffect(_eventPlayerId, _gameId, _mapId, _position, currentEffects[2]);\\n            } else {\\n                // Do the default anyway\\n                _applyEffect(_eventPlayerId, _gameId, _mapId, _position, currentEffects[0]);\\n            }\\n        }\\n\\n        emit EventResolvedEvent(_gameId, _eventPlayerId, currentEvent, currentEffect);\\n    }\\n\\n    function extMovePlayer(BCTypes.Position memory _position, uint _playerId, uint _mapId) public returns (bool) {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        // TODO: Require move to ship tile?\\n        players[_playerId].position = _position;\\n\\n        // Kill the player if they are in space\\n        if(maps.extGetGameTile(_mapId, _position.row, _position.col).roomId == SPACE_ROOM) {\\n            _respawnPlayer(_playerId);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function resetPlayerActions(uint _playerId) public {\\n        require(msg.sender == address(games));\\n        players[_playerId].actionsTaken = 0;\\n    }\\n\\n    function incrementPlayerActions(uint _playerId) public {\\n        require(msg.sender == address(games));\\n        players[_playerId].actionsTaken++;\\n    }\\n\\n    function applyHazardDamage(uint _mapId, uint[] memory _players) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n\\n        for(uint i = 0; i <= _players.length-1; i++) {\\n            BCTypes.Player storage currentPlayer = players[_players[i]];\\n            BCTypes.GameTile memory currentGameTile = maps.extGetGameTile(_mapId, currentPlayer.position.row, currentPlayer.position.col);\\n\\n            if(currentGameTile.hasHazard) {\\n                _hurtPlayer(_players[i], 1, true); // TODO: Hardcoded\\n            }\\n        }\\n    }\\n\\n    // TODO: Why do I need this here, but I can get chars from the automatic getter?\\n    function extGetPlayer(uint _id) public view returns(BCTypes.Player memory) {\\n        return players[_id];\\n    }\\n\\n    function extGetPlayerOwner(uint _id) public view returns (address) {\\n        return players[_id].owner;\\n    }\\n}\\n\",\"keccak256\":\"0x008444f37285ffdcb975288cbcbca3ffe2f3246f1922051099977a95b6a80672\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY, ROOM}\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // WARNING: THIS IS NOT USED CURRENTLY!!! // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead; // TODO: Probably don't need\\n        bool hasEgg;  // TODO: Eval only allowing one egg at a time\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        // TODO:  Either add all events, effects, and traits here, or remove roomList\\n        // mapping (uint => RoomTile) roomList;\\n        // uint8 numRooms;\\n        uint[] unusedNormalRooms;\\n        // mapping (uint => bool) usedRooms;\\n\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        // uint roomTileId // TODO: Critical\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x4fe80ce36d1a5323256e2f620e31b1eddd8ffcf161aeb332a6dd6ca2d6fffba4\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600a6080819052600660a052805461ffff191661060a17905534801561002957600080fd5b5061003333610038565b610088565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612e9b80620000986000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80637ddae103116100de578063b690719411610097578063dc769ee811610071578063dc769ee814610372578063ed861961146103a2578063f2fde38b146103b5578063f71d96cb146103c857600080fd5b8063b690719414610339578063c06fad061461034c578063ce9322971461035f57600080fd5b80637ddae103146102b95780638d491b3e146102cc5780638da5cb5b146102ef578063921d279914610300578063955a015b146103135780639fca1ee11461032657600080fd5b80635a29638d1161014b578063668a7f3b11610125578063668a7f3b146102785780636d291bbb1461028b578063715018a61461029e5780637b45c0d4146102a657600080fd5b80635a29638d1461023f57806365c363f0146102525780636621a4211461026557600080fd5b806308178b3c146101935780630dd0f588146101b957806310a2cd0d146101ce57806310f67fb3146101f9578063336d7d7b146102195780633deaec2b1461022c575b600080fd5b6101a66101a1366004611f72565b6103f2565b6040519081526020015b60405180910390f35b6101cc6101c7366004611fbc565b610510565b005b6001546101e1906001600160a01b031681565b6040516001600160a01b0390911681526020016101b0565b61020c610207366004611ff5565b61054a565b6040516101b0919061204c565b6007546101e1906001600160a01b031681565b6003546101e1906001600160a01b031681565b6002546101e1906001600160a01b031681565b6101cc610260366004611ff5565b610794565b6101e1610273366004611ff5565b6107ec565b6101cc610286366004612255565b610821565b6101cc610299366004612348565b610976565b6101cc610c9f565b6009546101e1906001600160a01b031681565b6004546101e1906001600160a01b031681565b6102df6102da3660046123b5565b610cb3565b60405190151581526020016101b0565b6000546001600160a01b03166101e1565b6101cc61030e3660046123e9565b610ddf565b6006546101e1906001600160a01b031681565b6008546101e1906001600160a01b031681565b6101cc610347366004612480565b610e75565b6005546101e1906001600160a01b031681565b6101cc61036d366004611ff5565b610f22565b600a546103889060ff8082169161010090041682565b6040805160ff9384168152929091166020830152016101b0565b6101cc6103b03660046124b0565b610f92565b6101cc6103c3366004612502565b611085565b6103db6103d6366004611ff5565b6110fe565b6040516101b09b9a9998979695949392919061251d565b6007546000906001600160a01b031633146104495760405162461bcd60e51b8152602060048201526012602482015271139bdd081b1bd8989e4818dbdb9d1c9858dd60721b60448201526064015b60405180910390fd5b600b80546001818101835560008390527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba600890920291820180546001600160a01b03808a166001600160a01b0319928316179092557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db984018054928816929091169190911781557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb90920186905591549091610505916125c6565b9150505b9392505050565b6006546001600160a01b0316331461053a5760405162461bcd60e51b8152600401610440906125df565b6105458383836111a3565b505050565b6105c5604080516101a08101825260008082526020808301829052828401829052835180850190945281845283015290606082019081526000602082018190526040820181905260608083018290526080830182905260a0830181905260c083015260e0820181905261010082018190526101209091015290565b600b82815481106105d8576105d861260b565b60009182526020808320604080516101a081018252600890940290910180546001600160a01b0390811685526001820154168484015260028101548483015281518083018352600382015460ff808216835261010091829004811683870152606087019290925260048301549687900b6080870152808704821660a0870152620100008704821660c087015263010000009096041660e085015260058101805483518186028101860190945280845294959194918601939091908301828280156106df57602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116106b05790505b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561075557602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116107265790505b50505091835250506007919091015460ff8082161515602084015261010082048116151560408401526201000090910416151560609091015292915050565b6006546001600160a01b031633146107ab57600080fd5b6000600b82815481106107c0576107c061260b565b906000526020600020906008020160040160026101000a81548160ff021916908360ff16021790555050565b6000600b82815481106108015761080161260b565b60009182526020909120600890910201546001600160a01b031692915050565b6006546001600160a01b0316331461084b5760405162461bcd60e51b8152600401610440906125df565b60005b6001825161085c91906125c6565b8111610545576000600b8383815181106108785761087861260b565b6020026020010151815481106108905761089061260b565b600091825260208220600380546008939093029091019081015460405163f9dfbfcb60e01b81526004810189905260ff808316602483015261010090920490911660448201529093506001600160a01b039091169063f9dfbfcb9060640161014060405180830381865afa15801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190612637565b90508060c0015115610961576109618484815181106109515761095161260b565b60200260200101516001806111a3565b5050808061096e9061272a565b91505061084e565b6006546001600160a01b031633146109a05760405162461bcd60e51b8152600401610440906125df565b6109e86040518060e0016040528060008152602001600015158152602001600060ff168152602001600060ff1681526020016060815260200160608152602001606081525090565b606060058360058111156109fe576109fe612743565b03610a79576004805460405163c82c37b960e01b81529182018690526001600160a01b03169063c82c37b990602401600060405180830381865afa158015610a4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7291908101906127f1565b9150610a80565b5050610c96565b600480546040516336772a9360e21b81526000926001600160a01b039092169163d9dcaa4c91610ab49188918a91016128e3565b600060405180830381865afa158015610ad1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af99190810190612901565b9050826040015160ff166000148015610b175750606083015160ff16155b15610b4857610b438989898985600081518110610b3657610b3661260b565b602002602001015161129e565b610c55565b6002546040516301f7b4f360e41b8152600481018a90526000916001600160a01b031690631f7b4f30906024016020604051808303816000875af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb891906129b2565b9050836040015160ff16600014158015610bd95750836040015160ff168111155b15610bfd57610bf88a8a8a8a86600181518110610b3657610b3661260b565b610c53565b606084015160ff1615801590610c1a5750836060015160ff168110155b15610c3957610bf88a8a8a8a86600281518110610b3657610b3661260b565b610c538a8a8a8a86600081518110610b3657610b3661260b565b505b7f854f143c4475e8754c8844dbfe9928cf11388710860ea82bb21c19da10f6c73d888a8585604051610c8a9493929190612a16565b60405180910390a15050505b50505050505050565b610ca7611d92565b610cb16000611dec565b565b6006546000906001600160a01b03163314610ce05760405162461bcd60e51b8152600401610440906125df565b83600b8481548110610cf457610cf461260b565b60009182526020808320845160036008909402909101830180549583015160ff9081166101000261ffff19909716921691909117949094179093555486519287015160405163f9dfbfcb60e01b815292936001600160a01b039092169263f9dfbfcb92610d7992889260040192835260ff918216602084015216604082015260600190565b61014060405180830381865afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190612637565b5160ff1603610dd557610dcd83611e3c565b506001610509565b5060009392505050565b610de7611d92565b600180546001600160a01b03199081166001600160a01b039a8b1617909155600280548216988a1698909817909755600380548816968916969096179095556007805487169488169490941790935560098054861692871692909217909155600480548516918616919091179055600580548416918516919091179055600680549092169216919091179055565b6009546001600160a01b03163314610ec65760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b6044820152606401610440565b80600b8381548110610eda57610eda61260b565b906000526020600020906008020160040160038282829054906101000a900460ff16610f069190612ad6565b92506101000a81548160ff021916908360ff1602179055505050565b6006546001600160a01b03163314610f3957600080fd5b600b8181548110610f4c57610f4c61260b565b60009182526020909120600890910201600401805462010000900460ff16906002610f7683612aef565b91906101000a81548160ff021916908360ff1602179055505050565b6009546001600160a01b03163314610fe35760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b6044820152606401610440565b600480546040516336772a9360e21b81526000926001600160a01b039092169163d9dcaa4c91611018916005918891016128e3565b600060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105d9190810190612901565b828151811061106e5761106e61260b565b60200260200101519050610c96878787878561129e565b61108d611d92565b6001600160a01b0381166110f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b6110fb81611dec565b50565b600b818154811061110e57600080fd5b60009182526020808320600890920290910180546001820154600283015460408051808201909152600385015460ff80821683526101009182900481169783019790975260048601546007909601546001600160a01b0395861699509390941696919590949182900b93808304821693620100008085048416946301000000900484169382811693830481169291909104168b565b6000600b84815481106111b8576111b861260b565b600091825260208220600154600892909202016002810154604051634810bc5960e01b815260048101919091529093506001600160a01b0390911690634810bc59906024016101e060405180830381865afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f9190612bb3565b600483018054919250859160009061125a908490830b612c5a565b825460ff9182166101009390930a9283029190920219909116179055506060810151516004830154600091820b910b126112975761129785611e3c565b5050505050565b60005b8151811015611d8a576000600b87815481106112bf576112bf61260b565b60009182526020909120600890910201905060018383815181106112e5576112e561260b565b602002602001015160000151601681111561130257611302612743565b505060028383815181106113185761131861260b565b602002602001015160000151601681111561133557611335612743565b0361137b5782828151811061134c5761134c61260b565b60200260200101516020015160006113649190612c7b565b60048201805460ff191660ff929092169190911790555b600383838151811061138f5761138f61260b565b60200260200101516000015160168111156113ac576113ac612743565b036113ba576113ba87611e3c565b60048383815181106113ce576113ce61260b565b60200260200101516000015160168111156113eb576113eb612743565b0361146e5760035484516020860151604051637f1b46bd60e11b81526004810189905260ff928316602482015291166044820152600160648201526001600160a01b039091169063fe368d7a90608401600060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b505050505b60058383815181106114825761148261260b565b602002602001015160000151601681111561149f5761149f612743565b505060068383815181106114b5576114b561260b565b60200260200101516000015160168111156114d2576114d2612743565b03611547578282815181106114e9576114e961260b565b602090810291909101810151015160048201805460009061150d908490830b612c7b565b825460ff9182166101009390930a9283029190920219909116179055506004810154600090810b12156115475760048101805460ff191690555b600783838151811061155b5761155b61260b565b602002602001015160000151601681111561157857611578612743565b5050600883838151811061158e5761158e61260b565b60200260200101516000015160168111156115ab576115ab612743565b036115d9576115d9878484815181106115c6576115c661260b565b60200260200101516020015160016111a3565b60098383815181106115ed576115ed61260b565b602002602001015160000151601681111561160a5761160a612743565b0361163857611638878484815181106116255761162561260b565b60200260200101516020015160006111a3565b600b83838151811061164c5761164c61260b565b602002602001015160000151601681111561166957611669612743565b5050600d83838151811061167f5761167f61260b565b602002602001015160000151601681111561169c5761169c612743565b036116c8576116c8878484815181106116b7576116b761260b565b602002602001015160200151610e75565b600e8383815181106116dc576116dc61260b565b60200260200101516000015160168111156116f9576116f9612743565b5050600f83838151811061170f5761170f61260b565b602002602001015160000151601681111561172c5761172c612743565b036119a85760008383815181106117455761174561260b565b6020908102919091018101510151600554604051633841fae160e01b8152600481018b90529192506000916001600160a01b0390911690633841fae190602401600060405180830381865afa1580156117a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ca9190810190612c9c565b8051909150156119a5576000600182516117e491906125c6565b90505b80156118ef5760025460405163ce28613f60e01b815260006004820181905260ff84166024830152916001600160a01b03169063ce28613f906044016020604051808303816000875af1158015611842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118669190612d22565b9050828160ff168151811061187d5761187d61260b565b60200260200101518383815181106118975761189761260b565b60200260200101518484815181106118b1576118b161260b565b60200260200101858460ff16815181106118cd576118cd61260b565b60209081029190910101919091525250806118e781612d3f565b9150506117e7565b5060005b81518510156119a35760055482516001600160a01b039091169063f7c8af48908490849081106119255761192561260b565b60200260200101516040518263ffffffff1660e01b815260040161194b91815260200190565b600060405180830381600087803b15801561196557600080fd5b505af1158015611979573d6000803e3d6000fd5b50505050828061198890612d3f565b93505082156119a3578061199b8161272a565b9150506118f3565b505b50505b60118383815181106119bc576119bc61260b565b60200260200101516000015160168111156119d9576119d9612743565b03611af65760058383815181106119f2576119f261260b565b60200260200101516020015103611af657600354604051632fc4a8f360e11b81526004810187905260009182916001600160a01b0390911690635f8951e6906024016040805180830381865afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a749190612d56565b60065460408051808201825260ff8086168252841660208201529051631751422560e01b81529395509193506001600160a01b031691631751422591611ac1918c91908e90600401612d7a565b600060405180830381600087803b158015611adb57600080fd5b505af1158015611aef573d6000803e3d6000fd5b5050505050505b6012838381518110611b0a57611b0a61260b565b6020026020010151600001516016811115611b2757611b27612743565b50506013838381518110611b3d57611b3d61260b565b6020026020010151600001516016811115611b5a57611b5a612743565b50506015838381518110611b7057611b7061260b565b6020026020010151600001516016811115611b8d57611b8d612743565b03611d445760005b6004811015611d425760035485516020870151604051630dd43b9b60e31b8152600481018a905260ff928316602482015291166044820152606481018390526000916001600160a01b031690636ea1dcd890608401606060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b9190612dac565b9050600181604001516004811115611c4557611c45612743565b1480611c665750600281604001516004811115611c6457611c64612743565b145b80611c865750600381604001516004811115611c8457611c84612743565b145b15611d2f57600360009054906101000a90046001600160a01b03166001600160a01b0316635921522388886000015189602001518660018b8b81518110611ccf57611ccf61260b565b6020026020010151602001516040518763ffffffff1660e01b8152600401611cfc96959493929190612e22565b600060405180830381600087803b158015611d1657600080fd5b505af1158015611d2a573d6000803e3d6000fd5b505050505b5080611d3a8161272a565b915050611b95565b505b6014838381518110611d5857611d5861260b565b6020026020010151600001516016811115611d7557611d75612743565b50505080611d828161272a565b9150506112a1565b505050505050565b6000546001600160a01b03163314610cb15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000600b8281548110611e5157611e5161260b565b6000918252602090912060089091020160048101805460ff19169055600154600b80549293506001600160a01b0390911691636d6ba756919085908110611e9a57611e9a61260b565b9060005260206000209060080201600201546040518263ffffffff1660e01b8152600401611eca91815260200190565b600060405180830381600087803b158015611ee457600080fd5b505af1158015611ef8573d6000803e3d6000fd5b50505050600a600b8381548110611f1157611f1161260b565b600091825260209091208254600890920201600301805460ff92831660ff19821681178355935461ffff19909116909317610100938490049092169092021790555050565b80356001600160a01b0381168114611f6d57600080fd5b919050565b600080600060608486031215611f8757600080fd5b611f9084611f56565b925060208401359150611fa560408501611f56565b90509250925092565b80151581146110fb57600080fd5b600080600060608486031215611fd157600080fd5b83359250602084013591506040840135611fea81611fae565b809150509250925092565b60006020828403121561200757600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561204157815160ff1687529582019590820190600101612022565b509495945050505050565b602081526120666020820183516001600160a01b03169052565b6000602083015161208260408401826001600160a01b03169052565b506040830151606083015260608301516120af6080840182805160ff908116835260209182015116910152565b5060808301516120c460c084018260000b9052565b5060a083015160ff811660e08401525060c08301516101006120ea8185018360ff169052565b60e085015191506101206121028186018460ff169052565b8186015192506101c0915061014082818701526121236101e087018561200e565b9350818701519150610160601f198786030181880152612143858461200e565b9450818801519250610180915061215d8288018415159052565b87015115156101a087015290950151151593019290925250919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156121b3576121b361217a565b60405290565b60405160e0810167ffffffffffffffff811182821017156121b3576121b361217a565b604051610120810167ffffffffffffffff811182821017156121b3576121b361217a565b604051601f8201601f1916810167ffffffffffffffff811182821017156122295761222961217a565b604052919050565b600067ffffffffffffffff82111561224b5761224b61217a565b5060051b60200190565b6000806040838503121561226857600080fd5b8235915060208084013567ffffffffffffffff81111561228757600080fd5b8401601f8101861361229857600080fd5b80356122ab6122a682612231565b612200565b81815260059190911b820183019083810190888311156122ca57600080fd5b928401925b828410156122e8578335825292840192908401906122cf565b80955050505050509250929050565b60ff811681146110fb57600080fd5b60006040828403121561231857600080fd5b612320612190565b9050813561232d816122f7565b8152602082013561233d816122f7565b602082015292915050565b6000806000806000806000610100888a03121561236457600080fd5b8735965060208801359550604088013594506060880135935061238a8960808a01612306565b925060c0880135915060e0880135600681106123a557600080fd5b8091505092959891949750929550565b6000806000608084860312156123ca57600080fd5b6123d48585612306565b95604085013595506060909401359392505050565b600080600080600080600080610100898b03121561240657600080fd5b61240f89611f56565b975061241d60208a01611f56565b965061242b60408a01611f56565b955061243960608a01611f56565b945061244760808a01611f56565b935061245560a08a01611f56565b925061246360c08a01611f56565b915061247160e08a01611f56565b90509295985092959890939650565b6000806040838503121561249357600080fd5b8235915060208301356124a5816122f7565b809150509250929050565b60008060008060008060e087890312156124c957600080fd5b8635955060208701359450604087013593506124e88860608901612306565b925060a0870135915060c087013590509295509295509295565b60006020828403121561251457600080fd5b61050982611f56565b6001600160a01b038c811682528b166020820152604081018a9052610180810161255a606083018b805160ff908116835260209182015116910152565b8860000b60a083015260ff881660c083015260ff871660e083015260ff86166101008301528415156101208301528315156101408301526125a061016083018415159052565b9c9b505050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156125d9576125d96125b0565b92915050565b602080825260129082015271139bdd0819d85b595cc818dbdb9d1c9858dd60721b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b8051611f6d816122f7565b8051611f6d81611fae565b6000610140828403121561264a57600080fd5b6126526121b9565b825161265d816122f7565b815260208381015161266e816122f7565b82820152605f8401851361268157600080fd5b6040516080810181811067ffffffffffffffff821117156126a4576126a461217a565b6040528060c08601878111156126b957600080fd5b604087015b818110156126d557805183529184019184016126be565b508260408601526126e58161262c565b6060860152505050506126fa60e0840161262c565b608082015261270c610100840161262c565b60a082015261271e610120840161262c565b60c08201529392505050565b60006001820161273c5761273c6125b0565b5060010190565b634e487b7160e01b600052602160045260246000fd5b600082601f83011261276a57600080fd5b8151602061277a6122a683612231565b82815260069290921b8401810191818101908684111561279957600080fd5b8286015b848110156127e657604081890312156127b65760008081fd5b6127be612190565b8151601781106127ce5760008081fd5b8152818501518582015283529183019160400161279d565b509695505050505050565b60006020828403121561280357600080fd5b815167ffffffffffffffff8082111561281b57600080fd5b9083019060e0828603121561282f57600080fd5b6128376121b9565b825181526128476020840161262c565b602082015261285860408401612621565b604082015261286960608401612621565b606082015260808301518281111561288057600080fd5b61288c87828601612759565b60808301525060a0830151828111156128a457600080fd5b6128b087828601612759565b60a08301525060c0830151828111156128c857600080fd5b6128d487828601612759565b60c08301525095945050505050565b60408101600684106128f7576128f7612743565b9281526020015290565b6000602080838503121561291457600080fd5b825167ffffffffffffffff8082111561292c57600080fd5b818501915085601f83011261294057600080fd5b815161294e6122a682612231565b81815260059190911b8301840190848101908883111561296d57600080fd5b8585015b838110156129a5578051858111156129895760008081fd5b6129978b89838a0101612759565b845250918601918601612971565b5098975050505050505050565b6000602082840312156129c457600080fd5b5051919050565b600081518084526020808501945080840160005b838110156120415781518051601781106129fb576129fb612743565b885283015183880152604090960195908201906001016129df565b84815283602082015260806040820152825160808201526020830151151560a082015260ff60408401511660c082015260006060840151612a5c60e084018260ff169052565b50608084015160e0610100840152612a786101608401826129cb565b905060a0850151607f198085840301610120860152612a9783836129cb565b925060c08701519150808584030161014086015250612ab682826129cb565b9150508281036060840152612acb81856129cb565b979650505050505050565b60ff81811683821601908111156125d9576125d96125b0565b600060ff821660ff8103612b0557612b056125b0565b60010192915050565b8051600081900b8114611f6d57600080fd5b600060e08284031215612b3257600080fd5b612b3a6121b9565b9050612b4582612b0e565b8152612b5360208301612b0e565b6020820152612b6460408301612b0e565b6040820152612b7560608301612b0e565b6060820152612b8660808301612b0e565b6080820152612b9760a08301612b0e565b60a0820152612ba860c08301612b0e565b60c082015292915050565b60006101e08284031215612bc657600080fd5b612bce6121dc565b825181526020830151602082015260408301516040820152612bf38460608501612b20565b6060820152612c056101408401612621565b6080820152612c176101608401612621565b60a0820152612c296101808401612621565b60c0820152612c3b6101a08401612621565b60e0820152612c4d6101c0840161262c565b6101008201529392505050565b600081810b9083900b01607f8113607f19821217156125d9576125d96125b0565b600082810b9082900b03607f198112607f821317156125d9576125d96125b0565b60006020808385031215612caf57600080fd5b825167ffffffffffffffff811115612cc657600080fd5b8301601f81018513612cd757600080fd5b8051612ce56122a682612231565b81815260059190911b82018301908381019087831115612d0457600080fd5b928401925b82841015612acb57835182529284019290840190612d09565b600060208284031215612d3457600080fd5b8151610509816122f7565b600081612d4e57612d4e6125b0565b506000190190565b60008060408385031215612d6957600080fd5b505080516020909101519092909150565b83815260808101612d9e6020830185805160ff908116835260209182015116910152565b826060830152949350505050565b600060608284031215612dbe57600080fd5b6040516060810181811067ffffffffffffffff82111715612de157612de161217a565b6040528251612def816122f7565b81526020830151612dff816122f7565b6020820152604083015160058110612e1657600080fd5b60408201529392505050565b86815260ff8681166020830152851660408201526060810184905260c0810160058410612e5157612e51612743565b608082019390935260a0015294935050505056fea2646970667358221220918d05ebf084ce96ff749b54bb0d2c6b37b3b0e736dc71b1ed214299467ab92764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10187,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "chars",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CharInterface)10020"
      },
      {
        "astId": 10190,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)10037"
      },
      {
        "astId": 10193,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "maps",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MapInterface)10157"
      },
      {
        "astId": 10196,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "bcEvents",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(EventsInterface)9998"
      },
      {
        "astId": 10199,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "items",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ItemsInterface)10171"
      },
      {
        "astId": 10202,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "games",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(GamesInterface)10182"
      },
      {
        "astId": 10204,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "lobbiesAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10206,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "charsAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10208,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10288,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "StartLocation",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Position)11510_storage"
      },
      {
        "astId": 10292,
        "contract": "contracts/BCPlayers.sol:BCPlayers",
        "label": "players",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Player)11486_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Player)11486_storage)dyn_storage": {
        "base": "t_struct(Player)11486_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Player[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CharInterface)10020": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(EventsInterface)9998": {
        "encoding": "inplace",
        "label": "contract EventsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(GamesInterface)10182": {
        "encoding": "inplace",
        "label": "contract GamesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)10171": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)10157": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)10037": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_struct(Player)11486_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Player",
        "members": [
          {
            "astId": 11458,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11460,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "charContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11462,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "characterId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11465,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "position",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Position)11510_storage"
          },
          {
            "astId": 11467,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "healthDmgTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_int8"
          },
          {
            "astId": 11469,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "armorDmgTaken",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 11471,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "actionsTaken",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 11473,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "dataTokens",
            "offset": 3,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 11476,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "currentEffects",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 11479,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "inventoryIDs",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 11481,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "canHarmOthers",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 11483,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "dead",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 11485,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "hasEgg",
            "offset": 2,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Position)11510_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 11507,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11509,
            "contract": "contracts/BCPlayers.sol:BCPlayers",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}