{
  "address": "0x76AdA6D89B5AE7Bdaa67E154b996E01E9918Ea6B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matic",
          "type": "uint256"
        }
      ],
      "name": "SetMintCostInMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_playerIds",
          "type": "uint256[]"
        }
      ],
      "name": "addItemsToGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addItemsToPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitItemToMission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "destroyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "dropAllItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "games",
      "outputs": [
        {
          "internalType": "contract GameInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getEventBlocks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemIDsByPlayer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemsByPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "currentGame",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.WorldItemStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getItemsIdsInGame",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getOwnedItemIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getOwnedItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "currentGame",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.WorldItemStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "getTraitModifiers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "health",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "carry",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "defense",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "hack",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "breach",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "shoot",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "melee",
              "type": "int8"
            },
            {
              "internalType": "bool",
              "name": "hasGun",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Traits",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getWorldItemIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getWorldItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "currentGame",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.WorldItemStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "genHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uifID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.ItemCategory",
          "name": "itemCategory",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsAbility",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsFlaw",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.ItemType",
          "name": "itemType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "power",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentGame",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.WorldItemStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbies",
      "outputs": [
        {
          "internalType": "contract LobbyInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_holderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "lootItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_pos2",
          "type": "tuple"
        }
      ],
      "name": "manhattanDistance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_newOwnerAddress",
          "type": "address"
        }
      ],
      "name": "pickupWorldItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playersContract",
      "outputs": [
        {
          "internalType": "contract PlayersContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lobbyContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UIFAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersContract",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setMintingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnCompanyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_formerOwnerId",
          "type": "uint256"
        }
      ],
      "name": "spawnWorldItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "takeItemsHome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uif",
      "outputs": [
        {
          "internalType": "contract UIFInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e7a9a9aa02ac8c23916a32906ee124edd7b357b1d5cc2f332a8b4ac4595128c",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x76AdA6D89B5AE7Bdaa67E154b996E01E9918Ea6B",
    "transactionIndex": 4,
    "gasUsed": "3622517",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008000000080000000000000000000000000000000000000000020000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000010000000000010000000000000000001000200000000000000200000000000000000000000000000000000000000000104000000000000000000001000000000000000000000000000000100000000020000808000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x71548478bc87eb2aa6fd9d22bbdb5ebf9bd01fe2a9831942013fe5c31f5c00e6",
    "transactionHash": "0x4e7a9a9aa02ac8c23916a32906ee124edd7b357b1d5cc2f332a8b4ac4595128c",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 38927008,
        "transactionHash": "0x4e7a9a9aa02ac8c23916a32906ee124edd7b357b1d5cc2f332a8b4ac4595128c",
        "address": "0x76AdA6D89B5AE7Bdaa67E154b996E01E9918Ea6B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x71548478bc87eb2aa6fd9d22bbdb5ebf9bd01fe2a9831942013fe5c31f5c00e6"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 38927008,
        "transactionHash": "0x4e7a9a9aa02ac8c23916a32906ee124edd7b357b1d5cc2f332a8b4ac4595128c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000e7f13f6bc1e7f5ca4a6c9a255124ce22c46f8ef0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000134dfd72777b00000000000000000000000000000000000000000000000000104896e94feaed41000000000000000000000000000000000000000000000018652605bc60bf8999000000000000000000000000000000000000000000000000103548ebdd737241000000000000000000000000000000000000000000000018653953b9d3370499",
        "logIndex": 15,
        "blockHash": "0x71548478bc87eb2aa6fd9d22bbdb5ebf9bd01fe2a9831942013fe5c31f5c00e6"
      }
    ],
    "blockNumber": 38927008,
    "cumulativeGasUsed": "3871466",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a7984f2b5ca1819c04808c7b4a052271",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matic\",\"type\":\"uint256\"}],\"name\":\"SetMintCostInMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_playerIds\",\"type\":\"uint256[]\"}],\"name\":\"addItemsToGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addItemsToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitItemToMission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"destroyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"dropAllItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GameInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getEventBlocks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemIDsByPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemsByPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentGame\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getItemsIdsInGame\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOwnedItemIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOwnedItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentGame\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"getTraitModifiers\",\"outputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"health\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"carry\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"hack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"breach\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"shoot\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"melee\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"hasGun\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Traits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getWorldItemIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getWorldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentGame\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentGame\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbies\",\"outputs\":[{\"internalType\":\"contract LobbyInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"lootItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_pos2\",\"type\":\"tuple\"}],\"name\":\"manhattanDistance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_newOwnerAddress\",\"type\":\"address\"}],\"name\":\"pickupWorldItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersContract\",\"outputs\":[{\"internalType\":\"contract PlayersContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lobbyContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UIFAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersContract\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnCompanyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_formerOwnerId\",\"type\":\"uint256\"}],\"name\":\"spawnWorldItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"takeItemsHome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uif\",\"outputs\":[{\"internalType\":\"contract UIFInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCItems.sol\":\"BCItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BCItems.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// Brian Doyle github.com/briandoyle81\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./BCUtils.sol\\\";\\nimport \\\"./BCTypes.sol\\\";\\n\\n// TODO: When implementing adding items that were not minted via BC\\n// TODO: check against a naughty list of items that are banned\\n// TODO: This should inherit from a UIF receiver contract\\n\\ninterface LobbyInterface {\\n    // TODO: Commit item to player inventory for game\\n}\\n\\ninterface GameInterface {\\n    function placeWorldItems(\\n        uint _gameId,\\n        uint[] memory _itemIds,\\n        uint _row,\\n        uint _col\\n    ) external;\\n\\n    function deleteWorldItems(uint[] calldata _worldItemIds) external;\\n}\\n\\ninterface UIFInterface {\\n    function mintItem(\\n        uint _type,\\n        uint _quality,\\n        address _minter\\n    ) external payable returns (uint);\\n\\n    function extGetProperties(uint _id) external view returns (bytes32);\\n\\n    function extGetCurrentOwner(uint _id) external view returns (address);\\n\\n    function ownerOf(uint256 _id) external view returns (address);\\n\\n    function extGetUIIsOwned(\\n        address _currentOwner\\n    ) external view returns (uint[] memory);\\n\\n    // function burn(uint _id) external;\\n\\n    function setCurrentOwner(\\n        address _newOwner,\\n        address _oldOwner,\\n        uint _id\\n    ) external;\\n}\\n\\ninterface PlayersContract {\\n    function extGetPlayerOwner(uint _id) external view returns (address);\\n}\\n\\ncontract BCItems is IERC721Receiver, Ownable, BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    LobbyInterface public lobbies;\\n    address public gamesContract;\\n    UIFInterface public uif;\\n    address public actionsContract;\\n    GameInterface public games;\\n    PlayersContract public playersContract;\\n\\n    function setContractAddresses(\\n        address _lobbyContractAddress,\\n        address _gameContract,\\n        address _UIFAddress,\\n        address _actionsContract,\\n        address _playersContract\\n    ) public onlyOwner {\\n        lobbies = LobbyInterface(_lobbyContractAddress);\\n        gamesContract = _gameContract;\\n        games = GameInterface(_gameContract);\\n        uif = UIFInterface(_UIFAddress);\\n        actionsContract = _actionsContract;\\n        playersContract = PlayersContract(_playersContract);\\n    }\\n\\n    uint public mintCost = 100 gwei; // TODO: Set these\\n\\n    bool public mintIsActive = true; // TODO: Is this still useful?\\n\\n    event Received();\\n\\n    // TODO: Add company items using standard item in UIF\\n\\n    BCTypes.Item[] public items;\\n    mapping(uint256 => EnumerableSet.UintSet) playerToItems; // TODO: Handle if made upgradeable\\n    mapping(uint256 => EnumerableSet.UintSet) gameToItems;\\n    mapping(address => EnumerableSet.UintSet) ownedItems; // Items out of game\\n\\n    constructor() {\\n        // Use 0 for no modifiers\\n        // TODO: BURN ZERO\\n    }\\n\\n    function spawnCompanyItem() public payable {\\n        // TODO: Make copies of a specific item using the standard items mechanism in UIF\\n        // TODO: Remove owner free call\\n        // TODO: DRY\\n        require(\\n            msg.sender == owner() || msg.value == mintCost,\\n            \\\"Incorrect payment\\\"\\n        );\\n        require(\\n            msg.sender == owner() || mintIsActive == true,\\n            \\\"Minting is not active\\\"\\n        );\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n        // TODO: Implement\\n    }\\n\\n    // Create a new item that goes directly to a player's inventory\\n    // IE Draw from the item deck\\n    // ID of the _player_ holding this item\\n    function lootItem(\\n        uint _holdingPlayerId,\\n        address _holderAddress,\\n        uint _gameId\\n    ) public payable {\\n        // TODO: Remove owner free call\\n        string memory paymentError = string(\\n            abi.encodePacked(\\\"Payed: \\\", msg.value, \\\", cost is: \\\", mintCost)\\n        );\\n        require(msg.sender == owner() || msg.value == mintCost, paymentError);\\n        // require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        // TODO: Finalize allowed senders\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == address(gamesContract) ||\\n                msg.sender == actionsContract,\\n            \\\"Contract not allowed\\\"\\n        );\\n\\n        _createNewItem(_holdingPlayerId, _holderAddress, _gameId);\\n    }\\n\\n    // Pick up world items and give them to the player\\n    function pickupWorldItems(\\n        uint _playerId,\\n        uint[] calldata _itemIds,\\n        address _newOwnerAddress\\n    ) public {\\n        require(\\n            msg.sender == address(actionsContract),\\n            \\\"Not actions contract - pickupWorldItems\\\"\\n        );\\n\\n        for (uint i = 0; i < _itemIds.length; i++) {\\n            // Set UniversalInventoryItem.currentOwner in UIF // TODO: This should take an array, would save gas\\n            uif.setCurrentOwner(\\n                _newOwnerAddress,\\n                address(0),\\n                items[_itemIds[i]].uifID\\n            );\\n\\n            playerToItems[_playerId].add(_itemIds[i]);\\n\\n            BCTypes.Item storage item = items[_itemIds[i]];\\n            item.holdingPlayerId = _playerId;\\n            item.status = BCTypes.WorldItemStatus.HELD;\\n            item.position = BCTypes.Position(0, 0);\\n        }\\n    }\\n\\n    // Spawn world items when a player drops them // TODO: Consider renaming, or also use to drop items in world\\n    function spawnWorldItems(\\n        uint _gameId,\\n        uint[] memory _itemIds,\\n        uint _row,\\n        uint _col,\\n        uint _formerOwnerId\\n    ) public {\\n        require(\\n            msg.sender == address(actionsContract) ||\\n                msg.sender == address(playersContract),\\n            \\\"Not actions or players contract - spawnWorldItems\\\"\\n        );\\n        if (_itemIds.length == 0) {\\n            return;\\n        }\\n\\n        // TODO: Make sure item system doesn't allow reclaiming these\\n        // Set owner in UIF                                         // TODO: Assumption\\n        address formerOwnerAddress = playersContract.extGetPlayerOwner(\\n            items[_itemIds[0]].holdingPlayerId\\n        );\\n        for (uint i = 0; i < _itemIds.length; i++) {\\n            uif.setCurrentOwner(\\n                address(0),\\n                formerOwnerAddress,\\n                items[_itemIds[i]].uifID\\n            );\\n            _removeItemFromPlayerToItem(_formerOwnerId, _itemIds[i]);\\n            BCTypes.Item storage item = items[_itemIds[i]];\\n            item.holdingPlayerId = 0;\\n            item.status = BCTypes.WorldItemStatus.ON_GROUND;\\n            item.position = BCTypes.Position(uint8(_row), uint8(_col));\\n        }\\n    }\\n\\n    function dropAllItems(\\n        uint _gameId,\\n        uint _playerId,\\n        uint _row,\\n        uint _col\\n    ) public {\\n        require(\\n            msg.sender == address(playersContract),\\n            \\\"Not players contract - dropAllItems\\\"\\n        );\\n\\n        uint[] memory itemIds = playerToItems[_playerId].values();\\n        spawnWorldItems(_gameId, itemIds, _row, _col, _playerId);\\n    }\\n\\n    // Attach items to a player as they enlist (currentGame must still be set)\\n    function addItemsToPlayer(\\n        uint _playerId,\\n        uint[] memory _itemIds,\\n        address _owner\\n    ) public {\\n        require(\\n            msg.sender == address(playersContract),\\n            \\\"Not players contract - addItemsToPlayer\\\"\\n        );\\n\\n        for (uint i = 0; i < _itemIds.length; i++) {\\n            uint itemId = _itemIds[i];\\n            BCTypes.Item storage item = items[itemId];\\n            require(\\n                item.holdingPlayerId == 0,\\n                \\\"Someone is already holding this!\\\"\\n            );\\n            require(\\n                item.ownerAddress == _owner,\\n                \\\"Owner for item and char don't match\\\"\\n            );\\n            item.holdingPlayerId = _playerId;\\n            item.ownerAddress = address(0);\\n\\n            playerToItems[_playerId].add(itemId);\\n            ownedItems[_owner].remove(itemId);\\n        }\\n    }\\n\\n    // Set game information on items added via addItemsToPlayer\\n    function addItemsToGame(uint _gameId, uint[] memory _playerIds) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        for (uint i = 0; i < _playerIds.length; i++) {\\n            EnumerableSet.UintSet storage playerItems = playerToItems[\\n                _playerIds[i]\\n            ];\\n            for (uint k = 0; k < playerItems.length(); k++) {\\n                uint itemId = playerItems.at(k);\\n                items[itemId].currentGame = _gameId;\\n                gameToItems[_gameId].add(itemId);\\n            }\\n        }\\n        // TODO:\\n        // gameToEventBlocks[_gameId].add(block.number);\\n    }\\n\\n    // At the end of the game, items still held by player go into their owners\\n    // out-of-game inventory\\n    // CRITICAL: ONLY CALLED BY games.leaveGame()!!!\\n    function takeItemsHome(uint _playerId, uint _gameId) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n\\n        EnumerableSet.UintSet storage itemsTaken = playerToItems[_playerId];\\n        address newOwner = playersContract.extGetPlayerOwner(_playerId);\\n\\n        // iterate backwards to allow modifying set during loop without early ending\\n        uint numItems = itemsTaken.length();\\n        for (uint i = numItems; i > 0; i--) {\\n            uint itemId = itemsTaken.at(i - 1);\\n            BCTypes.Item storage item = items[itemId];\\n\\n            item.holdingPlayerId = 0;\\n            item.ownerAddress = newOwner;\\n            item.currentGame = 0;\\n            item.status = BCTypes.WorldItemStatus.OUT_OF_GAME;\\n\\n            ownedItems[newOwner].add(itemId);\\n            itemsTaken.remove(itemId);\\n            _removeItemFromGameToItem(_gameId, itemId);\\n        }\\n    }\\n\\n    function _createNewItem(\\n        uint _holdingPlayerId,\\n        address _holderAddress,\\n        uint _gameId\\n    ) internal {\\n        // I don't _think_ this is a reentrancy risk be cause I control the receiving address\\n        // TODO: Make sure passing payment this way is safe\\n        // TODO: DOUBLY SO FOR THIS ONE!!!!\\n        // TODO: Update costs for by-type payment scheme\\n        uint uifID = uif.mintItem{value: 100 gwei}(4, 0, _holderAddress); // TODO: Hardcoded value\\n        bytes32 finalHash = uif.extGetProperties(uifID);\\n\\n        // First pass interpretation will make weapons, armor, and stat boosters\\n        // Items with special abilities will be dealt with after that system is implemented\\n\\n        BCTypes.Item storage newItem = items.push();\\n\\n        newItem.genHash = finalHash;\\n\\n        newItem.id = items.length - 1; // -1 because we've already pushed\\n        newItem.uifID = uifID;\\n\\n        newItem.holdingPlayerId = _holdingPlayerId;\\n\\n        newItem.weight = 1;\\n\\n        newItem.itemCategory = sliceHashToSmallInt(\\n            finalHash,\\n            4,\\n            getUIOffset(1, 0)\\n        ) >= 11\\n            ? BCTypes.ItemCategory.SCAVENGER\\n            : BCTypes.ItemCategory.ARTIFACT; // Quality <= 11 is 2/3 scav items.  // TODO: Eval\\n\\n        newItem.grantsAbility = 0; // NO abilities or flaws for now\\n        newItem.grantsFlaw = 0;\\n\\n        newItem.itemType = _getItemType(\\n            sliceHashToSmallInt(finalHash, 4, getUIOffset(0, 1))\\n        );\\n\\n        uint8 newItemPower = sliceHashToSmallInt(\\n            finalHash,\\n            4,\\n            getUIOffset(1, 2)\\n        );\\n        if (newItem.itemCategory == BCTypes.ItemCategory.SCAVENGER) {\\n            newItemPower = (newItemPower * 2) / 3; // TODO: Evaluate nerfing scav items\\n        }\\n        newItemPower = normalizeToSmallRange(1, 4, newItemPower, 15);\\n\\n        newItem.power = newItemPower;\\n\\n        newItem.currentGame = _gameId;\\n        newItem.status = BCTypes.WorldItemStatus.HELD;\\n        // TODO: Dry this\\n        playerToItems[_holdingPlayerId].add(newItem.id);\\n        gameToItems[_gameId].add(newItem.id);\\n        // TODO: Event\\n    }\\n\\n    function _getItemType(\\n        uint _value\\n    ) internal pure returns (BCTypes.ItemType) {\\n        // TODO: UIF Spec is incomplete, most items will be unusable for now\\n        if (_value <= 1) {\\n            return BCTypes.ItemType.CONSUMABLE;\\n        } else if (_value <= 2) {\\n            return BCTypes.ItemType.HEALTH;\\n        } else if (_value <= 3) {\\n            return BCTypes.ItemType.CARRY;\\n        } else if (_value <= 4) {\\n            return BCTypes.ItemType.DEFENSE;\\n        } else if (_value <= 5) {\\n            return BCTypes.ItemType.HACK;\\n        } else if (_value <= 6) {\\n            return BCTypes.ItemType.BREACH;\\n        } else if (_value <= 8) {\\n            return BCTypes.ItemType.HAZARD;\\n        } else if (_value <= 10) {\\n            return BCTypes.ItemType.ARMOR;\\n        } else if (_value <= 12) {\\n            return BCTypes.ItemType.RANGED;\\n        } else if (_value <= 14) {\\n            return BCTypes.ItemType.MELEE;\\n        } else {\\n            return BCTypes.ItemType.SPECIAL;\\n        }\\n    }\\n\\n    function commitItemToMission() public {\\n        // TODO:\\n        // Require you own this item and it's not in game\\n    }\\n\\n    // TODO: Complete This\\n    // Get all items, held by players, and on the ground\\n    // function getItemsInGame() {\\n\\n    // }\\n\\n    function _removeItemFromPlayerToItem(\\n        uint _playerId,\\n        uint _itemId\\n    ) internal {\\n        // TODO: Validate error is needed, and probably use assert\\n        require(\\n            playerToItems[_playerId].contains(_itemId),\\n            \\\"Player doesn't have this item!\\\"\\n        );\\n        playerToItems[_playerId].remove(_itemId);\\n    }\\n\\n    function _removeItemFromGameToItem(uint _gameId, uint _itemId) internal {\\n        // TODO: Validate error is needed, and probably use assert\\n        require(\\n            gameToItems[_gameId].contains(_itemId),\\n            \\\"Game doesn't have this item!\\\"\\n        );\\n        gameToItems[_gameId].remove(_itemId);\\n    }\\n\\n    function destroyItem(uint _playerId, uint _itemId) public {\\n        // TODO: CRITICAL -> Ensure complete test coverage\\n        require(\\n            msg.sender == gamesContract ||\\n                msg.sender == address(playersContract),\\n            \\\"Not allowed contract\\\"\\n        );\\n        BCTypes.Item storage item = items[_itemId];\\n\\n        _removeItemFromPlayerToItem(_playerId, _itemId);\\n        _removeItemFromGameToItem(item.currentGame, _itemId);\\n\\n        item.holdingPlayerId = 0;\\n        item.currentGame = 0;\\n\\n        // TODO: Handle invincible legendaries here if that becomes a thing\\n        // TODO: Handle safe item if that becomes a thing\\n        // Burn the NFT\\n\\n        // TODO: CRITICAL -> Debug NFT ownership issue\\n        // TODO: Use recycle, not burn, to give game credit for recycling\\n        // uif.burn(_itemId); // Sad but necessary :(\\n    }\\n\\n    function _countWorldItems(uint _gameId) internal view returns (uint) {\\n        uint counter;\\n\\n        EnumerableSet.UintSet storage ids = gameToItems[_gameId];\\n\\n        uint length = ids.length();\\n        for (uint i = 0; i < length; i++) {\\n            if (items[ids.at(i)].status == BCTypes.WorldItemStatus.ON_GROUND) {\\n                counter++;\\n            }\\n        }\\n\\n        return counter;\\n    }\\n\\n    // Same notes as below about the set\\n    // Returns the ids of items that are currently on the ground in the selected game\\n    function getWorldItemIds(uint _gameId) public view returns (uint[] memory) {\\n        uint count = _countWorldItems(_gameId);\\n        uint cursor;\\n        uint[] memory itemIds = new uint[](count);\\n\\n        EnumerableSet.UintSet storage ids = gameToItems[_gameId];\\n\\n        uint length = ids.length();\\n        for (uint i = 0; i < length; i++) {\\n            if (items[ids.at(i)].status == BCTypes.WorldItemStatus.ON_GROUND) {\\n                itemIds[cursor] = ids.at(i);\\n                cursor++;\\n            }\\n        }\\n\\n        return itemIds;\\n    }\\n\\n    // Same notes as below about the set\\n    // Returns the ids of items that are currently on the ground in the selected game\\n    function getWorldItems(\\n        uint _gameId\\n    ) public view returns (BCTypes.Item[] memory) {\\n        uint count = _countWorldItems(_gameId);\\n        uint cursor;\\n        BCTypes.Item[] memory worldItems = new BCTypes.Item[](count);\\n\\n        EnumerableSet.UintSet storage ids = gameToItems[_gameId];\\n\\n        uint length = ids.length();\\n        for (uint i = 0; i < length; i++) {\\n            if (items[ids.at(i)].status == BCTypes.WorldItemStatus.ON_GROUND) {\\n                worldItems[cursor] = items[ids.at(i)];\\n                cursor++;\\n            }\\n        }\\n\\n        return worldItems;\\n    }\\n\\n    // TODO: D should be lowercase\\n    // Per notes in EnumerableSet, this can be problematic because it's unbounded and\\n    // will copy the entire storage.\\n    // I don't think it's a problem here, because the player shouldn't really ever\\n    // have more than 10 items\\n    function getItemIDsByPlayer(\\n        uint _playerID\\n    ) public view returns (uint[] memory) {\\n        return playerToItems[_playerID].values();\\n    }\\n\\n    // This could be expensive, don't use in contract\\n    // Gets the out of game item ids owned by a wallet\\n    function getOwnedItemIds(\\n        address _address\\n    ) external view returns (uint[] memory) {\\n        return ownedItems[_address].values();\\n    }\\n\\n    // Gets the out of game items themselves\\n    function getOwnedItems(\\n        address _address\\n    ) external view returns (BCTypes.Item[] memory) {\\n        BCTypes.Item[] memory itemsOwned = new BCTypes.Item[](\\n            ownedItems[_address].length()\\n        );\\n        for (uint i = 0; i < itemsOwned.length; i++) {\\n            uint itemId = ownedItems[_address].at(i);\\n            itemsOwned[i] = items[itemId];\\n        }\\n        return itemsOwned;\\n    }\\n\\n    // Per notes in EnumerableSet, this can be problematic because it's unbounded and\\n    // will copy the entire storage.\\n    // I don't think it's a problem here, because the player shouldn't really ever\\n    // have more than 10 items\\n    function getItemsByPlayer(\\n        uint _playerID\\n    ) public view returns (BCTypes.Item[] memory) {\\n        BCTypes.Item[] memory itemsOwned = new BCTypes.Item[](\\n            playerToItems[_playerID].length()\\n        );\\n        for (uint i = 0; i < itemsOwned.length; i++) {\\n            uint itemId = playerToItems[_playerID].at(i);\\n            itemsOwned[i] = items[itemId];\\n        }\\n        return itemsOwned;\\n    }\\n\\n    function getItemsIdsInGame(\\n        uint _gameId\\n    ) external view returns (uint[] memory) {\\n        return gameToItems[_gameId].values();\\n    }\\n\\n    // Per notes in EnumerableSet, this can be problematic because it's unbounded and\\n    // will copy the entire storage.\\n    // I don't think it's a problem here, because the player shouldn't really ever\\n    // have more than 10 items\\n    // Apply item modifiers (and eventually powers)\\n    // NOTE that for items, only the highest counts, they do not stack!\\n    // TODO: This doesn't mesh with choosing which item to attack with\\n    function getTraitModifiers(\\n        uint _playerId\\n    ) public view returns (BCTypes.Traits memory) {\\n        EnumerableSet.UintSet storage itemIds = playerToItems[_playerId];\\n\\n        BCTypes.Traits memory modifiers;\\n\\n        for (uint i = 0; i < itemIds.length(); i++) {\\n            BCTypes.Item storage item = items[itemIds.at(i)];\\n\\n            if (item.itemType == BCTypes.ItemType.HEALTH) {\\n                if (modifiers.health < int8(item.power)) {\\n                    modifiers.health = int8(item.power);\\n                }\\n            } else if (item.itemType == BCTypes.ItemType.CARRY) {\\n                if (modifiers.carry < int8(item.power)) {\\n                    modifiers.carry = int8(item.power);\\n                }\\n            } else if (item.itemType == BCTypes.ItemType.DEFENSE) {\\n                if (modifiers.defense < int8(item.power)) {\\n                    modifiers.defense = int8(item.power);\\n                }\\n            } else if (item.itemType == BCTypes.ItemType.HACK) {\\n                if (modifiers.hack < int8(item.power)) {\\n                    modifiers.hack = int8(item.power);\\n                }\\n            } else if (item.itemType == BCTypes.ItemType.BREACH) {\\n                if (modifiers.breach < int8(item.power)) {\\n                    modifiers.breach = int8(item.power);\\n                }\\n            } else if (item.itemType == BCTypes.ItemType.RANGED) {\\n                if (modifiers.shoot < int8(item.power)) {\\n                    modifiers.shoot = int8(item.power);\\n                    modifiers.hasGun = true;\\n                }\\n            } else if (item.itemType == BCTypes.ItemType.MELEE) {\\n                if (modifiers.melee < int8(item.power)) {\\n                    modifiers.melee = int8(item.power);\\n                }\\n            }\\n        }\\n\\n        // TODO: Add penalty and bonus modifiers\\n\\n        return modifiers;\\n    }\\n\\n    function transferFundsOut() public onlyOwner {\\n        // TODO: Track and limit to transferable balance, leaving enough for buybacks\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function setMintingStatus(bool _status) public onlyOwner {\\n        mintIsActive = _status;\\n    }\\n\\n    // TODO: Evaluate if I want to charge on top of the UIF fee\\n    function SetMintCostInMatic(uint _matic) public onlyOwner {\\n        mintCost = _matic * 10 ** 18;\\n    }\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external override returns (bytes4) {\\n        _operator;\\n        _from;\\n        _tokenId;\\n        _data;\\n        emit Received();\\n        return 0x150b7a02;\\n    }\\n}\\n\",\"keccak256\":\"0x52d983aed8118e8261ecd5dbd33e6525e3d54b60b2b26b2c3d7659b56183a599\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n    // From BCGames.sol\\n    enum DoorStatus {\\n        NO_DOOR,\\n        CLOSED,\\n        OPEN,\\n        BREACHED,\\n        WINDOW\\n    }\\n    enum Action {\\n        HACK,\\n        BREACH,\\n        MOVE,\\n        PASS,\\n        LOOT,\\n        USE_ROOM,\\n        USE_ITEM,\\n        DROP_ITEMS,\\n        PICK_ITEMS,\\n        LEAVE_GAME,\\n        MELEE_ATTACK,\\n        SHOOT_ATTACK,\\n        LOOT_DENIZEN\\n    } // TODO: Add rest\\n    enum Followthrough {\\n        NONE,\\n        MOVE\\n    }\\n    enum BCEventType {\\n        NONE,\\n        BUG,\\n        MYSTERY,\\n        SCAVENGER,\\n        SHIP_SECURITY,\\n        ROOM // TODO: Is this still useful\\n    }\\n    enum WorldItemStatus {\\n        DESTROYED,\\n        HELD,\\n        ON_GROUND,\\n        DISCARDED,\\n        OUT_OF_GAME\\n    }\\n\\n    enum ItemCategory {\\n        COMPANY,\\n        ARTIFACT,\\n        SCAVENGER\\n    }\\n    enum ItemType {\\n        CONSUMABLE,\\n        HEALTH,\\n        CARRY,\\n        DEFENSE,\\n        HACK,\\n        BREACH,\\n        HAZARD,\\n        ARMOR,\\n        RANGED,\\n        MELEE,\\n        SPECIAL\\n    }\\n\\n    enum DenizenType {\\n        NONE,\\n        BUG,\\n        SCAV,\\n        TURRET,\\n        ROBOT,\\n        QUEEN,\\n        BUTCHER,\\n        BEHEMOTH,\\n        DOCTOR\\n    }\\n\\n    // WARNING: At stack limit\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n        uint id; // playerId;\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n        Position position;\\n        Position lastPos; // This is needed for events that use the player's prior position\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken; // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n        uint8 dataTokens; // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n        // Flags\\n\\n        bool dead; // Move to traits?\\n        uint gameId;\\n    }\\n\\n    struct Denizen {\\n        uint id;\\n        uint gameId;\\n        DenizenType denizenType; // Traits are derived from type. //TODO: rename to type\\n        Position position;\\n        uint healthRemaining; // Denizen is dead if this is zero\\n        bool looted;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n        uint[4] doors; // n, s, e, w // TODO: Make an enum for this.  Also,, this should be named doorIds\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n        // Row, Col => GameTile\\n        mapping(uint => mapping(uint => GameTile)) board;\\n        mapping(uint => Door) doors;\\n        uint8 numDoors;\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n        bool denizenTurn;\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        uint turnsTaken;\\n        EventTracker eventTracker;\\n        // address mapContract;\\n        uint mapId;\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n        uint DEBUG_returnAmount;\\n        BCTypes.Denizen[] denizens;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n        uint8 numItems;\\n        uint8 numData;\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n        // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n        bool hasGun;\\n        // bool hasEgg;\\n        // bool canHarmOthers; // Need stack space\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber; // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: Chars should know what game they're in\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n        uint weight;\\n        ItemCategory itemCategory;\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n        ItemType itemType;\\n        uint8 power; // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n        WorldItemStatus status;\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0xd357ba26a28d13ca03548e3112912209531c1e5c26f3a51756dfbb088f7e6384\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    uint constant DEFAULT_ROLL_RES = 3; // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    mapping(uint256 => EnumerableSet.UintSet) gameToEventBlocks;\\n\\n    function smallIntBetweenVals(\\n        uint8 _min,\\n        uint8 _max\\n    ) public returns (uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    msg.sender,\\n                    TODO_randomSeed,\\n                    blockhash(block.number - 1)\\n                )\\n            )\\n        );\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns (uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return (\\n            keccak256(\\n                abi.encodePacked(\\n                    TODO_randomSeed,\\n                    blockhash(block.number - 1),\\n                    msg.sender\\n                )\\n            )\\n        );\\n    }\\n\\n    function abs(int x) public pure returns (int) {\\n        // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(\\n        uint _min,\\n        uint _max,\\n        uint _val,\\n        uint _valMax\\n    ) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = (adjustedMax * _val) / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(\\n        bytes32 _hash,\\n        uint256 _size,\\n        uint256 _offset\\n    ) public pure returns (uint8) {\\n        bytes32 mask = bytes32((2 ** _size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(\\n        uint _traitNum,\\n        uint _subTraitNum\\n    ) public pure returns (uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(\\n        BCTypes.Position memory _firstRoom,\\n        BCTypes.Position memory _secondRoom\\n    ) public pure returns (uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(\\n        uint _direction,\\n        BCTypes.Position memory _start\\n    ) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row - 1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row + 1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col + 1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col - 1);\\n        }\\n        string memory message = string.concat(\\n            \\\"Invalid direction: \\\",\\n            Strings.toString(_direction)\\n        );\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(\\n        uint _gameId,\\n        uint _for,\\n        uint _against\\n    ) public returns (bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if (_direction == 0) {\\n            return 1;\\n        }\\n        if (_direction == 1) {\\n            return 0;\\n        }\\n        if (_direction == 2) {\\n            return 3;\\n        }\\n        if (_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n\\n    function manhattanDistance(\\n        BCTypes.Position memory _pos1,\\n        BCTypes.Position memory _pos2\\n    ) public pure returns (uint) {\\n        uint row = uint(abs(int(int8(_pos1.row)) - int(int8(_pos2.row))));\\n        uint col = uint(abs(int(int8(_pos1.col)) - int(int8(_pos2.col))));\\n        return row + col;\\n    }\\n\\n    function getEventBlocks(uint _gameId) public view returns (uint[] memory) {\\n        return gameToEventBlocks[_gameId].values();\\n    }\\n}\\n\",\"keccak256\":\"0x2d46431e29668b3c032cad26d21875d590d63c532d5a752475af7725b9197ccd\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600190815564174876e800600955600a805460ff191690911790553480156200002e57600080fd5b506200003a3362000040565b62000090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613f4780620000a06000396000f3fe6080604052600436106102935760003560e01c806364b0e5001161015a578063b78e6651116100c1578063e847ae1e1161007a578063e847ae1e14610822578063ec25c25414610842578063f10bff2b14610862578063f135332a14610882578063f2fde38b146108a2578063fa3993c2146108c257600080fd5b8063b78e665114610752578063b918fd6814610772578063bdb4b84814610792578063bfb231d2146107a8578063ce28613f146107e2578063e417dc351461080257600080fd5b806377e01eca1161011357806377e01eca146106875780638214f222146106a75780638da5cb5b146106c7578063951fc3fe146106e5578063955a015b1461071257806397f34c3f1461073257600080fd5b806364b0e500146105d957806364db84bf14610606578063705498dc14610626578063715018a6146106465780637420aa361461065b57806376c8aa271461067b57600080fd5b80631f7b4f30116101fe57806347ef26b1116101b757806347ef26b1146104fa578063501f97841461052757806353011696146105475780635dc96967146105795780635f09c782146105995780635f872601146105b957600080fd5b80631f7b4f301461043b578063249af0b41461045b578063268f1d4d1461047b5780633838aed11461049b5780633841fae1146104b0578063471a4294146104d057600080fd5b8063150b7a0211610250578063150b7a021461035f578063154fa27a14610398578063185ae9dc146103b85780631b5ac4b5146103d85780631e1de205146104065780631ef2688c1461041b57600080fd5b80630364f88c146102985780630cc0db53146102d55780630e73c024146102ea5780630fd8e8331461031757806311ff70471461031f578063129f09031461033f575b600080fd5b3480156102a457600080fd5b506003546102b8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102e86102e3366004613371565b6108e2565b005b3480156102f657600080fd5b5061030a6103053660046133a9565b6109fa565b6040516102cc91906133c2565b6102e8610a1a565b34801561032b57600080fd5b506102e861033a3660046134ac565b610b06565b34801561034b57600080fd5b506008546102b8906001600160a01b031681565b34801561036b57600080fd5b5061037f61037a36600461350e565b610df9565b6040516001600160e01b031990911681526020016102cc565b3480156103a457600080fd5b506004546102b8906001600160a01b031681565b3480156103c457600080fd5b506006546102b8906001600160a01b031681565b3480156103e457600080fd5b506103f86103f33660046133a9565b610e36565b6040519081526020016102cc565b34801561041257600080fd5b506103f8610e52565b34801561042757600080fd5b506102e86104363660046135ad565b610eca565b34801561044757600080fd5b506103f86104563660046133a9565b6110b1565b34801561046757600080fd5b506102e861047636600461363f565b61110d565b34801561048757600080fd5b506102e861049636600461369a565b6112ef565b3480156104a757600080fd5b506102e861137b565b3480156104bc57600080fd5b5061030a6104cb3660046133a9565b6113c0565b3480156104dc57600080fd5b50600a546104ea9060ff1681565b60405190151581526020016102cc565b34801561050657600080fd5b5061051a6105153660046133a9565b6113da565b6040516102cc91906136cc565b34801561053357600080fd5b506102e86105423660046133a9565b611721565b34801561055357600080fd5b5061056761056236600461369a565b611741565b60405160ff90911681526020016102cc565b34801561058557600080fd5b506104ea61059436600461373b565b61177e565b3480156105a557600080fd5b506102e86105b4366004613767565b61181b565b3480156105c557600080fd5b506102e86105d4366004613767565b6118d1565b3480156105e557600080fd5b506105f96105f43660046133a9565b611a7e565b6040516102cc91906137d3565b34801561061257600080fd5b506103f8610621366004613767565b611d21565b34801561063257600080fd5b506005546102b8906001600160a01b031681565b34801561065257600080fd5b506102e8611d39565b34801561066757600080fd5b506102e86106763660046138ed565b611d4b565b3480156102e857600080fd5b34801561069357600080fd5b5061030a6106a236600461390f565b611d66565b3480156106b357600080fd5b506103f86106c23660046133a9565b611d8a565b3480156106d357600080fd5b506000546001600160a01b03166102b8565b3480156106f157600080fd5b5061070561070036600461399b565b611e04565b6040516102cc91906139c8565b34801561071e57600080fd5b506007546102b8906001600160a01b031681565b34801561073e57600080fd5b5061056761074d36600461373b565b611f2e565b34801561075e57600080fd5b506105f961076d3660046133a9565b611f59565b34801561077e57600080fd5b5061030a61078d3660046133a9565b61219f565b34801561079e57600080fd5b506103f860095481565b3480156107b457600080fd5b506107c86107c33660046133a9565b6122ad565b6040516102cc9e9d9c9b9a999897969594939291906139e6565b3480156107ee57600080fd5b506105676107fd366004613a91565b612363565b34801561080e57600080fd5b506105f961081d36600461390f565b612413565b34801561082e57600080fd5b506102e861083d366004613abb565b612666565b34801561084e57600080fd5b506102e861085d366004613b2c565b6126d7565b34801561086e57600080fd5b506103f861087d366004613b73565b612800565b34801561088e57600080fd5b5061030a61089d3660046133a9565b61284d565b3480156108ae57600080fd5b506102e86108bd36600461390f565b612867565b3480156108ce57600080fd5b506103f86108dd366004613b73565b6128dd565b600954604080516602830bcb2b21d160cd1b60208201523460278201526a0161031b7b9ba1034b99d160ad1b60478201526052808201939093528151808203909301835260720190526000546001600160a01b0316331480610945575060095434145b819061096d5760405162461bcd60e51b81526004016109649190613bc3565b60405180910390fd5b506000546001600160a01b031633148061099157506004546001600160a01b031633145b806109a657506006546001600160a01b031633145b6109e95760405162461bcd60e51b815260206004820152601460248201527310dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b6044820152606401610964565b6109f48484846129a5565b50505050565b6000818152600260205260409020606090610a1490612c86565b92915050565b6000546001600160a01b0316331480610a34575060095434145b610a745760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c185e5b595b9d607a1b6044820152606401610964565b6000546001600160a01b0316331480610a945750600a5460ff1615156001145b610ad85760405162461bcd60e51b81526020600482015260156024820152744d696e74696e67206973206e6f742061637469766560581b6044820152606401610964565b6000546001600160a01b0316331480610afb57506004546001600160a01b031633145b610b0457600080fd5b565b6006546001600160a01b0316331480610b2957506008546001600160a01b031633145b610b8f5760405162461bcd60e51b815260206004820152603160248201527f4e6f7420616374696f6e73206f7220706c617965727320636f6e7472616374206044820152702d20737061776e576f726c644974656d7360781b6064820152608401610964565b835115610df25760085484516000916001600160a01b031690636621a42190600b9088908590610bc157610bc1613bf6565b602002602001015181548110610bd957610bd9613bf6565b90600052602060002090600a0201600301546040518263ffffffff1660e01b8152600401610c0991815260200190565b602060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a9190613c0c565b905060005b8551811015610def57600560009054906101000a90046001600160a01b03166001600160a01b03166307084e56600084600b8a8681518110610c9357610c93613bf6565b602002602001015181548110610cab57610cab613bf6565b600091825260209091206002600a9092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b50505050610d4983878381518110610d3c57610d3c613bf6565b6020026020010151612c93565b6000600b878381518110610d5f57610d5f613bf6565b602002602001015181548110610d7757610d77613bf6565b6000918252602082206003600a909202019081019190915560088101805491925060029160ff191660018302179055506040805180820190915260ff8781168083529087166020909201829052600992909201805461ffff191690921761010090910217905580610de781613c3f565b915050610c4f565b50505b5050505050565b6040516000907f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b908290a150630a85bd0160e11b95945050505050565b600080821215610e4e57610e4982613c58565b610a14565b5090565b6001805460009182610e6383613c3f565b9190505550600154600143610e789190613c74565b4033604051602001610eaf93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b6006546001600160a01b03163314610f345760405162461bcd60e51b815260206004820152602760248201527f4e6f7420616374696f6e7320636f6e7472616374202d207069636b7570576f726044820152666c644974656d7360c81b6064820152608401610964565b60005b82811015610df2576005546001600160a01b03166307084e56836000600b888887818110610f6757610f67613bf6565b9050602002013581548110610f7e57610f7e613bf6565b600091825260209091206002600a9092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610fe157600080fd5b505af1158015610ff5573d6000803e3d6000fd5b5050505061102b84848381811061100e5761100e613bf6565b6000898152600c6020908152604090912093910201359050612d0f565b506000600b85858481811061104257611042613bf6565b905060200201358154811061105957611059613bf6565b600091825260208083206003600a9093020191820189905560088201805460ff19166001179055604080518082019091528381520191909152600901805461ffff1916905550806110a981613c3f565b915050610f37565b6000806110c060016006612363565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5183826040516110ff929190918252602082015260400190565b60405180910390a192915050565b6008546001600160a01b031633146111775760405162461bcd60e51b815260206004820152602760248201527f4e6f7420706c617965727320636f6e7472616374202d206164644974656d735460448201526637a83630bcb2b960c91b6064820152608401610964565b60005b82518110156109f457600083828151811061119757611197613bf6565b602002602001015190506000600b82815481106111b6576111b6613bf6565b90600052602060002090600a02019050806003015460001461121a5760405162461bcd60e51b815260206004820181905260248201527f536f6d656f6e6520697320616c726561647920686f6c64696e672074686973216044820152606401610964565b60048101546001600160a01b038581169116146112855760405162461bcd60e51b815260206004820152602360248201527f4f776e657220666f72206974656d20616e64206368617220646f6e2774206d616044820152620e8c6d60eb1b6064820152608401610964565b600381018690556004810180546001600160a01b03191690556000868152600c602052604090206112b69083612d0f565b506001600160a01b0384166000908152600e602052604090206112d99083612d1b565b50505080806112e790613c3f565b91505061117a565b6008546001600160a01b031633146113555760405162461bcd60e51b815260206004820152602360248201527f4e6f7420706c617965727320636f6e7472616374202d2064726f70416c6c4974604482015262656d7360e81b6064820152608401610964565b6000838152600c6020526040812061136c90612c86565b9050610df28582858588610b06565b611383612d27565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156113bd573d6000803e3d6000fd5b50565b6000818152600c60205260409020606090610a1490612c86565b6113e2613297565b6000828152600c602052604090206113f8613297565b60005b61140483612d81565b811015611719576000600b6114198584612d8b565b8154811061142957611429613bf6565b60009182526020909120600a909102019050600160068201546301000000900460ff16600a81111561145d5761145d613789565b0361149f578060060160049054906101000a900460ff1660000b836000015160000b121561149a576006810154600160201b900460ff1660000b83525b611706565b600260068201546301000000900460ff16600a8111156114c1576114c1613789565b03611505578060060160049054906101000a900460ff1660000b836020015160000b121561149a576006810154600160201b900460ff1660000b6020840152611706565b600360068201546301000000900460ff16600a81111561152757611527613789565b0361156b578060060160049054906101000a900460ff1660000b836040015160000b121561149a576006810154600160201b900460ff1660000b6040840152611706565b600460068201546301000000900460ff16600a81111561158d5761158d613789565b036115d1578060060160049054906101000a900460ff1660000b836060015160000b121561149a576006810154600160201b900460ff1660000b6060840152611706565b600560068201546301000000900460ff16600a8111156115f3576115f3613789565b03611637578060060160049054906101000a900460ff1660000b836080015160000b121561149a576006810154600160201b900460ff1660000b6080840152611706565b600860068201546301000000900460ff16600a81111561165957611659613789565b036116a4578060060160049054906101000a900460ff1660000b8360a0015160000b121561149a576006810154600160201b900460ff1660000b60a0840152600160e0840152611706565b600960068201546301000000900460ff16600a8111156116c6576116c6613789565b03611706578060060160049054906101000a900460ff1660000b8360c0015160000b1215611706576006810154600160201b900460ff1660000b60c08401525b508061171181613c3f565b9150506113fb565b509392505050565b611729612d27565b61173b81670de0b6b3a7640000613c87565b60095550565b60008061174e8686613c74565b905060008361175d8684613c87565b6117679190613cb4565b90506117738782613cc8565b979650505050505050565b60008061178a856110b1565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a1806001036117e7576000915050611814565b6003836117f48684613cc8565b6117fe9190613cdb565b131561180e576001915050611814565b60009150505b9392505050565b6004546001600160a01b031633148061183e57506008546001600160a01b031633145b6118815760405162461bcd60e51b8152602060048201526014602482015273139bdd08185b1b1bddd9590818dbdb9d1c9858dd60621b6044820152606401610964565b6000600b828154811061189657611896613bf6565b90600052602060002090600a020190506118b08383612c93565b6118be816007015483612d97565b6000600382018190556007909101555050565b6007546001600160a01b031633146119205760405162461bcd60e51b8152602060048201526012602482015271139bdd0819d85b595cc818dbdb9d1c9858dd60721b6044820152606401610964565b6000828152600c60205260408082206008549151636621a42160e01b8152600481018690529092916001600160a01b031690636621a42190602401602060405180830381865afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c9190613c0c565b905060006119a983612d81565b9050805b8015611a765760006119ca6119c3600184613c74565b8690612d8b565b90506000600b82815481106119e1576119e1613bf6565b600091825260208083206003600a9390930201918201839055600480830180546001600160a01b038b166001600160a01b031990911681179091556007840185905560088401805460ff19169092179091558352600e90526040909120909150611a4b9083612d0f565b50611a568683612d1b565b50611a618783612d97565b50508080611a6e90613cfb565b9150506119ad565b505050505050565b60606000611a8b83612e13565b90506000808267ffffffffffffffff811115611aa957611aa9613406565b604051908082528060200260200182016040528015611ae257816020015b611acf6132db565b815260200190600190039081611ac75790505b506000868152600d60205260408120919250611afd82612d81565b905060005b81811015611d15576002600b611b188584612d8b565b81548110611b2857611b28613bf6565b600091825260209091206008600a90920201015460ff166004811115611b5057611b50613789565b03611d0357600b611b618483612d8b565b81548110611b7157611b71613bf6565b6000918252602091829020604080516101c081018252600a90930290910180548352600181015493830193909352600280840154918301919091526003830154606083015260048301546001600160a01b03166080830152600583015460a0830152600683015491929160c084019160ff90911690811115611bf557611bf5613789565b6002811115611c0657611c06613789565b8152600682015460ff61010082048116602084015262010000820481166040840152606090920191630100000090910416600a811115611c4857611c48613789565b600a811115611c5957611c59613789565b8152600682015460ff600160201b90910481166020830152600783015460408301526008830154606090920191166004811115611c9857611c98613789565b6004811115611ca957611ca9613789565b8152604080518082019091526009929092015460ff80821684526101009091041660208381019190915201528451859087908110611ce957611ce9613bf6565b60200260200101819052508480611cff90613c3f565b9550505b80611d0d81613c3f565b915050611b02565b50919695505050505050565b600081611d2f846004613c87565b6118149190613cc8565b611d41612d27565b610b046000612eaf565b611d53612d27565b600a805460ff1916911515919091179055565b6001600160a01b0381166000908152600e60205260409020606090610a1490612c86565b600081600003611d9c57506001919050565b81600103611dac57506000919050565b81600203611dbc57506003919050565b81600303611dcc57506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b6044820152606401610964565b604080518082019091526000808252602082015282600003611e5657604051806040016040528060018460000151611e3c9190613d12565b60ff168152602001836020015160ff168152509050610a14565b82600103611e7a57604051806040016040528083600001516001611e3c9190613d2b565b82600203611eb7576040518060400160405280836000015160ff16815260200183602001516001611eab9190613d2b565b60ff1690529050610a14565b82600303611ee8576040518060400160405280836000015160ff16815260200160018460200151611eab9190613d12565b6000611ef384612eff565b604051602001611f039190613d44565b60405160208183030381529060405290508060405162461bcd60e51b81526004016109649190613bc3565b600080826001611f3f866002613e63565b611f499190613c74565b901b8516831c9150509392505050565b6000818152600c6020526040812060609190611f7490612d81565b67ffffffffffffffff811115611f8c57611f8c613406565b604051908082528060200260200182016040528015611fc557816020015b611fb26132db565b815260200190600190039081611faa5790505b50905060005b8151811015612198576000848152600c60205260408120611fec9083612d8b565b9050600b818154811061200157612001613bf6565b6000918252602091829020604080516101c081018252600a90930290910180548352600181015493830193909352600280840154918301919091526003830154606083015260048301546001600160a01b03166080830152600583015460a0830152600683015491929160c084019160ff9091169081111561208557612085613789565b600281111561209657612096613789565b8152600682015460ff61010082048116602084015262010000820481166040840152606090920191630100000090910416600a8111156120d8576120d8613789565b600a8111156120e9576120e9613789565b8152600682015460ff600160201b9091048116602083015260078301546040830152600883015460609092019116600481111561212857612128613789565b600481111561213957612139613789565b8152604080518082019091526009929092015460ff8082168452610100909104166020838101919091520152835184908490811061217957612179613bf6565b602002602001018190525050808061219090613c3f565b915050611fcb565b5092915050565b606060006121ac83612e13565b90506000808267ffffffffffffffff8111156121ca576121ca613406565b6040519080825280602002602001820160405280156121f3578160200160208202803683370190505b506000868152600d6020526040812091925061220e82612d81565b905060005b81811015611d15576002600b6122298584612d8b565b8154811061223957612239613bf6565b600091825260209091206008600a90920201015460ff16600481111561226157612261613789565b0361229b576122708382612d8b565b84868151811061228257612282613bf6565b60209081029190910101528461229781613c3f565b9550505b806122a581613c3f565b915050612213565b600b81815481106122bd57600080fd5b6000918252602091829020600a90910201805460018201546002830154600384015460048501546005860154600687015460078801546008890154604080518082019091526009909a015460ff8181168c526101009182900481169c8c019c909c52989b509699959894976001600160a01b039094169692958083169594830481169462010000840482169463010000008504831694600160201b90048316939216908e565b600180546000918261237483613c3f565b919050555060003360015460014361238c9190613c74565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f198184030181529190528051602090910120905060006123e08585613d12565b6123eb906001613d2b565b90508460ff168160ff16836124009190613e6f565b61240a9190613cc8565b95945050505050565b6001600160a01b0381166000908152600e602052604081206060919061243890612d81565b67ffffffffffffffff81111561245057612450613406565b60405190808252806020026020018201604052801561248957816020015b6124766132db565b81526020019060019003908161246e5790505b50905060005b8151811015612198576001600160a01b0384166000908152600e602052604081206124ba9083612d8b565b9050600b81815481106124cf576124cf613bf6565b6000918252602091829020604080516101c081018252600a90930290910180548352600181015493830193909352600280840154918301919091526003830154606083015260048301546001600160a01b03166080830152600583015460a0830152600683015491929160c084019160ff9091169081111561255357612553613789565b600281111561256457612564613789565b8152600682015460ff61010082048116602084015262010000820481166040840152606090920191630100000090910416600a8111156125a6576125a6613789565b600a8111156125b7576125b7613789565b8152600682015460ff600160201b909104811660208301526007830154604083015260088301546060909201911660048111156125f6576125f6613789565b600481111561260757612607613789565b8152604080518082019091526009929092015460ff8082168452610100909104166020838101919091520152835184908490811061264757612647613bf6565b602002602001018190525050808061265e90613c3f565b91505061248f565b61266e612d27565b600380546001600160a01b039687166001600160a01b031991821617909155600480549587169582168617905560078054821690951790945560058054938616938516939093179092556006805491851691841691909117905560088054919093169116179055565b6007546001600160a01b031633146127265760405162461bcd60e51b8152602060048201526012602482015271139bdd0819d85b595cc818dbdb9d1c9858dd60721b6044820152606401610964565b60005b81518110156127fb576000600c600084848151811061274a5761274a613bf6565b60200260200101518152602001908152602001600020905060005b61276e82612d81565b8110156127e65760006127818383612d8b565b905085600b828154811061279757612797613bf6565b90600052602060002090600a0201600701819055506127d181600d6000898152602001908152602001600020612d0f90919063ffffffff16565b505080806127de90613c3f565b915050612765565b505080806127f390613c3f565b915050612729565b505050565b600080612820836000015160000b856000015160000b6103f39190613cdb565b90506000612841846020015160000b866020015160000b6103f39190613cdb565b905061240a8183613cc8565b6000818152600d60205260409020606090610a1490612c86565b61286f612d27565b6001600160a01b0381166128d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610964565b6113bd81612eaf565b805182516000916128ed91613e83565b60000b6001036128ff57506000610a14565b8151835161290d9190613e83565b60000b1961291d57506001610a14565b816020015183602001516129319190613e83565b60000b1961294157506002610a14565b816020015183602001516129559190613e83565b60000b60010361296757506003610a14565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b6044820152606401610964565b6005546040516309b6507f60e41b81526004808201526000602482018190526001600160a01b03858116604484015290921690639b6507f09064174876e8009060640160206040518083038185885af1158015612a06573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612a2b9190613ea4565b600554604051632851838160e01b8152600481018390529192506000916001600160a01b0390911690632851838190602401602060405180830381865afa158015612a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9e9190613ea4565b600b8054600181810183556000839052600a9091027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90183815591549293509091612ae99190613c74565b600180830191909155600282018490556003820187905560058201819055600b90612b1e90849060049061074d906000611d21565b60ff161015612b2e576001612b31565b60025b60068201805460ff19166001836002811115612b4f57612b4f613789565b021790555060068101805462ffff0019169055612b7f612b7783600461074d60006001611d21565b60ff16613008565b60068201805463ff0000001916630100000083600a811115612ba357612ba3613789565b02179055506000612bbc83600461074d60016002611d21565b90506002600683015460ff166002811115612bd957612bd9613789565b03612bf8576003612beb826002613ebd565b612bf59190613ed9565b90505b612c0a600160048360ff16600f611741565b60068301805464ff000000001916600160201b60ff8416021790556007830186905560088301805491925060019160ff19168280021790555060018201546000888152600c60205260409020612c5f91612d0f565b5060018201546000868152600d60205260409020612c7c91612d0f565b5050505050505050565b60606000611814836130b7565b6000828152600c60205260409020612cab9082613113565b612cf75760405162461bcd60e51b815260206004820152601e60248201527f506c6179657220646f65736e277420686176652074686973206974656d2100006044820152606401610964565b6000828152600c602052604090206127fb9082612d1b565b6000611814838361312b565b6000611814838361317a565b6000546001600160a01b03163314610b045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610964565b6000610a14825490565b6000611814838361326d565b6000828152600d60205260409020612daf9082613113565b612dfb5760405162461bcd60e51b815260206004820152601c60248201527f47616d6520646f65736e277420686176652074686973206974656d21000000006044820152606401610964565b6000828152600d602052604090206127fb9082612d1b565b6000818152600d60205260408120819081612e2d82612d81565b905060005b81811015612ea5576002600b612e488584612d8b565b81548110612e5857612e58613bf6565b600091825260209091206008600a90920201015460ff166004811115612e8057612e80613789565b03612e935783612e8f81613c3f565b9450505b80612e9d81613c3f565b915050612e32565b5091949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081600003612f265750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612f505780612f3a81613c3f565b9150612f499050600a83613cb4565b9150612f2a565b60008167ffffffffffffffff811115612f6b57612f6b613406565b6040519080825280601f01601f191660200182016040528015612f95576020820181803683370190505b5090505b841561300057612faa600183613c74565b9150612fb7600a86613e6f565b612fc2906030613cc8565b60f81b818381518110612fd757612fd7613bf6565b60200101906001600160f81b031916908160001a905350612ff9600a86613cb4565b9450612f99565b949350505050565b60006001821161301a57506000919050565b6002821161302a57506001919050565b6003821161303a57506002919050565b6004821161304a57506003919050565b6005821161305a57506004919050565b6006821161306a57506005919050565b6008821161307a57506006919050565b600a821161308a57506007919050565b600c821161309a57506008919050565b600e82116130aa57506009919050565b50600a919050565b919050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561310757602002820191906000526020600020905b8154815260200190600101908083116130f3575b50505050509050919050565b60008181526001830160205260408120541515611814565b600081815260018301602052604081205461317257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a14565b506000610a14565b6000818152600183016020526040812054801561326357600061319e600183613c74565b85549091506000906131b290600190613c74565b90508181146132175760008660000182815481106131d2576131d2613bf6565b90600052602060002001549050808760000184815481106131f5576131f5613bf6565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061322857613228613efb565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a14565b6000915050610a14565b600082600001828154811061328457613284613bf6565b9060005260206000200154905092915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b604080516101c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290528351808501909452818452830152906101a082015290565b6001600160a01b03811681146113bd57600080fd5b60008060006060848603121561338657600080fd5b8335925060208401356133988161335c565b929592945050506040919091013590565b6000602082840312156133bb57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156133fa578351835292840192918401916001016133de565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261342d57600080fd5b8135602067ffffffffffffffff8083111561344a5761344a613406565b8260051b604051601f19603f8301168101818110848211171561346f5761346f613406565b60405293845285810183019383810192508785111561348d57600080fd5b83870191505b8482101561177357813583529183019190830190613493565b600080600080600060a086880312156134c457600080fd5b85359450602086013567ffffffffffffffff8111156134e257600080fd5b6134ee8882890161341c565b959895975050505060408401359360608101359360809091013592509050565b60008060008060006080868803121561352657600080fd5b85356135318161335c565b945060208601356135418161335c565b935060408601359250606086013567ffffffffffffffff8082111561356557600080fd5b818801915088601f83011261357957600080fd5b81358181111561358857600080fd5b89602082850101111561359a57600080fd5b9699959850939650602001949392505050565b600080600080606085870312156135c357600080fd5b84359350602085013567ffffffffffffffff808211156135e257600080fd5b818701915087601f8301126135f657600080fd5b81358181111561360557600080fd5b8860208260051b850101111561361a57600080fd5b60208301955080945050505060408501356136348161335c565b939692955090935050565b60008060006060848603121561365457600080fd5b83359250602084013567ffffffffffffffff81111561367257600080fd5b61367e8682870161341c565b925050604084013561368f8161335c565b809150509250925092565b600080600080608085870312156136b057600080fd5b5050823594602084013594506040840135936060013592509050565b6000610100820190508251600081810b84526020850151810b60208501526040850151810b60408501526060850151810b60608501526080850151810b608085015260a0850151810b60a085015260c0850151810b60c0850152505060e083015161219860e084018215159052565b60008060006060848603121561375057600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561377a57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b600381106137af576137af613789565b9052565b600b81106137af576137af613789565b600581106137af576137af613789565b602080825282518282018190526000919060409081850190868401855b828110156138e05781518051855286810151878601528581015186860152606080820151908601526080808201516001600160a01b03169086015260a0808201519086015260c0808201516138478288018261379f565b505060e08181015160ff81168783015250506101008181015160ff81168783015250506101208082015161387d828801826137b3565b50506101408181015160ff16908601526101608082015190860152610180808201516138ab828801826137c3565b50506101a090810151805160ff9081169287019290925260200151166101c08501526101e090930192908501906001016137f0565b5091979650505050505050565b6000602082840312156138ff57600080fd5b8135801515811461181457600080fd5b60006020828403121561392157600080fd5b81356118148161335c565b803560ff811681146130b257600080fd5b60006040828403121561394f57600080fd5b6040516040810181811067ffffffffffffffff8211171561397257613972613406565b6040529050806139818361392c565b815261398f6020840161392c565b60208201525092915050565b600080606083850312156139ae57600080fd5b823591506139bf846020850161393d565b90509250929050565b60408101610a148284805160ff908116835260209182015116910152565b8e8152602081018e9052604081018d9052606081018c90526001600160a01b038b16608082015260a081018a90526101e08101613a2660c083018b61379f565b60ff89811660e08401528816610100830152613a466101208301886137b3565b60ff861661014083015284610160830152613a656101808301856137c3565b825160ff9081166101a08401526020840151166101c08301529f9e505050505050505050505050505050565b60008060408385031215613aa457600080fd5b613aad8361392c565b91506139bf6020840161392c565b600080600080600060a08688031215613ad357600080fd5b8535613ade8161335c565b94506020860135613aee8161335c565b93506040860135613afe8161335c565b92506060860135613b0e8161335c565b91506080860135613b1e8161335c565b809150509295509295909350565b60008060408385031215613b3f57600080fd5b82359150602083013567ffffffffffffffff811115613b5d57600080fd5b613b698582860161341c565b9150509250929050565b60008060808385031215613b8657600080fd5b613b90848461393d565b91506139bf846040850161393d565b60005b83811015613bba578181015183820152602001613ba2565b50506000910152565b6020815260008251806020840152613be2816040850160208701613b9f565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613c1e57600080fd5b81516118148161335c565b634e487b7160e01b600052601160045260246000fd5b600060018201613c5157613c51613c29565b5060010190565b6000600160ff1b8201613c6d57613c6d613c29565b5060000390565b81810381811115610a1457610a14613c29565b8082028115828204841417610a1457610a14613c29565b634e487b7160e01b600052601260045260246000fd5b600082613cc357613cc3613c9e565b500490565b80820180821115610a1457610a14613c29565b818103600083128015838313168383128216171561219857612198613c29565b600081613d0a57613d0a613c29565b506000190190565b60ff8281168282160390811115610a1457610a14613c29565b60ff8181168382160190811115610a1457610a14613c29565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251613d72816013850160208701613b9f565b9190910160130192915050565b600181815b80851115613dba578160001904821115613da057613da0613c29565b80851615613dad57918102915b93841c9390800290613d84565b509250929050565b600082613dd157506001610a14565b81613dde57506000610a14565b8160018114613df45760028114613dfe57613e1a565b6001915050610a14565b60ff841115613e0f57613e0f613c29565b50506001821b610a14565b5060208310610133831016604e8410600b8410161715613e3d575081810a610a14565b613e478383613d7f565b8060001904821115613e5b57613e5b613c29565b029392505050565b60006118148383613dc2565b600082613e7e57613e7e613c9e565b500690565b600082810b9082900b03607f198112607f82131715610a1457610a14613c29565b600060208284031215613eb657600080fd5b5051919050565b60ff818116838216029081169081811461219857612198613c29565b600060ff831680613eec57613eec613c9e565b8060ff84160491505092915050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122023dd5f0c74493fd6b303ce51a2cc0addf9f76acc590763cc8250b4bfcae999e664736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14883,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14888,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gameToEventBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2332_storage)"
      },
      {
        "astId": 9954,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "lobbies",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LobbyInterface)9864"
      },
      {
        "astId": 9956,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gamesContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9959,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "uif",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(UIFInterface)9933"
      },
      {
        "astId": 9961,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "actionsContract",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9964,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "games",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(GameInterface)9883"
      },
      {
        "astId": 9967,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "playersContract",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(PlayersContract)9941"
      },
      {
        "astId": 10018,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintCost",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10021,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintIsActive",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 10027,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "items",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Item)14850_storage)dyn_storage"
      },
      {
        "astId": 10032,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "playerToItems",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2332_storage)"
      },
      {
        "astId": 10037,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gameToItems",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2332_storage)"
      },
      {
        "astId": 10042,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "ownedItems",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(UintSet)2332_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Item)14850_storage)dyn_storage": {
        "base": "t_struct(Item)14850_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Item[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GameInterface)9883": {
        "encoding": "inplace",
        "label": "contract GameInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LobbyInterface)9864": {
        "encoding": "inplace",
        "label": "contract LobbyInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PlayersContract)9941": {
        "encoding": "inplace",
        "label": "contract PlayersContract",
        "numberOfBytes": "20"
      },
      "t_contract(UIFInterface)9933": {
        "encoding": "inplace",
        "label": "contract UIFInterface",
        "numberOfBytes": "20"
      },
      "t_enum(ItemCategory)14575": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemCategory",
        "numberOfBytes": "1"
      },
      "t_enum(ItemType)14587": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemType",
        "numberOfBytes": "1"
      },
      "t_enum(WorldItemStatus)14571": {
        "encoding": "inplace",
        "label": "enum BCTypes.WorldItemStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UintSet)2332_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2332_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(UintSet)2332_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2332_storage"
      },
      "t_struct(Item)14850_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Item",
        "members": [
          {
            "astId": 14819,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "genHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 14821,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14823,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "uifID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14825,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "holdingPlayerId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14827,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 14829,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "weight",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 14832,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemCategory",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ItemCategory)14575"
          },
          {
            "astId": 14834,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsAbility",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 14836,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsFlaw",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 14839,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemType",
            "offset": 3,
            "slot": "6",
            "type": "t_enum(ItemType)14587"
          },
          {
            "astId": 14841,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "power",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 14843,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "currentGame",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 14846,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(WorldItemStatus)14571"
          },
          {
            "astId": 14849,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "position",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(Position)14659_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Position)14659_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 14656,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 14658,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)1874_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1869,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1873,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2332_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2331,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1874_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}