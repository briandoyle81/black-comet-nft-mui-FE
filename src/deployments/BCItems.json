{
  "address": "0x6ff71B1bfd22d5169927397aE781722cC348F716",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matic",
          "type": "uint256"
        }
      ],
      "name": "SetMintCostInMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_playerIds",
          "type": "uint256[]"
        }
      ],
      "name": "addItemsToGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addItemsToPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitItemToMission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "destroyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "dropAllItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "games",
      "outputs": [
        {
          "internalType": "contract GameInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemIDsByPlayer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemsByPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "currentGame",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.WorldItemStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getItemsIdsInGame",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getOwnedItemIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "getTraitModifiers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "health",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "carry",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "defense",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "hack",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "breach",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "shoot",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "melee",
              "type": "int8"
            }
          ],
          "internalType": "struct BCTypes.Traits",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getWorldItemIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getWorldItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "currentGame",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.WorldItemStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "genHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uifID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.ItemCategory",
          "name": "itemCategory",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsAbility",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsFlaw",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.ItemType",
          "name": "itemType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "power",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentGame",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.WorldItemStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbies",
      "outputs": [
        {
          "internalType": "contract LobbyInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_holderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "lootItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_newOwnerAddress",
          "type": "address"
        }
      ],
      "name": "pickupWorldItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playersContract",
      "outputs": [
        {
          "internalType": "contract PlayersContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lobbyContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UIFAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersContract",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setMintingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnCompanyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_formerOwnerId",
          "type": "uint256"
        }
      ],
      "name": "spawnWorldItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "takeItemsHome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uif",
      "outputs": [
        {
          "internalType": "contract UIFInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb0c226a1e3b0341856e7e59d547b5fa7b3f682fc1685bcf8278573b2cab31d7",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x6ff71B1bfd22d5169927397aE781722cC348F716",
    "transactionIndex": 2,
    "gasUsed": "3417319",
    "logsBloom": "0x
    "blockHash": "0xbac10d2b0805929aeec4aafa2bb8336af92154c8124d2e3a700c6b5bfb78fcd1",
    "transactionHash": "0xdb0c226a1e3b0341856e7e59d547b5fa7b3f682fc1685bcf8278573b2cab31d7",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 34255785,
        "transactionHash": "0xdb0c226a1e3b0341856e7e59d547b5fa7b3f682fc1685bcf8278573b2cab31d7",
        "address": "0x6ff71B1bfd22d5169927397aE781722cC348F716",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xbac10d2b0805929aeec4aafa2bb8336af92154c8124d2e3a700c6b5bfb78fcd1"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 34255785,
        "transactionHash": "0xdb0c226a1e3b0341856e7e59d547b5fa7b3f682fc1685bcf8278573b2cab31d7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000016d0250cf1d67700000000000000000000000000000000000000000000000002ac706911f23f53000000000000000000000000000000000000000000001d8ee1dbf2b82f875f0f0000000000000000000000000000000000000000000000000295a044050068dc000000000000000000000000000000000000000000001d8ee1f2c2dd3c793586",
        "logIndex": 4,
        "blockHash": "0xbac10d2b0805929aeec4aafa2bb8336af92154c8124d2e3a700c6b5bfb78fcd1"
      }
    ],
    "blockNumber": 34255785,
    "cumulativeGasUsed": "4332715",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78e2a8fb7cfd3a77bab225bc7b7bf1cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matic\",\"type\":\"uint256\"}],\"name\":\"SetMintCostInMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_playerIds\",\"type\":\"uint256[]\"}],\"name\":\"addItemsToGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addItemsToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitItemToMission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"destroyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"dropAllItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GameInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemIDsByPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemsByPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentGame\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getItemsIdsInGame\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOwnedItemIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"getTraitModifiers\",\"outputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"health\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"carry\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"hack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"breach\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"shoot\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"melee\",\"type\":\"int8\"}],\"internalType\":\"struct BCTypes.Traits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getWorldItemIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getWorldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentGame\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentGame\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.WorldItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbies\",\"outputs\":[{\"internalType\":\"contract LobbyInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"lootItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_newOwnerAddress\",\"type\":\"address\"}],\"name\":\"pickupWorldItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersContract\",\"outputs\":[{\"internalType\":\"contract PlayersContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lobbyContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UIFAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersContract\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnCompanyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_formerOwnerId\",\"type\":\"uint256\"}],\"name\":\"spawnWorldItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"takeItemsHome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uif\",\"outputs\":[{\"internalType\":\"contract UIFInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCItems.sol\":\"BCItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BCItems.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// Brian Doyle github.com/briandoyle81\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./BCUtils.sol\\\";\\nimport \\\"./BCTypes.sol\\\";\\n\\ninterface LobbyInterface {\\n    // TODO: Commit item to player inventory for game\\n}\\n\\ninterface GameInterface {\\n    function placeWorldItems(uint _gameId, uint[] memory _itemIds, uint _row, uint _col) external;\\n    function deleteWorldItems(uint[] calldata _worldItemIds) external;\\n}\\n\\ninterface UIFInterface {\\n    function mintItem(uint _type, uint _quality, address _minter) external payable returns (uint);\\n    function extGetProperties(uint _id) external view returns (bytes32);\\n    function extGetCurrentOwner(uint _id) external view returns (address);\\n    function ownerOf(uint256 _id) external view returns (address);\\n    function extGetUIIsOwned(address _currentOwner) external view returns (uint[] memory);\\n    function burn(uint _id) external;\\n    function setCurrentOwner(address _newOwner, address _oldOwner, uint _id) external;\\n}\\n\\ninterface PlayersContract {\\n    function extGetPlayerOwner(uint _id) external view returns (address);\\n}\\n\\ncontract BCItems is IERC721Receiver, Ownable, BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    LobbyInterface public lobbies;\\n    address public gamesContract;\\n    UIFInterface public uif;\\n    address public actionsContract;\\n    GameInterface public games;\\n    PlayersContract public playersContract;\\n\\n    function setContractAddresses(\\n        address _lobbyContractAddress,\\n        address _gameContract,\\n        address _UIFAddress,\\n        address _actionsContract,\\n        address _playersContract\\n        ) public onlyOwner {\\n        lobbies = LobbyInterface(_lobbyContractAddress);\\n        gamesContract = _gameContract;\\n        games = GameInterface(_gameContract);\\n        uif = UIFInterface(_UIFAddress);\\n        actionsContract = _actionsContract;\\n        playersContract = PlayersContract(_playersContract);\\n    }\\n\\n    uint public mintCost = 100 gwei; // TODO: Set these\\n\\n    bool public mintIsActive = true; // TODO: Is this still useful?\\n\\n    event Received();\\n\\n    // TODO: Add company items using standard item in UIF\\n\\n    BCTypes.Item[] public items;\\n    mapping(uint256 => EnumerableSet.UintSet) playerToItems; // TODO: Handle if made upgradeable\\n    mapping(uint256 => EnumerableSet.UintSet) gameToItems;\\n    mapping(address => EnumerableSet.UintSet) ownedItems; // Items out of game\\n\\n    constructor() {\\n        // Use 0 for no modifiers\\n        // TODO: BURN ZERO\\n    }\\n\\n    function spawnCompanyItem() public payable {\\n        // TODO: Make copies of a specific item using the standard items mechanism in UIF\\n        // TODO: Remove owner free call\\n        // TODO: DRY\\n        require(msg.sender == owner() || msg.value == mintCost, \\\"Incorrect payment\\\");\\n        require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n        // TODO: Implement\\n    }\\n\\n    // Create a new item that goes directly to a player's inventory\\n    // IE Draw from the item deck\\n    // ID of the _player_ holding this item\\n    function lootItem(uint _holdingPlayerId, address _holderAddress, uint _gameId) public payable {\\n        // TODO: Remove owner free call\\n        string memory paymentError = string(abi.encodePacked(\\\"Payed: \\\", msg.value, \\\", cost is: \\\", mintCost));\\n        require(msg.sender == owner() || msg.value == mintCost, paymentError);\\n        // require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        // TODO: Finalize allowed senders\\n        require(msg.sender == owner() || msg.sender == address(gamesContract) || msg.sender == actionsContract, \\\"Contract not allowed\\\");\\n\\n        _createNewItem(_holdingPlayerId, _holderAddress, _gameId);\\n    }\\n\\n    // Pick up world items and give them to the player\\n    function pickupWorldItems(uint _playerId, uint[] calldata _itemIds, address _newOwnerAddress) public {\\n        require(msg.sender == address(actionsContract), \\\"Not actions contract\\\");\\n\\n        for(uint i = 0; i < _itemIds.length; i++) {\\n            // Set UniversalInventoryItem.currentOwner in UIF // TODO: This should take an array, would save gas\\n            uif.setCurrentOwner(_newOwnerAddress, address(0), items[_itemIds[i]].uifID);\\n\\n            playerToItems[_playerId].add(_itemIds[i]);\\n\\n            BCTypes.Item storage item = items[_itemIds[i]];\\n            item.holdingPlayerId = _playerId;\\n            item.status = BCTypes.WorldItemStatus.HELD;\\n            item.position = BCTypes.Position(0, 0);\\n        }\\n    }\\n\\n    // Spawn world items when a player drops them // TODO: Consider renaming, or also use to drop items in world\\n    function spawnWorldItems(uint _gameId, uint[] memory _itemIds, uint _row, uint _col, uint _formerOwnerId) public {\\n        require(msg.sender == address(actionsContract), \\\"Not actions contract\\\");\\n        // TODO: Make sure item system doesn't allow reclaiming these\\n        // Set owner in UIF                                         // TODO: Assumption\\n        address formerOwnerAddress = playersContract.extGetPlayerOwner(items[_itemIds[0]].holdingPlayerId);\\n        for(uint i = 0; i < _itemIds.length; i++) {\\n            uif.setCurrentOwner(address(0), formerOwnerAddress, items[_itemIds[i]].uifID);\\n            _removeItemFromPlayerToItem(_formerOwnerId, _itemIds[i]);\\n            BCTypes.Item storage item = items[_itemIds[i]];\\n            item.holdingPlayerId = 0;\\n            item.status = BCTypes.WorldItemStatus.ON_GROUND;\\n            item.position = BCTypes.Position(uint8(_row), uint8(_col));\\n        }\\n    }\\n\\n    function dropAllItems(uint _gameId, uint _playerId, uint _row, uint _col) public {\\n        require(msg.sender == address(playersContract), \\\"Not players contract\\\");\\n\\n        uint[] memory itemIds = playerToItems[_playerId].values();\\n        spawnWorldItems(_gameId, itemIds, _row, _col, _playerId);\\n    }\\n\\n    // Attach items to a player as they enlist (currentGame must still be set)\\n    function addItemsToPlayer(uint _playerId, uint[] memory _itemIds, address _owner) public {\\n        require(msg.sender == address(playersContract), \\\"Not players contract\\\");\\n\\n        for(uint i = 0; i < _itemIds.length; i++) {\\n            uint itemId = _itemIds[i];\\n            BCTypes.Item storage item = items[itemId];\\n            require(item.holdingPlayerId == 0, \\\"Someone is already holding this!\\\");\\n            require(item.ownerAddress == _owner, \\\"Owner for item and char don't match\\\");\\n            item.holdingPlayerId = _playerId;\\n            item.ownerAddress = address(0);\\n\\n            playerToItems[_playerId].add(itemId);\\n            ownedItems[_owner].remove(itemId);\\n        }\\n    }\\n\\n    // Set game information on items added via addItemsToPlayer\\n    function addItemsToGame(uint _gameId, uint[] memory _playerIds) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n        for(uint i = 0; i < _playerIds.length; i++) {\\n            EnumerableSet.UintSet storage playerItems = playerToItems[_playerIds[i]];\\n            for(uint k = 0; k < playerItems.length(); k++) {\\n                uint itemId = playerItems.at(k);\\n                items[itemId].currentGame = _gameId;\\n                gameToItems[_gameId].add(itemId);\\n            }\\n        }\\n    }\\n\\n    // At the end of the game, items still held by player go into their owners\\n    // out-of-game inventory\\n    // CRITICAL: ONLY CALLED BY games.leaveGame()!!!\\n    function takeItemsHome(uint _playerId, uint _gameId) public {\\n        require(msg.sender == address(games), \\\"Not games contract\\\");\\n\\n        EnumerableSet.UintSet storage itemsTaken = playerToItems[_playerId];\\n        address newOwner = playersContract.extGetPlayerOwner(_playerId);\\n\\n        for(uint i = 0; i < itemsTaken.length(); i++) {\\n            uint itemId = itemsTaken.at(i);\\n            BCTypes.Item storage item = items[itemId];\\n\\n            item.holdingPlayerId = 0;\\n            item.ownerAddress = newOwner;\\n            item.currentGame = 0;\\n            item.status = BCTypes.WorldItemStatus.OUT_OF_GAME;\\n\\n            ownedItems[newOwner].add(itemId);\\n            itemsTaken.remove(itemId);\\n            _removeItemFromGameToItem(_gameId, itemId);\\n        }\\n    }\\n\\n    function _createNewItem(uint _holdingPlayerId, address _holderAddress, uint _gameId) internal {\\n\\n        // I don't _think_ this is a reentrancy risk be cause I control the receiving address\\n        // TODO: Make sure passing payment this way is safe\\n        // TODO: DOUBLY SO FOR THIS ONE!!!!\\n        // TODO: Update costs for by-type payment scheme\\n        uint uifID = uif.mintItem{value: 100 gwei}(4, 0, _holderAddress); // TODO: Hardcoded value\\n        bytes32 finalHash = uif.extGetProperties(uifID);\\n\\n        // First pass interpretation will make weapons, armor, and stat boosters\\n        // Items with special abilities will be dealt with after that system is implemented\\n\\n        BCTypes.Item storage newItem = items.push();\\n\\n        newItem.genHash = finalHash;\\n\\n        newItem.id = items.length-1; // -1 because we've already pushed\\n        newItem.uifID = uifID;\\n\\n        newItem.holdingPlayerId = _holdingPlayerId;\\n\\n        newItem.weight = 1;\\n\\n        newItem.itemCategory = sliceHashToSmallInt(finalHash, 4, getUIOffset(1, 0)) >= 11 ? BCTypes.ItemCategory.SCAVENGER : BCTypes.ItemCategory.ARTIFACT; // Quality <= 11 is 2/3 scav items.  // TODO: Eval\\n\\n        newItem.grantsAbility = 0; // NO abilities or flaws for now\\n        newItem.grantsFlaw = 0;\\n\\n        newItem.itemType = _getItemType(sliceHashToSmallInt(finalHash, 4, getUIOffset(0, 1)));\\n\\n        uint8 newItemPower = sliceHashToSmallInt(finalHash, 4, getUIOffset(1, 2));\\n        if(newItem.itemCategory == BCTypes.ItemCategory.SCAVENGER) {\\n           newItemPower = newItemPower * 2 / 3; // TODO: Evaluate nerfing scav items\\n        }\\n        newItemPower = normalizeToSmallRange(1, 4, newItemPower, 15);\\n\\n        newItem.power = newItemPower;\\n\\n        newItem.currentGame = _gameId;\\n        newItem.status = BCTypes.WorldItemStatus.HELD;\\n        // TODO: Dry this\\n        playerToItems[_holdingPlayerId].add(newItem.id);\\n        gameToItems[_gameId].add(newItem.id);\\n        // TODO: Event\\n    }\\n\\n    function _getItemType(uint _value) internal pure returns (BCTypes.ItemType) {\\n        // TODO: UIF Spec is incomplete, most items will be unusable for now\\n        if (_value <= 1) {\\n            return BCTypes.ItemType.CONSUMABLE;\\n        } else if (_value <= 2) {\\n            return BCTypes.ItemType.HEALTH;\\n        } else if (_value <= 3) {\\n            return BCTypes.ItemType.CARRY;\\n        } else if (_value <= 4) {\\n            return BCTypes.ItemType.DEFENSE;\\n        } else if (_value <= 5) {\\n            return BCTypes.ItemType.HACK;\\n        } else if (_value <= 6) {\\n            return BCTypes.ItemType.BREACH;\\n        } else if (_value <= 8) {\\n            return BCTypes.ItemType.HAZARD;\\n        } else if (_value <= 10) {\\n            return BCTypes.ItemType.ARMOR;\\n        } else if (_value <= 12) {\\n            return BCTypes.ItemType.RANGED;\\n        } else if (_value <= 14) {\\n            return BCTypes.ItemType.MELEE;\\n        } else {\\n            return BCTypes.ItemType.SPECIAL;\\n        }\\n    }\\n\\n    function commitItemToMission() public {\\n        // TODO:\\n        // Require you own this item and it's not in game\\n    }\\n\\n    // TODO: Complete This\\n    // Get all items, held by players, and on the ground\\n    // function getItemsInGame() {\\n\\n    // }\\n\\n    function _removeItemFromPlayerToItem(uint _playerId, uint _itemId) internal {\\n        // TODO: Validate error is needed, and probably use assert\\n        require(playerToItems[_playerId].contains(_itemId), \\\"Player doesn't have this item!\\\");\\n        playerToItems[_playerId].remove(_itemId);\\n    }\\n\\n    function _removeItemFromGameToItem(uint _gameId, uint _itemId) internal {\\n        // TODO: Validate error is needed, and probably use assert\\n        require(gameToItems[_gameId].contains(_itemId), \\\"Game doesn't have this item!\\\");\\n        gameToItems[_itemId].remove(_itemId);\\n    }\\n\\n    function destroyItem(uint _playerId, uint _itemId) public {\\n        // TODO: CRITICAL -> Ensure complete test coverage\\n        require(msg.sender == gamesContract, \\\"Not game contract\\\");\\n        BCTypes.Item storage item = items[_itemId];\\n\\n        _removeItemFromPlayerToItem(_playerId, _itemId);\\n        _removeItemFromGameToItem(item.currentGame, _itemId);\\n\\n        item.holdingPlayerId = 0;\\n        item.currentGame = 0;\\n\\n        // TODO: Handle invincible legendaries here if that becomes a thing\\n        // TODO: Handle safe item if that becomes a thing\\n        // Burn the NFT\\n        uif.burn(_itemId); // Sad but necessary :(\\n    }\\n\\n    function _countWorldItems(uint _gameId) internal view returns (uint) {\\n        uint counter;\\n\\n        EnumerableSet.UintSet storage ids = gameToItems[_gameId];\\n\\n        uint length = ids.length();\\n        for(uint i = 0; i < length; i++) {\\n            if(items[ids.at(i)].status == BCTypes.WorldItemStatus.ON_GROUND) {\\n                counter++;\\n            }\\n        }\\n\\n        return counter;\\n    }\\n\\n    // Same notes as below about the set\\n    // Returns the ids of items that are currently on the ground in the selected game\\n    function getWorldItemIds(uint _gameId) public view returns (uint[] memory) {\\n        uint count = _countWorldItems(_gameId);\\n        uint cursor;\\n        uint[] memory itemIds = new uint[](count);\\n\\n        EnumerableSet.UintSet storage ids = gameToItems[_gameId];\\n\\n        uint length = ids.length();\\n        for(uint i = 0; i < length; i++) {\\n            if(items[ids.at(i)].status == BCTypes.WorldItemStatus.ON_GROUND) {\\n                itemIds[cursor] = ids.at(i);\\n                cursor++;\\n            }\\n        }\\n\\n        return itemIds;\\n    }\\n\\n    // Same notes as below about the set\\n    // Returns the ids of items that are currently on the ground in the selected game\\n    function getWorldItems(uint _gameId) public view returns (BCTypes.Item[] memory) {\\n        uint count = _countWorldItems(_gameId);\\n        uint cursor;\\n        BCTypes.Item[] memory worldItems = new BCTypes.Item[](count);\\n\\n        EnumerableSet.UintSet storage ids = gameToItems[_gameId];\\n\\n        uint length = ids.length();\\n        for(uint i = 0; i < length; i++) {\\n            if(items[ids.at(i)].status == BCTypes.WorldItemStatus.ON_GROUND) {\\n                worldItems[cursor] = items[ids.at(i)];\\n                cursor++;\\n            }\\n        }\\n\\n        return worldItems;\\n    }\\n    // TODO: D should be lowercase\\n    // Per notes in EnumerableSet, this can be problematic because it's unbounded and\\n    // will copy the entire storage.\\n    // I don't think it's a problem here, because the player shouldn't really ever\\n    // have more than 10 items\\n    function getItemIDsByPlayer(uint _playerID) public view returns (uint[] memory) {\\n        return playerToItems[_playerID].values();\\n    }\\n\\n    // This could be expensive, don't use in contract\\n    function getOwnedItemIds(address _address) external view returns (uint[] memory) {\\n        return ownedItems[_address].values();\\n    }\\n\\n    // Per notes in EnumerableSet, this can be problematic because it's unbounded and\\n    // will copy the entire storage.\\n    // I don't think it's a problem here, because the player shouldn't really ever\\n    // have more than 10 items\\n    function getItemsByPlayer(uint _playerID) public view returns (BCTypes.Item[] memory) {\\n        BCTypes.Item[] memory itemsOwned = new BCTypes.Item[](playerToItems[_playerID].length());\\n        for (uint i = 0; i < itemsOwned.length; i++) {\\n            uint itemId = playerToItems[_playerID].at(i);\\n            itemsOwned[i] = items[itemId];\\n        }\\n        return itemsOwned;\\n    }\\n\\n    function getItemsIdsInGame(uint _gameId) external view returns (uint[] memory) {\\n        return gameToItems[_gameId].values();\\n    }\\n\\n    // Per notes in EnumerableSet, this can be problematic because it's unbounded and\\n    // will copy the entire storage.\\n    // I don't think it's a problem here, because the player shouldn't really ever\\n    // have more than 10 items\\n    // Apply item modifiers (and eventually powers)\\n    // NOTE that for items, only the highest counts, they do not stack!\\n    // TODO: This doesn't mesh with choosing which item to attack with\\n    function getTraitModifiers(uint _playerId) public view returns (BCTypes.Traits memory) {\\n        EnumerableSet.UintSet storage itemIds = playerToItems[_playerId];\\n\\n        BCTypes.Traits memory modifiers;\\n\\n        for(uint i = 0; i < itemIds.length(); i++) {\\n            BCTypes.Item storage item = items[itemIds.at(i)];\\n\\n            if(item.itemType == BCTypes.ItemType.HEALTH) {\\n                if(modifiers.health < int8(item.power)) {\\n                    modifiers.health = int8(item.power);\\n                }\\n            } else if(item.itemType == BCTypes.ItemType.CARRY) {\\n                if(modifiers.carry < int8(item.power)) {\\n                    modifiers.carry = int8(item.power);\\n                }\\n            } else if(item.itemType == BCTypes.ItemType.DEFENSE) {\\n                if(modifiers.defense < int8(item.power)) {\\n                    modifiers.defense = int8(item.power);\\n                }\\n            } else if(item.itemType == BCTypes.ItemType.HACK) {\\n                if(modifiers.hack < int8(item.power)) {\\n                    modifiers.hack = int8(item.power);\\n                }\\n            } else if(item.itemType == BCTypes.ItemType.BREACH) {\\n                if(modifiers.breach < int8(item.power)) {\\n                    modifiers.breach = int8(item.power);\\n                }\\n            } else if(item.itemType == BCTypes.ItemType.RANGED) {\\n                if(modifiers.shoot < int8(item.power)) {\\n                    modifiers.shoot = int8(item.power);\\n                }\\n            } else if(item.itemType == BCTypes.ItemType.MELEE) {\\n                if(modifiers.melee < int8(item.power)) {\\n                    modifiers.melee = int8(item.power);\\n                }\\n            }\\n        }\\n\\n        // TODO: Add penalty and bonus modifiers\\n\\n        return modifiers;\\n    }\\n\\n    function transferFundsOut() public onlyOwner {\\n        // TODO: Track and limit to transferable balance, leaving enough for buybacks\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function setMintingStatus(bool _status) public onlyOwner {\\n        mintIsActive = _status;\\n    }\\n\\n    function SetMintCostInMatic(uint _matic) public onlyOwner {\\n        mintCost = _matic*10**18;\\n    }\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        _operator;\\n        _from;\\n        _tokenId;\\n        _data;\\n        emit Received();\\n        return 0x150b7a02;\\n    }\\n}\\n\",\"keccak256\":\"0x9ed2b37cc21dba034bbbc226339d0eb3bf75860952e9ed481f8880baf828aa50\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM, DROP_ITEMS, PICK_ITEMS, LEAVE_GAME } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType { NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY, ROOM }\\n    enum WorldItemStatus { DESTROYED, HELD, ON_GROUND, DISCARDED, OUT_OF_GAME }\\n\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { CONSUMABLE, HEALTH, CARRY, DEFENSE, HACK, BREACH, HAZARD, ARMOR, RANGED, MELEE, SPECIAL }\\n\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n\\n        Position position;\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;  // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;  // Currently unused\\n        bool hasEgg;\\n\\n        uint gameId;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n\\n        uint turnsTaken;\\n\\n        EventTracker eventTracker;\\n\\n        // address mapContract;\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n\\n        uint DEBUG_returnAmount;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame;\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n\\n        uint weight;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType;\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n\\n        WorldItemStatus status;\\n\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0x254a6919c1a2e22b8ea8c01590d2deefd29f3ff1dbf2955554d4eef0d6f4e96c\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) public returns(uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns(uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return(keccak256(abi.encodePacked(TODO_randomSeed, blockhash(block.number-1), msg.sender)));\\n    }\\n\\n    function abs(int x) public pure returns (int) { // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(uint _min, uint _max, uint _val, uint _valMax) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = adjustedMax * _val / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(bytes32 _hash, uint256 _size, uint256 _offset) public pure returns(uint8) {\\n        bytes32 mask = bytes32((2**_size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(uint _traitNum, uint _subTraitNum) public pure returns(uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) public pure returns(uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row-1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row+1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col+1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col-1);\\n        }\\n        string memory message = string.concat(\\\"Invalid direction: \\\", Strings.toString(_direction));\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(uint _gameId, uint _for, uint _against) public returns(bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if(_direction == 0) {\\n            return 1;\\n        }\\n        if(_direction == 1) {\\n            return 0;\\n        }\\n        if(_direction == 2) {\\n            return 3;\\n        }\\n        if(_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a51f6da3b262b3322a372cf15e062a7ab3b5836906021b891a6bb75cafa8232\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600190815564174876e8006008556009805460ff191690911790553480156200002e57600080fd5b506200003a3362000040565b62000090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613b9180620000a06000396000f3fe6080604052600436106102725760003560e01c80635f8726011161014f578063955a015b116100c1578063ce28613f1161007a578063ce28613f146107fd578063e847ae1e1461081d578063ec25c2541461083d578063f135332a1461085d578063f2fde38b1461087d578063fa3993c21461089d57600080fd5b8063955a015b1461072d57806397f34c3f1461074d578063b78e66511461076d578063b918fd681461078d578063bdb4b848146107ad578063bfb231d2146107c357600080fd5b80637420aa36116101135780637420aa361461067657806376c8aa271461069657806377e01eca146106a25780638214f222146106c25780638da5cb5b146106e2578063951fc3fe1461070057600080fd5b80635f872601146105d457806364b0e500146105f457806364db84bf14610621578063705498dc14610641578063715018a61461066157600080fd5b80631f7b4f30116101e8578063471a4294116101ac578063471a42941461048f57806347ef26b1146104b9578063501f97841461054257806353011696146105625780635dc96967146105945780635f09c782146105b457600080fd5b80631f7b4f30146103ed578063249af0b41461040d578063268f1d4d1461042d5780633838aed11461044d5780633841fae11461046257600080fd5b8063150b7a021161023a578063150b7a0214610311578063154fa27a1461034a578063185ae9dc1461036a5780631b5ac4b51461038a5780631e1de205146103b85780631ef2688c146103cd57600080fd5b80630364f88c146102775780630cc0db53146102b45780630fd8e833146102c957806311ff7047146102d1578063129f0903146102f1575b600080fd5b34801561028357600080fd5b50600254610297906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102c76102c2366004613041565b6108bd565b005b6102c76109d5565b3480156102dd57600080fd5b506102c76102ec36600461311f565b610ac1565b3480156102fd57600080fd5b50600754610297906001600160a01b031681565b34801561031d57600080fd5b5061033161032c366004613181565b610d74565b6040516001600160e01b031990911681526020016102ab565b34801561035657600080fd5b50600354610297906001600160a01b031681565b34801561037657600080fd5b50600554610297906001600160a01b031681565b34801561039657600080fd5b506103aa6103a5366004613220565b610db1565b6040519081526020016102ab565b3480156103c457600080fd5b506103aa610dd1565b3480156103d957600080fd5b506102c76103e8366004613239565b610e49565b3480156103f957600080fd5b506103aa610408366004613220565b61101e565b34801561041957600080fd5b506102c76104283660046132cb565b61107a565b34801561043957600080fd5b506102c7610448366004613326565b611243565b34801561045957600080fd5b506102c76112ba565b34801561046e57600080fd5b5061048261047d366004613220565b6112ff565b6040516102ab9190613358565b34801561049b57600080fd5b506009546104a99060ff1681565b60405190151581526020016102ab565b3480156104c557600080fd5b506104d96104d4366004613220565b611319565b6040516102ab9190600060e0820190508251600081810b84526020850151810b60208501526040850151810b60408501526060850151810b60608501526080850151810b608085015260a0850151810b60a085015260c0850151810b60c0850152505092915050565b34801561054e57600080fd5b506102c761055d366004613220565b6116b0565b34801561056e57600080fd5b5061058261057d366004613326565b6116d0565b60405160ff90911681526020016102ab565b3480156105a057600080fd5b506104a96105af36600461339c565b61170d565b3480156105c057600080fd5b506102c76105cf3660046133c8565b6117aa565b3480156105e057600080fd5b506102c76105ef3660046133c8565b61189b565b34801561060057600080fd5b5061061461060f366004613220565b611a33565b6040516102ab9190613434565b34801561062d57600080fd5b506103aa61063c3660046133c8565b611cd6565b34801561064d57600080fd5b50600454610297906001600160a01b031681565b34801561066d57600080fd5b506102c7611cee565b34801561068257600080fd5b506102c761069136600461354e565b611d00565b3480156102c757600080fd5b3480156106ae57600080fd5b506104826106bd366004613570565b611d1b565b3480156106ce57600080fd5b506103aa6106dd366004613220565b611d3f565b3480156106ee57600080fd5b506000546001600160a01b0316610297565b34801561070c57600080fd5b5061072061071b3660046135fc565b611db9565b6040516102ab9190613629565b34801561073957600080fd5b50600654610297906001600160a01b031681565b34801561075957600080fd5b5061058261076836600461339c565b611ee3565b34801561077957600080fd5b50610614610788366004613220565b611f0e565b34801561079957600080fd5b506104826107a8366004613220565b612154565b3480156107b957600080fd5b506103aa60085481565b3480156107cf57600080fd5b506107e36107de366004613220565b612262565b6040516102ab9e9d9c9b9a99989796959493929190613647565b34801561080957600080fd5b506105826108183660046136f2565b612318565b34801561082957600080fd5b506102c761083836600461371c565b6123c8565b34801561084957600080fd5b506102c761085836600461378d565b612439565b34801561086957600080fd5b50610482610878366004613220565b612562565b34801561088957600080fd5b506102c7610898366004613570565b61257c565b3480156108a957600080fd5b506103aa6108b83660046137d4565b6125f2565b600854604080516602830bcb2b21d160cd1b60208201523460278201526a0161031b7b9ba1034b99d160ad1b60478201526052808201939093528151808203909301835260720190526000546001600160a01b0316331480610920575060085434145b81906109485760405162461bcd60e51b815260040161093f9190613824565b60405180910390fd5b506000546001600160a01b031633148061096c57506003546001600160a01b031633145b8061098157506005546001600160a01b031633145b6109c45760405162461bcd60e51b815260206004820152601460248201527310dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015260640161093f565b6109cf8484846126ba565b50505050565b6000546001600160a01b03163314806109ef575060085434145b610a2f5760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c185e5b595b9d607a1b604482015260640161093f565b6000546001600160a01b0316331480610a4f575060095460ff1615156001145b610a935760405162461bcd60e51b81526020600482015260156024820152744d696e74696e67206973206e6f742061637469766560581b604482015260640161093f565b6000546001600160a01b0316331480610ab657506003546001600160a01b031633145b610abf57600080fd5b565b6005546001600160a01b03163314610b125760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604482015260640161093f565b60075484516000916001600160a01b031690636621a42190600a9088908590610b3d57610b3d613857565b602002602001015181548110610b5557610b55613857565b90600052602060002090600a0201600301546040518263ffffffff1660e01b8152600401610b8591815260200190565b602060405180830381865afa158015610ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc6919061386d565b905060005b8551811015610d6b57600460009054906101000a90046001600160a01b03166001600160a01b03166307084e56600084600a8a8681518110610c0f57610c0f613857565b602002602001015181548110610c2757610c27613857565b600091825260209091206002600a9092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050610cc583878381518110610cb857610cb8613857565b602002602001015161299a565b6000600a878381518110610cdb57610cdb613857565b602002602001015181548110610cf357610cf3613857565b6000918252602082206003600a909202019081019190915560088101805491925060029160ff191660018302179055506040805180820190915260ff8781168083529087166020909201829052600992909201805461ffff191690921761010090910217905580610d63816138a0565b915050610bcb565b50505050505050565b6040516000907f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b908290a150630a85bd0160e11b95945050505050565b600080821215610dc957610dc4826138b9565b610dcb565b815b92915050565b6001805460009182610de2836138a0565b9190505550600154600143610df791906138d5565b4033604051602001610e2e93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b6005546001600160a01b03163314610e9a5760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604482015260640161093f565b60005b82811015611017576004546001600160a01b03166307084e56836000600a888887818110610ecd57610ecd613857565b9050602002013581548110610ee457610ee4613857565b600091825260209091206002600a9092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610f4757600080fd5b505af1158015610f5b573d6000803e3d6000fd5b50505050610f91848483818110610f7457610f74613857565b6000898152600b6020908152604090912093910201359050612a16565b506000600a858584818110610fa857610fa8613857565b9050602002013581548110610fbf57610fbf613857565b600091825260208083206003600a9093020191820189905560088201805460ff19166001179055604080518082019091528381520191909152600901805461ffff19169055508061100f816138a0565b915050610e9d565b5050505050565b60008061102d60016006612318565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c51838260405161106c929190918252602082015260400190565b60405180910390a192915050565b6007546001600160a01b031633146110cb5760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b604482015260640161093f565b60005b82518110156109cf5760008382815181106110eb576110eb613857565b602002602001015190506000600a828154811061110a5761110a613857565b90600052602060002090600a02019050806003015460001461116e5760405162461bcd60e51b815260206004820181905260248201527f536f6d656f6e6520697320616c726561647920686f6c64696e67207468697321604482015260640161093f565b60048101546001600160a01b038581169116146111d95760405162461bcd60e51b815260206004820152602360248201527f4f776e657220666f72206974656d20616e64206368617220646f6e2774206d616044820152620e8c6d60eb1b606482015260840161093f565b600381018690556004810180546001600160a01b03191690556000868152600b6020526040902061120a9083612a16565b506001600160a01b0384166000908152600d6020526040902061122d9083612a22565b505050808061123b906138a0565b9150506110ce565b6007546001600160a01b031633146112945760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b604482015260640161093f565b6000838152600b602052604081206112ab90612a2e565b90506110178582858588610ac1565b6112c2612a3b565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156112fc573d6000803e3d6000fd5b50565b6000818152600b60205260409020606090610dcb90612a2e565b6040805160e08082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c0808801869052898652600b855288862089519788018a52868852948701869052978601859052918501849052840183905283018290529382015290919060005b61139a83612a95565b8110156116a8576000600a6113af8584612a9f565b815481106113bf576113bf613857565b60009182526020909120600a909102019050600160068201546301000000900460ff16600a8111156113f3576113f36133ea565b03611435578060060160049054906101000a900460ff1660000b836000015160000b1215611430576006810154600160201b900460ff1660000b83525b611695565b600260068201546301000000900460ff16600a811115611457576114576133ea565b0361149b578060060160049054906101000a900460ff1660000b836020015160000b1215611430576006810154600160201b900460ff1660000b6020840152611695565b600360068201546301000000900460ff16600a8111156114bd576114bd6133ea565b03611501578060060160049054906101000a900460ff1660000b836040015160000b1215611430576006810154600160201b900460ff1660000b6040840152611695565b600460068201546301000000900460ff16600a811115611523576115236133ea565b03611567578060060160049054906101000a900460ff1660000b836060015160000b1215611430576006810154600160201b900460ff1660000b6060840152611695565b600560068201546301000000900460ff16600a811115611589576115896133ea565b036115cd578060060160049054906101000a900460ff1660000b836080015160000b1215611430576006810154600160201b900460ff1660000b6080840152611695565b600860068201546301000000900460ff16600a8111156115ef576115ef6133ea565b03611633578060060160049054906101000a900460ff1660000b8360a0015160000b1215611430576006810154600160201b900460ff1660000b60a0840152611695565b600960068201546301000000900460ff16600a811115611655576116556133ea565b03611695578060060160049054906101000a900460ff1660000b8360c0015160000b1215611695576006810154600160201b900460ff1660000b60c08401525b50806116a0816138a0565b915050611391565b509392505050565b6116b8612a3b565b6116ca81670de0b6b3a76400006138e8565b60085550565b6000806116dd86866138d5565b90506000836116ec86846138e8565b6116f69190613915565b90506117028782613929565b979650505050505050565b6000806117198561101e565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a1806001036117765760009150506117a3565b6003836117838684613929565b61178d919061393c565b131561179d5760019150506117a3565b60009150505b9392505050565b6003546001600160a01b031633146117f85760405162461bcd60e51b8152602060048201526011602482015270139bdd0819d85b594818dbdb9d1c9858dd607a1b604482015260640161093f565b6000600a828154811061180d5761180d613857565b90600052602060002090600a02019050611827838361299a565b611835816007015483612aab565b600060038201819055600782015560048054604051630852cd8d60e31b81529182018490526001600160a01b0316906342966c6890602401600060405180830381600087803b15801561188757600080fd5b505af1158015610d6b573d6000803e3d6000fd5b6006546001600160a01b031633146118ea5760405162461bcd60e51b8152602060048201526012602482015271139bdd0819d85b595cc818dbdb9d1c9858dd60721b604482015260640161093f565b6000828152600b60205260408082206007549151636621a42160e01b8152600481018690529092916001600160a01b031690636621a42190602401602060405180830381865afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611966919061386d565b905060005b61197483612a95565b8110156110175760006119878483612a9f565b90506000600a828154811061199e5761199e613857565b600091825260208083206003600a9390930201918201839055600480830180546001600160a01b038a166001600160a01b031990911681179091556007840185905560088401805460ff19169092179091558352600d90526040909120909150611a089083612a16565b50611a138583612a22565b50611a1e8683612aab565b50508080611a2b906138a0565b91505061196b565b60606000611a4083612b27565b90506000808267ffffffffffffffff811115611a5e57611a5e613079565b604051908082528060200260200182016040528015611a9757816020015b611a84612fab565b815260200190600190039081611a7c5790505b506000868152600c60205260408120919250611ab282612a95565b905060005b81811015611cca576002600a611acd8584612a9f565b81548110611add57611add613857565b600091825260209091206008600a90920201015460ff166004811115611b0557611b056133ea565b03611cb857600a611b168483612a9f565b81548110611b2657611b26613857565b6000918252602091829020604080516101c081018252600a90930290910180548352600181015493830193909352600280840154918301919091526003830154606083015260048301546001600160a01b03166080830152600583015460a0830152600683015491929160c084019160ff90911690811115611baa57611baa6133ea565b6002811115611bbb57611bbb6133ea565b8152600682015460ff61010082048116602084015262010000820481166040840152606090920191630100000090910416600a811115611bfd57611bfd6133ea565b600a811115611c0e57611c0e6133ea565b8152600682015460ff600160201b90910481166020830152600783015460408301526008830154606090920191166004811115611c4d57611c4d6133ea565b6004811115611c5e57611c5e6133ea565b8152604080518082019091526009929092015460ff80821684526101009091041660208381019190915201528451859087908110611c9e57611c9e613857565b60200260200101819052508480611cb4906138a0565b9550505b80611cc2816138a0565b915050611ab7565b50919695505050505050565b600081611ce48460046138e8565b6117a39190613929565b611cf6612a3b565b610abf6000612bc3565b611d08612a3b565b6009805460ff1916911515919091179055565b6001600160a01b0381166000908152600d60205260409020606090610dcb90612a2e565b600081600003611d5157506001919050565b81600103611d6157506000919050565b81600203611d7157506003919050565b81600303611d8157506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b604482015260640161093f565b604080518082019091526000808252602082015282600003611e0b57604051806040016040528060018460000151611df1919061395c565b60ff168152602001836020015160ff168152509050610dcb565b82600103611e2f57604051806040016040528083600001516001611df19190613975565b82600203611e6c576040518060400160405280836000015160ff16815260200183602001516001611e609190613975565b60ff1690529050610dcb565b82600303611e9d576040518060400160405280836000015160ff16815260200160018460200151611e60919061395c565b6000611ea884612c13565b604051602001611eb8919061398e565b60405160208183030381529060405290508060405162461bcd60e51b815260040161093f9190613824565b600080826001611ef4866002613aad565b611efe91906138d5565b901b8516831c9150509392505050565b6000818152600b6020526040812060609190611f2990612a95565b67ffffffffffffffff811115611f4157611f41613079565b604051908082528060200260200182016040528015611f7a57816020015b611f67612fab565b815260200190600190039081611f5f5790505b50905060005b815181101561214d576000848152600b60205260408120611fa19083612a9f565b9050600a8181548110611fb657611fb6613857565b6000918252602091829020604080516101c081018252600a90930290910180548352600181015493830193909352600280840154918301919091526003830154606083015260048301546001600160a01b03166080830152600583015460a0830152600683015491929160c084019160ff9091169081111561203a5761203a6133ea565b600281111561204b5761204b6133ea565b8152600682015460ff61010082048116602084015262010000820481166040840152606090920191630100000090910416600a81111561208d5761208d6133ea565b600a81111561209e5761209e6133ea565b8152600682015460ff600160201b909104811660208301526007830154604083015260088301546060909201911660048111156120dd576120dd6133ea565b60048111156120ee576120ee6133ea565b8152604080518082019091526009929092015460ff8082168452610100909104166020838101919091520152835184908490811061212e5761212e613857565b6020026020010181905250508080612145906138a0565b915050611f80565b5092915050565b6060600061216183612b27565b90506000808267ffffffffffffffff81111561217f5761217f613079565b6040519080825280602002602001820160405280156121a8578160200160208202803683370190505b506000868152600c602052604081209192506121c382612a95565b905060005b81811015611cca576002600a6121de8584612a9f565b815481106121ee576121ee613857565b600091825260209091206008600a90920201015460ff166004811115612216576122166133ea565b03612250576122258382612a9f565b84868151811061223757612237613857565b60209081029190910101528461224c816138a0565b9550505b8061225a816138a0565b9150506121c8565b600a818154811061227257600080fd5b6000918252602091829020600a90910201805460018201546002830154600384015460048501546005860154600687015460078801546008890154604080518082019091526009909a015460ff8181168c526101009182900481169c8c019c909c52989b509699959894976001600160a01b039094169692958083169594830481169462010000840482169463010000008504831694600160201b90048316939216908e565b6001805460009182612329836138a0565b919050555060003360015460014361234191906138d5565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000612395858561395c565b6123a0906001613975565b90508460ff168160ff16836123b59190613ab9565b6123bf9190613929565b95945050505050565b6123d0612a3b565b600280546001600160a01b039687166001600160a01b031991821617909155600380549587169582168617905560068054821690951790945560048054938616938516939093179092556005805491851691841691909117905560078054919093169116179055565b6006546001600160a01b031633146124885760405162461bcd60e51b8152602060048201526012602482015271139bdd0819d85b595cc818dbdb9d1c9858dd60721b604482015260640161093f565b60005b815181101561255d576000600b60008484815181106124ac576124ac613857565b60200260200101518152602001908152602001600020905060005b6124d082612a95565b8110156125485760006124e38383612a9f565b905085600a82815481106124f9576124f9613857565b90600052602060002090600a02016007018190555061253381600c6000898152602001908152602001600020612a1690919063ffffffff16565b50508080612540906138a0565b9150506124c7565b50508080612555906138a0565b91505061248b565b505050565b6000818152600c60205260409020606090610dcb90612a2e565b612584612a3b565b6001600160a01b0381166125e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161093f565b6112fc81612bc3565b8051825160009161260291613acd565b60000b60010361261457506000610dcb565b815183516126229190613acd565b60000b1961263257506001610dcb565b816020015183602001516126469190613acd565b60000b1961265657506002610dcb565b8160200151836020015161266a9190613acd565b60000b60010361267c57506003610dcb565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b604482015260640161093f565b600480546040516309b6507f60e41b8152808301929092526000602483018190526001600160a01b0385811660448501529092911690639b6507f09064174876e8009060640160206040518083038185885af115801561271e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906127439190613aee565b60048054604051632851838160e01b81529182018390529192506000916001600160a01b031690632851838190602401602060405180830381865afa158015612790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b49190613aee565b600a80546001818101835560008390529082027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801838155915492935090916127fd91906138d5565b600180830191909155600282018490556003820187905560058201819055600b90612832908490600490610768906000611cd6565b60ff161015612842576001612845565b60025b60068201805460ff19166001836002811115612863576128636133ea565b021790555060068101805462ffff001916905561289361288b83600461076860006001611cd6565b60ff16612d1c565b60068201805463ff0000001916630100000083600a8111156128b7576128b76133ea565b021790555060006128d083600461076860016002611cd6565b90506002600683015460ff1660028111156128ed576128ed6133ea565b0361290c5760036128ff826002613b07565b6129099190613b23565b90505b61291e600160048360ff16600f6116d0565b60068301805464ff000000001916600160201b60ff8416021790556007830186905560088301805491925060019160ff19168280021790555060018201546000888152600b6020526040902061297391612a16565b5060018201546000868152600c6020526040902061299091612a16565b5050505050505050565b6000828152600b602052604090206129b29082612dcb565b6129fe5760405162461bcd60e51b815260206004820152601e60248201527f506c6179657220646f65736e277420686176652074686973206974656d210000604482015260640161093f565b6000828152600b6020526040902061255d9082612a22565b60006117a38383612de3565b60006117a38383612e32565b606060006117a383612f25565b6000546001600160a01b03163314610abf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161093f565b6000610dcb825490565b60006117a38383612f81565b6000828152600c60205260409020612ac39082612dcb565b612b0f5760405162461bcd60e51b815260206004820152601c60248201527f47616d6520646f65736e277420686176652074686973206974656d2100000000604482015260640161093f565b6000818152600c6020526040902061255d9082612a22565b6000818152600c60205260408120819081612b4182612a95565b905060005b81811015612bb9576002600a612b5c8584612a9f565b81548110612b6c57612b6c613857565b600091825260209091206008600a90920201015460ff166004811115612b9457612b946133ea565b03612ba75783612ba3816138a0565b9450505b80612bb1816138a0565b915050612b46565b5091949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081600003612c3a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612c645780612c4e816138a0565b9150612c5d9050600a83613915565b9150612c3e565b60008167ffffffffffffffff811115612c7f57612c7f613079565b6040519080825280601f01601f191660200182016040528015612ca9576020820181803683370190505b5090505b8415612d1457612cbe6001836138d5565b9150612ccb600a86613ab9565b612cd6906030613929565b60f81b818381518110612ceb57612ceb613857565b60200101906001600160f81b031916908160001a905350612d0d600a86613915565b9450612cad565b949350505050565b600060018211612d2e57506000919050565b60028211612d3e57506001919050565b60038211612d4e57506002919050565b60048211612d5e57506003919050565b60058211612d6e57506004919050565b60068211612d7e57506005919050565b60088211612d8e57506006919050565b600a8211612d9e57506007919050565b600c8211612dae57506008919050565b600e8211612dbe57506009919050565b50600a919050565b919050565b600081815260018301602052604081205415156117a3565b6000818152600183016020526040812054612e2a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dcb565b506000610dcb565b60008181526001830160205260408120548015612f1b576000612e566001836138d5565b8554909150600090612e6a906001906138d5565b9050818114612ecf576000866000018281548110612e8a57612e8a613857565b9060005260206000200154905080876000018481548110612ead57612ead613857565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612ee057612ee0613b45565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610dcb565b6000915050610dcb565b606081600001805480602002602001604051908101604052809291908181526020018280548015612f7557602002820191906000526020600020905b815481526020019060010190808311612f61575b50505050509050919050565b6000826000018281548110612f9857612f98613857565b9060005260206000200154905092915050565b604080516101c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290528351808501909452818452830152906101a082015290565b6001600160a01b03811681146112fc57600080fd5b60008060006060848603121561305657600080fd5b8335925060208401356130688161302c565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126130a057600080fd5b8135602067ffffffffffffffff808311156130bd576130bd613079565b8260051b604051601f19603f830116810181811084821117156130e2576130e2613079565b60405293845285810183019383810192508785111561310057600080fd5b83870191505b8482101561170257813583529183019190830190613106565b600080600080600060a0868803121561313757600080fd5b85359450602086013567ffffffffffffffff81111561315557600080fd5b6131618882890161308f565b959895975050505060408401359360608101359360809091013592509050565b60008060008060006080868803121561319957600080fd5b85356131a48161302c565b945060208601356131b48161302c565b935060408601359250606086013567ffffffffffffffff808211156131d857600080fd5b818801915088601f8301126131ec57600080fd5b8135818111156131fb57600080fd5b89602082850101111561320d57600080fd5b9699959850939650602001949392505050565b60006020828403121561323257600080fd5b5035919050565b6000806000806060858703121561324f57600080fd5b84359350602085013567ffffffffffffffff8082111561326e57600080fd5b818701915087601f83011261328257600080fd5b81358181111561329157600080fd5b8860208260051b85010111156132a657600080fd5b60208301955080945050505060408501356132c08161302c565b939692955090935050565b6000806000606084860312156132e057600080fd5b83359250602084013567ffffffffffffffff8111156132fe57600080fd5b61330a8682870161308f565b925050604084013561331b8161302c565b809150509250925092565b6000806000806080858703121561333c57600080fd5b5050823594602084013594506040840135936060013592509050565b6020808252825182820181905260009190848201906040850190845b8181101561339057835183529284019291840191600101613374565b50909695505050505050565b6000806000606084860312156133b157600080fd5b505081359360208301359350604090920135919050565b600080604083850312156133db57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60038110613410576134106133ea565b9052565b600b8110613410576134106133ea565b60058110613410576134106133ea565b602080825282518282018190526000919060409081850190868401855b828110156135415781518051855286810151878601528581015186860152606080820151908601526080808201516001600160a01b03169086015260a0808201519086015260c0808201516134a882880182613400565b505060e08181015160ff81168783015250506101008181015160ff8116878301525050610120808201516134de82880182613414565b50506101408181015160ff169086015261016080820151908601526101808082015161350c82880182613424565b50506101a090810151805160ff9081169287019290925260200151166101c08501526101e09093019290850190600101613451565b5091979650505050505050565b60006020828403121561356057600080fd5b813580151581146117a357600080fd5b60006020828403121561358257600080fd5b81356117a38161302c565b803560ff81168114612dc657600080fd5b6000604082840312156135b057600080fd5b6040516040810181811067ffffffffffffffff821117156135d3576135d3613079565b6040529050806135e28361358d565b81526135f06020840161358d565b60208201525092915050565b6000806060838503121561360f57600080fd5b82359150613620846020850161359e565b90509250929050565b60408101610dcb8284805160ff908116835260209182015116910152565b8e8152602081018e9052604081018d9052606081018c90526001600160a01b038b16608082015260a081018a90526101e0810161368760c083018b613400565b60ff89811660e084015288166101008301526136a7610120830188613414565b60ff8616610140830152846101608301526136c6610180830185613424565b825160ff9081166101a08401526020840151166101c08301529f9e505050505050505050505050505050565b6000806040838503121561370557600080fd5b61370e8361358d565b91506136206020840161358d565b600080600080600060a0868803121561373457600080fd5b853561373f8161302c565b9450602086013561374f8161302c565b9350604086013561375f8161302c565b9250606086013561376f8161302c565b9150608086013561377f8161302c565b809150509295509295909350565b600080604083850312156137a057600080fd5b82359150602083013567ffffffffffffffff8111156137be57600080fd5b6137ca8582860161308f565b9150509250929050565b600080608083850312156137e757600080fd5b6137f1848461359e565b9150613620846040850161359e565b60005b8381101561381b578181015183820152602001613803565b50506000910152565b6020815260008251806020840152613843816040850160208701613800565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561387f57600080fd5b81516117a38161302c565b634e487b7160e01b600052601160045260246000fd5b6000600182016138b2576138b261388a565b5060010190565b6000600160ff1b82016138ce576138ce61388a565b5060000390565b81810381811115610dcb57610dcb61388a565b8082028115828204841417610dcb57610dcb61388a565b634e487b7160e01b600052601260045260246000fd5b600082613924576139246138ff565b500490565b80820180821115610dcb57610dcb61388a565b818103600083128015838313168383128216171561214d5761214d61388a565b60ff8281168282160390811115610dcb57610dcb61388a565b60ff8181168382160190811115610dcb57610dcb61388a565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b8152600082516139bc816013850160208701613800565b9190910160130192915050565b600181815b80851115613a045781600019048211156139ea576139ea61388a565b808516156139f757918102915b93841c93908002906139ce565b509250929050565b600082613a1b57506001610dcb565b81613a2857506000610dcb565b8160018114613a3e5760028114613a4857613a64565b6001915050610dcb565b60ff841115613a5957613a5961388a565b50506001821b610dcb565b5060208310610133831016604e8410600b8410161715613a87575081810a610dcb565b613a9183836139c9565b8060001904821115613aa557613aa561388a565b029392505050565b60006117a38383613a0c565b600082613ac857613ac86138ff565b500690565b600082810b9082900b03607f198112607f82131715610dcb57610dcb61388a565b600060208284031215613b0057600080fd5b5051919050565b60ff818116838216029081169081811461214d5761214d61388a565b600060ff831680613b3657613b366138ff565b8060ff84160491505092915050565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209bdf192507d5dc1847635ab7463004b69d05c802abbecf482eabdc5d2ba8e18a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c80635f8726011161014f578063955a015b116100c1578063ce28613f1161007a578063ce28613f146107fd578063e847ae1e1461081d578063ec25c2541461083d578063f135332a1461085d578063f2fde38b1461087d578063fa3993c21461089d57600080fd5b8063955a015b1461072d57806397f34c3f1461074d578063b78e66511461076d578063b918fd681461078d578063bdb4b848146107ad578063bfb231d2146107c357600080fd5b80637420aa36116101135780637420aa361461067657806376c8aa271461069657806377e01eca146106a25780638214f222146106c25780638da5cb5b146106e2578063951fc3fe1461070057600080fd5b80635f872601146105d457806364b0e500146105f457806364db84bf14610621578063705498dc14610641578063715018a61461066157600080fd5b80631f7b4f30116101e8578063471a4294116101ac578063471a42941461048f57806347ef26b1146104b9578063501f97841461054257806353011696146105625780635dc96967146105945780635f09c782146105b457600080fd5b80631f7b4f30146103ed578063249af0b41461040d578063268f1d4d1461042d5780633838aed11461044d5780633841fae11461046257600080fd5b8063150b7a021161023a578063150b7a0214610311578063154fa27a1461034a578063185ae9dc1461036a5780631b5ac4b51461038a5780631e1de205146103b85780631ef2688c146103cd57600080fd5b80630364f88c146102775780630cc0db53146102b45780630fd8e833146102c957806311ff7047146102d1578063129f0903146102f1575b600080fd5b34801561028357600080fd5b50600254610297906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102c76102c2366004613041565b6108bd565b005b6102c76109d5565b3480156102dd57600080fd5b506102c76102ec36600461311f565b610ac1565b3480156102fd57600080fd5b50600754610297906001600160a01b031681565b34801561031d57600080fd5b5061033161032c366004613181565b610d74565b6040516001600160e01b031990911681526020016102ab565b34801561035657600080fd5b50600354610297906001600160a01b031681565b34801561037657600080fd5b50600554610297906001600160a01b031681565b34801561039657600080fd5b506103aa6103a5366004613220565b610db1565b6040519081526020016102ab565b3480156103c457600080fd5b506103aa610dd1565b3480156103d957600080fd5b506102c76103e8366004613239565b610e49565b3480156103f957600080fd5b506103aa610408366004613220565b61101e565b34801561041957600080fd5b506102c76104283660046132cb565b61107a565b34801561043957600080fd5b506102c7610448366004613326565b611243565b34801561045957600080fd5b506102c76112ba565b34801561046e57600080fd5b5061048261047d366004613220565b6112ff565b6040516102ab9190613358565b34801561049b57600080fd5b506009546104a99060ff1681565b60405190151581526020016102ab565b3480156104c557600080fd5b506104d96104d4366004613220565b611319565b6040516102ab9190600060e0820190508251600081810b84526020850151810b60208501526040850151810b60408501526060850151810b60608501526080850151810b608085015260a0850151810b60a085015260c0850151810b60c0850152505092915050565b34801561054e57600080fd5b506102c761055d366004613220565b6116b0565b34801561056e57600080fd5b5061058261057d366004613326565b6116d0565b60405160ff90911681526020016102ab565b3480156105a057600080fd5b506104a96105af36600461339c565b61170d565b3480156105c057600080fd5b506102c76105cf3660046133c8565b6117aa565b3480156105e057600080fd5b506102c76105ef3660046133c8565b61189b565b34801561060057600080fd5b5061061461060f366004613220565b611a33565b6040516102ab9190613434565b34801561062d57600080fd5b506103aa61063c3660046133c8565b611cd6565b34801561064d57600080fd5b50600454610297906001600160a01b031681565b34801561066d57600080fd5b506102c7611cee565b34801561068257600080fd5b506102c761069136600461354e565b611d00565b3480156102c757600080fd5b3480156106ae57600080fd5b506104826106bd366004613570565b611d1b565b3480156106ce57600080fd5b506103aa6106dd366004613220565b611d3f565b3480156106ee57600080fd5b506000546001600160a01b0316610297565b34801561070c57600080fd5b5061072061071b3660046135fc565b611db9565b6040516102ab9190613629565b34801561073957600080fd5b50600654610297906001600160a01b031681565b34801561075957600080fd5b5061058261076836600461339c565b611ee3565b34801561077957600080fd5b50610614610788366004613220565b611f0e565b34801561079957600080fd5b506104826107a8366004613220565b612154565b3480156107b957600080fd5b506103aa60085481565b3480156107cf57600080fd5b506107e36107de366004613220565b612262565b6040516102ab9e9d9c9b9a99989796959493929190613647565b34801561080957600080fd5b506105826108183660046136f2565b612318565b34801561082957600080fd5b506102c761083836600461371c565b6123c8565b34801561084957600080fd5b506102c761085836600461378d565b612439565b34801561086957600080fd5b50610482610878366004613220565b612562565b34801561088957600080fd5b506102c7610898366004613570565b61257c565b3480156108a957600080fd5b506103aa6108b83660046137d4565b6125f2565b600854604080516602830bcb2b21d160cd1b60208201523460278201526a0161031b7b9ba1034b99d160ad1b60478201526052808201939093528151808203909301835260720190526000546001600160a01b0316331480610920575060085434145b81906109485760405162461bcd60e51b815260040161093f9190613824565b60405180910390fd5b506000546001600160a01b031633148061096c57506003546001600160a01b031633145b8061098157506005546001600160a01b031633145b6109c45760405162461bcd60e51b815260206004820152601460248201527310dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015260640161093f565b6109cf8484846126ba565b50505050565b6000546001600160a01b03163314806109ef575060085434145b610a2f5760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c185e5b595b9d607a1b604482015260640161093f565b6000546001600160a01b0316331480610a4f575060095460ff1615156001145b610a935760405162461bcd60e51b81526020600482015260156024820152744d696e74696e67206973206e6f742061637469766560581b604482015260640161093f565b6000546001600160a01b0316331480610ab657506003546001600160a01b031633145b610abf57600080fd5b565b6005546001600160a01b03163314610b125760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604482015260640161093f565b60075484516000916001600160a01b031690636621a42190600a9088908590610b3d57610b3d613857565b602002602001015181548110610b5557610b55613857565b90600052602060002090600a0201600301546040518263ffffffff1660e01b8152600401610b8591815260200190565b602060405180830381865afa158015610ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc6919061386d565b905060005b8551811015610d6b57600460009054906101000a90046001600160a01b03166001600160a01b03166307084e56600084600a8a8681518110610c0f57610c0f613857565b602002602001015181548110610c2757610c27613857565b600091825260209091206002600a9092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050610cc583878381518110610cb857610cb8613857565b602002602001015161299a565b6000600a878381518110610cdb57610cdb613857565b602002602001015181548110610cf357610cf3613857565b6000918252602082206003600a909202019081019190915560088101805491925060029160ff191660018302179055506040805180820190915260ff8781168083529087166020909201829052600992909201805461ffff191690921761010090910217905580610d63816138a0565b915050610bcb565b50505050505050565b6040516000907f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b908290a150630a85bd0160e11b95945050505050565b600080821215610dc957610dc4826138b9565b610dcb565b815b92915050565b6001805460009182610de2836138a0565b9190505550600154600143610df791906138d5565b4033604051602001610e2e93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b6005546001600160a01b03163314610e9a5760405162461bcd60e51b8152602060048201526014602482015273139bdd081858dd1a5bdb9cc818dbdb9d1c9858dd60621b604482015260640161093f565b60005b82811015611017576004546001600160a01b03166307084e56836000600a888887818110610ecd57610ecd613857565b9050602002013581548110610ee457610ee4613857565b600091825260209091206002600a9092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610f4757600080fd5b505af1158015610f5b573d6000803e3d6000fd5b50505050610f91848483818110610f7457610f74613857565b6000898152600b6020908152604090912093910201359050612a16565b506000600a858584818110610fa857610fa8613857565b9050602002013581548110610fbf57610fbf613857565b600091825260208083206003600a9093020191820189905560088201805460ff19166001179055604080518082019091528381520191909152600901805461ffff19169055508061100f816138a0565b915050610e9d565b5050505050565b60008061102d60016006612318565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c51838260405161106c929190918252602082015260400190565b60405180910390a192915050565b6007546001600160a01b031633146110cb5760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b604482015260640161093f565b60005b82518110156109cf5760008382815181106110eb576110eb613857565b602002602001015190506000600a828154811061110a5761110a613857565b90600052602060002090600a02019050806003015460001461116e5760405162461bcd60e51b815260206004820181905260248201527f536f6d656f6e6520697320616c726561647920686f6c64696e67207468697321604482015260640161093f565b60048101546001600160a01b038581169116146111d95760405162461bcd60e51b815260206004820152602360248201527f4f776e657220666f72206974656d20616e64206368617220646f6e2774206d616044820152620e8c6d60eb1b606482015260840161093f565b600381018690556004810180546001600160a01b03191690556000868152600b6020526040902061120a9083612a16565b506001600160a01b0384166000908152600d6020526040902061122d9083612a22565b505050808061123b906138a0565b9150506110ce565b6007546001600160a01b031633146112945760405162461bcd60e51b8152602060048201526014602482015273139bdd081c1b185e595c9cc818dbdb9d1c9858dd60621b604482015260640161093f565b6000838152600b602052604081206112ab90612a2e565b90506110178582858588610ac1565b6112c2612a3b565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156112fc573d6000803e3d6000fd5b50565b6000818152600b60205260409020606090610dcb90612a2e565b6040805160e08082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c0808801869052898652600b855288862089519788018a52868852948701869052978601859052918501849052840183905283018290529382015290919060005b61139a83612a95565b8110156116a8576000600a6113af8584612a9f565b815481106113bf576113bf613857565b60009182526020909120600a909102019050600160068201546301000000900460ff16600a8111156113f3576113f36133ea565b03611435578060060160049054906101000a900460ff1660000b836000015160000b1215611430576006810154600160201b900460ff1660000b83525b611695565b600260068201546301000000900460ff16600a811115611457576114576133ea565b0361149b578060060160049054906101000a900460ff1660000b836020015160000b1215611430576006810154600160201b900460ff1660000b6020840152611695565b600360068201546301000000900460ff16600a8111156114bd576114bd6133ea565b03611501578060060160049054906101000a900460ff1660000b836040015160000b1215611430576006810154600160201b900460ff1660000b6040840152611695565b600460068201546301000000900460ff16600a811115611523576115236133ea565b03611567578060060160049054906101000a900460ff1660000b836060015160000b1215611430576006810154600160201b900460ff1660000b6060840152611695565b600560068201546301000000900460ff16600a811115611589576115896133ea565b036115cd578060060160049054906101000a900460ff1660000b836080015160000b1215611430576006810154600160201b900460ff1660000b6080840152611695565b600860068201546301000000900460ff16600a8111156115ef576115ef6133ea565b03611633578060060160049054906101000a900460ff1660000b8360a0015160000b1215611430576006810154600160201b900460ff1660000b60a0840152611695565b600960068201546301000000900460ff16600a811115611655576116556133ea565b03611695578060060160049054906101000a900460ff1660000b8360c0015160000b1215611695576006810154600160201b900460ff1660000b60c08401525b50806116a0816138a0565b915050611391565b509392505050565b6116b8612a3b565b6116ca81670de0b6b3a76400006138e8565b60085550565b6000806116dd86866138d5565b90506000836116ec86846138e8565b6116f69190613915565b90506117028782613929565b979650505050505050565b6000806117198561101e565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a1806001036117765760009150506117a3565b6003836117838684613929565b61178d919061393c565b131561179d5760019150506117a3565b60009150505b9392505050565b6003546001600160a01b031633146117f85760405162461bcd60e51b8152602060048201526011602482015270139bdd0819d85b594818dbdb9d1c9858dd607a1b604482015260640161093f565b6000600a828154811061180d5761180d613857565b90600052602060002090600a02019050611827838361299a565b611835816007015483612aab565b600060038201819055600782015560048054604051630852cd8d60e31b81529182018490526001600160a01b0316906342966c6890602401600060405180830381600087803b15801561188757600080fd5b505af1158015610d6b573d6000803e3d6000fd5b6006546001600160a01b031633146118ea5760405162461bcd60e51b8152602060048201526012602482015271139bdd0819d85b595cc818dbdb9d1c9858dd60721b604482015260640161093f565b6000828152600b60205260408082206007549151636621a42160e01b8152600481018690529092916001600160a01b031690636621a42190602401602060405180830381865afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611966919061386d565b905060005b61197483612a95565b8110156110175760006119878483612a9f565b90506000600a828154811061199e5761199e613857565b600091825260208083206003600a9390930201918201839055600480830180546001600160a01b038a166001600160a01b031990911681179091556007840185905560088401805460ff19169092179091558352600d90526040909120909150611a089083612a16565b50611a138583612a22565b50611a1e8683612aab565b50508080611a2b906138a0565b91505061196b565b60606000611a4083612b27565b90506000808267ffffffffffffffff811115611a5e57611a5e613079565b604051908082528060200260200182016040528015611a9757816020015b611a84612fab565b815260200190600190039081611a7c5790505b506000868152600c60205260408120919250611ab282612a95565b905060005b81811015611cca576002600a611acd8584612a9f565b81548110611add57611add613857565b600091825260209091206008600a90920201015460ff166004811115611b0557611b056133ea565b03611cb857600a611b168483612a9f565b81548110611b2657611b26613857565b6000918252602091829020604080516101c081018252600a90930290910180548352600181015493830193909352600280840154918301919091526003830154606083015260048301546001600160a01b03166080830152600583015460a0830152600683015491929160c084019160ff90911690811115611baa57611baa6133ea565b6002811115611bbb57611bbb6133ea565b8152600682015460ff61010082048116602084015262010000820481166040840152606090920191630100000090910416600a811115611bfd57611bfd6133ea565b600a811115611c0e57611c0e6133ea565b8152600682015460ff600160201b90910481166020830152600783015460408301526008830154606090920191166004811115611c4d57611c4d6133ea565b6004811115611c5e57611c5e6133ea565b8152604080518082019091526009929092015460ff80821684526101009091041660208381019190915201528451859087908110611c9e57611c9e613857565b60200260200101819052508480611cb4906138a0565b9550505b80611cc2816138a0565b915050611ab7565b50919695505050505050565b600081611ce48460046138e8565b6117a39190613929565b611cf6612a3b565b610abf6000612bc3565b611d08612a3b565b6009805460ff1916911515919091179055565b6001600160a01b0381166000908152600d60205260409020606090610dcb90612a2e565b600081600003611d5157506001919050565b81600103611d6157506000919050565b81600203611d7157506003919050565b81600303611d8157506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b604482015260640161093f565b604080518082019091526000808252602082015282600003611e0b57604051806040016040528060018460000151611df1919061395c565b60ff168152602001836020015160ff168152509050610dcb565b82600103611e2f57604051806040016040528083600001516001611df19190613975565b82600203611e6c576040518060400160405280836000015160ff16815260200183602001516001611e609190613975565b60ff1690529050610dcb565b82600303611e9d576040518060400160405280836000015160ff16815260200160018460200151611e60919061395c565b6000611ea884612c13565b604051602001611eb8919061398e565b60405160208183030381529060405290508060405162461bcd60e51b815260040161093f9190613824565b600080826001611ef4866002613aad565b611efe91906138d5565b901b8516831c9150509392505050565b6000818152600b6020526040812060609190611f2990612a95565b67ffffffffffffffff811115611f4157611f41613079565b604051908082528060200260200182016040528015611f7a57816020015b611f67612fab565b815260200190600190039081611f5f5790505b50905060005b815181101561214d576000848152600b60205260408120611fa19083612a9f565b9050600a8181548110611fb657611fb6613857565b6000918252602091829020604080516101c081018252600a90930290910180548352600181015493830193909352600280840154918301919091526003830154606083015260048301546001600160a01b03166080830152600583015460a0830152600683015491929160c084019160ff9091169081111561203a5761203a6133ea565b600281111561204b5761204b6133ea565b8152600682015460ff61010082048116602084015262010000820481166040840152606090920191630100000090910416600a81111561208d5761208d6133ea565b600a81111561209e5761209e6133ea565b8152600682015460ff600160201b909104811660208301526007830154604083015260088301546060909201911660048111156120dd576120dd6133ea565b60048111156120ee576120ee6133ea565b8152604080518082019091526009929092015460ff8082168452610100909104166020838101919091520152835184908490811061212e5761212e613857565b6020026020010181905250508080612145906138a0565b915050611f80565b5092915050565b6060600061216183612b27565b90506000808267ffffffffffffffff81111561217f5761217f613079565b6040519080825280602002602001820160405280156121a8578160200160208202803683370190505b506000868152600c602052604081209192506121c382612a95565b905060005b81811015611cca576002600a6121de8584612a9f565b815481106121ee576121ee613857565b600091825260209091206008600a90920201015460ff166004811115612216576122166133ea565b03612250576122258382612a9f565b84868151811061223757612237613857565b60209081029190910101528461224c816138a0565b9550505b8061225a816138a0565b9150506121c8565b600a818154811061227257600080fd5b6000918252602091829020600a90910201805460018201546002830154600384015460048501546005860154600687015460078801546008890154604080518082019091526009909a015460ff8181168c526101009182900481169c8c019c909c52989b509699959894976001600160a01b039094169692958083169594830481169462010000840482169463010000008504831694600160201b90048316939216908e565b6001805460009182612329836138a0565b919050555060003360015460014361234191906138d5565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000612395858561395c565b6123a0906001613975565b90508460ff168160ff16836123b59190613ab9565b6123bf9190613929565b95945050505050565b6123d0612a3b565b600280546001600160a01b039687166001600160a01b031991821617909155600380549587169582168617905560068054821690951790945560048054938616938516939093179092556005805491851691841691909117905560078054919093169116179055565b6006546001600160a01b031633146124885760405162461bcd60e51b8152602060048201526012602482015271139bdd0819d85b595cc818dbdb9d1c9858dd60721b604482015260640161093f565b60005b815181101561255d576000600b60008484815181106124ac576124ac613857565b60200260200101518152602001908152602001600020905060005b6124d082612a95565b8110156125485760006124e38383612a9f565b905085600a82815481106124f9576124f9613857565b90600052602060002090600a02016007018190555061253381600c6000898152602001908152602001600020612a1690919063ffffffff16565b50508080612540906138a0565b9150506124c7565b50508080612555906138a0565b91505061248b565b505050565b6000818152600c60205260409020606090610dcb90612a2e565b612584612a3b565b6001600160a01b0381166125e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161093f565b6112fc81612bc3565b8051825160009161260291613acd565b60000b60010361261457506000610dcb565b815183516126229190613acd565b60000b1961263257506001610dcb565b816020015183602001516126469190613acd565b60000b1961265657506002610dcb565b8160200151836020015161266a9190613acd565b60000b60010361267c57506003610dcb565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b604482015260640161093f565b600480546040516309b6507f60e41b8152808301929092526000602483018190526001600160a01b0385811660448501529092911690639b6507f09064174876e8009060640160206040518083038185885af115801561271e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906127439190613aee565b60048054604051632851838160e01b81529182018390529192506000916001600160a01b031690632851838190602401602060405180830381865afa158015612790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b49190613aee565b600a80546001818101835560008390529082027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801838155915492935090916127fd91906138d5565b600180830191909155600282018490556003820187905560058201819055600b90612832908490600490610768906000611cd6565b60ff161015612842576001612845565b60025b60068201805460ff19166001836002811115612863576128636133ea565b021790555060068101805462ffff001916905561289361288b83600461076860006001611cd6565b60ff16612d1c565b60068201805463ff0000001916630100000083600a8111156128b7576128b76133ea565b021790555060006128d083600461076860016002611cd6565b90506002600683015460ff1660028111156128ed576128ed6133ea565b0361290c5760036128ff826002613b07565b6129099190613b23565b90505b61291e600160048360ff16600f6116d0565b60068301805464ff000000001916600160201b60ff8416021790556007830186905560088301805491925060019160ff19168280021790555060018201546000888152600b6020526040902061297391612a16565b5060018201546000868152600c6020526040902061299091612a16565b5050505050505050565b6000828152600b602052604090206129b29082612dcb565b6129fe5760405162461bcd60e51b815260206004820152601e60248201527f506c6179657220646f65736e277420686176652074686973206974656d210000604482015260640161093f565b6000828152600b6020526040902061255d9082612a22565b60006117a38383612de3565b60006117a38383612e32565b606060006117a383612f25565b6000546001600160a01b03163314610abf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161093f565b6000610dcb825490565b60006117a38383612f81565b6000828152600c60205260409020612ac39082612dcb565b612b0f5760405162461bcd60e51b815260206004820152601c60248201527f47616d6520646f65736e277420686176652074686973206974656d2100000000604482015260640161093f565b6000818152600c6020526040902061255d9082612a22565b6000818152600c60205260408120819081612b4182612a95565b905060005b81811015612bb9576002600a612b5c8584612a9f565b81548110612b6c57612b6c613857565b600091825260209091206008600a90920201015460ff166004811115612b9457612b946133ea565b03612ba75783612ba3816138a0565b9450505b80612bb1816138a0565b915050612b46565b5091949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081600003612c3a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612c645780612c4e816138a0565b9150612c5d9050600a83613915565b9150612c3e565b60008167ffffffffffffffff811115612c7f57612c7f613079565b6040519080825280601f01601f191660200182016040528015612ca9576020820181803683370190505b5090505b8415612d1457612cbe6001836138d5565b9150612ccb600a86613ab9565b612cd6906030613929565b60f81b818381518110612ceb57612ceb613857565b60200101906001600160f81b031916908160001a905350612d0d600a86613915565b9450612cad565b949350505050565b600060018211612d2e57506000919050565b60028211612d3e57506001919050565b60038211612d4e57506002919050565b60048211612d5e57506003919050565b60058211612d6e57506004919050565b60068211612d7e57506005919050565b60088211612d8e57506006919050565b600a8211612d9e57506007919050565b600c8211612dae57506008919050565b600e8211612dbe57506009919050565b50600a919050565b919050565b600081815260018301602052604081205415156117a3565b6000818152600183016020526040812054612e2a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dcb565b506000610dcb565b60008181526001830160205260408120548015612f1b576000612e566001836138d5565b8554909150600090612e6a906001906138d5565b9050818114612ecf576000866000018281548110612e8a57612e8a613857565b9060005260206000200154905080876000018481548110612ead57612ead613857565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612ee057612ee0613b45565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610dcb565b6000915050610dcb565b606081600001805480602002602001604051908101604052809291908181526020018280548015612f7557602002820191906000526020600020905b815481526020019060010190808311612f61575b50505050509050919050565b6000826000018281548110612f9857612f98613857565b9060005260206000200154905092915050565b604080516101c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290528351808501909452818452830152906101a082015290565b6001600160a01b03811681146112fc57600080fd5b60008060006060848603121561305657600080fd5b8335925060208401356130688161302c565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126130a057600080fd5b8135602067ffffffffffffffff808311156130bd576130bd613079565b8260051b604051601f19603f830116810181811084821117156130e2576130e2613079565b60405293845285810183019383810192508785111561310057600080fd5b83870191505b8482101561170257813583529183019190830190613106565b600080600080600060a0868803121561313757600080fd5b85359450602086013567ffffffffffffffff81111561315557600080fd5b6131618882890161308f565b959895975050505060408401359360608101359360809091013592509050565b60008060008060006080868803121561319957600080fd5b85356131a48161302c565b945060208601356131b48161302c565b935060408601359250606086013567ffffffffffffffff808211156131d857600080fd5b818801915088601f8301126131ec57600080fd5b8135818111156131fb57600080fd5b89602082850101111561320d57600080fd5b9699959850939650602001949392505050565b60006020828403121561323257600080fd5b5035919050565b6000806000806060858703121561324f57600080fd5b84359350602085013567ffffffffffffffff8082111561326e57600080fd5b818701915087601f83011261328257600080fd5b81358181111561329157600080fd5b8860208260051b85010111156132a657600080fd5b60208301955080945050505060408501356132c08161302c565b939692955090935050565b6000806000606084860312156132e057600080fd5b83359250602084013567ffffffffffffffff8111156132fe57600080fd5b61330a8682870161308f565b925050604084013561331b8161302c565b809150509250925092565b6000806000806080858703121561333c57600080fd5b5050823594602084013594506040840135936060013592509050565b6020808252825182820181905260009190848201906040850190845b8181101561339057835183529284019291840191600101613374565b50909695505050505050565b6000806000606084860312156133b157600080fd5b505081359360208301359350604090920135919050565b600080604083850312156133db57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60038110613410576134106133ea565b9052565b600b8110613410576134106133ea565b60058110613410576134106133ea565b602080825282518282018190526000919060409081850190868401855b828110156135415781518051855286810151878601528581015186860152606080820151908601526080808201516001600160a01b03169086015260a0808201519086015260c0808201516134a882880182613400565b505060e08181015160ff81168783015250506101008181015160ff8116878301525050610120808201516134de82880182613414565b50506101408181015160ff169086015261016080820151908601526101808082015161350c82880182613424565b50506101a090810151805160ff9081169287019290925260200151166101c08501526101e09093019290850190600101613451565b5091979650505050505050565b60006020828403121561356057600080fd5b813580151581146117a357600080fd5b60006020828403121561358257600080fd5b81356117a38161302c565b803560ff81168114612dc657600080fd5b6000604082840312156135b057600080fd5b6040516040810181811067ffffffffffffffff821117156135d3576135d3613079565b6040529050806135e28361358d565b81526135f06020840161358d565b60208201525092915050565b6000806060838503121561360f57600080fd5b82359150613620846020850161359e565b90509250929050565b60408101610dcb8284805160ff908116835260209182015116910152565b8e8152602081018e9052604081018d9052606081018c90526001600160a01b038b16608082015260a081018a90526101e0810161368760c083018b613400565b60ff89811660e084015288166101008301526136a7610120830188613414565b60ff8616610140830152846101608301526136c6610180830185613424565b825160ff9081166101a08401526020840151166101c08301529f9e505050505050505050505050505050565b6000806040838503121561370557600080fd5b61370e8361358d565b91506136206020840161358d565b600080600080600060a0868803121561373457600080fd5b853561373f8161302c565b9450602086013561374f8161302c565b9350604086013561375f8161302c565b9250606086013561376f8161302c565b9150608086013561377f8161302c565b809150509295509295909350565b600080604083850312156137a057600080fd5b82359150602083013567ffffffffffffffff8111156137be57600080fd5b6137ca8582860161308f565b9150509250929050565b600080608083850312156137e757600080fd5b6137f1848461359e565b9150613620846040850161359e565b60005b8381101561381b578181015183820152602001613803565b50506000910152565b6020815260008251806020840152613843816040850160208701613800565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561387f57600080fd5b81516117a38161302c565b634e487b7160e01b600052601160045260246000fd5b6000600182016138b2576138b261388a565b5060010190565b6000600160ff1b82016138ce576138ce61388a565b5060000390565b81810381811115610dcb57610dcb61388a565b8082028115828204841417610dcb57610dcb61388a565b634e487b7160e01b600052601260045260246000fd5b600082613924576139246138ff565b500490565b80820180821115610dcb57610dcb61388a565b818103600083128015838313168383128216171561214d5761214d61388a565b60ff8281168282160390811115610dcb57610dcb61388a565b60ff8181168382160190811115610dcb57610dcb61388a565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b8152600082516139bc816013850160208701613800565b9190910160130192915050565b600181815b80851115613a045781600019048211156139ea576139ea61388a565b808516156139f757918102915b93841c93908002906139ce565b509250929050565b600082613a1b57506001610dcb565b81613a2857506000610dcb565b8160018114613a3e5760028114613a4857613a64565b6001915050610dcb565b60ff841115613a5957613a5961388a565b50506001821b610dcb565b5060208310610133831016604e8410600b8410161715613a87575081810a610dcb565b613a9183836139c9565b8060001904821115613aa557613aa561388a565b029392505050565b60006117a38383613a0c565b600082613ac857613ac86138ff565b500690565b600082810b9082900b03607f198112607f82131715610dcb57610dcb61388a565b600060208284031215613b0057600080fd5b5051919050565b60ff818116838216029081169081811461214d5761214d61388a565b600060ff831680613b3657613b366138ff565b8060ff84160491505092915050565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209bdf192507d5dc1847635ab7463004b69d05c802abbecf482eabdc5d2ba8e18a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17093,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10804,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "lobbies",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LobbyInterface)10709"
      },
      {
        "astId": 10806,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gamesContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10809,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "uif",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(UIFInterface)10783"
      },
      {
        "astId": 10811,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "actionsContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10814,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "games",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(GameInterface)10728"
      },
      {
        "astId": 10817,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "playersContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(PlayersContract)10791"
      },
      {
        "astId": 10868,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintCost",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10871,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintIsActive",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 10877,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "items",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Item)17065_storage)dyn_storage"
      },
      {
        "astId": 10882,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "playerToItems",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2292_storage)"
      },
      {
        "astId": 10887,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gameToItems",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2292_storage)"
      },
      {
        "astId": 10892,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "ownedItems",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(UintSet)2292_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Item)17065_storage)dyn_storage": {
        "base": "t_struct(Item)17065_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Item[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GameInterface)10728": {
        "encoding": "inplace",
        "label": "contract GameInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LobbyInterface)10709": {
        "encoding": "inplace",
        "label": "contract LobbyInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PlayersContract)10791": {
        "encoding": "inplace",
        "label": "contract PlayersContract",
        "numberOfBytes": "20"
      },
      "t_contract(UIFInterface)10783": {
        "encoding": "inplace",
        "label": "contract UIFInterface",
        "numberOfBytes": "20"
      },
      "t_enum(ItemCategory)16824": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemCategory",
        "numberOfBytes": "1"
      },
      "t_enum(ItemType)16836": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemType",
        "numberOfBytes": "1"
      },
      "t_enum(WorldItemStatus)16820": {
        "encoding": "inplace",
        "label": "enum BCTypes.WorldItemStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UintSet)2292_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2292_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(UintSet)2292_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2292_storage"
      },
      "t_struct(Item)17065_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Item",
        "members": [
          {
            "astId": 17034,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "genHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 17036,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17038,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "uifID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17040,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "holdingPlayerId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17042,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 17044,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "weight",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 17047,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemCategory",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ItemCategory)16824"
          },
          {
            "astId": 17049,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsAbility",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 17051,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsFlaw",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 17054,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemType",
            "offset": 3,
            "slot": "6",
            "type": "t_enum(ItemType)16836"
          },
          {
            "astId": 17056,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "power",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 17058,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "currentGame",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 17061,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(WorldItemStatus)16820"
          },
          {
            "astId": 17064,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "position",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(Position)16882_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Position)16882_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 16879,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16881,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)1834_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1829,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1833,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2292_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2291,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1834_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}