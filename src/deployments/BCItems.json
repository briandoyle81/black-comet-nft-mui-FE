{
  "address": "0xB5728e7c5f2EfB9D5d28Eb32cD1478823c4b85ab",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matic",
          "type": "uint256"
        }
      ],
      "name": "SetMintCostInMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitItemToMission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "destroyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemIDsByPlayer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemsByPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "traitModID",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "inGame",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "genHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uifID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitModID",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.ItemCategory",
          "name": "itemCategory",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsAbility",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsFlaw",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.ItemType",
          "name": "itemType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "power",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "inGame",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbies",
      "outputs": [
        {
          "internalType": "contract LobbyInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_holderAddress",
          "type": "address"
        }
      ],
      "name": "lootItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerToItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lobbyContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UIFAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsContract",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setMintingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnCompanyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uif",
      "outputs": [
        {
          "internalType": "contract UIFInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x929d1285f35107ffe2d54c62341a072b5a2b31ecbc269090d37f715c2e77794f",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xB5728e7c5f2EfB9D5d28Eb32cD1478823c4b85ab",
    "transactionIndex": 3,
    "gasUsed": "3546972",
    "logsBloom": "0x
    "blockHash": "0x86b08ccddaad7e07c4b7ca3ce7aec9fe2b6001a8e3b316fdaed6837f010d7edf",
    "transactionHash": "0x929d1285f35107ffe2d54c62341a072b5a2b31ecbc269090d37f715c2e77794f",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 29821065,
        "transactionHash": "0x929d1285f35107ffe2d54c62341a072b5a2b31ecbc269090d37f715c2e77794f",
        "address": "0xB5728e7c5f2EfB9D5d28Eb32cD1478823c4b85ab",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x86b08ccddaad7e07c4b7ca3ce7aec9fe2b6001a8e3b316fdaed6837f010d7edf"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 29821065,
        "transactionHash": "0x929d1285f35107ffe2d54c62341a072b5a2b31ecbc269090d37f715c2e77794f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001da43f045233c000000000000000000000000000000000000000000000000003166ad4ad8d71ff00000000000000000000000000000000000000000000187ef5164ab4685904fc00000000000000000000000000000000000000000000000002f8c695a93b3e3f00000000000000000000000000000000000000000000187ef533eef36cab38bc",
        "logIndex": 14,
        "blockHash": "0x86b08ccddaad7e07c4b7ca3ce7aec9fe2b6001a8e3b316fdaed6837f010d7edf"
      }
    ],
    "blockNumber": 29821065,
    "cumulativeGasUsed": "3888421",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b8f0c7d5da28a8474dbe47fb7941425d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matic\",\"type\":\"uint256\"}],\"name\":\"SetMintCostInMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitItemToMission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"destroyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemIDsByPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemsByPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitModID\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitModID\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbies\",\"outputs\":[{\"internalType\":\"contract LobbyInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"}],\"name\":\"lootItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerToItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lobbyContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UIFAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsContract\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnCompanyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uif\",\"outputs\":[{\"internalType\":\"contract UIFInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCItems.sol\":\"BCItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/BCItems.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// Brian Doyle github.com/briandoyle81\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCUtils.sol\\\";\\nimport \\\"./BCTypes.sol\\\";\\n\\ninterface LobbyInterface {\\n    // TODO: Commit item to player inventory for game\\n}\\n\\ninterface GameInterface {\\n\\n}\\n\\ninterface UIFInterface {\\n    function mintItem(uint _type, uint _quality, address _minter) external payable returns (uint);\\n    function extGetProperties(uint _id) external view returns (bytes32);\\n    function extGetCurrentOwner(uint _id) external view returns (address);\\n    function ownerOf(uint256 _id) external view returns (address);\\n    function extGetUIIsOwned(address _currentOwner) external view returns (uint[] memory);\\n    function burn(uint _id) external;\\n}\\n\\ncontract BCItems is IERC721Receiver, Ownable, BCUtils {\\n\\n    LobbyInterface public lobbies;\\n    address public gamesContract;\\n    UIFInterface public uif;\\n    address public actionsContract;\\n\\n    function setContractAddresses(\\n        address _lobbyContractAddress,\\n        address _gameContract,\\n        address _UIFAddress,\\n        address _actionsContract\\n        ) public onlyOwner {\\n        lobbies = LobbyInterface(_lobbyContractAddress);\\n        gamesContract = _gameContract;\\n        uif = UIFInterface(_UIFAddress);\\n        actionsContract = _actionsContract;\\n    }\\n\\n\\n    uint public mintCost = 100 gwei; // TODO: Set these\\n\\n    bool public mintIsActive = true; // TODO: Is this still useful?\\n\\n    event Received();\\n\\n    address public allowedContract;\\n    uint256 randSeed = 0;\\n    // TODO: Add company items using standard item in UIF\\n\\n    BCTypes.Item[] public items;\\n    mapping(uint256 => uint[]) public playerToItems; // TODO: Handle if made upgradeable\\n\\n    BCTypes.Traits[] itemTraitModifiers;\\n\\n    constructor() {\\n        // Use 0 for no modifiers\\n        itemTraitModifiers.push();\\n    }\\n\\n    function spawnCompanyItem() public payable {\\n        // TODO: Make copies of a specific item using the standard items mechanism in UIF\\n        // TODO: Remove owner free call\\n        // TODO: DRY\\n        require(msg.sender == owner() || msg.value == mintCost, \\\"Incorrect payment\\\");\\n        require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n        // TODO: Implement\\n    }\\n\\n    // Create a new item that goes directly to a player's inventory\\n    // ID of the _player_ holding this item\\n    function lootItem(uint _holdingPlayerId, address _holderAddress) public payable {\\n        // TODO: Remove owner free call\\n        string memory paymentError = string(abi.encodePacked(\\\"Payed: \\\", msg.value, \\\", cost is: \\\", mintCost));\\n        require(msg.sender == owner() || msg.value == mintCost, paymentError);\\n        // require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        // TODO: Finalize allowed senders\\n        require(msg.sender == owner() || msg.sender == address(gamesContract) || msg.sender == actionsContract, \\\"Contract not allowed\\\");\\n\\n        _createNewItem(_holdingPlayerId, _holderAddress);\\n    }\\n\\n    function spawnItem() public payable {\\n        // TODO: Handle location\\n        // TODO: Consider making redundant (always give items to a player then force them to drop)\\n        // ^^ This does make hunting scavs more profitable since you don't have to go get the item\\n        // TODO: Remove owner free call\\n        require(msg.sender == owner() || msg.value == mintCost, \\\"Incorrect payment\\\");\\n        require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n\\n        _createNewItem(0, msg.sender);\\n    }\\n\\n    function _createNewItem(uint _holdingPlayerId, address _holderAddress) internal {\\n\\n        // I don't _think_ this is a reentrancy risk be cause I control the receiving address\\n        // Mint a new character item from UIF\\n        // TODO: Make sure passing payment this way is safe\\n        // TODO: DOUBLY SO FOR THIS ONE!!!!\\n        // TODO: Update costs for by-type payment scheme\\n        uint uifID = uif.mintItem{value: 100 gwei}(4, 0, _holderAddress); // TODO: Hardcoded value\\n        bytes32 finalHash = uif.extGetProperties(uifID);\\n\\n        // First pass interpretation will make weapons, armor, and stat boosters\\n        // Items with special abilities will be dealt with after that system is implemented\\n\\n        BCTypes.Item storage newItem = items.push();\\n\\n        newItem.genHash = finalHash;\\n\\n        newItem.id = items.length-1; // -1 because we've already pushed\\n        newItem.uifID = uifID;\\n\\n        newItem.holdingPlayerId = _holdingPlayerId;\\n\\n        newItem.weight = 1;\\n\\n        newItem.traitModID = 0;\\n\\n        newItem.itemCategory = sliceHashToSmallInt(finalHash, 4, getUIOffset(1, 0)) >= 11 ? BCTypes.ItemCategory.SCAVENGER : BCTypes.ItemCategory.ARTIFACT; // Quality <= 11 is 2/3 scav items.  // TODO: Eval\\n\\n        newItem.grantsAbility = 0; // NO abilities or flaws for now\\n        newItem.grantsFlaw = 0;\\n\\n        newItem.itemType = _getItemType(sliceHashToSmallInt(finalHash, 4, getUIOffset(0, 1)));\\n        newItem.power = 1;\\n\\n        newItem.inGame = true;\\n\\n        playerToItems[_holdingPlayerId].push(items.length-1);\\n        // TODO: Event\\n    }\\n\\n    function _getItemType(uint _value) internal pure returns (BCTypes.ItemType) {\\n        // TODO: UIF Spec is incomplete, most items will be unusable for now\\n        if (_value == 0) {\\n            return BCTypes.ItemType.MELEE;\\n        }\\n        if (_value == 0) {\\n            return BCTypes.ItemType.MELEE;\\n        }\\n        if (_value == 0) {\\n            return BCTypes.ItemType.ARMOR;\\n        }\\n        return BCTypes.ItemType.TODO_ITEM;\\n    }\\n\\n    function commitItemToMission() public {\\n        // TODO:\\n        // Require you own this item and it's not in game\\n    }\\n\\n    // TODO: Complete This\\n    // Get all items, held by players, and on the ground\\n    // function getItemsInGame() {\\n\\n    // }\\n\\n    function destroyItem(uint _itemId) public {\\n        // TODO: CRITICAL -> Ensure complete test coverage\\n        require(msg.sender == gamesContract, \\\"Not game contract\\\");\\n\\n        items[_itemId].holdingPlayerId = 0;\\n        items[_itemId].inGame = false;\\n\\n        // TODO: Handle invincible legendaries here if that becomes a thing\\n        // Burn the NFT\\n        uif.burn(_itemId); // Sad but necessary :(\\n    }\\n\\n    function getItemIDsByPlayer(uint _playerID) public view returns (uint[] memory) {\\n        return playerToItems[_playerID];\\n    }\\n\\n    function getItemsByPlayer(uint _playerID) public view returns (BCTypes.Item[] memory) {\\n        uint numOwned = playerToItems[_playerID].length;\\n        // TODO: Hack\\n        // Either I'm missing a trivial error here, or something I need to learn is going on\\n        // Function works fine if no items generated\\n        // Seems to work intermittently if one player has items, getting items for that player\\n        // But crashes because of an array out of bounds panic trying to get items for player N\\n        // 0 is not < 0, so loop should not happen, not sure what is causing it\\n        if(numOwned == 0) {\\n            return new BCTypes.Item[](0);\\n        }\\n        BCTypes.Item[] memory itemsOwned = new BCTypes.Item[](numOwned);\\n        for (uint i = 0; i < itemsOwned.length; i++) {\\n            itemsOwned[i] = items[playerToItems[_playerID][i]];\\n        }\\n        return itemsOwned;\\n    }\\n\\n    function transferFundsOut() public onlyOwner {\\n        // TODO: Track and limit to transferable balance, leaving enough for buybacks\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function setMintingStatus(bool _status) public onlyOwner {\\n        mintIsActive = _status;\\n    }\\n\\n    function SetMintCostInMatic(uint _matic) public onlyOwner {\\n        mintCost = _matic*10**18;\\n    }\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        _operator;\\n        _from;\\n        _tokenId;\\n        _data;\\n        emit Received();\\n        return 0x150b7a02;\\n    }\\n}\\n\",\"keccak256\":\"0xf603c0bba1ad4273a9136fcc01ca5fae5878d2561907db8e1b3229ae0a2d35d7\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // WARNING: THIS IS NOT USED CURRENTLY!!! // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead; // TODO: Probably don't need\\n        bool hasEgg;  // TODO: Eval only allowing one egg at a time\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        // TODO:  Either add all events, effects, and traits here, or remove roomList\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        bool eventIsTile;  // TODO: Consider making enum\\n        Position eventPosition;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        // uint roomTileId // TODO: Critical\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x43384c2dfff9dbc1f807501eda83a0437dea1a86c2a01dc01148af0f50e92529\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees\\n    uint private TODO_randomSeed = 0;\\n\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) public returns(uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, block.timestamp)));\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    function roll(uint _gameId) public returns(uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return(keccak256(abi.encodePacked(TODO_randomSeed, block.timestamp, msg.sender)));\\n    }\\n\\n    function abs(int x) public pure returns (int) { // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(uint _min, uint _max, uint _val, uint _valMax) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = adjustedMax * _val / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(bytes32 _hash, uint256 _size, uint256 _offset) public pure returns(uint8) {\\n        bytes32 mask = bytes32((2**_size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(uint _traitNum, uint _subTraitNum) public pure returns(uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) public pure returns(uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row-1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row+1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col+1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col-1);\\n        }\\n        string memory message = string.concat(\\\"Invalid direction: \\\", Strings.toString(_direction));\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(uint _gameId, uint _for, uint _against) public returns(bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if(_direction == 0) {\\n            return 1;\\n        }\\n        if(_direction == 1) {\\n            return 0;\\n        }\\n        if(_direction == 2) {\\n            return 3;\\n        }\\n        if(_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x33446f750c0487bda6482e41d7620dce3774d42faf55663eb2173e3bbd9b60c1\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015564174876e8006006556001600760006101000a81548160ff02191690831515021790555060006008553480156200003f57600080fd5b5062000060620000546200008360201b60201c565b6200008b60201b60201c565b600b6001816001815401808255809150500390600052602060002050506200014f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613d94806200015f6000396000f3fe6080604052600436106102045760003560e01c80637420aa3611610118578063aaa68777116100a0578063ce28613f1161006f578063ce28613f14610775578063e89d5a89146107b2578063f2fde38b146107dd578063f7c8af4814610806578063fa3993c21461082f57610204565b8063aaa687771461069c578063b78e6651146106c5578063bdb4b84814610702578063bfb231d21461072d57610204565b80638da5cb5b116100e75780638da5cb5b146105d1578063951fc3fe146105fc57806397f34c3f14610639578063a20df9fa14610676578063aa3eb1b51461068057610204565b80637420aa361461051757806376c8aa27146105405780638214f222146105575780638ac031b31461059457610204565b80633838aed11161019b578063530116961161016a578063530116961461041e5780635dc969671461045b57806364db84bf14610498578063705498dc146104d5578063715018a61461050057610204565b80633838aed1146103765780633841fae11461038d578063471a4294146103ca578063501f9784146103f557610204565b8063185ae9dc116101d7578063185ae9dc146102a65780631b5ac4b5146102d15780631e1de2051461030e5780631f7b4f301461033957610204565b80630364f88c146102095780630fd8e83314610234578063150b7a021461023e578063154fa27a1461027b575b600080fd5b34801561021557600080fd5b5061021e61086c565b60405161022b919061239f565b60405180910390f35b61023c610892565b005b34801561024a57600080fd5b50610265600480360381019061026091906124a7565b610a3f565b604051610272919061256a565b60405180910390f35b34801561028757600080fd5b50610290610a80565b60405161029d9190612594565b60405180910390f35b3480156102b257600080fd5b506102bb610aa6565b6040516102c89190612594565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f391906125e5565b610acc565b6040516103059190612621565b60405180910390f35b34801561031a57600080fd5b50610323610aee565b6040516103309190612655565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612670565b610b3a565b60405161036d91906126ac565b60405180910390f35b34801561038257600080fd5b5061038b610b90565b005b34801561039957600080fd5b506103b460048036038101906103af9190612670565b610be8565b6040516103c19190612785565b60405180910390f35b3480156103d657600080fd5b506103df610c53565b6040516103ec91906127c2565b60405180910390f35b34801561040157600080fd5b5061041c60048036038101906104179190612670565b610c66565b005b34801561042a57600080fd5b50610445600480360381019061044091906127dd565b610c8b565b6040516104529190612860565b60405180910390f35b34801561046757600080fd5b50610482600480360381019061047d919061287b565b610ccf565b60405161048f91906127c2565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba91906128ce565b610d62565b6040516104cc91906126ac565b60405180910390f35b3480156104e157600080fd5b506104ea610d84565b6040516104f7919061292f565b60405180910390f35b34801561050c57600080fd5b50610515610daa565b005b34801561052357600080fd5b5061053e60048036038101906105399190612976565b610dbe565b005b34801561054c57600080fd5b50610555610de3565b005b34801561056357600080fd5b5061057e60048036038101906105799190612670565b610de5565b60405161058b91906126ac565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b691906128ce565b610e6a565b6040516105c891906126ac565b60405180910390f35b3480156105dd57600080fd5b506105e6610e9b565b6040516105f39190612594565b60405180910390f35b34801561060857600080fd5b50610623600480360381019061061e9190612ab0565b610ec4565b6040516106309190612b2e565b60405180910390f35b34801561064557600080fd5b50610660600480360381019061065b9190612b75565b611033565b60405161066d9190612860565b60405180910390f35b61067e61106a565b005b61069a60048036038101906106959190612bc8565b611222565b005b3480156106a857600080fd5b506106c360048036038101906106be9190612c08565b611403565b005b3480156106d157600080fd5b506106ec60048036038101906106e79190612670565b611515565b6040516106f99190612ef2565b60405180910390f35b34801561070e57600080fd5b506107176117b9565b60405161072491906126ac565b60405180910390f35b34801561073957600080fd5b50610754600480360381019061074f9190612670565b6117bf565b60405161076c9c9b9a99989796959493929190612f32565b60405180910390f35b34801561078157600080fd5b5061079c60048036038101906107979190612fec565b61187d565b6040516107a99190612860565b60405180910390f35b3480156107be57600080fd5b506107c761190e565b6040516107d49190612594565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff919061302c565b611934565b005b34801561081257600080fd5b5061082d60048036038101906108289190612670565b6119b7565b005b34801561083b57600080fd5b5061085660048036038101906108519190613059565b611b40565b60405161086391906126ac565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61089a610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108d4575060065434145b610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a906130f6565b60405180910390fd5b61091b610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610967575060011515600760009054906101000a900460ff161515145b6109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099d90613162565b60405180910390fd5b6109ae610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a345750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a3d57600080fd5b565b60007f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b60405160405180910390a163150b7a0260e01b905095945050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821215610ae55781610ae0906131b1565b610ae7565b815b9050919050565b600060016000815480929190610b03906131f9565b91905055506001544233604051602001610b1f939291906132aa565b60405160208183030381529060405280519060200120905090565b600080610b496001600661187d565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c518382604051610b7f9291906132e7565b60405180910390a180915050919050565b610b98611c5d565b610ba0610e9b565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610be5573d6000803e3d6000fd5b50565b6060600a6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c4757602002820191906000526020600020905b815481526020019060010190808311610c33575b50505050509050919050565b600760009054906101000a900460ff1681565b610c6e611c5d565b670de0b6b3a764000081610c829190613310565b60068190555050565b6000808585610c9a9190613352565b90506000838583610cab9190613310565b610cb591906133b5565b90508681610cc391906133e6565b92505050949350505050565b600080610cdb85610b3a565b90507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b9585828686604051610d12949392919061341a565b60405180910390a160018103610d2c576000915050610d5b565b6003838583610d3b91906133e6565b610d45919061345f565b1315610d55576001915050610d5b565b60009150505b9392505050565b600081836004610d729190613310565b610d7c91906133e6565b905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610db2611c5d565b610dbc6000611cdb565b565b610dc6611c5d565b80600760006101000a81548160ff02191690831515021790555050565b565b6000808203610df75760019050610e65565b60018203610e085760009050610e65565b60028203610e195760039050610e65565b60038203610e2a5760029050610e65565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c906134ee565b60405180910390fd5b919050565b600a6020528160005260406000208181548110610e8657600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ecc61226d565b60008303610f0a57604051806040016040528060018460000151610ef0919061350e565b60ff168152602001836020015160ff16815250905061102d565b60018303610f4857604051806040016040528060018460000151610f2e9190613543565b60ff168152602001836020015160ff16815250905061102d565b60028303610f86576040518060400160405280836000015160ff16815260200160018460200151610f799190613543565b60ff16815250905061102d565b60038303610fc4576040518060400160405280836000015160ff16815260200160018460200151610fb7919061350e565b60ff16815250905061102d565b6000610fcf84611d9f565b604051602001610fdf919061360f565b6040516020818303038152906040529050806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611024919061366e565b60405180910390fd5b92915050565b60008082600185600261104691906137c3565b6110509190613352565b60001b901b905082818616901c60001c9150509392505050565b611072610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110ac575060065434145b6110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e2906130f6565b60405180910390fd5b6110f3610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061113f575060011515600760009054906101000a900460ff161515145b61117e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117590613162565b60405180910390fd5b611186610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061120c5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61121557600080fd5b611220600033611eff565b565b6000346006546040516020016112399291906138a6565b6040516020818303038152906040529050611252610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061128c575060065434145b81906112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c5919061366e565b60405180910390fd5b506112d7610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061135d5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806113b55750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6113f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113eb90613934565b60405180910390fd5b6113fe8383611eff565b505050565b61140b611c5d565b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60606000600a60008481526020019081526020016000208054905090506000810361159757600067ffffffffffffffff811115611555576115546129b9565b5b60405190808252806020026020018201604052801561158e57816020015b61157b61228d565b8152602001906001900390816115735790505b509150506117b4565b60008167ffffffffffffffff8111156115b3576115b26129b9565b5b6040519080825280602002602001820160405280156115ec57816020015b6115d961228d565b8152602001906001900390816115d15790505b50905060005b81518110156117ad576009600a6000878152602001908152602001600020828154811061162257611621613954565b5b90600052602060002001548154811061163e5761163d613954565b5b9060005260206000209060070201604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1660028111156116b9576116b8612caa565b5b60028111156116cb576116ca612caa565b5b81526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900460ff1660ff1660ff1681526020016006820160039054906101000a900460ff16600381111561172e5761172d612caa565b5b60038111156117405761173f612caa565b5b81526020016006820160049054906101000a900460ff1660ff1660ff1681526020016006820160059054906101000a900460ff16151515158152505082828151811061178f5761178e613954565b5b602002602001018190525080806117a5906131f9565b9150506115f2565b5080925050505b919050565b60065481565b600981815481106117cf57600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16908060060160039054906101000a900460ff16908060060160049054906101000a900460ff16908060060160059054906101000a900460ff1690508c565b600060016000815480929190611892906131f9565b9190505550600033600154426040516020016118b093929190613983565b6040516020818303038152906040528051906020012060001c90506000600185856118db919061350e565b6118e59190613543565b90508460ff168160ff16836118fa91906139c0565b61190491906133e6565b9250505092915050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61193c611c5d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a290613a63565b60405180910390fd5b6119b481611cdb565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3e90613acf565b60405180910390fd5b600060098281548110611a5d57611a5c613954565b5b906000526020600020906007020160030181905550600060098281548110611a8857611a87613954565b5b906000526020600020906007020160060160056101000a81548160ff021916908315150217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b8152600401611b0b91906126ac565b600060405180830381600087803b158015611b2557600080fd5b505af1158015611b39573d6000803e3d6000fd5b5050505050565b6000600182600001518460000151611b589190613afc565b60000b03611b695760009050611c57565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82600001518460000151611b9e9190613afc565b60000b03611baf5760019050611c57565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82602001518460200151611be49190613afc565b60000b03611bf55760029050611c57565b600182602001518460200151611c0b9190613afc565b60000b03611c1c5760039050611c57565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4e90613ba1565b60405180910390fd5b92915050565b611c65612227565b73ffffffffffffffffffffffffffffffffffffffff16611c83610e9b565b73ffffffffffffffffffffffffffffffffffffffff1614611cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd090613c0d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060008203611de6576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611efa565b600082905060005b60008214611e18578080611e01906131f9565b915050600a82611e1191906133b5565b9150611dee565b60008167ffffffffffffffff811115611e3457611e336129b9565b5b6040519080825280601f01601f191660200182016040528015611e665781602001600182028036833780820191505090505b5090505b60008514611ef357600182611e7f9190613352565b9150600a85611e8e91906139c0565b6030611e9a91906133e6565b60f81b818381518110611eb057611eaf613954565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611eec91906133b5565b9450611e6a565b8093505050505b919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b6507f064174876e80060046000866040518563ffffffff1660e01b8152600401611f6893929190613ca3565b60206040518083038185885af1158015611f86573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611fab9190613cef565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328518381836040518263ffffffff1660e01b815260040161200a91906126ac565b602060405180830381865afa158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204b9190613d31565b9050600060096001816001815401808255809150500390600052602060002090600702019050818160000181905550600160098054905061208c9190613352565b81600101819055508281600201819055508481600301819055506001816004018190555060008160050181905550600b6120d38360046120ce60016000610d62565b611033565b60ff1610156120e35760016120e6565b60025b8160060160006101000a81548160ff0219169083600281111561210c5761210b612caa565b5b021790555060008160060160016101000a81548160ff021916908360ff16021790555060008160060160026101000a81548160ff021916908360ff16021790555061216f61216783600461216260006001610d62565b611033565b60ff1661222f565b8160060160036101000a81548160ff0219169083600381111561219557612194612caa565b5b021790555060018160060160046101000a81548160ff021916908360ff16021790555060018160060160056101000a81548160ff021916908315150217905550600a600086815260200190815260200160002060016009805490506121fa9190613352565b90806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b600033905090565b60008082036122415760009050612268565b600082036122525760009050612268565b600082036122635760029050612268565b600390505b919050565b6040518060400160405280600060ff168152602001600060ff1681525090565b604051806101800160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600060028111156122da576122d9612caa565b5b8152602001600060ff168152602001600060ff1681526020016000600381111561230757612306612caa565b5b8152602001600060ff1681526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061236561236061235b84612320565b612340565b612320565b9050919050565b60006123778261234a565b9050919050565b60006123898261236c565b9050919050565b6123998161237e565b82525050565b60006020820190506123b46000830184612390565b92915050565b6000604051905090565b600080fd5b600080fd5b60006123d982612320565b9050919050565b6123e9816123ce565b81146123f457600080fd5b50565b600081359050612406816123e0565b92915050565b6000819050919050565b61241f8161240c565b811461242a57600080fd5b50565b60008135905061243c81612416565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261246757612466612442565b5b8235905067ffffffffffffffff81111561248457612483612447565b5b6020830191508360018202830111156124a05761249f61244c565b5b9250929050565b6000806000806000608086880312156124c3576124c26123c4565b5b60006124d1888289016123f7565b95505060206124e2888289016123f7565b94505060406124f38882890161242d565b935050606086013567ffffffffffffffff811115612514576125136123c9565b5b61252088828901612451565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125648161252f565b82525050565b600060208201905061257f600083018461255b565b92915050565b61258e816123ce565b82525050565b60006020820190506125a96000830184612585565b92915050565b6000819050919050565b6125c2816125af565b81146125cd57600080fd5b50565b6000813590506125df816125b9565b92915050565b6000602082840312156125fb576125fa6123c4565b5b6000612609848285016125d0565b91505092915050565b61261b816125af565b82525050565b60006020820190506126366000830184612612565b92915050565b6000819050919050565b61264f8161263c565b82525050565b600060208201905061266a6000830184612646565b92915050565b600060208284031215612686576126856123c4565b5b60006126948482850161242d565b91505092915050565b6126a68161240c565b82525050565b60006020820190506126c1600083018461269d565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126fc8161240c565b82525050565b600061270e83836126f3565b60208301905092915050565b6000602082019050919050565b6000612732826126c7565b61273c81856126d2565b9350612747836126e3565b8060005b8381101561277857815161275f8882612702565b975061276a8361271a565b92505060018101905061274b565b5085935050505092915050565b6000602082019050818103600083015261279f8184612727565b905092915050565b60008115159050919050565b6127bc816127a7565b82525050565b60006020820190506127d760008301846127b3565b92915050565b600080600080608085870312156127f7576127f66123c4565b5b60006128058782880161242d565b94505060206128168782880161242d565b93505060406128278782880161242d565b92505060606128388782880161242d565b91505092959194509250565b600060ff82169050919050565b61285a81612844565b82525050565b60006020820190506128756000830184612851565b92915050565b600080600060608486031215612894576128936123c4565b5b60006128a28682870161242d565b93505060206128b38682870161242d565b92505060406128c48682870161242d565b9150509250925092565b600080604083850312156128e5576128e46123c4565b5b60006128f38582860161242d565b92505060206129048582860161242d565b9150509250929050565b60006129198261236c565b9050919050565b6129298161290e565b82525050565b60006020820190506129446000830184612920565b92915050565b612953816127a7565b811461295e57600080fd5b50565b6000813590506129708161294a565b92915050565b60006020828403121561298c5761298b6123c4565b5b600061299a84828501612961565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129f1826129a8565b810181811067ffffffffffffffff82111715612a1057612a0f6129b9565b5b80604052505050565b6000612a236123ba565b9050612a2f82826129e8565b919050565b612a3d81612844565b8114612a4857600080fd5b50565b600081359050612a5a81612a34565b92915050565b600060408284031215612a7657612a756129a3565b5b612a806040612a19565b90506000612a9084828501612a4b565b6000830152506020612aa484828501612a4b565b60208301525092915050565b60008060608385031215612ac757612ac66123c4565b5b6000612ad58582860161242d565b9250506020612ae685828601612a60565b9150509250929050565b612af981612844565b82525050565b604082016000820151612b156000850182612af0565b506020820151612b286020850182612af0565b50505050565b6000604082019050612b436000830184612aff565b92915050565b612b528161263c565b8114612b5d57600080fd5b50565b600081359050612b6f81612b49565b92915050565b600080600060608486031215612b8e57612b8d6123c4565b5b6000612b9c86828701612b60565b9350506020612bad8682870161242d565b9250506040612bbe8682870161242d565b9150509250925092565b60008060408385031215612bdf57612bde6123c4565b5b6000612bed8582860161242d565b9250506020612bfe858286016123f7565b9150509250929050565b60008060008060808587031215612c2257612c216123c4565b5b6000612c30878288016123f7565b9450506020612c41878288016123f7565b9350506040612c52878288016123f7565b9250506060612c63878288016123f7565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ca48161263c565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612cea57612ce9612caa565b5b50565b6000819050612cfb82612cd9565b919050565b6000612d0b82612ced565b9050919050565b612d1b81612d00565b82525050565b60048110612d3257612d31612caa565b5b50565b6000819050612d4382612d21565b919050565b6000612d5382612d35565b9050919050565b612d6381612d48565b82525050565b612d72816127a7565b82525050565b61018082016000820151612d8f6000850182612c9b565b506020820151612da260208501826126f3565b506040820151612db560408501826126f3565b506060820151612dc860608501826126f3565b506080820151612ddb60808501826126f3565b5060a0820151612dee60a08501826126f3565b5060c0820151612e0160c0850182612d12565b5060e0820151612e1460e0850182612af0565b50610100820151612e29610100850182612af0565b50610120820151612e3e610120850182612d5a565b50610140820151612e53610140850182612af0565b50610160820151612e68610160850182612d69565b50505050565b6000612e7a8383612d78565b6101808301905092915050565b6000602082019050919050565b6000612e9f82612c6f565b612ea98185612c7a565b9350612eb483612c8b565b8060005b83811015612ee5578151612ecc8882612e6e565b9750612ed783612e87565b925050600181019050612eb8565b5085935050505092915050565b60006020820190508181036000830152612f0c8184612e94565b905092915050565b612f1d81612d00565b82525050565b612f2c81612d48565b82525050565b600061018082019050612f48600083018f612646565b612f55602083018e61269d565b612f62604083018d61269d565b612f6f606083018c61269d565b612f7c608083018b61269d565b612f8960a083018a61269d565b612f9660c0830189612f14565b612fa360e0830188612851565b612fb1610100830187612851565b612fbf610120830186612f23565b612fcd610140830185612851565b612fdb6101608301846127b3565b9d9c50505050505050505050505050565b60008060408385031215613003576130026123c4565b5b600061301185828601612a4b565b925050602061302285828601612a4b565b9150509250929050565b600060208284031215613042576130416123c4565b5b6000613050848285016123f7565b91505092915050565b600080608083850312156130705761306f6123c4565b5b600061307e85828601612a60565b925050604061308f85828601612a60565b9150509250929050565b600082825260208201905092915050565b7f496e636f7272656374207061796d656e74000000000000000000000000000000600082015250565b60006130e0601183613099565b91506130eb826130aa565b602082019050919050565b6000602082019050818103600083015261310f816130d3565b9050919050565b7f4d696e74696e67206973206e6f74206163746976650000000000000000000000600082015250565b600061314c601583613099565b915061315782613116565b602082019050919050565b6000602082019050818103600083015261317b8161313f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131bc826125af565b91507f800000000000000000000000000000000000000000000000000000000000000082036131ee576131ed613182565b5b816000039050919050565b60006132048261240c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361323657613235613182565b5b600182019050919050565b6000819050919050565b61325c6132578261240c565b613241565b82525050565b60008160601b9050919050565b600061327a82613262565b9050919050565b600061328c8261326f565b9050919050565b6132a461329f826123ce565b613281565b82525050565b60006132b6828661324b565b6020820191506132c6828561324b565b6020820191506132d68284613293565b601482019150819050949350505050565b60006040820190506132fc600083018561269d565b613309602083018461269d565b9392505050565b600061331b8261240c565b91506133268361240c565b92508282026133348161240c565b9150828204841483151761334b5761334a613182565b5b5092915050565b600061335d8261240c565b91506133688361240c565b92508282039050818111156133805761337f613182565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133c08261240c565b91506133cb8361240c565b9250826133db576133da613386565b5b828204905092915050565b60006133f18261240c565b91506133fc8361240c565b925082820190508082111561341457613413613182565b5b92915050565b600060808201905061342f600083018761269d565b61343c602083018661269d565b613449604083018561269d565b613456606083018461269d565b95945050505050565b600061346a826125af565b9150613475836125af565b925082820390508181126000841216828213600085121516171561349c5761349b613182565b5b92915050565b7f42616420646972656374696f6e00000000000000000000000000000000000000600082015250565b60006134d8600d83613099565b91506134e3826134a2565b602082019050919050565b60006020820190508181036000830152613507816134cb565b9050919050565b600061351982612844565b915061352483612844565b9250828203905060ff81111561353d5761353c613182565b5b92915050565b600061354e82612844565b915061355983612844565b9250828201905060ff81111561357257613571613182565b5b92915050565b7f496e76616c696420646972656374696f6e3a2000000000000000000000000000815250565b600081519050919050565b600081905092915050565b60005b838110156135d25780820151818401526020810190506135b7565b60008484015250505050565b60006135e98261359e565b6135f381856135a9565b93506136038185602086016135b4565b80840191505092915050565b600061361a82613578565b60138201915061362a82846135de565b915081905092915050565b60006136408261359e565b61364a8185613099565b935061365a8185602086016135b4565b613663816129a8565b840191505092915050565b600060208201905081810360008301526136888184613635565b905092915050565b60008160011c9050919050565b6000808291508390505b60018511156136e7578086048111156136c3576136c2613182565b5b60018516156136d25780820291505b80810290506136e085613690565b94506136a7565b94509492505050565b60008261370057600190506137bc565b8161370e57600090506137bc565b8160018114613724576002811461372e5761375d565b60019150506137bc565b60ff8411156137405761373f613182565b5b8360020a91508482111561375757613756613182565b5b506137bc565b5060208310610133831016604e8410600b84101617156137925782820a90508381111561378d5761378c613182565b5b6137bc565b61379f848484600161369d565b925090508184048111156137b6576137b5613182565b5b81810290505b9392505050565b60006137ce8261240c565b91506137d98361240c565b92506138067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846136f0565b905092915050565b7f50617965643a2000000000000000000000000000000000000000000000000000600082015250565b60006138446007836135a9565b915061384f8261380e565b600782019050919050565b7f2c20636f73742069733a20000000000000000000000000000000000000000000600082015250565b6000613890600b836135a9565b915061389b8261385a565b600b82019050919050565b60006138b182613837565b91506138bd828561324b565b6020820191506138cc82613883565b91506138d8828461324b565b6020820191508190509392505050565b7f436f6e7472616374206e6f7420616c6c6f776564000000000000000000000000600082015250565b600061391e601483613099565b9150613929826138e8565b602082019050919050565b6000602082019050818103600083015261394d81613911565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061398f8286613293565b60148201915061399f828561324b565b6020820191506139af828461324b565b602082019150819050949350505050565b60006139cb8261240c565b91506139d68361240c565b9250826139e6576139e5613386565b5b828206905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a4d602683613099565b9150613a58826139f1565b604082019050919050565b60006020820190508181036000830152613a7c81613a40565b9050919050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b6000613ab9601183613099565b9150613ac482613a83565b602082019050919050565b60006020820190508181036000830152613ae881613aac565b9050919050565b60008160000b9050919050565b6000613b0782613aef565b9150613b1283613aef565b92508282039050607f81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082121715613b4f57613b4e613182565b5b92915050565b7f4572726f723a204e6f742061646a6163656e7400000000000000000000000000600082015250565b6000613b8b601383613099565b9150613b9682613b55565b602082019050919050565b60006020820190508181036000830152613bba81613b7e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613bf7602083613099565b9150613c0282613bc1565b602082019050919050565b60006020820190508181036000830152613c2681613bea565b9050919050565b6000819050919050565b6000613c52613c4d613c4884613c2d565b612340565b61240c565b9050919050565b613c6281613c37565b82525050565b6000819050919050565b6000613c8d613c88613c8384613c68565b612340565b61240c565b9050919050565b613c9d81613c72565b82525050565b6000606082019050613cb86000830186613c59565b613cc56020830185613c94565b613cd26040830184612585565b949350505050565b600081519050613ce981612416565b92915050565b600060208284031215613d0557613d046123c4565b5b6000613d1384828501613cda565b91505092915050565b600081519050613d2b81612b49565b92915050565b600060208284031215613d4757613d466123c4565b5b6000613d5584828501613d1c565b9150509291505056fea26469706673582212208e750df0ad9ac76dd712b079decdefbb97aec57459c235cf7dd63c9bd6af42ba64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c80637420aa3611610118578063aaa68777116100a0578063ce28613f1161006f578063ce28613f14610775578063e89d5a89146107b2578063f2fde38b146107dd578063f7c8af4814610806578063fa3993c21461082f57610204565b8063aaa687771461069c578063b78e6651146106c5578063bdb4b84814610702578063bfb231d21461072d57610204565b80638da5cb5b116100e75780638da5cb5b146105d1578063951fc3fe146105fc57806397f34c3f14610639578063a20df9fa14610676578063aa3eb1b51461068057610204565b80637420aa361461051757806376c8aa27146105405780638214f222146105575780638ac031b31461059457610204565b80633838aed11161019b578063530116961161016a578063530116961461041e5780635dc969671461045b57806364db84bf14610498578063705498dc146104d5578063715018a61461050057610204565b80633838aed1146103765780633841fae11461038d578063471a4294146103ca578063501f9784146103f557610204565b8063185ae9dc116101d7578063185ae9dc146102a65780631b5ac4b5146102d15780631e1de2051461030e5780631f7b4f301461033957610204565b80630364f88c146102095780630fd8e83314610234578063150b7a021461023e578063154fa27a1461027b575b600080fd5b34801561021557600080fd5b5061021e61086c565b60405161022b919061239f565b60405180910390f35b61023c610892565b005b34801561024a57600080fd5b50610265600480360381019061026091906124a7565b610a3f565b604051610272919061256a565b60405180910390f35b34801561028757600080fd5b50610290610a80565b60405161029d9190612594565b60405180910390f35b3480156102b257600080fd5b506102bb610aa6565b6040516102c89190612594565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f391906125e5565b610acc565b6040516103059190612621565b60405180910390f35b34801561031a57600080fd5b50610323610aee565b6040516103309190612655565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612670565b610b3a565b60405161036d91906126ac565b60405180910390f35b34801561038257600080fd5b5061038b610b90565b005b34801561039957600080fd5b506103b460048036038101906103af9190612670565b610be8565b6040516103c19190612785565b60405180910390f35b3480156103d657600080fd5b506103df610c53565b6040516103ec91906127c2565b60405180910390f35b34801561040157600080fd5b5061041c60048036038101906104179190612670565b610c66565b005b34801561042a57600080fd5b50610445600480360381019061044091906127dd565b610c8b565b6040516104529190612860565b60405180910390f35b34801561046757600080fd5b50610482600480360381019061047d919061287b565b610ccf565b60405161048f91906127c2565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba91906128ce565b610d62565b6040516104cc91906126ac565b60405180910390f35b3480156104e157600080fd5b506104ea610d84565b6040516104f7919061292f565b60405180910390f35b34801561050c57600080fd5b50610515610daa565b005b34801561052357600080fd5b5061053e60048036038101906105399190612976565b610dbe565b005b34801561054c57600080fd5b50610555610de3565b005b34801561056357600080fd5b5061057e60048036038101906105799190612670565b610de5565b60405161058b91906126ac565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b691906128ce565b610e6a565b6040516105c891906126ac565b60405180910390f35b3480156105dd57600080fd5b506105e6610e9b565b6040516105f39190612594565b60405180910390f35b34801561060857600080fd5b50610623600480360381019061061e9190612ab0565b610ec4565b6040516106309190612b2e565b60405180910390f35b34801561064557600080fd5b50610660600480360381019061065b9190612b75565b611033565b60405161066d9190612860565b60405180910390f35b61067e61106a565b005b61069a60048036038101906106959190612bc8565b611222565b005b3480156106a857600080fd5b506106c360048036038101906106be9190612c08565b611403565b005b3480156106d157600080fd5b506106ec60048036038101906106e79190612670565b611515565b6040516106f99190612ef2565b60405180910390f35b34801561070e57600080fd5b506107176117b9565b60405161072491906126ac565b60405180910390f35b34801561073957600080fd5b50610754600480360381019061074f9190612670565b6117bf565b60405161076c9c9b9a99989796959493929190612f32565b60405180910390f35b34801561078157600080fd5b5061079c60048036038101906107979190612fec565b61187d565b6040516107a99190612860565b60405180910390f35b3480156107be57600080fd5b506107c761190e565b6040516107d49190612594565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff919061302c565b611934565b005b34801561081257600080fd5b5061082d60048036038101906108289190612670565b6119b7565b005b34801561083b57600080fd5b5061085660048036038101906108519190613059565b611b40565b60405161086391906126ac565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61089a610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108d4575060065434145b610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a906130f6565b60405180910390fd5b61091b610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610967575060011515600760009054906101000a900460ff161515145b6109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099d90613162565b60405180910390fd5b6109ae610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a345750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a3d57600080fd5b565b60007f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b60405160405180910390a163150b7a0260e01b905095945050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821215610ae55781610ae0906131b1565b610ae7565b815b9050919050565b600060016000815480929190610b03906131f9565b91905055506001544233604051602001610b1f939291906132aa565b60405160208183030381529060405280519060200120905090565b600080610b496001600661187d565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c518382604051610b7f9291906132e7565b60405180910390a180915050919050565b610b98611c5d565b610ba0610e9b565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610be5573d6000803e3d6000fd5b50565b6060600a6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c4757602002820191906000526020600020905b815481526020019060010190808311610c33575b50505050509050919050565b600760009054906101000a900460ff1681565b610c6e611c5d565b670de0b6b3a764000081610c829190613310565b60068190555050565b6000808585610c9a9190613352565b90506000838583610cab9190613310565b610cb591906133b5565b90508681610cc391906133e6565b92505050949350505050565b600080610cdb85610b3a565b90507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b9585828686604051610d12949392919061341a565b60405180910390a160018103610d2c576000915050610d5b565b6003838583610d3b91906133e6565b610d45919061345f565b1315610d55576001915050610d5b565b60009150505b9392505050565b600081836004610d729190613310565b610d7c91906133e6565b905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610db2611c5d565b610dbc6000611cdb565b565b610dc6611c5d565b80600760006101000a81548160ff02191690831515021790555050565b565b6000808203610df75760019050610e65565b60018203610e085760009050610e65565b60028203610e195760039050610e65565b60038203610e2a5760029050610e65565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c906134ee565b60405180910390fd5b919050565b600a6020528160005260406000208181548110610e8657600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ecc61226d565b60008303610f0a57604051806040016040528060018460000151610ef0919061350e565b60ff168152602001836020015160ff16815250905061102d565b60018303610f4857604051806040016040528060018460000151610f2e9190613543565b60ff168152602001836020015160ff16815250905061102d565b60028303610f86576040518060400160405280836000015160ff16815260200160018460200151610f799190613543565b60ff16815250905061102d565b60038303610fc4576040518060400160405280836000015160ff16815260200160018460200151610fb7919061350e565b60ff16815250905061102d565b6000610fcf84611d9f565b604051602001610fdf919061360f565b6040516020818303038152906040529050806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611024919061366e565b60405180910390fd5b92915050565b60008082600185600261104691906137c3565b6110509190613352565b60001b901b905082818616901c60001c9150509392505050565b611072610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110ac575060065434145b6110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e2906130f6565b60405180910390fd5b6110f3610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061113f575060011515600760009054906101000a900460ff161515145b61117e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117590613162565b60405180910390fd5b611186610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061120c5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61121557600080fd5b611220600033611eff565b565b6000346006546040516020016112399291906138a6565b6040516020818303038152906040529050611252610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061128c575060065434145b81906112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c5919061366e565b60405180910390fd5b506112d7610e9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061135d5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806113b55750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6113f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113eb90613934565b60405180910390fd5b6113fe8383611eff565b505050565b61140b611c5d565b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60606000600a60008481526020019081526020016000208054905090506000810361159757600067ffffffffffffffff811115611555576115546129b9565b5b60405190808252806020026020018201604052801561158e57816020015b61157b61228d565b8152602001906001900390816115735790505b509150506117b4565b60008167ffffffffffffffff8111156115b3576115b26129b9565b5b6040519080825280602002602001820160405280156115ec57816020015b6115d961228d565b8152602001906001900390816115d15790505b50905060005b81518110156117ad576009600a6000878152602001908152602001600020828154811061162257611621613954565b5b90600052602060002001548154811061163e5761163d613954565b5b9060005260206000209060070201604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1660028111156116b9576116b8612caa565b5b60028111156116cb576116ca612caa565b5b81526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900460ff1660ff1660ff1681526020016006820160039054906101000a900460ff16600381111561172e5761172d612caa565b5b60038111156117405761173f612caa565b5b81526020016006820160049054906101000a900460ff1660ff1660ff1681526020016006820160059054906101000a900460ff16151515158152505082828151811061178f5761178e613954565b5b602002602001018190525080806117a5906131f9565b9150506115f2565b5080925050505b919050565b60065481565b600981815481106117cf57600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16908060060160039054906101000a900460ff16908060060160049054906101000a900460ff16908060060160059054906101000a900460ff1690508c565b600060016000815480929190611892906131f9565b9190505550600033600154426040516020016118b093929190613983565b6040516020818303038152906040528051906020012060001c90506000600185856118db919061350e565b6118e59190613543565b90508460ff168160ff16836118fa91906139c0565b61190491906133e6565b9250505092915050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61193c611c5d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a290613a63565b60405180910390fd5b6119b481611cdb565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3e90613acf565b60405180910390fd5b600060098281548110611a5d57611a5c613954565b5b906000526020600020906007020160030181905550600060098281548110611a8857611a87613954565b5b906000526020600020906007020160060160056101000a81548160ff021916908315150217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b8152600401611b0b91906126ac565b600060405180830381600087803b158015611b2557600080fd5b505af1158015611b39573d6000803e3d6000fd5b5050505050565b6000600182600001518460000151611b589190613afc565b60000b03611b695760009050611c57565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82600001518460000151611b9e9190613afc565b60000b03611baf5760019050611c57565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82602001518460200151611be49190613afc565b60000b03611bf55760029050611c57565b600182602001518460200151611c0b9190613afc565b60000b03611c1c5760039050611c57565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4e90613ba1565b60405180910390fd5b92915050565b611c65612227565b73ffffffffffffffffffffffffffffffffffffffff16611c83610e9b565b73ffffffffffffffffffffffffffffffffffffffff1614611cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd090613c0d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060008203611de6576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611efa565b600082905060005b60008214611e18578080611e01906131f9565b915050600a82611e1191906133b5565b9150611dee565b60008167ffffffffffffffff811115611e3457611e336129b9565b5b6040519080825280601f01601f191660200182016040528015611e665781602001600182028036833780820191505090505b5090505b60008514611ef357600182611e7f9190613352565b9150600a85611e8e91906139c0565b6030611e9a91906133e6565b60f81b818381518110611eb057611eaf613954565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611eec91906133b5565b9450611e6a565b8093505050505b919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b6507f064174876e80060046000866040518563ffffffff1660e01b8152600401611f6893929190613ca3565b60206040518083038185885af1158015611f86573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611fab9190613cef565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328518381836040518263ffffffff1660e01b815260040161200a91906126ac565b602060405180830381865afa158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204b9190613d31565b9050600060096001816001815401808255809150500390600052602060002090600702019050818160000181905550600160098054905061208c9190613352565b81600101819055508281600201819055508481600301819055506001816004018190555060008160050181905550600b6120d38360046120ce60016000610d62565b611033565b60ff1610156120e35760016120e6565b60025b8160060160006101000a81548160ff0219169083600281111561210c5761210b612caa565b5b021790555060008160060160016101000a81548160ff021916908360ff16021790555060008160060160026101000a81548160ff021916908360ff16021790555061216f61216783600461216260006001610d62565b611033565b60ff1661222f565b8160060160036101000a81548160ff0219169083600381111561219557612194612caa565b5b021790555060018160060160046101000a81548160ff021916908360ff16021790555060018160060160056101000a81548160ff021916908315150217905550600a600086815260200190815260200160002060016009805490506121fa9190613352565b90806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b600033905090565b60008082036122415760009050612268565b600082036122525760009050612268565b600082036122635760029050612268565b600390505b919050565b6040518060400160405280600060ff168152602001600060ff1681525090565b604051806101800160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600060028111156122da576122d9612caa565b5b8152602001600060ff168152602001600060ff1681526020016000600381111561230757612306612caa565b5b8152602001600060ff1681526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061236561236061235b84612320565b612340565b612320565b9050919050565b60006123778261234a565b9050919050565b60006123898261236c565b9050919050565b6123998161237e565b82525050565b60006020820190506123b46000830184612390565b92915050565b6000604051905090565b600080fd5b600080fd5b60006123d982612320565b9050919050565b6123e9816123ce565b81146123f457600080fd5b50565b600081359050612406816123e0565b92915050565b6000819050919050565b61241f8161240c565b811461242a57600080fd5b50565b60008135905061243c81612416565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261246757612466612442565b5b8235905067ffffffffffffffff81111561248457612483612447565b5b6020830191508360018202830111156124a05761249f61244c565b5b9250929050565b6000806000806000608086880312156124c3576124c26123c4565b5b60006124d1888289016123f7565b95505060206124e2888289016123f7565b94505060406124f38882890161242d565b935050606086013567ffffffffffffffff811115612514576125136123c9565b5b61252088828901612451565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125648161252f565b82525050565b600060208201905061257f600083018461255b565b92915050565b61258e816123ce565b82525050565b60006020820190506125a96000830184612585565b92915050565b6000819050919050565b6125c2816125af565b81146125cd57600080fd5b50565b6000813590506125df816125b9565b92915050565b6000602082840312156125fb576125fa6123c4565b5b6000612609848285016125d0565b91505092915050565b61261b816125af565b82525050565b60006020820190506126366000830184612612565b92915050565b6000819050919050565b61264f8161263c565b82525050565b600060208201905061266a6000830184612646565b92915050565b600060208284031215612686576126856123c4565b5b60006126948482850161242d565b91505092915050565b6126a68161240c565b82525050565b60006020820190506126c1600083018461269d565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126fc8161240c565b82525050565b600061270e83836126f3565b60208301905092915050565b6000602082019050919050565b6000612732826126c7565b61273c81856126d2565b9350612747836126e3565b8060005b8381101561277857815161275f8882612702565b975061276a8361271a565b92505060018101905061274b565b5085935050505092915050565b6000602082019050818103600083015261279f8184612727565b905092915050565b60008115159050919050565b6127bc816127a7565b82525050565b60006020820190506127d760008301846127b3565b92915050565b600080600080608085870312156127f7576127f66123c4565b5b60006128058782880161242d565b94505060206128168782880161242d565b93505060406128278782880161242d565b92505060606128388782880161242d565b91505092959194509250565b600060ff82169050919050565b61285a81612844565b82525050565b60006020820190506128756000830184612851565b92915050565b600080600060608486031215612894576128936123c4565b5b60006128a28682870161242d565b93505060206128b38682870161242d565b92505060406128c48682870161242d565b9150509250925092565b600080604083850312156128e5576128e46123c4565b5b60006128f38582860161242d565b92505060206129048582860161242d565b9150509250929050565b60006129198261236c565b9050919050565b6129298161290e565b82525050565b60006020820190506129446000830184612920565b92915050565b612953816127a7565b811461295e57600080fd5b50565b6000813590506129708161294a565b92915050565b60006020828403121561298c5761298b6123c4565b5b600061299a84828501612961565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129f1826129a8565b810181811067ffffffffffffffff82111715612a1057612a0f6129b9565b5b80604052505050565b6000612a236123ba565b9050612a2f82826129e8565b919050565b612a3d81612844565b8114612a4857600080fd5b50565b600081359050612a5a81612a34565b92915050565b600060408284031215612a7657612a756129a3565b5b612a806040612a19565b90506000612a9084828501612a4b565b6000830152506020612aa484828501612a4b565b60208301525092915050565b60008060608385031215612ac757612ac66123c4565b5b6000612ad58582860161242d565b9250506020612ae685828601612a60565b9150509250929050565b612af981612844565b82525050565b604082016000820151612b156000850182612af0565b506020820151612b286020850182612af0565b50505050565b6000604082019050612b436000830184612aff565b92915050565b612b528161263c565b8114612b5d57600080fd5b50565b600081359050612b6f81612b49565b92915050565b600080600060608486031215612b8e57612b8d6123c4565b5b6000612b9c86828701612b60565b9350506020612bad8682870161242d565b9250506040612bbe8682870161242d565b9150509250925092565b60008060408385031215612bdf57612bde6123c4565b5b6000612bed8582860161242d565b9250506020612bfe858286016123f7565b9150509250929050565b60008060008060808587031215612c2257612c216123c4565b5b6000612c30878288016123f7565b9450506020612c41878288016123f7565b9350506040612c52878288016123f7565b9250506060612c63878288016123f7565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ca48161263c565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612cea57612ce9612caa565b5b50565b6000819050612cfb82612cd9565b919050565b6000612d0b82612ced565b9050919050565b612d1b81612d00565b82525050565b60048110612d3257612d31612caa565b5b50565b6000819050612d4382612d21565b919050565b6000612d5382612d35565b9050919050565b612d6381612d48565b82525050565b612d72816127a7565b82525050565b61018082016000820151612d8f6000850182612c9b565b506020820151612da260208501826126f3565b506040820151612db560408501826126f3565b506060820151612dc860608501826126f3565b506080820151612ddb60808501826126f3565b5060a0820151612dee60a08501826126f3565b5060c0820151612e0160c0850182612d12565b5060e0820151612e1460e0850182612af0565b50610100820151612e29610100850182612af0565b50610120820151612e3e610120850182612d5a565b50610140820151612e53610140850182612af0565b50610160820151612e68610160850182612d69565b50505050565b6000612e7a8383612d78565b6101808301905092915050565b6000602082019050919050565b6000612e9f82612c6f565b612ea98185612c7a565b9350612eb483612c8b565b8060005b83811015612ee5578151612ecc8882612e6e565b9750612ed783612e87565b925050600181019050612eb8565b5085935050505092915050565b60006020820190508181036000830152612f0c8184612e94565b905092915050565b612f1d81612d00565b82525050565b612f2c81612d48565b82525050565b600061018082019050612f48600083018f612646565b612f55602083018e61269d565b612f62604083018d61269d565b612f6f606083018c61269d565b612f7c608083018b61269d565b612f8960a083018a61269d565b612f9660c0830189612f14565b612fa360e0830188612851565b612fb1610100830187612851565b612fbf610120830186612f23565b612fcd610140830185612851565b612fdb6101608301846127b3565b9d9c50505050505050505050505050565b60008060408385031215613003576130026123c4565b5b600061301185828601612a4b565b925050602061302285828601612a4b565b9150509250929050565b600060208284031215613042576130416123c4565b5b6000613050848285016123f7565b91505092915050565b600080608083850312156130705761306f6123c4565b5b600061307e85828601612a60565b925050604061308f85828601612a60565b9150509250929050565b600082825260208201905092915050565b7f496e636f7272656374207061796d656e74000000000000000000000000000000600082015250565b60006130e0601183613099565b91506130eb826130aa565b602082019050919050565b6000602082019050818103600083015261310f816130d3565b9050919050565b7f4d696e74696e67206973206e6f74206163746976650000000000000000000000600082015250565b600061314c601583613099565b915061315782613116565b602082019050919050565b6000602082019050818103600083015261317b8161313f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131bc826125af565b91507f800000000000000000000000000000000000000000000000000000000000000082036131ee576131ed613182565b5b816000039050919050565b60006132048261240c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361323657613235613182565b5b600182019050919050565b6000819050919050565b61325c6132578261240c565b613241565b82525050565b60008160601b9050919050565b600061327a82613262565b9050919050565b600061328c8261326f565b9050919050565b6132a461329f826123ce565b613281565b82525050565b60006132b6828661324b565b6020820191506132c6828561324b565b6020820191506132d68284613293565b601482019150819050949350505050565b60006040820190506132fc600083018561269d565b613309602083018461269d565b9392505050565b600061331b8261240c565b91506133268361240c565b92508282026133348161240c565b9150828204841483151761334b5761334a613182565b5b5092915050565b600061335d8261240c565b91506133688361240c565b92508282039050818111156133805761337f613182565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133c08261240c565b91506133cb8361240c565b9250826133db576133da613386565b5b828204905092915050565b60006133f18261240c565b91506133fc8361240c565b925082820190508082111561341457613413613182565b5b92915050565b600060808201905061342f600083018761269d565b61343c602083018661269d565b613449604083018561269d565b613456606083018461269d565b95945050505050565b600061346a826125af565b9150613475836125af565b925082820390508181126000841216828213600085121516171561349c5761349b613182565b5b92915050565b7f42616420646972656374696f6e00000000000000000000000000000000000000600082015250565b60006134d8600d83613099565b91506134e3826134a2565b602082019050919050565b60006020820190508181036000830152613507816134cb565b9050919050565b600061351982612844565b915061352483612844565b9250828203905060ff81111561353d5761353c613182565b5b92915050565b600061354e82612844565b915061355983612844565b9250828201905060ff81111561357257613571613182565b5b92915050565b7f496e76616c696420646972656374696f6e3a2000000000000000000000000000815250565b600081519050919050565b600081905092915050565b60005b838110156135d25780820151818401526020810190506135b7565b60008484015250505050565b60006135e98261359e565b6135f381856135a9565b93506136038185602086016135b4565b80840191505092915050565b600061361a82613578565b60138201915061362a82846135de565b915081905092915050565b60006136408261359e565b61364a8185613099565b935061365a8185602086016135b4565b613663816129a8565b840191505092915050565b600060208201905081810360008301526136888184613635565b905092915050565b60008160011c9050919050565b6000808291508390505b60018511156136e7578086048111156136c3576136c2613182565b5b60018516156136d25780820291505b80810290506136e085613690565b94506136a7565b94509492505050565b60008261370057600190506137bc565b8161370e57600090506137bc565b8160018114613724576002811461372e5761375d565b60019150506137bc565b60ff8411156137405761373f613182565b5b8360020a91508482111561375757613756613182565b5b506137bc565b5060208310610133831016604e8410600b84101617156137925782820a90508381111561378d5761378c613182565b5b6137bc565b61379f848484600161369d565b925090508184048111156137b6576137b5613182565b5b81810290505b9392505050565b60006137ce8261240c565b91506137d98361240c565b92506138067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846136f0565b905092915050565b7f50617965643a2000000000000000000000000000000000000000000000000000600082015250565b60006138446007836135a9565b915061384f8261380e565b600782019050919050565b7f2c20636f73742069733a20000000000000000000000000000000000000000000600082015250565b6000613890600b836135a9565b915061389b8261385a565b600b82019050919050565b60006138b182613837565b91506138bd828561324b565b6020820191506138cc82613883565b91506138d8828461324b565b6020820191508190509392505050565b7f436f6e7472616374206e6f7420616c6c6f776564000000000000000000000000600082015250565b600061391e601483613099565b9150613929826138e8565b602082019050919050565b6000602082019050818103600083015261394d81613911565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061398f8286613293565b60148201915061399f828561324b565b6020820191506139af828461324b565b602082019150819050949350505050565b60006139cb8261240c565b91506139d68361240c565b9250826139e6576139e5613386565b5b828206905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a4d602683613099565b9150613a58826139f1565b604082019050919050565b60006020820190508181036000830152613a7c81613a40565b9050919050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b6000613ab9601183613099565b9150613ac482613a83565b602082019050919050565b60006020820190508181036000830152613ae881613aac565b9050919050565b60008160000b9050919050565b6000613b0782613aef565b9150613b1283613aef565b92508282039050607f81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082121715613b4f57613b4e613182565b5b92915050565b7f4572726f723a204e6f742061646a6163656e7400000000000000000000000000600082015250565b6000613b8b601383613099565b9150613b9682613b55565b602082019050919050565b60006020820190508181036000830152613bba81613b7e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613bf7602083613099565b9150613c0282613bc1565b602082019050919050565b60006020820190508181036000830152613c2681613bea565b9050919050565b6000819050919050565b6000613c52613c4d613c4884613c2d565b612340565b61240c565b9050919050565b613c6281613c37565b82525050565b6000819050919050565b6000613c8d613c88613c8384613c68565b612340565b61240c565b9050919050565b613c9d81613c72565b82525050565b6000606082019050613cb86000830186613c59565b613cc56020830185613c94565b613cd26040830184612585565b949350505050565b600081519050613ce981612416565b92915050565b600060208284031215613d0557613d046123c4565b5b6000613d1384828501613cda565b91505092915050565b600081519050613d2b81612b49565b92915050565b600060208284031215613d4757613d466123c4565b5b6000613d5584828501613d1c565b9150509291505056fea26469706673582212208e750df0ad9ac76dd712b079decdefbb97aec57459c235cf7dd63c9bd6af42ba64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10303,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5495,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "lobbies",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LobbyInterface)5439"
      },
      {
        "astId": 5497,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gamesContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5500,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "uif",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(UIFInterface)5486"
      },
      {
        "astId": 5502,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "actionsContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5539,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintCost",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5542,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintIsActive",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 5546,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "allowedContract",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5549,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "randSeed",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5553,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "items",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Item)10275_storage)dyn_storage"
      },
      {
        "astId": 5558,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "playerToItems",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5562,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "itemTraitModifiers",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Traits)10219_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Item)10275_storage)dyn_storage": {
        "base": "t_struct(Item)10275_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Item[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Traits)10219_storage)dyn_storage": {
        "base": "t_struct(Traits)10219_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Traits[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LobbyInterface)5439": {
        "encoding": "inplace",
        "label": "contract LobbyInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UIFInterface)5486": {
        "encoding": "inplace",
        "label": "contract UIFInterface",
        "numberOfBytes": "20"
      },
      "t_enum(ItemCategory)10243": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemCategory",
        "numberOfBytes": "1"
      },
      "t_enum(ItemType)10248": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemType",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(Item)10275_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Item",
        "members": [
          {
            "astId": 10250,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "genHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10252,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10254,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "uifID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10256,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "holdingPlayerId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10258,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10260,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "traitModID",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10263,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemCategory",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ItemCategory)10243"
          },
          {
            "astId": 10265,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsAbility",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 10267,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsFlaw",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 10270,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemType",
            "offset": 3,
            "slot": "6",
            "type": "t_enum(ItemType)10248"
          },
          {
            "astId": 10272,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "power",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 10274,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "inGame",
            "offset": 5,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Traits)10219_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Traits",
        "members": [
          {
            "astId": 10206,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 10208,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "carry",
            "offset": 1,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 10210,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "defense",
            "offset": 2,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 10212,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "hack",
            "offset": 3,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 10214,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "breach",
            "offset": 4,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 10216,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "shoot",
            "offset": 5,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 10218,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "melee",
            "offset": 6,
            "slot": "0",
            "type": "t_int8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}