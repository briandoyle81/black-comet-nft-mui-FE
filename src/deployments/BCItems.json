{
  "address": "0x6d77D3C1C511df15803f9Bf123E6F6A033E3D279",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matic",
          "type": "uint256"
        }
      ],
      "name": "SetMintCostInMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitItemToMission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "destroyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemIDsByPlayer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemsByPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "traitModID",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "inGame",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "genHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uifID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitModID",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.ItemCategory",
          "name": "itemCategory",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsAbility",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsFlaw",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.ItemType",
          "name": "itemType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "power",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "inGame",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbies",
      "outputs": [
        {
          "internalType": "contract LobbyInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_holderAddress",
          "type": "address"
        }
      ],
      "name": "lootItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerToItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lobbyContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UIFAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsContract",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setMintingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnCompanyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uif",
      "outputs": [
        {
          "internalType": "contract UIFInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa779c2d8838723264d367ec6937c48e515753a652acd1fda08f236727bcce06b",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x6d77D3C1C511df15803f9Bf123E6F6A033E3D279",
    "transactionIndex": 2,
    "gasUsed": "2001872",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000048000002000000000000000000000000000000000000000000020000000800001000000000000040100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000200000000000000000000000000000000000040000000004000000000000000000421000000000000000000000000000000100000000020000800000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x55db3f884d2559e33cc77ffd8ff04f6d213ea30806c7f2cf37d209ad0d20c9f7",
    "transactionHash": "0xa779c2d8838723264d367ec6937c48e515753a652acd1fda08f236727bcce06b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 31032160,
        "transactionHash": "0xa779c2d8838723264d367ec6937c48e515753a652acd1fda08f236727bcce06b",
        "address": "0x6d77D3C1C511df15803f9Bf123E6F6A033E3D279",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x55db3f884d2559e33cc77ffd8ff04f6d213ea30806c7f2cf37d209ad0d20c9f7"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 31032160,
        "transactionHash": "0xa779c2d8838723264d367ec6937c48e515753a652acd1fda08f236727bcce06b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000aab09b82b3000000000000000000000000000000000000000000000000000262084dfc7f6aff1000000000000000000000000000000000000000000000c3c99e029e903cefb6b0000000000000000000000000000000000000000000000002615d9d60fcb7ff1000000000000000000000000000000000000000000000c3c99ead4f2bbfa2b6b",
        "logIndex": 5,
        "blockHash": "0x55db3f884d2559e33cc77ffd8ff04f6d213ea30806c7f2cf37d209ad0d20c9f7"
      }
    ],
    "blockNumber": 31032160,
    "cumulativeGasUsed": "6016055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "865e7b561cfc2141bac262bd2c2cc21d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matic\",\"type\":\"uint256\"}],\"name\":\"SetMintCostInMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitItemToMission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"destroyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemIDsByPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemsByPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitModID\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitModID\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbies\",\"outputs\":[{\"internalType\":\"contract LobbyInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"}],\"name\":\"lootItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerToItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lobbyContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UIFAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsContract\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnCompanyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uif\",\"outputs\":[{\"internalType\":\"contract UIFInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCItems.sol\":\"BCItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/BCItems.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// Brian Doyle github.com/briandoyle81\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCUtils.sol\\\";\\nimport \\\"./BCTypes.sol\\\";\\n\\ninterface LobbyInterface {\\n    // TODO: Commit item to player inventory for game\\n}\\n\\ninterface GameInterface {\\n\\n}\\n\\ninterface UIFInterface {\\n    function mintItem(uint _type, uint _quality, address _minter) external payable returns (uint);\\n    function extGetProperties(uint _id) external view returns (bytes32);\\n    function extGetCurrentOwner(uint _id) external view returns (address);\\n    function ownerOf(uint256 _id) external view returns (address);\\n    function extGetUIIsOwned(address _currentOwner) external view returns (uint[] memory);\\n    function burn(uint _id) external;\\n}\\n\\ncontract BCItems is IERC721Receiver, Ownable, BCUtils {\\n\\n    LobbyInterface public lobbies;\\n    address public gamesContract;\\n    UIFInterface public uif;\\n    address public actionsContract;\\n\\n    function setContractAddresses(\\n        address _lobbyContractAddress,\\n        address _gameContract,\\n        address _UIFAddress,\\n        address _actionsContract\\n        ) public onlyOwner {\\n        lobbies = LobbyInterface(_lobbyContractAddress);\\n        gamesContract = _gameContract;\\n        uif = UIFInterface(_UIFAddress);\\n        actionsContract = _actionsContract;\\n    }\\n\\n\\n    uint public mintCost = 100 gwei; // TODO: Set these\\n\\n    bool public mintIsActive = true; // TODO: Is this still useful?\\n\\n    event Received();\\n\\n    address public allowedContract;\\n    uint256 randSeed = 0;\\n    // TODO: Add company items using standard item in UIF\\n\\n    BCTypes.Item[] public items;\\n    mapping(uint256 => uint[]) public playerToItems; // TODO: Handle if made upgradeable\\n\\n    BCTypes.Traits[] itemTraitModifiers;\\n\\n    constructor() {\\n        // Use 0 for no modifiers\\n        itemTraitModifiers.push();\\n    }\\n\\n    function spawnCompanyItem() public payable {\\n        // TODO: Make copies of a specific item using the standard items mechanism in UIF\\n        // TODO: Remove owner free call\\n        // TODO: DRY\\n        require(msg.sender == owner() || msg.value == mintCost, \\\"Incorrect payment\\\");\\n        require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n        // TODO: Implement\\n    }\\n\\n    // Create a new item that goes directly to a player's inventory\\n    // ID of the _player_ holding this item\\n    function lootItem(uint _holdingPlayerId, address _holderAddress) public payable {\\n        // TODO: Remove owner free call\\n        string memory paymentError = string(abi.encodePacked(\\\"Payed: \\\", msg.value, \\\", cost is: \\\", mintCost));\\n        require(msg.sender == owner() || msg.value == mintCost, paymentError);\\n        // require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        // TODO: Finalize allowed senders\\n        require(msg.sender == owner() || msg.sender == address(gamesContract) || msg.sender == actionsContract, \\\"Contract not allowed\\\");\\n\\n        _createNewItem(_holdingPlayerId, _holderAddress);\\n    }\\n\\n    function spawnItem() public payable {\\n        // TODO: Handle location\\n        // TODO: Consider making redundant (always give items to a player then force them to drop)\\n        // ^^ This does make hunting scavs more profitable since you don't have to go get the item\\n        // TODO: Remove owner free call\\n        require(msg.sender == owner() || msg.value == mintCost, \\\"Incorrect payment\\\");\\n        require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n\\n        _createNewItem(0, msg.sender);\\n    }\\n\\n    function _createNewItem(uint _holdingPlayerId, address _holderAddress) internal {\\n\\n        // I don't _think_ this is a reentrancy risk be cause I control the receiving address\\n        // Mint a new character item from UIF\\n        // TODO: Make sure passing payment this way is safe\\n        // TODO: DOUBLY SO FOR THIS ONE!!!!\\n        // TODO: Update costs for by-type payment scheme\\n        uint uifID = uif.mintItem{value: 100 gwei}(4, 0, _holderAddress); // TODO: Hardcoded value\\n        bytes32 finalHash = uif.extGetProperties(uifID);\\n\\n        // First pass interpretation will make weapons, armor, and stat boosters\\n        // Items with special abilities will be dealt with after that system is implemented\\n\\n        BCTypes.Item storage newItem = items.push();\\n\\n        newItem.genHash = finalHash;\\n\\n        newItem.id = items.length-1; // -1 because we've already pushed\\n        newItem.uifID = uifID;\\n\\n        newItem.holdingPlayerId = _holdingPlayerId;\\n\\n        newItem.weight = 1;\\n\\n        newItem.traitModID = 0;\\n\\n        newItem.itemCategory = sliceHashToSmallInt(finalHash, 4, getUIOffset(1, 0)) >= 11 ? BCTypes.ItemCategory.SCAVENGER : BCTypes.ItemCategory.ARTIFACT; // Quality <= 11 is 2/3 scav items.  // TODO: Eval\\n\\n        newItem.grantsAbility = 0; // NO abilities or flaws for now\\n        newItem.grantsFlaw = 0;\\n\\n        newItem.itemType = _getItemType(sliceHashToSmallInt(finalHash, 4, getUIOffset(0, 1)));\\n        newItem.power = 1;\\n\\n        newItem.inGame = true;\\n\\n        playerToItems[_holdingPlayerId].push(items.length-1);\\n        // TODO: Event\\n    }\\n\\n    function _getItemType(uint _value) internal pure returns (BCTypes.ItemType) {\\n        // TODO: UIF Spec is incomplete, most items will be unusable for now\\n        if (_value == 0) {\\n            return BCTypes.ItemType.MELEE;\\n        }\\n        if (_value == 0) {\\n            return BCTypes.ItemType.MELEE;\\n        }\\n        if (_value == 0) {\\n            return BCTypes.ItemType.ARMOR;\\n        }\\n        return BCTypes.ItemType.TODO_ITEM;\\n    }\\n\\n    function commitItemToMission() public {\\n        // TODO:\\n        // Require you own this item and it's not in game\\n    }\\n\\n    // TODO: Complete This\\n    // Get all items, held by players, and on the ground\\n    // function getItemsInGame() {\\n\\n    // }\\n\\n    function destroyItem(uint _itemId) public {\\n        // TODO: CRITICAL -> Ensure complete test coverage\\n        require(msg.sender == gamesContract, \\\"Not game contract\\\");\\n\\n        items[_itemId].holdingPlayerId = 0;\\n        items[_itemId].inGame = false;\\n\\n        // TODO: Handle invincible legendaries here if that becomes a thing\\n        // Burn the NFT\\n        uif.burn(_itemId); // Sad but necessary :(\\n    }\\n\\n    function getItemIDsByPlayer(uint _playerID) public view returns (uint[] memory) {\\n        return playerToItems[_playerID];\\n    }\\n\\n    function getItemsByPlayer(uint _playerID) public view returns (BCTypes.Item[] memory) {\\n        uint numOwned = playerToItems[_playerID].length;\\n        // TODO: Hack\\n        // Either I'm missing a trivial error here, or something I need to learn is going on\\n        // Function works fine if no items generated\\n        // Seems to work intermittently if one player has items, getting items for that player\\n        // But crashes because of an array out of bounds panic trying to get items for player N\\n        // 0 is not < 0, so loop should not happen, not sure what is causing it\\n        if(numOwned == 0) {\\n            return new BCTypes.Item[](0);\\n        }\\n        BCTypes.Item[] memory itemsOwned = new BCTypes.Item[](numOwned);\\n        for (uint i = 0; i < itemsOwned.length; i++) {\\n            itemsOwned[i] = items[playerToItems[_playerID][i]];\\n        }\\n        return itemsOwned;\\n    }\\n\\n    function transferFundsOut() public onlyOwner {\\n        // TODO: Track and limit to transferable balance, leaving enough for buybacks\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function setMintingStatus(bool _status) public onlyOwner {\\n        mintIsActive = _status;\\n    }\\n\\n    function SetMintCostInMatic(uint _matic) public onlyOwner {\\n        mintCost = _matic*10**18;\\n    }\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        _operator;\\n        _from;\\n        _tokenId;\\n        _data;\\n        emit Received();\\n        return 0x150b7a02;\\n    }\\n}\\n\",\"keccak256\":\"0xf603c0bba1ad4273a9136fcc01ca5fae5878d2561907db8e1b3229ae0a2d35d7\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY, ROOM}\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // WARNING: THIS IS NOT USED CURRENTLY!!! // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead; // TODO: Probably don't need\\n        bool hasEgg;  // TODO: Eval only allowing one egg at a time\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        // TODO:  Either add all events, effects, and traits here, or remove roomList\\n        // mapping (uint => RoomTile) roomList;\\n        // uint8 numRooms;\\n        uint[] unusedNormalRooms;\\n        // mapping (uint => bool) usedRooms;\\n\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        // uint roomTileId // TODO: Critical\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x33ff0241b15ca5639dd4d3b98c65b7fa8251e56a504eb2be2f9194fb0fa1c190\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees\\n    uint private TODO_randomSeed = 0;\\n\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) public returns(uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, block.timestamp)));\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, block.timestamp)));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns(uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return(keccak256(abi.encodePacked(TODO_randomSeed, block.timestamp, msg.sender)));\\n    }\\n\\n    function abs(int x) public pure returns (int) { // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(uint _min, uint _max, uint _val, uint _valMax) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = adjustedMax * _val / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(bytes32 _hash, uint256 _size, uint256 _offset) public pure returns(uint8) {\\n        bytes32 mask = bytes32((2**_size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(uint _traitNum, uint _subTraitNum) public pure returns(uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) public pure returns(uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row-1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row+1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col+1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col-1);\\n        }\\n        string memory message = string.concat(\\\"Invalid direction: \\\", Strings.toString(_direction));\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(uint _gameId, uint _for, uint _against) public returns(bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if(_direction == 0) {\\n            return 1;\\n        }\\n        if(_direction == 1) {\\n            return 0;\\n        }\\n        if(_direction == 2) {\\n            return 3;\\n        }\\n        if(_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6e085a58f8589e5ba727c8f1821c05f491555c93f6a74a1e7399fd2772364f24\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600181815564174876e8006006556007805460ff1916909117905560085534801561003057600080fd5b5061003a3361004b565b600b8054600101815560005261009b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612185806100aa6000396000f3fe6080604052600436106102045760003560e01c80637420aa3611610118578063aaa68777116100a0578063ce28613f1161006f578063ce28613f14610600578063e89d5a8914610620578063f2fde38b14610645578063f7c8af4814610665578063fa3993c21461068557600080fd5b8063aaa6877714610565578063b78e665114610585578063bdb4b848146105b2578063bfb231d2146105c857600080fd5b80638da5cb5b116100e75780638da5cb5b146104cb578063951fc3fe146104e957806397f34c3f1461052a578063a20df9fa1461054a578063aa3eb1b51461055257600080fd5b80637420aa361461045f57806376c8aa271461047f5780638214f2221461048b5780638ac031b3146104ab57600080fd5b80633838aed11161019b578063530116961161016a57806353011696146103b85780635dc96967146103ea57806364db84bf1461040a578063705498dc1461042a578063715018a61461044a57600080fd5b80633838aed11461032c5780633841fae114610341578063471a42941461036e578063501f97841461039857600080fd5b8063185ae9dc116101d7578063185ae9dc146102a95780631b5ac4b5146102c95780631e1de205146102f75780631f7b4f301461030c57600080fd5b80630364f88c146102095780630fd8e83314610246578063150b7a0214610250578063154fa27a14610289575b600080fd5b34801561021557600080fd5b50600254610229906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024e6106a5565b005b34801561025c57600080fd5b5061027061026b366004611988565b610796565b6040516001600160e01b0319909116815260200161023d565b34801561029557600080fd5b50600354610229906001600160a01b031681565b3480156102b557600080fd5b50600554610229906001600160a01b031681565b3480156102d557600080fd5b506102e96102e4366004611a23565b6107d3565b60405190815260200161023d565b34801561030357600080fd5b506102e96107f3565b34801561031857600080fd5b506102e9610327366004611a23565b61085e565b34801561033857600080fd5b5061024e6108ba565b34801561034d57600080fd5b5061036161035c366004611a23565b6108ff565b60405161023d9190611a3c565b34801561037a57600080fd5b506007546103889060ff1681565b604051901515815260200161023d565b3480156103a457600080fd5b5061024e6103b3366004611a23565b610961565b3480156103c457600080fd5b506103d86103d3366004611a80565b610981565b60405160ff909116815260200161023d565b3480156103f657600080fd5b50610388610405366004611ab2565b6109be565b34801561041657600080fd5b506102e9610425366004611ade565b610a5b565b34801561043657600080fd5b50600454610229906001600160a01b031681565b34801561045657600080fd5b5061024e610a73565b34801561046b57600080fd5b5061024e61047a366004611b00565b610a85565b34801561024e57600080fd5b34801561049757600080fd5b506102e96104a6366004611a23565b610aa0565b3480156104b757600080fd5b506102e96104c6366004611ade565b610b1a565b3480156104d757600080fd5b506000546001600160a01b0316610229565b3480156104f557600080fd5b50610509610504366004611bb5565b610b4b565b60408051825160ff908116825260209384015116928101929092520161023d565b34801561053657600080fd5b506103d8610545366004611ab2565b610c75565b61024e610ca0565b61024e610560366004611be2565b610d95565b34801561057157600080fd5b5061024e610580366004611c05565b610ea2565b34801561059157600080fd5b506105a56105a0366004611a23565b610efa565b60405161023d9190611c93565b3480156105be57600080fd5b506102e960065481565b3480156105d457600080fd5b506105e86105e3366004611a23565b61112b565b60405161023d9c9b9a99989796959493929190611d71565b34801561060c57600080fd5b506103d861061b366004611ded565b6111b0565b34801561062c57600080fd5b506007546102299061010090046001600160a01b031681565b34801561065157600080fd5b5061024e610660366004611e17565b611251565b34801561067157600080fd5b5061024e610680366004611a23565b6112c7565b34801561069157600080fd5b506102e96106a0366004611e32565b6113e4565b6000546001600160a01b03163314806106bf575060065434145b6107045760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c185e5b595b9d607a1b60448201526064015b60405180910390fd5b6000546001600160a01b0316331480610724575060075460ff1615156001145b6107685760405162461bcd60e51b81526020600482015260156024820152744d696e74696e67206973206e6f742061637469766560581b60448201526064016106fb565b6000546001600160a01b031633148061078b57506003546001600160a01b031633145b61079457600080fd5b565b6040516000907f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b908290a150630a85bd0160e11b95945050505050565b6000808212156107eb576107e682611e74565b6107ed565b815b92915050565b600180546000918261080483611e90565b9190505550600154423360405160200161084393929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b60008061086d600160066111b0565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5183826040516108ac929190918252602082015260400190565b60405180910390a192915050565b6108c26114ac565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156108fc573d6000803e3d6000fd5b50565b6000818152600a602090815260409182902080548351818402810184019094528084526060939283018282801561095557602002820191906000526020600020905b815481526020019060010190808311610941575b50505050509050919050565b6109696114ac565b61097b81670de0b6b3a7640000611ea9565b60065550565b60008061098e8686611ec0565b905060008361099d8684611ea9565b6109a79190611ee9565b90506109b38782611efd565b979650505050505050565b6000806109ca8561085e565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a180600103610a27576000915050610a54565b600383610a348684611efd565b610a3e9190611f10565b1315610a4e576001915050610a54565b60009150505b9392505050565b600081610a69846004611ea9565b610a549190611efd565b610a7b6114ac565b6107946000611506565b610a8d6114ac565b6007805460ff1916911515919091179055565b600081600003610ab257506001919050565b81600103610ac257506000919050565b81600203610ad257506003919050565b81600303610ae257506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b60448201526064016106fb565b600a6020528160005260406000208181548110610b3657600080fd5b90600052602060002001600091509150505481565b604080518082019091526000808252602082015282600003610b9d57604051806040016040528060018460000151610b839190611f37565b60ff168152602001836020015160ff1681525090506107ed565b82600103610bc157604051806040016040528083600001516001610b839190611f50565b82600203610bfe576040518060400160405280836000015160ff16815260200183602001516001610bf29190611f50565b60ff16905290506107ed565b82600303610c2f576040518060400160405280836000015160ff16815260200160018460200151610bf29190611f37565b6000610c3a84611556565b604051602001610c4a9190611f8d565b60405160208183030381529060405290508060405162461bcd60e51b81526004016106fb9190611fc8565b600080826001610c868660026120df565b610c909190611ec0565b901b8516831c9150509392505050565b6000546001600160a01b0316331480610cba575060065434145b610cfa5760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c185e5b595b9d607a1b60448201526064016106fb565b6000546001600160a01b0316331480610d1a575060075460ff1615156001145b610d5e5760405162461bcd60e51b81526020600482015260156024820152744d696e74696e67206973206e6f742061637469766560581b60448201526064016106fb565b6000546001600160a01b0316331480610d8157506003546001600160a01b031633145b610d8a57600080fd5b61079460003361165f565b600654604080516602830bcb2b21d160cd1b60208201523460278201526a0161031b7b9ba1034b99d160ad1b60478201526052808201939093528151808203909301835260720190526000546001600160a01b0316331480610df8575060065434145b8190610e175760405162461bcd60e51b81526004016106fb9190611fc8565b506000546001600160a01b0316331480610e3b57506003546001600160a01b031633145b80610e5057506005546001600160a01b031633145b610e935760405162461bcd60e51b815260206004820152601460248201527310dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b60448201526064016106fb565b610e9d838361165f565b505050565b610eaa6114ac565b600280546001600160a01b039586166001600160a01b0319918216179091556003805494861694821694909417909355600480549285169284169290921790915560058054919093169116179055565b6000818152600a6020526040812054606091819003610f4c576040805160008082526020820190925290610f44565b610f316118f7565b815260200190600190039081610f295790505b509392505050565b60008167ffffffffffffffff811115610f6757610f67611b22565b604051908082528060200260200182016040528015610fa057816020015b610f8d6118f7565b815260200190600190039081610f855790505b50905060005b8151811015610f44576000858152600a6020526040902080546009919083908110610fd357610fd36120eb565b906000526020600020015481548110610fee57610fee6120eb565b9060005260206000209060070201604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16600281111561106857611068611c59565b600281111561107957611079611c59565b8152600682015460ff6101008204811660208401526201000082048116604084015260609092019163010000009091041660038111156110bb576110bb611c59565b60038111156110cc576110cc611c59565b81526006919091015460ff64010000000082048116602084015265010000000000909104161515604090910152825183908390811061110d5761110d6120eb565b6020026020010181905250808061112390611e90565b915050610fa6565b6009818154811061113b57600080fd5b60009182526020909120600790910201805460018201546002830154600384015460048501546005860154600690960154949650929491939092919060ff808216916101008104821691620100008204811691630100000081048216916401000000008204811691650100000000009004168c565b60018054600091826111c183611e90565b90915550506001546040516bffffffffffffffffffffffff193360601b166020820152603481019190915242605482015260009060740160408051601f1981840301815291905280516020909101209050600061121e8585611f37565b611229906001611f50565b90508460ff168160ff168361123e9190612101565b6112489190611efd565b95945050505050565b6112596114ac565b6001600160a01b0381166112be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106fb565b6108fc81611506565b6003546001600160a01b031633146113155760405162461bcd60e51b8152602060048201526011602482015270139bdd0819d85b594818dbdb9d1c9858dd607a1b60448201526064016106fb565b60006009828154811061132a5761132a6120eb565b906000526020600020906007020160030181905550600060098281548110611354576113546120eb565b600091825260209091206006600790920201018054911515650100000000000265ff00000000001990921691909117905560048054604051630852cd8d60e31b81529182018390526001600160a01b0316906342966c6890602401600060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b5050505050565b805182516000916113f491612115565b60000b600103611406575060006107ed565b815183516114149190612115565b60000b19611424575060016107ed565b816020015183602001516114389190612115565b60000b19611448575060026107ed565b8160200151836020015161145c9190612115565b60000b60010361146e575060036107ed565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b60448201526064016106fb565b6000546001600160a01b031633146107945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608160000361157d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156115a7578061159181611e90565b91506115a09050600a83611ee9565b9150611581565b60008167ffffffffffffffff8111156115c2576115c2611b22565b6040519080825280601f01601f1916602001820160405280156115ec576020820181803683370190505b5090505b841561165757611601600183611ec0565b915061160e600a86612101565b611619906030611efd565b60f81b81838151811061162e5761162e6120eb565b60200101906001600160f81b031916908160001a905350611650600a86611ee9565b94506115f0565b949350505050565b600480546040516309b6507f60e41b8152808301929092526000602483018190526001600160a01b0384811660448501529092911690639b6507f09064174876e8009060640160206040518083038185885af11580156116c3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116e89190612136565b60048054604051632851838160e01b81529182018390529192506000916001600160a01b031690632851838190602401602060405180830381865afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117599190612136565b6009805460018181018355600083905260079091027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01838155915492935090916117a49190611ec0565b60018083019190915560028201849055600382018690556004808301829055600060058401819055600b926117e0928692909161054591610a5b565b60ff1610156117f05760016117f3565b60025b60068201805460ff1916600183600281111561181157611811611c59565b021790555060068101805462ffff001916905561184161183983600461054560006001610a5b565b60ff166118bd565b60068201805463ff0000001916630100000083600381111561186557611865611c59565b021790555060068101805465ffff000000001916650101000000001790556000858152600a602052604090206009546118a090600190611ec0565b815460018101835560009283526020909220909101555050505050565b6000816000036118cf57506000919050565b816000036118df57506000919050565b816000036118ef57506002919050565b506003919050565b6040518061018001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000600281111561194357611943611c59565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b80356001600160a01b038116811461198357600080fd5b919050565b6000806000806000608086880312156119a057600080fd5b6119a98661196c565b94506119b76020870161196c565b935060408601359250606086013567ffffffffffffffff808211156119db57600080fd5b818801915088601f8301126119ef57600080fd5b8135818111156119fe57600080fd5b896020828501011115611a1057600080fd5b9699959850939650602001949392505050565b600060208284031215611a3557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611a7457835183529284019291840191600101611a58565b50909695505050505050565b60008060008060808587031215611a9657600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215611ac757600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611af157600080fd5b50508035926020909101359150565b600060208284031215611b1257600080fd5b81358015158114610a5457600080fd5b634e487b7160e01b600052604160045260246000fd5b803560ff8116811461198357600080fd5b600060408284031215611b5b57600080fd5b6040516040810181811067ffffffffffffffff82111715611b8c57634e487b7160e01b600052604160045260246000fd5b604052905080611b9b83611b38565b8152611ba960208401611b38565b60208201525092915050565b60008060608385031215611bc857600080fd5b82359150611bd98460208501611b49565b90509250929050565b60008060408385031215611bf557600080fd5b82359150611bd96020840161196c565b60008060008060808587031215611c1b57600080fd5b611c248561196c565b9350611c326020860161196c565b9250611c406040860161196c565b9150611c4e6060860161196c565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b60038110611c7f57611c7f611c59565b9052565b60048110611c7f57611c7f611c59565b602080825282518282018190526000919060409081850190868401855b82811015611d645781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c080820151611cfe82880182611c6f565b505060e08181015160ff81168783015250506101008181015160ff811687830152505061012080820151611d3482880182611c83565b50506101408181015160ff1690860152610160908101511515908501526101809093019290850190600101611cb0565b5091979650505050505050565b6000610180820190508d82528c60208301528b60408301528a60608301528960808301528860a0830152611da860c0830189611c6f565b60ff871660e083015260ff8616610100830152611dc9610120830186611c83565b60ff84166101408301528215156101608301529d9c50505050505050505050505050565b60008060408385031215611e0057600080fd5b611e0983611b38565b9150611bd960208401611b38565b600060208284031215611e2957600080fd5b610a548261196c565b60008060808385031215611e4557600080fd5b611e4f8484611b49565b9150611bd98460408501611b49565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201611e8957611e89611e5e565b5060000390565b600060018201611ea257611ea2611e5e565b5060010190565b80820281158282048414176107ed576107ed611e5e565b818103818111156107ed576107ed611e5e565b634e487b7160e01b600052601260045260246000fd5b600082611ef857611ef8611ed3565b500490565b808201808211156107ed576107ed611e5e565b8181036000831280158383131683831282161715611f3057611f30611e5e565b5092915050565b60ff82811682821603908111156107ed576107ed611e5e565b60ff81811683821601908111156107ed576107ed611e5e565b60005b83811015611f84578181015183820152602001611f6c565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251611fbb816013850160208701611f69565b9190910160130192915050565b6020815260008251806020840152611fe7816040850160208701611f69565b601f01601f19169190910160400192915050565b600181815b8085111561203657816000190482111561201c5761201c611e5e565b8085161561202957918102915b93841c9390800290612000565b509250929050565b60008261204d575060016107ed565b8161205a575060006107ed565b8160018114612070576002811461207a57612096565b60019150506107ed565b60ff84111561208b5761208b611e5e565b50506001821b6107ed565b5060208310610133831016604e8410600b84101617156120b9575081810a6107ed565b6120c38383611ffb565b80600019048211156120d7576120d7611e5e565b029392505050565b6000610a54838361203e565b634e487b7160e01b600052603260045260246000fd5b60008261211057612110611ed3565b500690565b600082810b9082900b03607f198112607f821317156107ed576107ed611e5e565b60006020828403121561214857600080fd5b505191905056fea2646970667358221220d264169c51126498c2cac7fcf6bd15dea3586c2dcce9ae1362abe59eb9f8c6d064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c80637420aa3611610118578063aaa68777116100a0578063ce28613f1161006f578063ce28613f14610600578063e89d5a8914610620578063f2fde38b14610645578063f7c8af4814610665578063fa3993c21461068557600080fd5b8063aaa6877714610565578063b78e665114610585578063bdb4b848146105b2578063bfb231d2146105c857600080fd5b80638da5cb5b116100e75780638da5cb5b146104cb578063951fc3fe146104e957806397f34c3f1461052a578063a20df9fa1461054a578063aa3eb1b51461055257600080fd5b80637420aa361461045f57806376c8aa271461047f5780638214f2221461048b5780638ac031b3146104ab57600080fd5b80633838aed11161019b578063530116961161016a57806353011696146103b85780635dc96967146103ea57806364db84bf1461040a578063705498dc1461042a578063715018a61461044a57600080fd5b80633838aed11461032c5780633841fae114610341578063471a42941461036e578063501f97841461039857600080fd5b8063185ae9dc116101d7578063185ae9dc146102a95780631b5ac4b5146102c95780631e1de205146102f75780631f7b4f301461030c57600080fd5b80630364f88c146102095780630fd8e83314610246578063150b7a0214610250578063154fa27a14610289575b600080fd5b34801561021557600080fd5b50600254610229906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024e6106a5565b005b34801561025c57600080fd5b5061027061026b366004611988565b610796565b6040516001600160e01b0319909116815260200161023d565b34801561029557600080fd5b50600354610229906001600160a01b031681565b3480156102b557600080fd5b50600554610229906001600160a01b031681565b3480156102d557600080fd5b506102e96102e4366004611a23565b6107d3565b60405190815260200161023d565b34801561030357600080fd5b506102e96107f3565b34801561031857600080fd5b506102e9610327366004611a23565b61085e565b34801561033857600080fd5b5061024e6108ba565b34801561034d57600080fd5b5061036161035c366004611a23565b6108ff565b60405161023d9190611a3c565b34801561037a57600080fd5b506007546103889060ff1681565b604051901515815260200161023d565b3480156103a457600080fd5b5061024e6103b3366004611a23565b610961565b3480156103c457600080fd5b506103d86103d3366004611a80565b610981565b60405160ff909116815260200161023d565b3480156103f657600080fd5b50610388610405366004611ab2565b6109be565b34801561041657600080fd5b506102e9610425366004611ade565b610a5b565b34801561043657600080fd5b50600454610229906001600160a01b031681565b34801561045657600080fd5b5061024e610a73565b34801561046b57600080fd5b5061024e61047a366004611b00565b610a85565b34801561024e57600080fd5b34801561049757600080fd5b506102e96104a6366004611a23565b610aa0565b3480156104b757600080fd5b506102e96104c6366004611ade565b610b1a565b3480156104d757600080fd5b506000546001600160a01b0316610229565b3480156104f557600080fd5b50610509610504366004611bb5565b610b4b565b60408051825160ff908116825260209384015116928101929092520161023d565b34801561053657600080fd5b506103d8610545366004611ab2565b610c75565b61024e610ca0565b61024e610560366004611be2565b610d95565b34801561057157600080fd5b5061024e610580366004611c05565b610ea2565b34801561059157600080fd5b506105a56105a0366004611a23565b610efa565b60405161023d9190611c93565b3480156105be57600080fd5b506102e960065481565b3480156105d457600080fd5b506105e86105e3366004611a23565b61112b565b60405161023d9c9b9a99989796959493929190611d71565b34801561060c57600080fd5b506103d861061b366004611ded565b6111b0565b34801561062c57600080fd5b506007546102299061010090046001600160a01b031681565b34801561065157600080fd5b5061024e610660366004611e17565b611251565b34801561067157600080fd5b5061024e610680366004611a23565b6112c7565b34801561069157600080fd5b506102e96106a0366004611e32565b6113e4565b6000546001600160a01b03163314806106bf575060065434145b6107045760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c185e5b595b9d607a1b60448201526064015b60405180910390fd5b6000546001600160a01b0316331480610724575060075460ff1615156001145b6107685760405162461bcd60e51b81526020600482015260156024820152744d696e74696e67206973206e6f742061637469766560581b60448201526064016106fb565b6000546001600160a01b031633148061078b57506003546001600160a01b031633145b61079457600080fd5b565b6040516000907f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b908290a150630a85bd0160e11b95945050505050565b6000808212156107eb576107e682611e74565b6107ed565b815b92915050565b600180546000918261080483611e90565b9190505550600154423360405160200161084393929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b60008061086d600160066111b0565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5183826040516108ac929190918252602082015260400190565b60405180910390a192915050565b6108c26114ac565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156108fc573d6000803e3d6000fd5b50565b6000818152600a602090815260409182902080548351818402810184019094528084526060939283018282801561095557602002820191906000526020600020905b815481526020019060010190808311610941575b50505050509050919050565b6109696114ac565b61097b81670de0b6b3a7640000611ea9565b60065550565b60008061098e8686611ec0565b905060008361099d8684611ea9565b6109a79190611ee9565b90506109b38782611efd565b979650505050505050565b6000806109ca8561085e565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a180600103610a27576000915050610a54565b600383610a348684611efd565b610a3e9190611f10565b1315610a4e576001915050610a54565b60009150505b9392505050565b600081610a69846004611ea9565b610a549190611efd565b610a7b6114ac565b6107946000611506565b610a8d6114ac565b6007805460ff1916911515919091179055565b600081600003610ab257506001919050565b81600103610ac257506000919050565b81600203610ad257506003919050565b81600303610ae257506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b60448201526064016106fb565b600a6020528160005260406000208181548110610b3657600080fd5b90600052602060002001600091509150505481565b604080518082019091526000808252602082015282600003610b9d57604051806040016040528060018460000151610b839190611f37565b60ff168152602001836020015160ff1681525090506107ed565b82600103610bc157604051806040016040528083600001516001610b839190611f50565b82600203610bfe576040518060400160405280836000015160ff16815260200183602001516001610bf29190611f50565b60ff16905290506107ed565b82600303610c2f576040518060400160405280836000015160ff16815260200160018460200151610bf29190611f37565b6000610c3a84611556565b604051602001610c4a9190611f8d565b60405160208183030381529060405290508060405162461bcd60e51b81526004016106fb9190611fc8565b600080826001610c868660026120df565b610c909190611ec0565b901b8516831c9150509392505050565b6000546001600160a01b0316331480610cba575060065434145b610cfa5760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c185e5b595b9d607a1b60448201526064016106fb565b6000546001600160a01b0316331480610d1a575060075460ff1615156001145b610d5e5760405162461bcd60e51b81526020600482015260156024820152744d696e74696e67206973206e6f742061637469766560581b60448201526064016106fb565b6000546001600160a01b0316331480610d8157506003546001600160a01b031633145b610d8a57600080fd5b61079460003361165f565b600654604080516602830bcb2b21d160cd1b60208201523460278201526a0161031b7b9ba1034b99d160ad1b60478201526052808201939093528151808203909301835260720190526000546001600160a01b0316331480610df8575060065434145b8190610e175760405162461bcd60e51b81526004016106fb9190611fc8565b506000546001600160a01b0316331480610e3b57506003546001600160a01b031633145b80610e5057506005546001600160a01b031633145b610e935760405162461bcd60e51b815260206004820152601460248201527310dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b60448201526064016106fb565b610e9d838361165f565b505050565b610eaa6114ac565b600280546001600160a01b039586166001600160a01b0319918216179091556003805494861694821694909417909355600480549285169284169290921790915560058054919093169116179055565b6000818152600a6020526040812054606091819003610f4c576040805160008082526020820190925290610f44565b610f316118f7565b815260200190600190039081610f295790505b509392505050565b60008167ffffffffffffffff811115610f6757610f67611b22565b604051908082528060200260200182016040528015610fa057816020015b610f8d6118f7565b815260200190600190039081610f855790505b50905060005b8151811015610f44576000858152600a6020526040902080546009919083908110610fd357610fd36120eb565b906000526020600020015481548110610fee57610fee6120eb565b9060005260206000209060070201604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16600281111561106857611068611c59565b600281111561107957611079611c59565b8152600682015460ff6101008204811660208401526201000082048116604084015260609092019163010000009091041660038111156110bb576110bb611c59565b60038111156110cc576110cc611c59565b81526006919091015460ff64010000000082048116602084015265010000000000909104161515604090910152825183908390811061110d5761110d6120eb565b6020026020010181905250808061112390611e90565b915050610fa6565b6009818154811061113b57600080fd5b60009182526020909120600790910201805460018201546002830154600384015460048501546005860154600690960154949650929491939092919060ff808216916101008104821691620100008204811691630100000081048216916401000000008204811691650100000000009004168c565b60018054600091826111c183611e90565b90915550506001546040516bffffffffffffffffffffffff193360601b166020820152603481019190915242605482015260009060740160408051601f1981840301815291905280516020909101209050600061121e8585611f37565b611229906001611f50565b90508460ff168160ff168361123e9190612101565b6112489190611efd565b95945050505050565b6112596114ac565b6001600160a01b0381166112be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106fb565b6108fc81611506565b6003546001600160a01b031633146113155760405162461bcd60e51b8152602060048201526011602482015270139bdd0819d85b594818dbdb9d1c9858dd607a1b60448201526064016106fb565b60006009828154811061132a5761132a6120eb565b906000526020600020906007020160030181905550600060098281548110611354576113546120eb565b600091825260209091206006600790920201018054911515650100000000000265ff00000000001990921691909117905560048054604051630852cd8d60e31b81529182018390526001600160a01b0316906342966c6890602401600060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b5050505050565b805182516000916113f491612115565b60000b600103611406575060006107ed565b815183516114149190612115565b60000b19611424575060016107ed565b816020015183602001516114389190612115565b60000b19611448575060026107ed565b8160200151836020015161145c9190612115565b60000b60010361146e575060036107ed565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b60448201526064016106fb565b6000546001600160a01b031633146107945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608160000361157d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156115a7578061159181611e90565b91506115a09050600a83611ee9565b9150611581565b60008167ffffffffffffffff8111156115c2576115c2611b22565b6040519080825280601f01601f1916602001820160405280156115ec576020820181803683370190505b5090505b841561165757611601600183611ec0565b915061160e600a86612101565b611619906030611efd565b60f81b81838151811061162e5761162e6120eb565b60200101906001600160f81b031916908160001a905350611650600a86611ee9565b94506115f0565b949350505050565b600480546040516309b6507f60e41b8152808301929092526000602483018190526001600160a01b0384811660448501529092911690639b6507f09064174876e8009060640160206040518083038185885af11580156116c3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116e89190612136565b60048054604051632851838160e01b81529182018390529192506000916001600160a01b031690632851838190602401602060405180830381865afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117599190612136565b6009805460018181018355600083905260079091027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01838155915492935090916117a49190611ec0565b60018083019190915560028201849055600382018690556004808301829055600060058401819055600b926117e0928692909161054591610a5b565b60ff1610156117f05760016117f3565b60025b60068201805460ff1916600183600281111561181157611811611c59565b021790555060068101805462ffff001916905561184161183983600461054560006001610a5b565b60ff166118bd565b60068201805463ff0000001916630100000083600381111561186557611865611c59565b021790555060068101805465ffff000000001916650101000000001790556000858152600a602052604090206009546118a090600190611ec0565b815460018101835560009283526020909220909101555050505050565b6000816000036118cf57506000919050565b816000036118df57506000919050565b816000036118ef57506002919050565b506003919050565b6040518061018001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000600281111561194357611943611c59565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b80356001600160a01b038116811461198357600080fd5b919050565b6000806000806000608086880312156119a057600080fd5b6119a98661196c565b94506119b76020870161196c565b935060408601359250606086013567ffffffffffffffff808211156119db57600080fd5b818801915088601f8301126119ef57600080fd5b8135818111156119fe57600080fd5b896020828501011115611a1057600080fd5b9699959850939650602001949392505050565b600060208284031215611a3557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611a7457835183529284019291840191600101611a58565b50909695505050505050565b60008060008060808587031215611a9657600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215611ac757600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611af157600080fd5b50508035926020909101359150565b600060208284031215611b1257600080fd5b81358015158114610a5457600080fd5b634e487b7160e01b600052604160045260246000fd5b803560ff8116811461198357600080fd5b600060408284031215611b5b57600080fd5b6040516040810181811067ffffffffffffffff82111715611b8c57634e487b7160e01b600052604160045260246000fd5b604052905080611b9b83611b38565b8152611ba960208401611b38565b60208201525092915050565b60008060608385031215611bc857600080fd5b82359150611bd98460208501611b49565b90509250929050565b60008060408385031215611bf557600080fd5b82359150611bd96020840161196c565b60008060008060808587031215611c1b57600080fd5b611c248561196c565b9350611c326020860161196c565b9250611c406040860161196c565b9150611c4e6060860161196c565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b60038110611c7f57611c7f611c59565b9052565b60048110611c7f57611c7f611c59565b602080825282518282018190526000919060409081850190868401855b82811015611d645781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c080820151611cfe82880182611c6f565b505060e08181015160ff81168783015250506101008181015160ff811687830152505061012080820151611d3482880182611c83565b50506101408181015160ff1690860152610160908101511515908501526101809093019290850190600101611cb0565b5091979650505050505050565b6000610180820190508d82528c60208301528b60408301528a60608301528960808301528860a0830152611da860c0830189611c6f565b60ff871660e083015260ff8616610100830152611dc9610120830186611c83565b60ff84166101408301528215156101608301529d9c50505050505050505050505050565b60008060408385031215611e0057600080fd5b611e0983611b38565b9150611bd960208401611b38565b600060208284031215611e2957600080fd5b610a548261196c565b60008060808385031215611e4557600080fd5b611e4f8484611b49565b9150611bd98460408501611b49565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201611e8957611e89611e5e565b5060000390565b600060018201611ea257611ea2611e5e565b5060010190565b80820281158282048414176107ed576107ed611e5e565b818103818111156107ed576107ed611e5e565b634e487b7160e01b600052601260045260246000fd5b600082611ef857611ef8611ed3565b500490565b808201808211156107ed576107ed611e5e565b8181036000831280158383131683831282161715611f3057611f30611e5e565b5092915050565b60ff82811682821603908111156107ed576107ed611e5e565b60ff81811683821601908111156107ed576107ed611e5e565b60005b83811015611f84578181015183820152602001611f6c565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251611fbb816013850160208701611f69565b9190910160130192915050565b6020815260008251806020840152611fe7816040850160208701611f69565b601f01601f19169190910160400192915050565b600181815b8085111561203657816000190482111561201c5761201c611e5e565b8085161561202957918102915b93841c9390800290612000565b509250929050565b60008261204d575060016107ed565b8161205a575060006107ed565b8160018114612070576002811461207a57612096565b60019150506107ed565b60ff84111561208b5761208b611e5e565b50506001821b6107ed565b5060208310610133831016604e8410600b84101617156120b9575081810a6107ed565b6120c38383611ffb565b80600019048211156120d7576120d7611e5e565b029392505050565b6000610a54838361203e565b634e487b7160e01b600052603260045260246000fd5b60008261211057612110611ed3565b500690565b600082810b9082900b03607f198112607f821317156107ed576107ed611e5e565b60006020828403121561214857600080fd5b505191905056fea2646970667358221220d264169c51126498c2cac7fcf6bd15dea3586c2dcce9ae1362abe59eb9f8c6d064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14115,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9304,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "lobbies",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LobbyInterface)9248"
      },
      {
        "astId": 9306,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gamesContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9309,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "uif",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(UIFInterface)9295"
      },
      {
        "astId": 9311,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "actionsContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9348,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintCost",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9351,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintIsActive",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 9355,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "allowedContract",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9358,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "randSeed",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9362,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "items",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Item)14087_storage)dyn_storage"
      },
      {
        "astId": 9367,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "playerToItems",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9371,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "itemTraitModifiers",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Traits)14031_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Item)14087_storage)dyn_storage": {
        "base": "t_struct(Item)14087_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Item[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Traits)14031_storage)dyn_storage": {
        "base": "t_struct(Traits)14031_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Traits[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LobbyInterface)9248": {
        "encoding": "inplace",
        "label": "contract LobbyInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UIFInterface)9295": {
        "encoding": "inplace",
        "label": "contract UIFInterface",
        "numberOfBytes": "20"
      },
      "t_enum(ItemCategory)14055": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemCategory",
        "numberOfBytes": "1"
      },
      "t_enum(ItemType)14060": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemType",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(Item)14087_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Item",
        "members": [
          {
            "astId": 14062,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "genHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 14064,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14066,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "uifID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14068,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "holdingPlayerId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14070,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14072,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "traitModID",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 14075,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemCategory",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ItemCategory)14055"
          },
          {
            "astId": 14077,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsAbility",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 14079,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsFlaw",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 14082,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemType",
            "offset": 3,
            "slot": "6",
            "type": "t_enum(ItemType)14060"
          },
          {
            "astId": 14084,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "power",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 14086,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "inGame",
            "offset": 5,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Traits)14031_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Traits",
        "members": [
          {
            "astId": 14018,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 14020,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "carry",
            "offset": 1,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 14022,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "defense",
            "offset": 2,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 14024,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "hack",
            "offset": 3,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 14026,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "breach",
            "offset": 4,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 14028,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "shoot",
            "offset": 5,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 14030,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "melee",
            "offset": 6,
            "slot": "0",
            "type": "t_int8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}