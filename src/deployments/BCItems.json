{
  "address": "0xf2f89b7315a04bb6f6fb5911C830dE35D22611cC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matic",
          "type": "uint256"
        }
      ],
      "name": "SetMintCostInMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitItemToMission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerID",
          "type": "uint256"
        }
      ],
      "name": "getItemsByPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "genHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uifID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "holdingPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "traitModID",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.ItemCategory",
              "name": "itemCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsAbility",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grantsFlaw",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "power",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "inGame",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "genHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uifID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitModID",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.ItemCategory",
          "name": "itemCategory",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsAbility",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "grantsFlaw",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.ItemType",
          "name": "itemType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "power",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "inGame",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lobbies",
      "outputs": [
        {
          "internalType": "contract LobbyInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_holdingPlayerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_holderAddress",
          "type": "address"
        }
      ],
      "name": "lootItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerToItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lobbyContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UIFAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsContract",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setMintingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnCompanyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spawnItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uif",
      "outputs": [
        {
          "internalType": "contract UIFInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd58ff7370f1b3c7b91c3f881fa46c4db3ed6c4db4cb684f3bc4e7a3b461cfcea",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0xf2f89b7315a04bb6f6fb5911C830dE35D22611cC",
    "transactionIndex": 4,
    "gasUsed": "3227604",
    "logsBloom": "0x
    "blockHash": "0x452ebe5a8a75b9061325848dfd095730849a1c04de60fa1b5aefc826e3eb151c",
    "transactionHash": "0xd58ff7370f1b3c7b91c3f881fa46c4db3ed6c4db4cb684f3bc4e7a3b461cfcea",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 28998365,
        "transactionHash": "0xd58ff7370f1b3c7b91c3f881fa46c4db3ed6c4db4cb684f3bc4e7a3b461cfcea",
        "address": "0xf2f89b7315a04bb6f6fb5911C830dE35D22611cC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x452ebe5a8a75b9061325848dfd095730849a1c04de60fa1b5aefc826e3eb151c"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 28998365,
        "transactionHash": "0xd58ff7370f1b3c7b91c3f881fa46c4db3ed6c4db4cb684f3bc4e7a3b461cfcea",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000282235e8a27c000000000000000000000000000000000000000000000000000f4d76b92103d277000000000000000000000000000000000000000000001756839b1dbc6fbd6a9f0000000000000000000000000000000000000000000000000f2554833861567700000000000000000000000000000000000000000000175683c33ff2585fe69f",
        "logIndex": 24,
        "blockHash": "0x452ebe5a8a75b9061325848dfd095730849a1c04de60fa1b5aefc826e3eb151c"
      }
    ],
    "blockNumber": 28998365,
    "cumulativeGasUsed": "4023002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d75d72cdc7af3f834a9cafb27b151873",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matic\",\"type\":\"uint256\"}],\"name\":\"SetMintCostInMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitItemToMission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"getItemsByPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitModID\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"genHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uifID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitModID\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.ItemCategory\",\"name\":\"itemCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsAbility\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grantsFlaw\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbies\",\"outputs\":[{\"internalType\":\"contract LobbyInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdingPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"}],\"name\":\"lootItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerToItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lobbyContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UIFAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsContract\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnCompanyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawnItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uif\",\"outputs\":[{\"internalType\":\"contract UIFInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCItems.sol\":\"BCItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BCItems.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\n// Brian Doyle github.com/briandoyle81\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCUtils.sol\\\";\\nimport \\\"./BCTypes.sol\\\";\\n\\ninterface LobbyInterface {\\n    // TODO: Commit item to player inventory for game\\n}\\n\\ninterface GameInterface {\\n\\n}\\n\\ninterface UIFInterface {\\n    function mintItem(uint _type, uint _quality, address _minter) external payable returns (uint);\\n    function extGetProperties(uint _id) external view returns (bytes32);\\n    function extGetCurrentOwner(uint _id) external view returns (address);\\n    function ownerOf(uint256 _id) external view returns (address);\\n    function extGetUIIsOwned(address _currentOwner) external view returns (uint[] memory);\\n}\\n\\ncontract BCItems is IERC721Receiver, Ownable, BCUtils {\\n\\n    LobbyInterface public lobbies;\\n    address public gamesContract;\\n    UIFInterface public uif;\\n    address public actionsContract;\\n\\n    function setContractAddresses(\\n        address _lobbyContractAddress,\\n        address _gameContract,\\n        address _UIFAddress,\\n        address _actionsContract\\n        ) public onlyOwner {\\n        lobbies = LobbyInterface(_lobbyContractAddress);\\n        gamesContract = _gameContract;\\n        uif = UIFInterface(_UIFAddress);\\n        actionsContract = _actionsContract;\\n    }\\n\\n\\n    uint public mintCost = 100 gwei; // TODO: Set these\\n\\n    bool public mintIsActive = true; // TODO: Is this still useful?\\n\\n    event Received();\\n\\n    address public allowedContract;\\n    uint256 randSeed = 0;\\n    // TODO: Add company items using standard item in UIF\\n\\n    BCTypes.Item[] public items;\\n    mapping(uint256 => uint[]) public playerToItems; // TODO: Handle if made upgradeable\\n\\n    BCTypes.Traits[] itemTraitModifiers;\\n\\n    constructor() {\\n        // Use 0 for no modifiers\\n        itemTraitModifiers.push();\\n    }\\n\\n    function spawnCompanyItem() public payable {\\n        // TODO: Make copies of a specific item using the standard items mechanism in UIF\\n        // TODO: Remove owner free call\\n        // TODO: DRY\\n        require(msg.sender == owner() || msg.value == mintCost, \\\"Incorrect payment\\\");\\n        require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n        // TODO: Implement\\n    }\\n\\n    // Create a new item that goes directly to a player's inventory\\n    // ID of the _player_ holding this item\\n    function lootItem(uint _holdingPlayerId, address _holderAddress) public payable {\\n        // TODO: Remove owner free call\\n        string memory paymentError = string(abi.encodePacked(\\\"Payed: \\\", msg.value, \\\", cost is: \\\", mintCost));\\n        require(msg.sender == owner() || msg.value == mintCost, paymentError);\\n        // require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        // TODO: Finalize allowed senders\\n        require(msg.sender == owner() || msg.sender == address(gamesContract) || msg.sender == actionsContract, \\\"Contract not allowed\\\");\\n\\n        _createNewItem(_holdingPlayerId, _holderAddress);\\n    }\\n\\n    function spawnItem() public payable {\\n        // TODO: Handle location\\n        // TODO: Consider making redundant (always give items to a player then force them to drop)\\n        // ^^ This does make hunting scavs more profitable since you don't have to go get the item\\n        // TODO: Remove owner free call\\n        require(msg.sender == owner() || msg.value == mintCost, \\\"Incorrect payment\\\");\\n        require(msg.sender == owner() || mintIsActive == true, \\\"Minting is not active\\\");\\n        require(msg.sender == owner() || msg.sender == address(gamesContract));\\n\\n        _createNewItem(0, msg.sender);\\n    }\\n\\n    function _createNewItem(uint _holdingPlayerId, address _holderAddress) internal {\\n\\n        // I don't _think_ this is a reentrancy risk be cause I control the receiving address\\n        // Mint a new character item from UIF\\n        // TODO: Make sure passing payment this way is safe\\n        // TODO: DOUBLY SO FOR THIS ONE!!!!\\n        // TODO: Update costs for by-type payment scheme\\n        uint uifID = uif.mintItem{value: 100 gwei}(4, 0, _holderAddress); // TODO: Hardcoded value\\n        bytes32 finalHash = uif.extGetProperties(uifID);\\n\\n        // First pass interpretation will make weapons, armor, and stat boosters\\n        // Items with special abilities will be dealt with after that system is implemented\\n\\n        BCTypes.Item storage newItem = items.push();\\n\\n        newItem.genHash = finalHash;\\n\\n        newItem.id = items.length-1; // -1 because we've already pushed\\n        newItem.uifID = uifID;\\n\\n        newItem.holdingPlayerId = _holdingPlayerId;\\n\\n        newItem.weight = 1;\\n\\n        newItem.traitModID = 0;\\n\\n        newItem.itemCategory = sliceHashToSmallInt(finalHash, 4, getUIOffset(1, 0)) >= 11 ? BCTypes.ItemCategory.SCAVENGER : BCTypes.ItemCategory.ARTIFACT; // Quality <= 11 is 2/3 scav items.  // TODO: Eval\\n\\n        newItem.grantsAbility = 0; // NO abilities or flaws for now\\n        newItem.grantsFlaw = 0;\\n\\n        newItem.itemType = _getItemType(sliceHashToSmallInt(finalHash, 4, getUIOffset(0, 1)));\\n        newItem.power = 1;\\n\\n        newItem.inGame = true;\\n\\n        // items.push(BCTypes.Item(\\n        //     finalHash,\\n        //     items.length, // NOT -1 because we haven't pushed yet!\\n        //     uifID,\\n        //     _holdingPlayerId,\\n\\n        //     1, // For now, just use 1 for rng item weight\\n\\n        //     // no traits for now\\n        //     0,\\n        //     0,\\n\\n        //     sliceHashToSmallInt(finalHash, 4, getUIOffset(1, 0)) >= 11 ? BCTypes.ItemCategory.SCAVENGER : BCTypes.ItemCategory.ARTIFACT, // Quality <= 11 is 2/3 scav items.  // TODO: Eval\\n\\n        //     0, // No abilities for now\\n        //     0, // No flaws for now\\n\\n        //     _getItemType(sliceHashToSmallInt(finalHash, 4, getUIOffset(0, 1))),\\n        //     1 // TODO: Power is just 1 for now\\n\\n        //     // true\\n        // ));\\n\\n        playerToItems[_holdingPlayerId].push(items.length-1);\\n        // TODO: Event\\n    }\\n\\n    function _getItemType(uint _value) internal pure returns (BCTypes.ItemType) {\\n        // TODO: UIF Spec is incomplete, most items will be unusable for now\\n        if (_value == 0) {\\n            return BCTypes.ItemType.MELEE;\\n        }\\n        if (_value == 0) {\\n            return BCTypes.ItemType.MELEE;\\n        }\\n        if (_value == 0) {\\n            return BCTypes.ItemType.ARMOR;\\n        }\\n        return BCTypes.ItemType.TODO_ITEM;\\n    }\\n\\n    function commitItemToMission() public {\\n        // TODO:\\n        // Require you own this item and it's not in game\\n    }\\n\\n    function getItemsByPlayer(uint _playerID) public view returns (BCTypes.Item[]memory) {\\n        // TODO: Tests\\n        uint numOwned = playerToItems[_playerID].length;\\n\\n        BCTypes.Item[] memory itemsOwned = new BCTypes.Item[](numOwned);\\n        for (uint i = 0; i < items.length; i++) {\\n            itemsOwned[i] = items[playerToItems[_playerID][i]];\\n        }\\n        return itemsOwned;\\n    }\\n\\n    function transferFundsOut() public onlyOwner {\\n        // TODO: Track and limit to transferable balance, leaving enough for buybacks\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function setMintingStatus(bool _status) public onlyOwner {\\n        mintIsActive = _status;\\n    }\\n\\n    function SetMintCostInMatic(uint _matic) public onlyOwner {\\n        mintCost = _matic*10**18;\\n    }\\n\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        _operator;\\n        _from;\\n        _tokenId;\\n        _data;\\n        emit Received();\\n        return 0x150b7a02;\\n    }\\n}\\n\",\"keccak256\":\"0xb44ef602fab43da442b42e8cd9304894709f5b8f9955e699be4f89bdcc839266\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x9f66a4e65d4153df6b166945090637137e3a90aa3efb95315789cf391af23395\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event DiceRollEvent(uint roll, uint forValue, uint against);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees\\n    uint private TODO_randomSeed = 0;\\n\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) public returns(uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, block.timestamp)));\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    function roll() public returns(uint) {\\n        return uint(smallIntBetweenVals(1, 6));\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return(keccak256(abi.encodePacked(TODO_randomSeed, block.timestamp, msg.sender)));\\n    }\\n\\n    function abs(int x) public pure returns (int) { // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(uint _min, uint _max, uint _val, uint _valMax) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = adjustedMax * _val / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(bytes32 _hash, uint256 _size, uint256 _offset) public pure returns(uint8) {\\n        bytes32 mask = bytes32((2**_size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(uint _traitNum, uint _subTraitNum) public pure returns(uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) public pure returns(uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row-1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row+1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col+1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col-1);\\n        }\\n        revert(\\\"Invalid direction\\\");\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(uint _for, uint _against) public returns(bool) {\\n        uint diceRoll = roll();\\n        emit DiceRollEvent(diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if(_direction == 0) {\\n            return 1;\\n        }\\n        if(_direction == 1) {\\n            return 0;\\n        }\\n        if(_direction == 2) {\\n            return 3;\\n        }\\n        if(_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x92a3f57052bd86f264eb889da85b24fc803b79b690afd9fabc2403e9f84be006\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015564174876e8006006556001600760006101000a81548160ff02191690831515021790555060006008553480156200003f57600080fd5b5062000060620000546200008360201b60201c565b6200008b60201b60201c565b600b6001816001815401808255809150500390600052602060002050506200014f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6137ca806200015f6000396000f3fe6080604052600436106101ee5760003560e01c80638214f2221161010d578063b78e6651116100a0578063ce28613f1161006f578063ce28613f146106d3578063dff2fb3114610710578063e89d5a891461074d578063f2fde38b14610778578063fa3993c2146107a1576101ee565b8063b78e6651146105f8578063bdb4b84814610635578063bfb231d214610660578063cd5e3c5d146106a8576101ee565b806397f34c3f116100dc57806397f34c3f1461056c578063a20df9fa146105a9578063aa3eb1b5146105b3578063aaa68777146105cf576101ee565b80638214f2221461048a5780638ac031b3146104c75780638da5cb5b14610504578063951fc3fe1461052f576101ee565b8063471a429411610185578063705498dc11610154578063705498dc14610408578063715018a6146104335780637420aa361461044a57806376c8aa2714610473576101ee565b8063471a42941461033a578063501f978414610365578063530116961461038e57806364db84bf146103cb576101ee565b8063185ae9dc116101c1578063185ae9dc146102905780631b5ac4b5146102bb5780631e1de205146102f85780633838aed114610323576101ee565b80630364f88c146101f35780630fd8e8331461021e578063150b7a0214610228578063154fa27a14610265575b600080fd5b3480156101ff57600080fd5b506102086107de565b6040516102159190611efa565b60405180910390f35b610226610804565b005b34801561023457600080fd5b5061024f600480360381019061024a9190612002565b6109b1565b60405161025c91906120c5565b60405180910390f35b34801561027157600080fd5b5061027a6109f2565b60405161028791906120ef565b60405180910390f35b34801561029c57600080fd5b506102a5610a18565b6040516102b291906120ef565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190612140565b610a3e565b6040516102ef919061217c565b60405180910390f35b34801561030457600080fd5b5061030d610a60565b60405161031a91906121b0565b60405180910390f35b34801561032f57600080fd5b50610338610aac565b005b34801561034657600080fd5b5061034f610b04565b60405161035c91906121e6565b60405180910390f35b34801561037157600080fd5b5061038c60048036038101906103879190612201565b610b17565b005b34801561039a57600080fd5b506103b560048036038101906103b0919061222e565b610b3c565b6040516103c291906122b1565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed91906122cc565b610b80565b6040516103ff919061231b565b60405180910390f35b34801561041457600080fd5b5061041d610ba2565b60405161042a9190612357565b60405180910390f35b34801561043f57600080fd5b50610448610bc8565b005b34801561045657600080fd5b50610471600480360381019061046c919061239e565b610bdc565b005b34801561047f57600080fd5b50610488610c01565b005b34801561049657600080fd5b506104b160048036038101906104ac9190612201565b610c03565b6040516104be919061231b565b60405180910390f35b3480156104d357600080fd5b506104ee60048036038101906104e991906122cc565b610c8c565b6040516104fb919061231b565b60405180910390f35b34801561051057600080fd5b50610519610cbd565b60405161052691906120ef565b60405180910390f35b34801561053b57600080fd5b50610556600480360381019061055191906124d8565b610ce6565b6040516105639190612556565b60405180910390f35b34801561057857600080fd5b50610593600480360381019061058e919061259d565b610e2b565b6040516105a091906122b1565b60405180910390f35b6105b1610e62565b005b6105cd60048036038101906105c891906125f0565b61101a565b005b3480156105db57600080fd5b506105f660048036038101906105f19190612630565b6111fb565b005b34801561060457600080fd5b5061061f600480360381019061061a9190612201565b61130d565b60405161062c9190612929565b60405180910390f35b34801561064157600080fd5b5061064a61154f565b604051610657919061231b565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190612201565b611555565b60405161069f9c9b9a99989796959493929190612969565b60405180910390f35b3480156106b457600080fd5b506106bd611613565b6040516106ca919061231b565b60405180910390f35b3480156106df57600080fd5b506106fa60048036038101906106f59190612a23565b611629565b60405161070791906122b1565b60405180910390f35b34801561071c57600080fd5b50610737600480360381019061073291906122cc565b6116ba565b60405161074491906121e6565b60405180910390f35b34801561075957600080fd5b5061076261174a565b60405161076f91906120ef565b60405180910390f35b34801561078457600080fd5b5061079f600480360381019061079a9190612a63565b611770565b005b3480156107ad57600080fd5b506107c860048036038101906107c39190612a90565b6117f4565b6040516107d5919061231b565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61080c610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610846575060065434145b610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90612b2d565b60405180910390fd5b61088d610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108d9575060011515600760009054906101000a900460ff161515145b610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90612b99565b60405180910390fd5b610920610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109a65750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109af57600080fd5b565b60007f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b60405160405180910390a163150b7a0260e01b905095945050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821215610a575781610a5290612be8565b610a59565b815b9050919050565b600060016000815480929190610a7590612c31565b91905055506001544233604051602001610a9193929190612ce3565b60405160208183030381529060405280519060200120905090565b610ab4611915565b610abc610cbd565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610b01573d6000803e3d6000fd5b50565b600760009054906101000a900460ff1681565b610b1f611915565b670de0b6b3a764000081610b339190612d20565b60068190555050565b6000808585610b4b9190612d7a565b90506000838583610b5c9190612d20565b610b669190612ddd565b90508681610b749190612e0e565b92505050949350505050565b600081836004610b909190612d20565b610b9a9190612e0e565b905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bd0611915565b610bda6000611993565b565b610be4611915565b80600760006101000a81548160ff02191690831515021790555050565b565b600080821415610c165760019050610c87565b6001821415610c285760009050610c87565b6002821415610c3a5760039050610c87565b6003821415610c4c5760029050610c87565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7e90612eb0565b60405180910390fd5b919050565b600a6020528160005260406000208181548110610ca857600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cee611dc8565b6000831415610d2d57604051806040016040528060018460000151610d139190612ed0565b60ff168152602001836020015160ff168152509050610e25565b6001831415610d6c57604051806040016040528060018460000151610d529190612f04565b60ff168152602001836020015160ff168152509050610e25565b6002831415610dab576040518060400160405280836000015160ff16815260200160018460200151610d9e9190612f04565b60ff168152509050610e25565b6003831415610dea576040518060400160405280836000015160ff16815260200160018460200151610ddd9190612ed0565b60ff168152509050610e25565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c90612f87565b60405180910390fd5b92915050565b600080826001856002610e3e91906130da565b610e489190612d7a565b60001b901b905082818616901c60001c9150509392505050565b610e6a610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ea4575060065434145b610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90612b2d565b60405180910390fd5b610eeb610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f37575060011515600760009054906101000a900460ff161515145b610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90612b99565b60405180910390fd5b610f7e610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110045750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61100d57600080fd5b611018600033611a57565b565b6000346006546040516020016110319291906131c8565b604051602081830303815290604052905061104a610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611084575060065434145b81906110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd9190613281565b60405180910390fd5b506110cf610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111555750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806111ad5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e3906132ef565b60405180910390fd5b6111f68383611a57565b505050565b611203611915565b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60606000600a600084815260200190815260200160002080549050905060008167ffffffffffffffff811115611346576113456123e1565b5b60405190808252806020026020018201604052801561137f57816020015b61136c611de8565b8152602001906001900390816113645790505b50905060005b600980549050811015611544576009600a600087815260200190815260200160002082815481106113b9576113b861330f565b5b9060005260206000200154815481106113d5576113d461330f565b5b9060005260206000209060070201604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1660028111156114505761144f6126e1565b5b6002811115611462576114616126e1565b5b81526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900460ff1660ff1660ff1681526020016006820160039054906101000a900460ff1660038111156114c5576114c46126e1565b5b60038111156114d7576114d66126e1565b5b81526020016006820160049054906101000a900460ff1660ff1660ff1681526020016006820160059054906101000a900460ff1615151515815250508282815181106115265761152561330f565b5b6020026020010181905250808061153c90612c31565b915050611385565b508092505050919050565b60065481565b6009818154811061156557600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16908060060160039054906101000a900460ff16908060060160049054906101000a900460ff16908060060160059054906101000a900460ff1690508c565b600061162160016006611629565b60ff16905090565b60006001600081548092919061163e90612c31565b91905055506000336001544260405160200161165c9392919061333e565b6040516020818303038152906040528051906020012060001c90506000600185856116879190612ed0565b6116919190612f04565b90508460ff168160ff16836116a6919061337b565b6116b09190612e0e565b9250505092915050565b6000806116c5611613565b90507f2729adc6efc811c2141edf691ce91423fbcd06f2d8fe8be0a13b24e47d1050c48185856040516116fa939291906133ac565b60405180910390a16001811415611715576000915050611744565b60038385836117249190612e0e565b61172e91906133e3565b131561173e576001915050611744565b60009150505b92915050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611778611915565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df906134e9565b60405180910390fd5b6117f181611993565b50565b600060018260000151846000015161180c9190613516565b60000b141561181e576000905061190f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826000015184600001516118539190613516565b60000b1415611865576001905061190f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260200151846020015161189a9190613516565b60000b14156118ac576002905061190f565b6001826020015184602001516118c29190613516565b60000b14156118d4576003905061190f565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611906906135d7565b60405180910390fd5b92915050565b61191d611d7f565b73ffffffffffffffffffffffffffffffffffffffff1661193b610cbd565b73ffffffffffffffffffffffffffffffffffffffff1614611991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198890613643565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b6507f064174876e80060046000866040518563ffffffff1660e01b8152600401611ac0939291906136d9565b60206040518083038185885af1158015611ade573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611b039190613725565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328518381836040518263ffffffff1660e01b8152600401611b62919061231b565b602060405180830381865afa158015611b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba39190613767565b90506000600960018160018154018082558091505003906000526020600020906007020190508181600001819055506001600980549050611be49190612d7a565b81600101819055508281600201819055508481600301819055506001816004018190555060008160050181905550600b611c2b836004611c2660016000610b80565b610e2b565b60ff161015611c3b576001611c3e565b60025b8160060160006101000a81548160ff02191690836002811115611c6457611c636126e1565b5b021790555060008160060160016101000a81548160ff021916908360ff16021790555060008160060160026101000a81548160ff021916908360ff160217905550611cc7611cbf836004611cba60006001610b80565b610e2b565b60ff16611d87565b8160060160036101000a81548160ff02191690836003811115611ced57611cec6126e1565b5b021790555060018160060160046101000a81548160ff021916908360ff16021790555060018160060160056101000a81548160ff021916908315150217905550600a60008681526020019081526020016000206001600980549050611d529190612d7a565b90806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b600033905090565b600080821415611d9a5760009050611dc3565b6000821415611dac5760009050611dc3565b6000821415611dbe5760029050611dc3565b600390505b919050565b6040518060400160405280600060ff168152602001600060ff1681525090565b60405180610180016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160006002811115611e3557611e346126e1565b5b8152602001600060ff168152602001600060ff16815260200160006003811115611e6257611e616126e1565b5b8152602001600060ff1681526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ec0611ebb611eb684611e7b565b611e9b565b611e7b565b9050919050565b6000611ed282611ea5565b9050919050565b6000611ee482611ec7565b9050919050565b611ef481611ed9565b82525050565b6000602082019050611f0f6000830184611eeb565b92915050565b6000604051905090565b600080fd5b600080fd5b6000611f3482611e7b565b9050919050565b611f4481611f29565b8114611f4f57600080fd5b50565b600081359050611f6181611f3b565b92915050565b6000819050919050565b611f7a81611f67565b8114611f8557600080fd5b50565b600081359050611f9781611f71565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611fc257611fc1611f9d565b5b8235905067ffffffffffffffff811115611fdf57611fde611fa2565b5b602083019150836001820283011115611ffb57611ffa611fa7565b5b9250929050565b60008060008060006080868803121561201e5761201d611f1f565b5b600061202c88828901611f52565b955050602061203d88828901611f52565b945050604061204e88828901611f88565b935050606086013567ffffffffffffffff81111561206f5761206e611f24565b5b61207b88828901611fac565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120bf8161208a565b82525050565b60006020820190506120da60008301846120b6565b92915050565b6120e981611f29565b82525050565b600060208201905061210460008301846120e0565b92915050565b6000819050919050565b61211d8161210a565b811461212857600080fd5b50565b60008135905061213a81612114565b92915050565b60006020828403121561215657612155611f1f565b5b60006121648482850161212b565b91505092915050565b6121768161210a565b82525050565b6000602082019050612191600083018461216d565b92915050565b6000819050919050565b6121aa81612197565b82525050565b60006020820190506121c560008301846121a1565b92915050565b60008115159050919050565b6121e0816121cb565b82525050565b60006020820190506121fb60008301846121d7565b92915050565b60006020828403121561221757612216611f1f565b5b600061222584828501611f88565b91505092915050565b6000806000806080858703121561224857612247611f1f565b5b600061225687828801611f88565b945050602061226787828801611f88565b935050604061227887828801611f88565b925050606061228987828801611f88565b91505092959194509250565b600060ff82169050919050565b6122ab81612295565b82525050565b60006020820190506122c660008301846122a2565b92915050565b600080604083850312156122e3576122e2611f1f565b5b60006122f185828601611f88565b925050602061230285828601611f88565b9150509250929050565b61231581611f67565b82525050565b6000602082019050612330600083018461230c565b92915050565b600061234182611ec7565b9050919050565b61235181612336565b82525050565b600060208201905061236c6000830184612348565b92915050565b61237b816121cb565b811461238657600080fd5b50565b60008135905061239881612372565b92915050565b6000602082840312156123b4576123b3611f1f565b5b60006123c284828501612389565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612419826123d0565b810181811067ffffffffffffffff82111715612438576124376123e1565b5b80604052505050565b600061244b611f15565b90506124578282612410565b919050565b61246581612295565b811461247057600080fd5b50565b6000813590506124828161245c565b92915050565b60006040828403121561249e5761249d6123cb565b5b6124a86040612441565b905060006124b884828501612473565b60008301525060206124cc84828501612473565b60208301525092915050565b600080606083850312156124ef576124ee611f1f565b5b60006124fd85828601611f88565b925050602061250e85828601612488565b9150509250929050565b61252181612295565b82525050565b60408201600082015161253d6000850182612518565b5060208201516125506020850182612518565b50505050565b600060408201905061256b6000830184612527565b92915050565b61257a81612197565b811461258557600080fd5b50565b60008135905061259781612571565b92915050565b6000806000606084860312156125b6576125b5611f1f565b5b60006125c486828701612588565b93505060206125d586828701611f88565b92505060406125e686828701611f88565b9150509250925092565b6000806040838503121561260757612606611f1f565b5b600061261585828601611f88565b925050602061262685828601611f52565b9150509250929050565b6000806000806080858703121561264a57612649611f1f565b5b600061265887828801611f52565b945050602061266987828801611f52565b935050604061267a87828801611f52565b925050606061268b87828801611f52565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126cc81612197565b82525050565b6126db81611f67565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612721576127206126e1565b5b50565b600081905061273282612710565b919050565b600061274282612724565b9050919050565b61275281612737565b82525050565b60048110612769576127686126e1565b5b50565b600081905061277a82612758565b919050565b600061278a8261276c565b9050919050565b61279a8161277f565b82525050565b6127a9816121cb565b82525050565b610180820160008201516127c660008501826126c3565b5060208201516127d960208501826126d2565b5060408201516127ec60408501826126d2565b5060608201516127ff60608501826126d2565b50608082015161281260808501826126d2565b5060a082015161282560a08501826126d2565b5060c082015161283860c0850182612749565b5060e082015161284b60e0850182612518565b50610100820151612860610100850182612518565b50610120820151612875610120850182612791565b5061014082015161288a610140850182612518565b5061016082015161289f6101608501826127a0565b50505050565b60006128b183836127af565b6101808301905092915050565b6000602082019050919050565b60006128d682612697565b6128e081856126a2565b93506128eb836126b3565b8060005b8381101561291c57815161290388826128a5565b975061290e836128be565b9250506001810190506128ef565b5085935050505092915050565b6000602082019050818103600083015261294381846128cb565b905092915050565b61295481612737565b82525050565b6129638161277f565b82525050565b60006101808201905061297f600083018f6121a1565b61298c602083018e61230c565b612999604083018d61230c565b6129a6606083018c61230c565b6129b3608083018b61230c565b6129c060a083018a61230c565b6129cd60c083018961294b565b6129da60e08301886122a2565b6129e86101008301876122a2565b6129f661012083018661295a565b612a046101408301856122a2565b612a126101608301846121d7565b9d9c50505050505050505050505050565b60008060408385031215612a3a57612a39611f1f565b5b6000612a4885828601612473565b9250506020612a5985828601612473565b9150509250929050565b600060208284031215612a7957612a78611f1f565b5b6000612a8784828501611f52565b91505092915050565b60008060808385031215612aa757612aa6611f1f565b5b6000612ab585828601612488565b9250506040612ac685828601612488565b9150509250929050565b600082825260208201905092915050565b7f496e636f7272656374207061796d656e74000000000000000000000000000000600082015250565b6000612b17601183612ad0565b9150612b2282612ae1565b602082019050919050565b60006020820190508181036000830152612b4681612b0a565b9050919050565b7f4d696e74696e67206973206e6f74206163746976650000000000000000000000600082015250565b6000612b83601583612ad0565b9150612b8e82612b4d565b602082019050919050565b60006020820190508181036000830152612bb281612b76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bf38261210a565b91507f8000000000000000000000000000000000000000000000000000000000000000821415612c2657612c25612bb9565b5b816000039050919050565b6000612c3c82611f67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c6f57612c6e612bb9565b5b600182019050919050565b6000819050919050565b612c95612c9082611f67565b612c7a565b82525050565b60008160601b9050919050565b6000612cb382612c9b565b9050919050565b6000612cc582612ca8565b9050919050565b612cdd612cd882611f29565b612cba565b82525050565b6000612cef8286612c84565b602082019150612cff8285612c84565b602082019150612d0f8284612ccc565b601482019150819050949350505050565b6000612d2b82611f67565b9150612d3683611f67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d6f57612d6e612bb9565b5b828202905092915050565b6000612d8582611f67565b9150612d9083611f67565b925082821015612da357612da2612bb9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612de882611f67565b9150612df383611f67565b925082612e0357612e02612dae565b5b828204905092915050565b6000612e1982611f67565b9150612e2483611f67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e5957612e58612bb9565b5b828201905092915050565b7f42616420646972656374696f6e00000000000000000000000000000000000000600082015250565b6000612e9a600d83612ad0565b9150612ea582612e64565b602082019050919050565b60006020820190508181036000830152612ec981612e8d565b9050919050565b6000612edb82612295565b9150612ee683612295565b925082821015612ef957612ef8612bb9565b5b828203905092915050565b6000612f0f82612295565b9150612f1a83612295565b92508260ff03821115612f3057612f2f612bb9565b5b828201905092915050565b7f496e76616c696420646972656374696f6e000000000000000000000000000000600082015250565b6000612f71601183612ad0565b9150612f7c82612f3b565b602082019050919050565b60006020820190508181036000830152612fa081612f64565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115612ffe57808604811115612fda57612fd9612bb9565b5b6001851615612fe95780820291505b8081029050612ff785612fa7565b9450612fbe565b94509492505050565b60008261301757600190506130d3565b8161302557600090506130d3565b816001811461303b576002811461304557613074565b60019150506130d3565b60ff84111561305757613056612bb9565b5b8360020a91508482111561306e5761306d612bb9565b5b506130d3565b5060208310610133831016604e8410600b84101617156130a95782820a9050838111156130a4576130a3612bb9565b5b6130d3565b6130b68484846001612fb4565b925090508184048111156130cd576130cc612bb9565b5b81810290505b9392505050565b60006130e582611f67565b91506130f083611f67565b925061311d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613007565b905092915050565b600081905092915050565b7f50617965643a2000000000000000000000000000000000000000000000000000600082015250565b6000613166600783613125565b915061317182613130565b600782019050919050565b7f2c20636f73742069733a20000000000000000000000000000000000000000000600082015250565b60006131b2600b83613125565b91506131bd8261317c565b600b82019050919050565b60006131d382613159565b91506131df8285612c84565b6020820191506131ee826131a5565b91506131fa8284612c84565b6020820191508190509392505050565b600081519050919050565b60005b83811015613233578082015181840152602081019050613218565b83811115613242576000848401525b50505050565b60006132538261320a565b61325d8185612ad0565b935061326d818560208601613215565b613276816123d0565b840191505092915050565b6000602082019050818103600083015261329b8184613248565b905092915050565b7f436f6e7472616374206e6f7420616c6c6f776564000000000000000000000000600082015250565b60006132d9601483612ad0565b91506132e4826132a3565b602082019050919050565b60006020820190508181036000830152613308816132cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061334a8286612ccc565b60148201915061335a8285612c84565b60208201915061336a8284612c84565b602082019150819050949350505050565b600061338682611f67565b915061339183611f67565b9250826133a1576133a0612dae565b5b828206905092915050565b60006060820190506133c1600083018661230c565b6133ce602083018561230c565b6133db604083018461230c565b949350505050565b60006133ee8261210a565b91506133f98361210a565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561343457613433612bb9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561346c5761346b612bb9565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006134d3602683612ad0565b91506134de82613477565b604082019050919050565b60006020820190508181036000830152613502816134c6565b9050919050565b60008160000b9050919050565b600061352182613509565b915061352c83613509565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800182126000841215161561356757613566612bb9565b5b82607f0182136000841216156135805761357f612bb9565b5b828203905092915050565b7f4572726f723a204e6f742061646a6163656e7400000000000000000000000000600082015250565b60006135c1601383612ad0565b91506135cc8261358b565b602082019050919050565b600060208201905081810360008301526135f0816135b4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061362d602083612ad0565b9150613638826135f7565b602082019050919050565b6000602082019050818103600083015261365c81613620565b9050919050565b6000819050919050565b600061368861368361367e84613663565b611e9b565b611f67565b9050919050565b6136988161366d565b82525050565b6000819050919050565b60006136c36136be6136b98461369e565b611e9b565b611f67565b9050919050565b6136d3816136a8565b82525050565b60006060820190506136ee600083018661368f565b6136fb60208301856136ca565b61370860408301846120e0565b949350505050565b60008151905061371f81611f71565b92915050565b60006020828403121561373b5761373a611f1f565b5b600061374984828501613710565b91505092915050565b60008151905061376181612571565b92915050565b60006020828403121561377d5761377c611f1f565b5b600061378b84828501613752565b9150509291505056fea2646970667358221220bb75bb1316ee9d4f541636d0fb75801913ea2061aea9e69e8442ed8394b96a0a64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80638214f2221161010d578063b78e6651116100a0578063ce28613f1161006f578063ce28613f146106d3578063dff2fb3114610710578063e89d5a891461074d578063f2fde38b14610778578063fa3993c2146107a1576101ee565b8063b78e6651146105f8578063bdb4b84814610635578063bfb231d214610660578063cd5e3c5d146106a8576101ee565b806397f34c3f116100dc57806397f34c3f1461056c578063a20df9fa146105a9578063aa3eb1b5146105b3578063aaa68777146105cf576101ee565b80638214f2221461048a5780638ac031b3146104c75780638da5cb5b14610504578063951fc3fe1461052f576101ee565b8063471a429411610185578063705498dc11610154578063705498dc14610408578063715018a6146104335780637420aa361461044a57806376c8aa2714610473576101ee565b8063471a42941461033a578063501f978414610365578063530116961461038e57806364db84bf146103cb576101ee565b8063185ae9dc116101c1578063185ae9dc146102905780631b5ac4b5146102bb5780631e1de205146102f85780633838aed114610323576101ee565b80630364f88c146101f35780630fd8e8331461021e578063150b7a0214610228578063154fa27a14610265575b600080fd5b3480156101ff57600080fd5b506102086107de565b6040516102159190611efa565b60405180910390f35b610226610804565b005b34801561023457600080fd5b5061024f600480360381019061024a9190612002565b6109b1565b60405161025c91906120c5565b60405180910390f35b34801561027157600080fd5b5061027a6109f2565b60405161028791906120ef565b60405180910390f35b34801561029c57600080fd5b506102a5610a18565b6040516102b291906120ef565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190612140565b610a3e565b6040516102ef919061217c565b60405180910390f35b34801561030457600080fd5b5061030d610a60565b60405161031a91906121b0565b60405180910390f35b34801561032f57600080fd5b50610338610aac565b005b34801561034657600080fd5b5061034f610b04565b60405161035c91906121e6565b60405180910390f35b34801561037157600080fd5b5061038c60048036038101906103879190612201565b610b17565b005b34801561039a57600080fd5b506103b560048036038101906103b0919061222e565b610b3c565b6040516103c291906122b1565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed91906122cc565b610b80565b6040516103ff919061231b565b60405180910390f35b34801561041457600080fd5b5061041d610ba2565b60405161042a9190612357565b60405180910390f35b34801561043f57600080fd5b50610448610bc8565b005b34801561045657600080fd5b50610471600480360381019061046c919061239e565b610bdc565b005b34801561047f57600080fd5b50610488610c01565b005b34801561049657600080fd5b506104b160048036038101906104ac9190612201565b610c03565b6040516104be919061231b565b60405180910390f35b3480156104d357600080fd5b506104ee60048036038101906104e991906122cc565b610c8c565b6040516104fb919061231b565b60405180910390f35b34801561051057600080fd5b50610519610cbd565b60405161052691906120ef565b60405180910390f35b34801561053b57600080fd5b50610556600480360381019061055191906124d8565b610ce6565b6040516105639190612556565b60405180910390f35b34801561057857600080fd5b50610593600480360381019061058e919061259d565b610e2b565b6040516105a091906122b1565b60405180910390f35b6105b1610e62565b005b6105cd60048036038101906105c891906125f0565b61101a565b005b3480156105db57600080fd5b506105f660048036038101906105f19190612630565b6111fb565b005b34801561060457600080fd5b5061061f600480360381019061061a9190612201565b61130d565b60405161062c9190612929565b60405180910390f35b34801561064157600080fd5b5061064a61154f565b604051610657919061231b565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190612201565b611555565b60405161069f9c9b9a99989796959493929190612969565b60405180910390f35b3480156106b457600080fd5b506106bd611613565b6040516106ca919061231b565b60405180910390f35b3480156106df57600080fd5b506106fa60048036038101906106f59190612a23565b611629565b60405161070791906122b1565b60405180910390f35b34801561071c57600080fd5b50610737600480360381019061073291906122cc565b6116ba565b60405161074491906121e6565b60405180910390f35b34801561075957600080fd5b5061076261174a565b60405161076f91906120ef565b60405180910390f35b34801561078457600080fd5b5061079f600480360381019061079a9190612a63565b611770565b005b3480156107ad57600080fd5b506107c860048036038101906107c39190612a90565b6117f4565b6040516107d5919061231b565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61080c610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610846575060065434145b610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90612b2d565b60405180910390fd5b61088d610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108d9575060011515600760009054906101000a900460ff161515145b610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90612b99565b60405180910390fd5b610920610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109a65750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109af57600080fd5b565b60007f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b60405160405180910390a163150b7a0260e01b905095945050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821215610a575781610a5290612be8565b610a59565b815b9050919050565b600060016000815480929190610a7590612c31565b91905055506001544233604051602001610a9193929190612ce3565b60405160208183030381529060405280519060200120905090565b610ab4611915565b610abc610cbd565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610b01573d6000803e3d6000fd5b50565b600760009054906101000a900460ff1681565b610b1f611915565b670de0b6b3a764000081610b339190612d20565b60068190555050565b6000808585610b4b9190612d7a565b90506000838583610b5c9190612d20565b610b669190612ddd565b90508681610b749190612e0e565b92505050949350505050565b600081836004610b909190612d20565b610b9a9190612e0e565b905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bd0611915565b610bda6000611993565b565b610be4611915565b80600760006101000a81548160ff02191690831515021790555050565b565b600080821415610c165760019050610c87565b6001821415610c285760009050610c87565b6002821415610c3a5760039050610c87565b6003821415610c4c5760029050610c87565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7e90612eb0565b60405180910390fd5b919050565b600a6020528160005260406000208181548110610ca857600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cee611dc8565b6000831415610d2d57604051806040016040528060018460000151610d139190612ed0565b60ff168152602001836020015160ff168152509050610e25565b6001831415610d6c57604051806040016040528060018460000151610d529190612f04565b60ff168152602001836020015160ff168152509050610e25565b6002831415610dab576040518060400160405280836000015160ff16815260200160018460200151610d9e9190612f04565b60ff168152509050610e25565b6003831415610dea576040518060400160405280836000015160ff16815260200160018460200151610ddd9190612ed0565b60ff168152509050610e25565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c90612f87565b60405180910390fd5b92915050565b600080826001856002610e3e91906130da565b610e489190612d7a565b60001b901b905082818616901c60001c9150509392505050565b610e6a610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ea4575060065434145b610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90612b2d565b60405180910390fd5b610eeb610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f37575060011515600760009054906101000a900460ff161515145b610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90612b99565b60405180910390fd5b610f7e610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110045750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61100d57600080fd5b611018600033611a57565b565b6000346006546040516020016110319291906131c8565b604051602081830303815290604052905061104a610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611084575060065434145b81906110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd9190613281565b60405180910390fd5b506110cf610cbd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111555750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806111ad5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e3906132ef565b60405180910390fd5b6111f68383611a57565b505050565b611203611915565b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60606000600a600084815260200190815260200160002080549050905060008167ffffffffffffffff811115611346576113456123e1565b5b60405190808252806020026020018201604052801561137f57816020015b61136c611de8565b8152602001906001900390816113645790505b50905060005b600980549050811015611544576009600a600087815260200190815260200160002082815481106113b9576113b861330f565b5b9060005260206000200154815481106113d5576113d461330f565b5b9060005260206000209060070201604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1660028111156114505761144f6126e1565b5b6002811115611462576114616126e1565b5b81526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900460ff1660ff1660ff1681526020016006820160039054906101000a900460ff1660038111156114c5576114c46126e1565b5b60038111156114d7576114d66126e1565b5b81526020016006820160049054906101000a900460ff1660ff1660ff1681526020016006820160059054906101000a900460ff1615151515815250508282815181106115265761152561330f565b5b6020026020010181905250808061153c90612c31565b915050611385565b508092505050919050565b60065481565b6009818154811061156557600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16908060060160039054906101000a900460ff16908060060160049054906101000a900460ff16908060060160059054906101000a900460ff1690508c565b600061162160016006611629565b60ff16905090565b60006001600081548092919061163e90612c31565b91905055506000336001544260405160200161165c9392919061333e565b6040516020818303038152906040528051906020012060001c90506000600185856116879190612ed0565b6116919190612f04565b90508460ff168160ff16836116a6919061337b565b6116b09190612e0e565b9250505092915050565b6000806116c5611613565b90507f2729adc6efc811c2141edf691ce91423fbcd06f2d8fe8be0a13b24e47d1050c48185856040516116fa939291906133ac565b60405180910390a16001811415611715576000915050611744565b60038385836117249190612e0e565b61172e91906133e3565b131561173e576001915050611744565b60009150505b92915050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611778611915565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df906134e9565b60405180910390fd5b6117f181611993565b50565b600060018260000151846000015161180c9190613516565b60000b141561181e576000905061190f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826000015184600001516118539190613516565b60000b1415611865576001905061190f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260200151846020015161189a9190613516565b60000b14156118ac576002905061190f565b6001826020015184602001516118c29190613516565b60000b14156118d4576003905061190f565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611906906135d7565b60405180910390fd5b92915050565b61191d611d7f565b73ffffffffffffffffffffffffffffffffffffffff1661193b610cbd565b73ffffffffffffffffffffffffffffffffffffffff1614611991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198890613643565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b6507f064174876e80060046000866040518563ffffffff1660e01b8152600401611ac0939291906136d9565b60206040518083038185885af1158015611ade573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611b039190613725565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328518381836040518263ffffffff1660e01b8152600401611b62919061231b565b602060405180830381865afa158015611b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba39190613767565b90506000600960018160018154018082558091505003906000526020600020906007020190508181600001819055506001600980549050611be49190612d7a565b81600101819055508281600201819055508481600301819055506001816004018190555060008160050181905550600b611c2b836004611c2660016000610b80565b610e2b565b60ff161015611c3b576001611c3e565b60025b8160060160006101000a81548160ff02191690836002811115611c6457611c636126e1565b5b021790555060008160060160016101000a81548160ff021916908360ff16021790555060008160060160026101000a81548160ff021916908360ff160217905550611cc7611cbf836004611cba60006001610b80565b610e2b565b60ff16611d87565b8160060160036101000a81548160ff02191690836003811115611ced57611cec6126e1565b5b021790555060018160060160046101000a81548160ff021916908360ff16021790555060018160060160056101000a81548160ff021916908315150217905550600a60008681526020019081526020016000206001600980549050611d529190612d7a565b90806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b600033905090565b600080821415611d9a5760009050611dc3565b6000821415611dac5760009050611dc3565b6000821415611dbe5760029050611dc3565b600390505b919050565b6040518060400160405280600060ff168152602001600060ff1681525090565b60405180610180016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160006002811115611e3557611e346126e1565b5b8152602001600060ff168152602001600060ff16815260200160006003811115611e6257611e616126e1565b5b8152602001600060ff1681526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ec0611ebb611eb684611e7b565b611e9b565b611e7b565b9050919050565b6000611ed282611ea5565b9050919050565b6000611ee482611ec7565b9050919050565b611ef481611ed9565b82525050565b6000602082019050611f0f6000830184611eeb565b92915050565b6000604051905090565b600080fd5b600080fd5b6000611f3482611e7b565b9050919050565b611f4481611f29565b8114611f4f57600080fd5b50565b600081359050611f6181611f3b565b92915050565b6000819050919050565b611f7a81611f67565b8114611f8557600080fd5b50565b600081359050611f9781611f71565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611fc257611fc1611f9d565b5b8235905067ffffffffffffffff811115611fdf57611fde611fa2565b5b602083019150836001820283011115611ffb57611ffa611fa7565b5b9250929050565b60008060008060006080868803121561201e5761201d611f1f565b5b600061202c88828901611f52565b955050602061203d88828901611f52565b945050604061204e88828901611f88565b935050606086013567ffffffffffffffff81111561206f5761206e611f24565b5b61207b88828901611fac565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120bf8161208a565b82525050565b60006020820190506120da60008301846120b6565b92915050565b6120e981611f29565b82525050565b600060208201905061210460008301846120e0565b92915050565b6000819050919050565b61211d8161210a565b811461212857600080fd5b50565b60008135905061213a81612114565b92915050565b60006020828403121561215657612155611f1f565b5b60006121648482850161212b565b91505092915050565b6121768161210a565b82525050565b6000602082019050612191600083018461216d565b92915050565b6000819050919050565b6121aa81612197565b82525050565b60006020820190506121c560008301846121a1565b92915050565b60008115159050919050565b6121e0816121cb565b82525050565b60006020820190506121fb60008301846121d7565b92915050565b60006020828403121561221757612216611f1f565b5b600061222584828501611f88565b91505092915050565b6000806000806080858703121561224857612247611f1f565b5b600061225687828801611f88565b945050602061226787828801611f88565b935050604061227887828801611f88565b925050606061228987828801611f88565b91505092959194509250565b600060ff82169050919050565b6122ab81612295565b82525050565b60006020820190506122c660008301846122a2565b92915050565b600080604083850312156122e3576122e2611f1f565b5b60006122f185828601611f88565b925050602061230285828601611f88565b9150509250929050565b61231581611f67565b82525050565b6000602082019050612330600083018461230c565b92915050565b600061234182611ec7565b9050919050565b61235181612336565b82525050565b600060208201905061236c6000830184612348565b92915050565b61237b816121cb565b811461238657600080fd5b50565b60008135905061239881612372565b92915050565b6000602082840312156123b4576123b3611f1f565b5b60006123c284828501612389565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612419826123d0565b810181811067ffffffffffffffff82111715612438576124376123e1565b5b80604052505050565b600061244b611f15565b90506124578282612410565b919050565b61246581612295565b811461247057600080fd5b50565b6000813590506124828161245c565b92915050565b60006040828403121561249e5761249d6123cb565b5b6124a86040612441565b905060006124b884828501612473565b60008301525060206124cc84828501612473565b60208301525092915050565b600080606083850312156124ef576124ee611f1f565b5b60006124fd85828601611f88565b925050602061250e85828601612488565b9150509250929050565b61252181612295565b82525050565b60408201600082015161253d6000850182612518565b5060208201516125506020850182612518565b50505050565b600060408201905061256b6000830184612527565b92915050565b61257a81612197565b811461258557600080fd5b50565b60008135905061259781612571565b92915050565b6000806000606084860312156125b6576125b5611f1f565b5b60006125c486828701612588565b93505060206125d586828701611f88565b92505060406125e686828701611f88565b9150509250925092565b6000806040838503121561260757612606611f1f565b5b600061261585828601611f88565b925050602061262685828601611f52565b9150509250929050565b6000806000806080858703121561264a57612649611f1f565b5b600061265887828801611f52565b945050602061266987828801611f52565b935050604061267a87828801611f52565b925050606061268b87828801611f52565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126cc81612197565b82525050565b6126db81611f67565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612721576127206126e1565b5b50565b600081905061273282612710565b919050565b600061274282612724565b9050919050565b61275281612737565b82525050565b60048110612769576127686126e1565b5b50565b600081905061277a82612758565b919050565b600061278a8261276c565b9050919050565b61279a8161277f565b82525050565b6127a9816121cb565b82525050565b610180820160008201516127c660008501826126c3565b5060208201516127d960208501826126d2565b5060408201516127ec60408501826126d2565b5060608201516127ff60608501826126d2565b50608082015161281260808501826126d2565b5060a082015161282560a08501826126d2565b5060c082015161283860c0850182612749565b5060e082015161284b60e0850182612518565b50610100820151612860610100850182612518565b50610120820151612875610120850182612791565b5061014082015161288a610140850182612518565b5061016082015161289f6101608501826127a0565b50505050565b60006128b183836127af565b6101808301905092915050565b6000602082019050919050565b60006128d682612697565b6128e081856126a2565b93506128eb836126b3565b8060005b8381101561291c57815161290388826128a5565b975061290e836128be565b9250506001810190506128ef565b5085935050505092915050565b6000602082019050818103600083015261294381846128cb565b905092915050565b61295481612737565b82525050565b6129638161277f565b82525050565b60006101808201905061297f600083018f6121a1565b61298c602083018e61230c565b612999604083018d61230c565b6129a6606083018c61230c565b6129b3608083018b61230c565b6129c060a083018a61230c565b6129cd60c083018961294b565b6129da60e08301886122a2565b6129e86101008301876122a2565b6129f661012083018661295a565b612a046101408301856122a2565b612a126101608301846121d7565b9d9c50505050505050505050505050565b60008060408385031215612a3a57612a39611f1f565b5b6000612a4885828601612473565b9250506020612a5985828601612473565b9150509250929050565b600060208284031215612a7957612a78611f1f565b5b6000612a8784828501611f52565b91505092915050565b60008060808385031215612aa757612aa6611f1f565b5b6000612ab585828601612488565b9250506040612ac685828601612488565b9150509250929050565b600082825260208201905092915050565b7f496e636f7272656374207061796d656e74000000000000000000000000000000600082015250565b6000612b17601183612ad0565b9150612b2282612ae1565b602082019050919050565b60006020820190508181036000830152612b4681612b0a565b9050919050565b7f4d696e74696e67206973206e6f74206163746976650000000000000000000000600082015250565b6000612b83601583612ad0565b9150612b8e82612b4d565b602082019050919050565b60006020820190508181036000830152612bb281612b76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bf38261210a565b91507f8000000000000000000000000000000000000000000000000000000000000000821415612c2657612c25612bb9565b5b816000039050919050565b6000612c3c82611f67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c6f57612c6e612bb9565b5b600182019050919050565b6000819050919050565b612c95612c9082611f67565b612c7a565b82525050565b60008160601b9050919050565b6000612cb382612c9b565b9050919050565b6000612cc582612ca8565b9050919050565b612cdd612cd882611f29565b612cba565b82525050565b6000612cef8286612c84565b602082019150612cff8285612c84565b602082019150612d0f8284612ccc565b601482019150819050949350505050565b6000612d2b82611f67565b9150612d3683611f67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d6f57612d6e612bb9565b5b828202905092915050565b6000612d8582611f67565b9150612d9083611f67565b925082821015612da357612da2612bb9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612de882611f67565b9150612df383611f67565b925082612e0357612e02612dae565b5b828204905092915050565b6000612e1982611f67565b9150612e2483611f67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e5957612e58612bb9565b5b828201905092915050565b7f42616420646972656374696f6e00000000000000000000000000000000000000600082015250565b6000612e9a600d83612ad0565b9150612ea582612e64565b602082019050919050565b60006020820190508181036000830152612ec981612e8d565b9050919050565b6000612edb82612295565b9150612ee683612295565b925082821015612ef957612ef8612bb9565b5b828203905092915050565b6000612f0f82612295565b9150612f1a83612295565b92508260ff03821115612f3057612f2f612bb9565b5b828201905092915050565b7f496e76616c696420646972656374696f6e000000000000000000000000000000600082015250565b6000612f71601183612ad0565b9150612f7c82612f3b565b602082019050919050565b60006020820190508181036000830152612fa081612f64565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115612ffe57808604811115612fda57612fd9612bb9565b5b6001851615612fe95780820291505b8081029050612ff785612fa7565b9450612fbe565b94509492505050565b60008261301757600190506130d3565b8161302557600090506130d3565b816001811461303b576002811461304557613074565b60019150506130d3565b60ff84111561305757613056612bb9565b5b8360020a91508482111561306e5761306d612bb9565b5b506130d3565b5060208310610133831016604e8410600b84101617156130a95782820a9050838111156130a4576130a3612bb9565b5b6130d3565b6130b68484846001612fb4565b925090508184048111156130cd576130cc612bb9565b5b81810290505b9392505050565b60006130e582611f67565b91506130f083611f67565b925061311d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613007565b905092915050565b600081905092915050565b7f50617965643a2000000000000000000000000000000000000000000000000000600082015250565b6000613166600783613125565b915061317182613130565b600782019050919050565b7f2c20636f73742069733a20000000000000000000000000000000000000000000600082015250565b60006131b2600b83613125565b91506131bd8261317c565b600b82019050919050565b60006131d382613159565b91506131df8285612c84565b6020820191506131ee826131a5565b91506131fa8284612c84565b6020820191508190509392505050565b600081519050919050565b60005b83811015613233578082015181840152602081019050613218565b83811115613242576000848401525b50505050565b60006132538261320a565b61325d8185612ad0565b935061326d818560208601613215565b613276816123d0565b840191505092915050565b6000602082019050818103600083015261329b8184613248565b905092915050565b7f436f6e7472616374206e6f7420616c6c6f776564000000000000000000000000600082015250565b60006132d9601483612ad0565b91506132e4826132a3565b602082019050919050565b60006020820190508181036000830152613308816132cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061334a8286612ccc565b60148201915061335a8285612c84565b60208201915061336a8284612c84565b602082019150819050949350505050565b600061338682611f67565b915061339183611f67565b9250826133a1576133a0612dae565b5b828206905092915050565b60006060820190506133c1600083018661230c565b6133ce602083018561230c565b6133db604083018461230c565b949350505050565b60006133ee8261210a565b91506133f98361210a565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561343457613433612bb9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561346c5761346b612bb9565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006134d3602683612ad0565b91506134de82613477565b604082019050919050565b60006020820190508181036000830152613502816134c6565b9050919050565b60008160000b9050919050565b600061352182613509565b915061352c83613509565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800182126000841215161561356757613566612bb9565b5b82607f0182136000841216156135805761357f612bb9565b5b828203905092915050565b7f4572726f723a204e6f742061646a6163656e7400000000000000000000000000600082015250565b60006135c1601383612ad0565b91506135cc8261358b565b602082019050919050565b600060208201905081810360008301526135f0816135b4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061362d602083612ad0565b9150613638826135f7565b602082019050919050565b6000602082019050818103600083015261365c81613620565b9050919050565b6000819050919050565b600061368861368361367e84613663565b611e9b565b611f67565b9050919050565b6136988161366d565b82525050565b6000819050919050565b60006136c36136be6136b98461369e565b611e9b565b611f67565b9050919050565b6136d3816136a8565b82525050565b60006060820190506136ee600083018661368f565b6136fb60208301856136ca565b61370860408301846120e0565b949350505050565b60008151905061371f81611f71565b92915050565b60006020828403121561373b5761373a611f1f565b5b600061374984828501613710565b91505092915050565b60008151905061376181612571565b92915050565b60006020828403121561377d5761377c611f1f565b5b600061378b84828501613752565b9150509291505056fea2646970667358221220bb75bb1316ee9d4f541636d0fb75801913ea2061aea9e69e8442ed8394b96a0a64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1031,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 211,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "lobbies",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LobbyInterface)160"
      },
      {
        "astId": 213,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "gamesContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 216,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "uif",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(UIFInterface)202"
      },
      {
        "astId": 218,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "actionsContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintCost",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 258,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "mintIsActive",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 262,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "allowedContract",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 265,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "randSeed",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 269,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "items",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Item)1012_storage)dyn_storage"
      },
      {
        "astId": 274,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "playerToItems",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 278,
        "contract": "contracts/BCItems.sol:BCItems",
        "label": "itemTraitModifiers",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Traits)956_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Item)1012_storage)dyn_storage": {
        "base": "t_struct(Item)1012_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Item[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Traits)956_storage)dyn_storage": {
        "base": "t_struct(Traits)956_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Traits[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LobbyInterface)160": {
        "encoding": "inplace",
        "label": "contract LobbyInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UIFInterface)202": {
        "encoding": "inplace",
        "label": "contract UIFInterface",
        "numberOfBytes": "20"
      },
      "t_enum(ItemCategory)980": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemCategory",
        "numberOfBytes": "1"
      },
      "t_enum(ItemType)985": {
        "encoding": "inplace",
        "label": "enum BCTypes.ItemType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(Item)1012_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Item",
        "members": [
          {
            "astId": 987,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "genHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 989,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 991,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "uifID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 993,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "holdingPlayerId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 995,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "weight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 997,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "traitModID",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1000,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemCategory",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ItemCategory)980"
          },
          {
            "astId": 1002,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsAbility",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1004,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "grantsFlaw",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1007,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "itemType",
            "offset": 3,
            "slot": "6",
            "type": "t_enum(ItemType)985"
          },
          {
            "astId": 1009,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "power",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1011,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "inGame",
            "offset": 5,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Traits)956_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Traits",
        "members": [
          {
            "astId": 943,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 945,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "carry",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 947,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "defense",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 949,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "hack",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 951,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "breach",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 953,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "shoot",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 955,
            "contract": "contracts/BCItems.sol:BCItems",
            "label": "melee",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}