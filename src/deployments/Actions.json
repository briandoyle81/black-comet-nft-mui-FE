{
  "address": "0x7ce0161823fA5206403a75895A35ac2aD169A908",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "playerIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "currentPlayerTurnIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numPlayers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "turnsTaken",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "bugEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "mysteryEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "scavEvents",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "shipEvents",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.EventTracker",
              "name": "eventTracker",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "mapContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "mapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventPlayerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eventNumber",
              "type": "uint256"
            },
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "eventPosition",
              "type": "tuple"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedBugEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedMysteryEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedScavEvents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unusedShipEvents",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct BCTypes.Game",
          "name": "game",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "charContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "int8",
              "name": "healthDmgTaken",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8",
              "name": "numItemsHeld",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "canHarmOthers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasEgg",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct BCTypes.Player",
          "name": "player",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "ActionCompleteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bcEvents",
      "outputs": [
        {
          "internalType": "contract EventsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "debugMovePlayerForTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "debugMovePlayerToRoom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.Followthrough",
          "name": "_followthrough",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_1stDirection",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_2ndDirection",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "doAction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "games",
      "outputs": [
        {
          "internalType": "contract GamesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "players",
      "outputs": [
        {
          "internalType": "contract PlayersInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gamesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eventsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6466a24a617a6ea5b66cc8d0913ffe89944297390febe8e4a8dea5ebc8c37d7",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x7ce0161823fA5206403a75895A35ac2aD169A908",
    "transactionIndex": 1,
    "gasUsed": "3076207",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000008000004000000000000000000020000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000004000000000000000000000000000000000000000000000000000200000000000000200080000000000000000000000000000000000000000004010000000000000000001000000000100000000000000000000100000000020000800000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x8c5148546cc3fa9b4eabe6fc05f3b01acdba35bb34be3925740976837fe1e1eb",
    "transactionHash": "0xc6466a24a617a6ea5b66cc8d0913ffe89944297390febe8e4a8dea5ebc8c37d7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32421700,
        "transactionHash": "0xc6466a24a617a6ea5b66cc8d0913ffe89944297390febe8e4a8dea5ebc8c37d7",
        "address": "0x7ce0161823fA5206403a75895A35ac2aD169A908",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x8c5148546cc3fa9b4eabe6fc05f3b01acdba35bb34be3925740976837fe1e1eb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32421700,
        "transactionHash": "0xc6466a24a617a6ea5b66cc8d0913ffe89944297390febe8e4a8dea5ebc8c37d7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000593ad0a588f7980000000000000000000000000000000000000000000000001b7a561b372caa98000000000000000000000000000000000000000000000282c10fd554ffc81ef00000000000000000000000000000000000000000000000001b211b4a91a3b300000000000000000000000000000000000000000000000282c1691025a5511688",
        "logIndex": 4,
        "blockHash": "0x8c5148546cc3fa9b4eabe6fc05f3b01acdba35bb34be3925740976837fe1e1eb"
      }
    ],
    "blockNumber": 32421700,
    "cumulativeGasUsed": "3153120",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e4fa0a5ba7575f2f162947b2f1a14db2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"playerIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnsTaken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bugEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mysteryEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scavEvents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shipEvents\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.EventTracker\",\"name\":\"eventTracker\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"mapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventPlayerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"eventPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedBugEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedMysteryEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedScavEvents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unusedShipEvents\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct BCTypes.Game\",\"name\":\"game\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"int8\",\"name\":\"healthDmgTaken\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"numItemsHeld\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasEgg\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BCTypes.Player\",\"name\":\"player\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"ActionCompleteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bcEvents\",\"outputs\":[{\"internalType\":\"contract EventsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"debugMovePlayerForTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"debugMovePlayerToRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.Followthrough\",\"name\":\"_followthrough\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_1stDirection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_2ndDirection\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GamesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"players\",\"outputs\":[{\"internalType\":\"contract PlayersInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gamesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eventsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Actions.sol\":\"Actions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Actions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCEvents.sol\\\";\\n\\ninterface CharInterface {\\n    function characters(uint _id) external view returns(BCTypes.Character memory);\\n    function incrementCloneNumber(uint _charId) external;\\n}\\n\\ninterface UtilsInterface {\\n    // function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    // function roll(uint _gameId) external returns (uint);\\n    // function abs(int x) external pure returns(int);\\n    // function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n    function resolveChallenge(uint _gameId, uint _for, uint _against) external returns(bool);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n    function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) external view returns (BCTypes.GameTile memory);\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) external view returns (BCTypes.Door memory);\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status, uint _strength) external;\\n    function resetOpenDoors(uint _mapId) external;\\n    function setLooted(uint _mapId, uint _row, uint _col) external;\\n    function extGetRoom(uint _mapId, uint _row, uint _col) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface GamesInterface {\\n    function extGetGame(uint _id) external view returns(BCTypes.Game memory);\\n    function extMovePlayer(uint _mapId, BCTypes.Position memory _position, uint _playerId) external;\\n    function endPlayerAction(uint _gameId, uint _playerId, bool _free) external;\\n    function extGetWorldItems(uint[] calldata _ids) external view returns(BCTypes.WorldItem[] memory);\\n}\\n\\ninterface ItemsInterface {\\n    function lootItem(uint _holdingPlayerId, address _holderAddress) external payable;\\n    function spawnWorldItems(uint _gameId, uint[] memory _itemIds, uint _row, uint _col, uint _formerOwnerId) external;\\n    function pickupWorldItems(uint _playerId, uint[] calldata _itemIds, address _newOwnerAddress) external;\\n}\\n\\ninterface EventsInterface {\\n    function extGetRoomEvent(uint _id) external view returns (BCEvents.BCEvent memory);\\n    function extGetCardEvent(uint _id) external view returns (BCEvents.BCEvent memory);\\n    function extGetEffects(bool _roomEvent, uint _id) external view returns (BCEvents.Effect[][] memory);\\n    function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) external view returns (BCTypes.Traits memory);\\n}\\n\\ninterface PlayersInterface {\\n    function grantDataToPlayer(uint _playerId, uint8 amount) external;\\n    function extApplyEffect(uint _playerId, uint _gameId, uint _mapId, BCTypes.Position memory _position, uint _eventId, uint _effectNum) external;\\n    function extGetPlayer(uint _id) external view returns(BCTypes.Player memory);\\n    function incrementNumItemsHeld(uint _playerId, uint _num) external;\\n    function decrementNumItemsHeld(uint _playerId, uint _num) external;\\n}\\n\\ncontract Actions is Ownable {\\n\\n    CharInterface public chars;\\n    UtilsInterface public utils;\\n    MapInterface public maps;\\n    GamesInterface public games;\\n    ItemsInterface public items;\\n    EventsInterface public bcEvents;\\n    PlayersInterface public players;\\n\\n    address public charsAddress;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _utilsAddress,\\n        address _mapsAddress,\\n        address _gamesAddress,\\n        address _itemsAddress,\\n        address _eventsAddress,\\n        address _playersAddress)\\n        public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        maps = MapInterface(_mapsAddress);\\n        games = GamesInterface(_gamesAddress);\\n        items = ItemsInterface(_itemsAddress);\\n        bcEvents = EventsInterface(_eventsAddress);\\n        players = PlayersInterface(_playersAddress);\\n    }\\n    // TODO: Add gameId and PlayerId\\n    // TODO: Probably add map and all players to get update in FE\\n    event ActionCompleteEvent(uint gameId, BCTypes.Game game, uint playerId, BCTypes.Player player, BCTypes.Action action);\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3; // TODO: Duped in BCGames.sol\\n\\n    uint constant START_ROOM_ID = 2; // TODO: Duplicated in BCMaps.sol\\n    uint8 constant UNDISCOVERED_ROOM = 1;\\n\\n    uint constant ITEM_COST = 100 gwei;  // TODO: Duplicated in UniversalInventory\\n\\n    // TODO: Decompose\\n    function doAction(\\n        uint _gameId,\\n        uint _playerId,\\n        BCTypes.Action _action,\\n        BCTypes.Followthrough _followthrough,\\n        // Using room positions requires more checks, try to avoid\\n        // Position memory _roomPos, // For followthrough move, shoot, etc.\\n        uint _1stDirection, // NSEW 4==in room\\n        uint _2ndDirection, // NSEW 4==in room\\n        uint[] memory _ids\\n        ) public payable\\n    {\\n        // Universal requirements for all actions\\n        // TODO: CRITICAL -> Make sure game exists and id is correct!\\n        // TODO: Player must not be dead!\\n        // TODO: Optimize?  Would it actually be better to make a local copy of the player stats?\\n        // TODO: Optimize:  Since using memory now, explore just getting what is needed\\n        // TODO: WHY DO I NEED EXT FOR PLAYER AND GAME BUT NOT CHAR?????\\n        BCTypes.Player memory currentPlayer = players.extGetPlayer(_playerId);\\n        BCTypes.Game memory currentGame = games.extGetGame(_gameId); // Games are huge, get less\\n        BCTypes.Character memory currentChar = chars.characters(currentPlayer.characterId);\\n\\n        require(currentGame.eventNumber == 0, \\\"Must resolve event first\\\");\\n        require(currentGame.active, \\\"Game not active\\\");\\n        require(msg.sender == currentPlayer.owner, \\\"Sender not player owner\\\");\\n        require(currentPlayer.actionsTaken < DEFAULT_ACTIONS_NUM, \\\"No actions left\\\"); // TODO: Confirm this won't ever trigger // TODO: Get effects and items\\n        // TODO: Validate if the below also sufficiently confirms the player is in this game\\n        require(_playerId == currentGame.playerIndexes[currentGame.currentPlayerTurnIndex], \\\"Not your turn\\\");\\n\\n        bool free = false;\\n        // TODO: Add respawn action for living or dead players\\n        // TODO: Require player to drop items before any other actions if holding too many\\n        // TODO: Check for value here?\\n        if (_action == BCTypes.Action.PASS) {\\n            // TODO: Account for abilities and items increasing 'carry' trait\\n            // TODO: DRY\\n            require(int8(currentPlayer.numItemsHeld) <= currentChar.traits.carry, \\\"Holding too many items\\\");\\n\\n            // Do nothing\\n            // console.log(\\\"IN CONTRACT player passed\\\");\\n        } else if (_action == BCTypes.Action.MOVE) {\\n            // TODO: Account for abilities and items increasing 'carry' trait\\n            // TODO: DRY\\n            require(int8(currentPlayer.numItemsHeld) <= currentChar.traits.carry, \\\"Holding too many items\\\");\\n\\n            // Main move\\n            // TODO: Handle using door number 4 to represent in room and DRY\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    firstRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    firstRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"1st Door not open/breached/unlocked\\\");\\n\\n            if(firstRefDoor.status == BCTypes.DoorStatus.CLOSED) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.OPEN,\\n                    0);\\n            }\\n\\n            BCTypes.Position memory targetRoomPos = utils.getNeighborRoom(_1stDirection, currentPlayer.position);\\n\\n            // Followthrough\\n            if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                BCTypes.Position memory secondRoom = utils.getNeighborRoom(_2ndDirection, targetRoomPos);\\n                BCTypes.Door memory secondRefDoor = maps.getDoor(currentGame.mapId, targetRoomPos.row, targetRoomPos.col, _2ndDirection);\\n                require(secondRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    secondRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    secondRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"2nd Door not open/breached/unlocked\\\");\\n\\n                BCTypes.GameTile[][] memory currentMap = maps.extGetBoard(currentGame.mapId);\\n                require(currentMap[targetRoomPos.row][targetRoomPos.col].roomId > START_ROOM_ID, \\\"Room not explored\\\");\\n\\n                if(secondRefDoor.status == BCTypes.DoorStatus.CLOSED) {\\n                    maps.setDoorFromPos(\\n                        currentGame.mapId,\\n                        targetRoomPos.row,\\n                        targetRoomPos.col,\\n                        _2ndDirection,\\n                        BCTypes.DoorStatus.OPEN,\\n                        0);\\n                }\\n                targetRoomPos = secondRoom;\\n            }\\n            games.extMovePlayer(_gameId, targetRoomPos, _playerId);\\n\\n        } else if (_action == BCTypes.Action.HACK) {\\n            // TODO: Account for abilities and items increasing 'carry' trait\\n            // TODO: DRY\\n            require(int8(currentPlayer.numItemsHeld) <= currentChar.traits.carry, \\\"Holding too many items\\\");\\n\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n\\n            if (utils.resolveChallenge(_gameId, uint8(currentChar.traits.hack), firstRefDoor.vsHack)) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.OPEN,\\n                    0);\\n                // TODO: DRY - consolidate with breach\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    games.extMovePlayer(\\n                        _gameId,\\n                        utils.getNeighborRoom(_1stDirection, currentPlayer.position),\\n                        _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n            }\\n        } else if (_action == BCTypes.Action.BREACH) {\\n            // TODO: Account for abilities and items increasing 'carry' trait\\n            // TODO: DRY\\n            require(int8(currentPlayer.numItemsHeld) <= currentChar.traits.carry, \\\"Holding too many items\\\");\\n\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n            if (utils.resolveChallenge(_gameId, uint8(currentChar.traits.breach), firstRefDoor.vsBreach)) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.BREACHED,\\n                    0);\\n                // TODO: DRY - consolidate with hack\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    games.extMovePlayer(\\n                        _gameId,\\n                        utils.getNeighborRoom(_1stDirection, currentPlayer.position),\\n                        _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n                // TODO: Handle breaching into space\\n            }\\n        } else if(_action == BCTypes.Action.LOOT) {\\n            // TODO: Should cost an action if an enemy is present\\n            free = true;\\n            BCTypes.GameTile memory currentTile = maps.extGetGameTile(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            require(currentTile.looted == false, \\\"Room already looted\\\");\\n\\n            BCTypes.RoomTile memory currentRoomTile = maps.extGetRoom(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            require((currentRoomTile.numData > 0 || currentRoomTile.numItems > 0), \\\"Can't loot empty room\\\");\\n            require(msg.value == currentRoomTile.numItems * ITEM_COST, \\\"Wrong payment in actions\\\");\\n            maps.setLooted(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n\\n            players.grantDataToPlayer(_playerId, currentRoomTile.numData);\\n\\n            for(uint i = 0; i < currentRoomTile.numItems; i++) {\\n                // TODO: Confirm this is ok because I control destination address\\n                items.lootItem{value: 100 gwei}(_playerId, currentPlayer.owner);\\n            }\\n            players.incrementNumItemsHeld(_playerId, currentRoomTile.numItems);\\n        } else if(_action == BCTypes.Action.USE_ROOM) {\\n            // TODO: Account for abilities and items increasing 'carry' trait\\n            // TODO: DRY\\n            require(int8(currentPlayer.numItemsHeld) <= currentChar.traits.carry, \\\"Holding too many items\\\");\\n\\n            // BCTypes.GameTile memory currentTile = maps.extGetGameTile(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            BCTypes.RoomTile memory currentRoom = maps.extGetRoom(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            BCEvents.BCEvent memory currentEvent = bcEvents.extGetRoomEvent(currentRoom.eventNum);\\n\\n            require(currentEvent.permanent == true, \\\"Event not permanent\\\");\\n            // TODO: Require room has no enemies (and decide if this is for some or all)\\n            // TODO: Confirm this will always be default effect\\n            players.extApplyEffect(_playerId, _gameId, currentGame.mapId, currentPlayer.position,currentRoom.eventNum, 0);\\n        } else if(_action == BCTypes.Action.USE_ITEM) {\\n            // TODO: Account for abilities and items increasing 'carry' trait\\n            // TODO: DRY\\n            require(int8(currentPlayer.numItemsHeld) <= currentChar.traits.carry, \\\"Holding too many items\\\");\\n\\n            // TODO: IMPLEMENT\\n        } else if(_action == BCTypes.Action.DROP_ITEMS) {\\n            // _ids are BCItmes.items[id]\\n            // TODO: CRITICAL -> Player must have items to drop them\\n            // TODO: Should cost an action if an enemy is present\\n            free = true;\\n\\n            players.decrementNumItemsHeld(_playerId, _ids.length);\\n            items.spawnWorldItems(_gameId, _ids, currentPlayer.position.row, currentPlayer.position.col, _playerId);\\n        } else if(_action == BCTypes.Action.PICK_ITEMS) {\\n            // _ids are worldItem[id]\\n            BCTypes.WorldItem[] memory worldItems = games.extGetWorldItems(_ids);\\n            for(uint i = 0; i < worldItems.length; i++) {\\n                // Require items are where the player is\\n                require(currentPlayer.position.row == worldItems[i].position.row, \\\"Player not at item\\\");\\n                require(currentPlayer.position.col == worldItems[i].position.col, \\\"Player not at item\\\");\\n                // Require item is KNOW or UNKNOWN\\n                // This one is probably redudant assuming I move destroyed or discarded items to somewhere safe\\n                require(worldItems[i].status == BCTypes.WorldItemStatus.UNKNOWN ||\\n                        worldItems[i].status == BCTypes.WorldItemStatus.KNOWN,\\n                        \\\"Item is discarded or destroyed\\\");\\n\\n                // TODO: CRITICAL -> Item must be in this game (DON'T ONLY USE _gameId, user provided value!!!)\\n                require(worldItems[i].gameId == _gameId, \\\"Item not in this game\\\");\\n                require(worldItems[i].status != BCTypes.WorldItemStatus.UNKNOWN, \\\"Unknown items not yet implemented\\\");\\n            }\\n\\n            // TODO: Handle minting an item if it is UNKNOWN\\n            // TODO: Should cost an action if an enemy is present\\n            free = true;\\n            players.incrementNumItemsHeld(_playerId, _ids.length);\\n\\n            items.pickupWorldItems(_playerId, _ids, currentPlayer.owner);\\n\\n        } else {\\n            revert(\\\"ERROR: Bad action config\\\");\\n        }\\n\\n        games.endPlayerAction(_gameId, _playerId, free);\\n        emit ActionCompleteEvent(_gameId, currentGame, _playerId, currentPlayer, _action);\\n    }\\n\\n    // Move player to 0,0 for various mechanic tests\\n    function debugMovePlayerForTesting(uint _gameId, uint _playerId) public onlyOwner {\\n        games.extMovePlayer(_gameId, BCTypes.Position(0, 0), _playerId);\\n    }\\n\\n    function debugMovePlayerToRoom(uint _gameId, uint _playerId, uint _row, uint _col) public onlyOwner {\\n        games.extMovePlayer(_gameId, BCTypes.Position(uint8(_row), uint8(_col)), _playerId);\\n    }\\n}\\n\",\"keccak256\":\"0x5bcc88e6383c1d0976ed94e208b7cbbd1e40e7fa0afe4d342b714331c0b2a8c7\",\"license\":\"UNLICENSED\"},\"contracts/BCEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// Stores information for events that happen in a specific room or from a card\\n// TODO: Consider splitting this by event type\\n// TODO: CRITICAL -> Unit tests for event and effect validity\\ncontract BCEvents is Ownable {\\n\\n    enum EnemyPlacement { NONE, IN_ROOM, LAST_ROOM, ALL_ADJACENT }\\n    enum MovePlayer { NONE, HOME, LAST_ROOM, RANDOM, PORTAL, REACTOR }\\n    enum EnemyType { NONE, TURRET, ROBOT, SCAV, BUG }\\n    // ENEMY Types: 0 - turret, 1 - robot, 2 - scav, 3 - bug\\n\\n    enum EffectTypes {\\n        empty,\\n\\n        permanant,\\n        fullHealth,\\n        instantDeath,\\n        placeHazard,\\n        grantEgg,\\n\\n        healAmt,\\n        healArmorAmt,\\n        hazardDamage,\\n        physicalDamage,\\n\\n        numEnemyToPlace,\\n        enemyType,\\n        whereToPlace,\\n\\n        grantData,\\n        grantNumItems,\\n        takeNumItems,\\n        dropNumItems, // drop items in the room in unknown state\\n\\n        moveType,\\n        trapPlayerEscapeRoll,\\n        grantAbility,\\n\\n        loseTurn,\\n\\n        lockDoorStrength,\\n\\n        traitModifiersID\\n    }\\n\\n    // Effects are mapped by the effect type to an int:\\n    // CRITICAL:  1 == true, not present is false\\n    // Numbers are cast to enum as above\\n    // Uint effects are as normal\\n\\n    struct Effect {\\n        EffectTypes effect;\\n        uint value;\\n    }\\n\\n    struct BCEvent {\\n        // TODO: Only a one-time cost to put this here, probably leave for ease\\n        // TODO: Except there is probably a cost to read it from the chain, remove\\n        // TODO: and replace name and text with a unique ID\\n        // string name;\\n        // string text;\\n        uint id; // TODO: Eval system, for now X000NN is for cards and 2000NN is for tiles\\n        // TODO: Change below to a number to serve as turns allowed?\\n        bool permanent; // Draw card before use allowed.  As an action - both can be derived from this\\n                        // TODO: Permanent events conflict with and prevent card events in a room, this upsets balance!\\n        uint8 rollForLow;  // On or below (unused if zero)\\n        uint8 rollForHigh; // On or above (unused if zero)\\n                           // If both roll items are zero, player can choose any non\\n        Effect[] defaultEffect;  // TODO: Eval doing it this way vs. using index and storing in array\\n        Effect[] lowEffect;\\n        Effect[] highEffect;\\n    }\\n\\n    Effect[][] public effectsList; // Used to support creating empty Effects // TODO: Is this the best pattern?\\n\\n    BCEvent[] public bcRoomEvents;\\n\\n    BCEvent[] public bcBugCardEvents;\\n    BCEvent[] public bcMysteryCardEvents;\\n    BCEvent[] public bcScavCardEvents;\\n    BCEvent[] public bcShipCardEvents;\\n\\n    constructor() {\\n        effectsList.push(); // Push empty effect into [0], but this is probably unnecessary\\n        _initializeDefaultRoomEvents();\\n        _initializeDefaultRoomEvents_2();\\n        _initializeDefaultBugCardEvents();\\n        _initializeDefaultMysteryCardEvents();\\n        _initializeDefaultScavCardEvents();\\n        _initializeDefaultShipCardEvents();\\n    }\\n\\n    function extGetRoomEvent(uint _id) public view returns (BCEvent memory) {\\n        return bcRoomEvents[_id];\\n    }\\n\\n    function extGetCardEvent(uint _id, BCTypes.BCEventType _type) public view returns (BCEvent memory) {\\n        if(_type == BCTypes.BCEventType.BUG) {\\n            return bcBugCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.MYSTERY) {\\n            return bcMysteryCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SCAVENGER) {\\n            return bcScavCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.SHIP_SECURITY) {\\n            return bcShipCardEvents[_id];\\n        } else if (_type == BCTypes.BCEventType.NONE) {\\n            // Return an empty event\\n            // TODO: check for side effects of type\\n            return bcBugCardEvents[0];\\n        } else {\\n            console.log(\\\"Bad Event of type:\\\", uint(_type));\\n            revert(\\\"Bad event type\\\");\\n        }\\n    }\\n\\n    function extGetEffects(BCTypes.BCEventType _eventType, uint _id) public view returns (Effect[][] memory) {\\n        // TODO: Hardcoded length??\\n        Effect[][] memory currentEffects = new Effect[][](3);\\n        BCEvent storage currentEvent;\\n        if(_eventType == BCTypes.BCEventType.ROOM) {\\n            currentEvent = bcRoomEvents[_id];\\n        } else {\\n            if(_eventType == BCTypes.BCEventType.BUG) {\\n                currentEvent = bcBugCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.MYSTERY) {\\n                currentEvent = bcMysteryCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SCAVENGER) {\\n                currentEvent = bcScavCardEvents[_id];\\n            } else if (_eventType == BCTypes.BCEventType.SHIP_SECURITY) {\\n                currentEvent = bcShipCardEvents[_id];\\n            } else {\\n                revert(\\\"Bad event type\\\");\\n            }\\n        }\\n\\n        currentEffects[0] = currentEvent.defaultEffect;\\n        // TODO: This is ineffecient if most effects don't have all three\\n        currentEffects[1] = currentEvent.lowEffect;\\n        currentEffects[2] = currentEvent.highEffect;\\n\\n        return currentEffects;\\n    }\\n\\n    // TODO: REFACTOR WHEN TRAIT MOD SYSTEM IMPLEMENTED!!!\\n    // For _effect 0 -> default, 1 -> low, 2-> high\\n    // function extGetTraitModForEffect(bool _roomEvent, uint _id, uint _effect) public view returns (BCTypes.Traits memory) {\\n    //     BCEvent storage currentEvent;\\n    //     if(_roomEvent) {\\n    //         currentEvent = bcRoomEvents[_id];\\n    //     } else {\\n    //         currentEvent = bcCardEvents[_id];\\n    //     }\\n\\n    //     if(_effect == 0) {\\n    //         return currentEvent.defaultEffect.traitModifiers;\\n    //     } else if (_effect == 1) {\\n    //         return currentEvent.lowEffect.traitModifiers;\\n    //     } else if (_effect == 2) {\\n    //         return currentEvent.highEffect.traitModifiers;\\n    //     } else {\\n    //         revert (\\\"Effect must be 0, 1, or 2\\\");\\n    //     }\\n    // }\\n\\n    function _initializeDefaultBugCardEvents() internal {\\n        // Effect[] storage emptyEffect = effectsList[0];\\n\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcBugCardEvents.push();\\n        noEvent.id = 0;\\n        // noEvent.permanent = false;\\n        // noEvent.rollForLow = 0;\\n        // noEvent.rollForHigh = 0;\\n\\n        // noEvent.defaultEffect = emptyEffect;\\n        // noEvent.lowEffect = emptyEffect;\\n        // noEvent.highEffect = emptyEffect;\\n\\n        // 1 There's Something in the Walls\\n        // TODO\\n        Effect[] storage somethingInWallsDefault = effectsList.push();\\n        somethingInWallsDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        somethingInWallsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        somethingInWallsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage somethingInWalls = bcBugCardEvents.push();\\n        somethingInWalls.id = 300001; // Bug events start with 3\\n        somethingInWalls.permanent = false;\\n        // somethingInWalls.rollForLow = 0;\\n        // somethingInWalls.rollForHigh = 0; //TODO: Can save gas/space not doing this, but less explicit\\n\\n        somethingInWalls.defaultEffect = somethingInWallsDefault;\\n        // somethingInWalls.lowEffect = emptyEffect;\\n        // somethingInWalls.highEffect = emptyEffect;\\n\\n        // 2 Something Bit Me // TODO: Appears not to hurt player\\n        Effect[] storage somethingBitMeDefault = effectsList.push();\\n        somethingBitMeDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n\\n        BCEvent storage somethingBitMe = bcBugCardEvents.push();\\n        somethingBitMe.id = 300002;\\n        somethingBitMe.permanent = false;\\n        // somethingBitMe.rollForLow = 0;\\n        // somethingBitMe.rollForHigh = 0;\\n\\n        somethingBitMe.defaultEffect = somethingBitMeDefault;\\n        // somethingBitMe.lowEffect = emptyEffect;\\n        // somethingBitMe.highEffect = emptyEffect;\\n\\n        // 3 Game Over Man, Game Over!\\n        // TODO\\n        Effect[] storage gameOverDefault = effectsList.push();\\n        gameOverDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage gameOver = bcBugCardEvents.push();\\n        gameOver.id = 300003;\\n        gameOver.permanent = false;\\n        // gameOver.rollForLow = 0;\\n        // gameOver.rollForHigh = 0;\\n\\n        gameOver.defaultEffect = gameOverDefault;\\n        // gameOver.lowEffect = emptyEffect;\\n        // gameOver.highEffect = emptyEffect;\\n\\n        // 4 Packrat\\n        Effect[] storage packratDefault = effectsList.push();\\n        packratDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage packrat = bcBugCardEvents.push();\\n        packrat.id = 300004;\\n        packrat.permanent = false;\\n        // packrat.rollForLow = 0;\\n        // packrat.rollForHigh = 0;\\n\\n        packrat.defaultEffect = packratDefault;\\n        // packrat.lowEffect = emptyEffect;\\n        // packrat.highEffect = emptyEffect;\\n\\n        // 5 What is this stuff?\\n        // TODO\\n        Effect[] storage whatIsThisDefault = effectsList.push();\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: Ignored by bugs\\n        whatIsThisDefault.push(Effect(EffectTypes.grantAbility, 0)); // TODO: -1 to all rolls\\n\\n        BCEvent storage whatIsThis = bcBugCardEvents.push();\\n        whatIsThis.id = 300005;\\n        whatIsThis.permanent = false;\\n        // whatIsThis.rollForLow = 0;\\n        // whatIsThis.rollForHigh = 0;\\n\\n        whatIsThis.defaultEffect = whatIsThisDefault;\\n\\n        // 6 Packrat Nest\\n        // TODO\\n        Effect[] storage packratNestDefault = effectsList.push();\\n        packratNestDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage packratNest = bcBugCardEvents.push();\\n        packratNest.id = 300006;\\n        packratNest.permanent = false;\\n\\n        packratNest.defaultEffect = packratNestDefault;\\n\\n        // 7 Clever Girls\\n        // TODO\\n        Effect[] storage cleverGirlsDefault = effectsList.push();\\n        cleverGirlsDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        cleverGirlsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        cleverGirlsDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM)));\\n\\n        BCEvent storage cleverGirls = bcBugCardEvents.push();\\n        cleverGirls.id = 300007;\\n\\n        cleverGirls.defaultEffect = cleverGirlsDefault;\\n\\n        // 8 Warrior\\n        // TODO\\n        Effect[] storage warriorDefault = effectsList.push();\\n        warriorDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        warriorDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        warriorDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage warrior = bcBugCardEvents.push();\\n        warrior.id = 300008;\\n\\n        warrior.defaultEffect = warriorDefault;\\n\\n        // 9 Good Girl\\n        // TODO\\n        Effect[] storage goodGirlDefault = effectsList.push();\\n        goodGirlDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage goodGirl = bcBugCardEvents.push();\\n        goodGirl.id = 300009;\\n\\n        goodGirl.defaultEffect = goodGirlDefault;\\n\\n        // 10 What's that Smell?\\n        Effect[] storage whatsThatSmellDefault = effectsList.push();\\n        whatsThatSmellDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        whatsThatSmellDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage whatsThatSmell = bcBugCardEvents.push();\\n        whatsThatSmell.id = 300010;\\n\\n        whatsThatSmell.defaultEffect = whatsThatSmellDefault;\\n\\n        // 11 Spider's Web\\n        // TODO\\n        Effect[] storage spidersWebDefault = effectsList.push();\\n        spidersWebDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        spidersWebDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage spidersWebLow = effectsList.push();\\n        spidersWebLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        spidersWebLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        spidersWebLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage spidersWebHigh = effectsList.push();\\n        spidersWebHigh.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage spidersWeb = bcBugCardEvents.push();\\n        spidersWeb.id = 300011;\\n        spidersWeb.rollForLow = 1;\\n        spidersWeb.rollForHigh = 6;\\n\\n        spidersWeb.defaultEffect = spidersWebDefault;\\n        spidersWeb.lowEffect = spidersWebLow;\\n        spidersWeb.highEffect = spidersWebHigh;\\n\\n        // 12 Something is following me...\\n        // TODO\\n        Effect[] storage followingMeDefault = effectsList.push();\\n        followingMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        followingMeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        followingMeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.LAST_ROOM)));\\n\\n        BCEvent storage followingMe = bcBugCardEvents.push();\\n        followingMe.id = 300012;\\n\\n        followingMe.defaultEffect = followingMeDefault;\\n\\n        // 13 Sneak Attack\\n        Effect[] storage sneakAttackDefault = effectsList.push();\\n        sneakAttackDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        sneakAttackDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        sneakAttackDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage sneakAttack = bcBugCardEvents.push();\\n        sneakAttack.id = 300013;\\n\\n        sneakAttack.defaultEffect = sneakAttackDefault;\\n\\n        // 14 Feeding Time\\n        // TODO\\n        Effect[] storage feedingTimeDefault = effectsList.push();\\n        feedingTimeDefault.push(Effect(EffectTypes.dropNumItems, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        feedingTimeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        feedingTimeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage feedingTime = bcBugCardEvents.push();\\n        feedingTime.id = 300014;\\n\\n        feedingTime.defaultEffect = feedingTimeDefault;\\n\\n        // 15 Pardon m---aaaaah!\\n        Effect[] storage pardonMeDefault = effectsList.push();\\n        pardonMeDefault.push(Effect(EffectTypes.moveType, uint(MovePlayer.LAST_ROOM)));\\n        pardonMeDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        pardonMeDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        pardonMeDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage pardonMe = bcBugCardEvents.push();\\n        pardonMe.id = 300015;\\n\\n        pardonMe.defaultEffect = pardonMeDefault;\\n    }\\n\\n    function _initializeDefaultMysteryCardEvents() internal {\\n        BCEvent storage noEvent = bcMysteryCardEvents.push();\\n        noEvent.id = 0;\\n\\n        // 1 Mesmer\\n        Effect[] storage mesmerDefault = effectsList.push();\\n        mesmerDefault.push(Effect(EffectTypes.loseTurn, 1));\\n\\n        BCEvent storage mesmer = bcMysteryCardEvents.push();\\n        mesmer.id = 400001;\\n\\n        mesmer.defaultEffect = mesmerDefault;\\n\\n        // 2 Portal\\n        // TODO\\n        Effect[] storage portalDefault = effectsList.push();\\n        portalDefault.push(Effect(EffectTypes.moveType, uint(MovePlayer.PORTAL)));\\n\\n        BCEvent storage portal = bcMysteryCardEvents.push();\\n        portal.id = 400002;\\n\\n        portal.defaultEffect = portalDefault;\\n\\n        // 3 The Kirk Method\\n        // TODO\\n        Effect[] storage kirkMethodDefault = effectsList.push();\\n        kirkMethodDefault.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        Effect[] storage kirkMethodLow = effectsList.push();\\n        kirkMethodLow.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        // TODO: Add ability -1 to all rolls\\n\\n        Effect[] storage kirkMethodHigh = effectsList.push();\\n        kirkMethodHigh.push(Effect(EffectTypes.loseTurn, 1)); // TODO: This should be a two dice event\\n        kirkMethodHigh.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage kirkMethod = bcMysteryCardEvents.push();\\n        kirkMethod.id = 400003;\\n\\n        kirkMethod.defaultEffect = kirkMethodDefault;\\n        kirkMethod.lowEffect = kirkMethodLow;\\n        kirkMethod.highEffect = kirkMethodHigh;\\n\\n        // 4 Brownie\\n        // TODO: This is a choice event, choices are not implemented\\n        Effect[] storage brownieDefault = effectsList.push();\\n\\n        BCEvent storage brownie = bcMysteryCardEvents.push();\\n        brownie.id = 400004;\\n\\n        brownie.defaultEffect = brownieDefault;\\n\\n        // 5 I gotta get out of here!\\n        // TODO\\n        Effect[] storage getOutDefault = effectsList.push();\\n        getOutDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        // getOutDefault.push(Effect()) // TODO: Move player to nearest window or reeval.  This would be expensive to bfs.\\n\\n        BCEvent storage getOut = bcMysteryCardEvents.push();\\n        getOut.id = 400005;\\n\\n        getOut.defaultEffect = getOutDefault;\\n\\n        // 6 Incident Boundry\\n        // TODO\\n        Effect[] storage incidentBoundryDefault = effectsList.push();\\n        incidentBoundryDefault.push(Effect(EffectTypes.physicalDamage, 1)); // TODO: Should armor prevent this?\\n\\n        BCEvent storage incidentBoundry = bcMysteryCardEvents.push();\\n        incidentBoundry.id = 400006;\\n\\n        incidentBoundry.defaultEffect = incidentBoundryDefault;\\n\\n        // 7 Fugue State\\n        // TODO: May need to replace this one, very complicated to implement, meaningless single player\\n        Effect[] storage fugueStateDefault = effectsList.push();\\n\\n        BCEvent storage fugueState = bcMysteryCardEvents.push();\\n        fugueState.id = 400007;\\n\\n        fugueState.defaultEffect = fugueStateDefault;\\n\\n        // 8 Horror\\n        // TODO: Another challenging event to implement, would need BFS and custom code to break doors, and move player there\\n        Effect[] storage horrorDefault = effectsList.push();\\n\\n        BCEvent storage horror = bcMysteryCardEvents.push();\\n        horror.id = 400008;\\n\\n        horror.defaultEffect = horrorDefault;\\n\\n        // 9 Voices\\n        // TODO\\n        Effect[] storage voicesDefault = effectsList.push();\\n\\n        BCEvent storage voices = bcMysteryCardEvents.push();\\n        voices.id = 400009;\\n\\n        voices.defaultEffect = voicesDefault;\\n\\n        // 10 The Lottery\\n        Effect[] storage lotteryDefault = effectsList.push();\\n\\n        Effect[] storage lotteryLow = effectsList.push();\\n        lotteryLow.push(Effect(EffectTypes.instantDeath, 1));\\n\\n        BCEvent storage lottery = bcMysteryCardEvents.push();\\n        lottery.id = 400010;\\n        lottery.rollForLow = 1;\\n\\n        lottery.defaultEffect = lotteryDefault;\\n        lottery.lowEffect = lotteryLow;\\n\\n        // 11 Missing Numbers\\n        // TODO\\n        Effect[] storage missingNumbersDefault = effectsList.push();\\n\\n        Effect[] storage missingNumbersLow = effectsList.push();\\n\\n        Effect[] storage missingNumbersHigh = effectsList.push();\\n\\n        BCEvent storage missingNumbers = bcMysteryCardEvents.push();\\n        missingNumbers.id = 400011;\\n        missingNumbers.rollForLow = 1;\\n        missingNumbers.rollForHigh = 6;\\n\\n        missingNumbers.defaultEffect = missingNumbersDefault;\\n        missingNumbers.lowEffect = missingNumbersLow;\\n        missingNumbers.highEffect = missingNumbersHigh;\\n\\n        // 12 Tesseract\\n        // TODO\\n        Effect[] storage tesseractDefault = effectsList.push();\\n        tesseractDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage tesseract = bcMysteryCardEvents.push();\\n        tesseract.id = 400012;\\n\\n        tesseract.defaultEffect = tesseractDefault;\\n\\n        // 13 Glitch In the Spaceship\\n        // TODO\\n        Effect[] storage glitchDefault = effectsList.push();\\n\\n        BCEvent storage glitch = bcMysteryCardEvents.push();\\n        glitch.id = 400013;\\n\\n        glitch.defaultEffect = glitchDefault;\\n\\n        // 14 Ephemeral Form\\n        // TODO\\n        Effect[] storage ephemeralFormDefault = effectsList.push();\\n\\n        BCEvent storage ephemeralForm = bcMysteryCardEvents.push();\\n        ephemeralForm.id = 400014;\\n\\n        ephemeralForm.defaultEffect = ephemeralFormDefault;\\n\\n        // 15 TISATAAFL\\n        // TODO\\n        Effect[] storage tisataaflDefault = effectsList.push();\\n        tisataaflDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n        tisataaflDefault.push(Effect(EffectTypes.fullHealth, 0));\\n\\n        BCEvent storage tisataafl = bcMysteryCardEvents.push();\\n        tisataafl.id = 400015;\\n\\n        tisataafl.defaultEffect = tisataaflDefault;\\n    }\\n\\n    function _initializeDefaultScavCardEvents() internal {\\n        // 1 Crazed Prophet\\n        // TODO\\n        Effect[] storage crazedProphetDefault = effectsList.push();\\n        crazedProphetDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage crazedProphet = bcScavCardEvents.push();\\n        crazedProphet.id = 500001;\\n\\n        crazedProphet.defaultEffect = crazedProphetDefault;\\n\\n        // 2 Blackjack\\n        Effect[] storage blackjackDefault = effectsList.push();\\n        blackjackDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        blackjackDefault.push(Effect(EffectTypes.takeNumItems, 1));\\n\\n        BCEvent storage blackjack = bcScavCardEvents.push();\\n        blackjack.id = 500002;\\n\\n        blackjack.defaultEffect = blackjackDefault;\\n\\n        // 3 Toll\\n        // TODO\\n        Effect[] storage tollDefault = effectsList.push();\\n\\n        BCEvent storage toll = bcScavCardEvents.push();\\n        toll.id = 500003;\\n\\n        toll.defaultEffect = tollDefault;\\n\\n        // 4 Bear Trap\\n        // TODO: 2 dice, place enemy if free self failed\\n        Effect[] storage bearTrapDefault = effectsList.push();\\n        bearTrapDefault.push(Effect(EffectTypes.trapPlayerEscapeRoll, 4));\\n\\n        BCEvent storage bearTrap = bcScavCardEvents.push();\\n        bearTrap.id = 500004;\\n\\n        bearTrap.defaultEffect = bearTrapDefault;\\n\\n        // 5 Cooking Badly\\n        Effect[] storage cookingBadlyDefault = effectsList.push();\\n        cookingBadlyDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage cookingBadly = bcScavCardEvents.push();\\n        cookingBadly.id = 500005;\\n\\n        cookingBadly.defaultEffect = cookingBadlyDefault;\\n\\n        // 6 Garbage Collection\\n        // TODO:\\n        Effect[] storage garbageCollectionDefault = effectsList.push();\\n        garbageCollectionDefault.push(Effect(EffectTypes.grantNumItems, 2));\\n\\n        BCEvent storage garbageCollection = bcScavCardEvents.push();\\n        garbageCollection.id = 500006;\\n\\n        garbageCollection.defaultEffect = garbageCollectionDefault;\\n\\n        // 7 You scratch my back... // TODO: Need variant for single player\\n                                    // Or just make it discard a card and draw a card\\n        // TODO:\\n        Effect[] storage scratchDefault = effectsList.push();\\n        scratchDefault.push(Effect(EffectTypes.takeNumItems, 1)); // TODO: Also need to implement picking an item to discard\\n        scratchDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage scratch = bcScavCardEvents.push();\\n        scratch.id = 500007;\\n\\n        scratch.defaultEffect = scratchDefault;\\n\\n        // 8 Bully\\n        // TODO: Choice\\n        Effect[] storage bullyDefault = effectsList.push();\\n\\n        BCEvent storage bully = bcScavCardEvents.push();\\n        bully.id = 500008;\\n\\n        bully.defaultEffect = bullyDefault;\\n\\n        // 9 Arm Rassling\\n        // TODO: Choice\\n        Effect[] storage armRasslingDefault = effectsList.push();\\n\\n        BCEvent storage armRassling = bcScavCardEvents.push();\\n        armRassling.id = 500009;\\n\\n        armRassling.defaultEffect = armRasslingDefault;\\n\\n        // 10 Hitman\\n        // TODO: Solo player variant, pick player to kill, pick discard\\n        Effect[] storage hitmanDefault = effectsList.push();\\n\\n        BCEvent storage hitman = bcScavCardEvents.push();\\n        hitman.id = 500010;\\n\\n        hitman.defaultEffect = hitmanDefault;\\n\\n        // 11 Mad Mel\\n        // TODO\\n        Effect[] storage madMelDefault = effectsList.push();\\n        madMelDefault.push(Effect(EffectTypes.physicalDamage, 1));\\n        madMelDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        madMelDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        madMelDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage madMel = bcScavCardEvents.push();\\n        madMel.id = 500011;\\n\\n        madMel.defaultEffect = madMelDefault;\\n\\n        // 12 Scavangus Interruptus\\n        // TODO\\n        Effect[] storage scavangusInterruptusDefault = effectsList.push();\\n        scavangusInterruptusDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        scavangusInterruptusDefault.push(Effect(EffectTypes.numEnemyToPlace, 2));\\n        scavangusInterruptusDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM))));\\n\\n        BCEvent storage scavangusInterruptus = bcScavCardEvents.push();\\n        scavangusInterruptus.id = 500012;\\n\\n        scavangusInterruptus.defaultEffect = scavangusInterruptusDefault;\\n\\n        // 13 I'm sleeping here!\\n        // TODO\\n        Effect[] storage imSleepingDefault = effectsList.push();\\n        imSleepingDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        imSleepingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        imSleepingDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.IN_ROOM))));\\n\\n        BCEvent storage imSleeping = bcScavCardEvents.push();\\n        imSleeping.id = 500013;\\n\\n        imSleeping.defaultEffect = imSleepingDefault;\\n\\n        // 14 I'm not following you!\\n        Effect[] storage notFollowingDefault = effectsList.push();\\n        notFollowingDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        notFollowingDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notFollowingDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.LAST_ROOM))));\\n\\n        BCEvent storage notFollowing = bcScavCardEvents.push();\\n        notFollowing.id = 500014;\\n\\n        notFollowing.defaultEffect = notFollowingDefault;\\n\\n        // 15 You Are Not Alone\\n\\n        // TODO CRITICAL -> this event breaks the map\\n        Effect[] storage notAloneDefault = effectsList.push();\\n        notAloneDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        notAloneDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        notAloneDefault.push(Effect(EffectTypes.whereToPlace, (uint(EnemyPlacement.ALL_ADJACENT))));\\n\\n        BCEvent storage notAlone = bcScavCardEvents.push();\\n        notAlone.id = 500015;\\n\\n        notAlone.defaultEffect = notAloneDefault;\\n    }\\n\\n    function _initializeDefaultShipCardEvents() internal {\\n        // TODO: Only 2 events spawns a sentry robot.  Evaluate.\\n        // Though saving murder bots for crisises is interesting too\\n\\n        BCEvent storage noEvent = bcShipCardEvents.push();\\n        noEvent.id = 600000;\\n\\n        // 1 Snitch\\n        // TODO: Need target player mechanism and place in that room\\n        Effect[] storage snitchDefault = effectsList.push();\\n\\n        BCEvent storage snitch = bcShipCardEvents.push();\\n        snitch.id = 600001;\\n\\n        snitch.defaultEffect = snitchDefault;\\n\\n        // 2 Alarm\\n        Effect[] storage alarmDefault = effectsList.push();\\n        alarmDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.ROBOT)));\\n        alarmDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        alarmDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage alarm = bcShipCardEvents.push();\\n        alarm.id = 600002;\\n\\n        alarm.defaultEffect = alarmDefault;\\n\\n        // 3 Lockdown\\n        // TODO: Need to permanantly lock the walls\\n        // For now, just locking the doors at strength 5\\n        Effect[] storage lockdownDefault = effectsList.push();\\n        lockdownDefault.push(Effect(EffectTypes.lockDoorStrength, 5));\\n\\n        BCEvent storage lockdown = bcShipCardEvents.push();\\n        lockdown.id = 600003;\\n\\n        lockdown.defaultEffect = lockdownDefault;\\n\\n        // 4 Vent the Ship\\n        Effect[] storage ventDefault = effectsList.push();\\n        ventDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        ventDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage vent = bcShipCardEvents.push();\\n        vent.id = 600004;\\n\\n        vent.defaultEffect = ventDefault;\\n\\n        // 5 Maintenance Hatch\\n        // TODO: Impelement hatch\\n        Effect[] storage hatchDefault = effectsList.push();\\n\\n        BCEvent storage hatch = bcShipCardEvents.push();\\n        hatch.id = 600005;\\n\\n        hatch.defaultEffect = hatchDefault;\\n\\n        // 6 Replicator\\n        // TODO: Need to track discarded/destroyed items\\n        // TODO: Allowing item duplicates or reviving dead items has major implications for UiF.  However, it would be super cool properly controlled!\\n        Effect[] storage replicatorDefault = effectsList.push();\\n        // TODO: For now, just granting an item\\n        replicatorDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage replicator = bcShipCardEvents.push();\\n        replicator.id = 600006;\\n\\n        replicator.defaultEffect = replicatorDefault;\\n\\n        // 7 First Aid Station\\n        Effect[] storage firstAidDefault = effectsList.push();\\n        firstAidDefault.push(Effect(EffectTypes.fullHealth, 1));\\n\\n        BCEvent storage firstAid = bcShipCardEvents.push();\\n        firstAid.id = 600007;\\n\\n        firstAid.defaultEffect = firstAidDefault;\\n\\n        // 8 ATM\\n        // TODO: Two Dice\\n        // TODO: Choice to walk away\\n        Effect[] storage atmDefault = effectsList.push();\\n\\n        Effect[] storage atmLow = effectsList.push();\\n        atmLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.TURRET)));\\n        atmLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        atmLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        // TODO: Add second high?\\n        Effect[] storage atmHigh = effectsList.push();\\n        atmHigh.push(Effect(EffectTypes.grantData, 2)); // Avg of 1 and 3\\n\\n        BCEvent storage atm = bcShipCardEvents.push();\\n        atm.id = 60008;\\n\\n        atm.defaultEffect = atmDefault;\\n        atm.lowEffect = atmLow;\\n        atm.highEffect = atmHigh;\\n\\n        // 9 Blooper Reel\\n        Effect[] storage blooperDefault = effectsList.push();\\n        blooperDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage blooper = bcShipCardEvents.push();\\n        blooper.id = 600009;\\n\\n        blooper.defaultEffect = blooperDefault;\\n\\n        // 10 Locker\\n        // TODO\\n        Effect[] storage lockerDefault = effectsList.push();\\n        lockerDefault.push(Effect(EffectTypes.grantNumItems, 1));\\n\\n        BCEvent storage locker = bcShipCardEvents.push();\\n        locker.id = 600010;\\n\\n        locker.defaultEffect = lockerDefault;\\n\\n        // 11 Contraband\\n        // TODO: CHOICE\\n        Effect[] storage contrabandDefault = effectsList.push();\\n\\n        BCEvent storage contraband = bcShipCardEvents.push();\\n        contraband.id = 600011;\\n\\n        contraband.defaultEffect = contrabandDefault;\\n\\n        // 12 Fire // TODO: This is identical to Vent the Ship!\\n        Effect[] storage fireDefault = effectsList.push();\\n        fireDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        fireDefault.push(Effect(EffectTypes.placeHazard, 1));\\n\\n        BCEvent storage fire = bcShipCardEvents.push();\\n        fire.id = 600012;\\n\\n        fire.defaultEffect = fireDefault;\\n\\n        // 13 Janitorial Misconduct\\n        // TODO: Need ability to force dropping an item at a location\\n        Effect[] storage janitorialMisconductDefault = effectsList.push();\\n\\n        BCEvent storage janitorialMisconduct = bcShipCardEvents.push();\\n        janitorialMisconduct.id = 600013;\\n\\n        janitorialMisconduct.defaultEffect = janitorialMisconductDefault;\\n\\n        // 14 Target Acquired\\n        // TODO\\n        Effect[] storage targetAcquiredDefault = effectsList.push();\\n        targetAcquiredDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.TURRET)));\\n        targetAcquiredDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        targetAcquiredDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage targetAcquired = bcShipCardEvents.push();\\n        targetAcquired.id = 600014;\\n\\n        targetAcquired.defaultEffect = targetAcquiredDefault;\\n\\n        // 15 Security!\\n        // TODO\\n        Effect[] storage securityDefault = effectsList.push();\\n        securityDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.TURRET)));\\n        securityDefault.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        securityDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage security = bcShipCardEvents.push();\\n        security.id = 600015;\\n\\n        security.defaultEffect = securityDefault;\\n    }\\n\\n    function _initializeDefaultRoomEvents() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // TODO: Should this be some kind of script that instead makes these after deployment\\n        // 0 No effect\\n        BCEvent storage noEvent = bcRoomEvents.push();\\n        noEvent.id = 0;\\n        noEvent.permanent = false;\\n        noEvent.rollForLow = 0;\\n        noEvent.rollForHigh = 0;\\n\\n        noEvent.defaultEffect = emptyEffect;\\n        noEvent.lowEffect = emptyEffect;\\n        noEvent.highEffect = emptyEffect;\\n\\n        // 1 Breached Reactor\\n        // Done\\n        Effect[] storage breachedReactorDefault = effectsList.push();\\n        breachedReactorDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        breachedReactorDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n        BCEvent storage breachedReactor = bcRoomEvents.push();\\n        breachedReactor.id = 200001;\\n        breachedReactor.permanent = false;\\n        breachedReactor.rollForLow = 0;\\n        breachedReactor.rollForHigh = 0;\\n\\n        breachedReactor.defaultEffect = breachedReactorDefault;\\n        breachedReactor.lowEffect = emptyEffect;\\n        breachedReactor.highEffect = emptyEffect;\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Breached Reactor\\\",\\n    //         // \\\"As you enter the room, the reactor explodes!  Take 1 hazard damage.\\\",\\n    //         200001,\\n    //         false,\\n    //         0,\\n    //         0, // TODO:  Explore adding choices to these ones\\n    //         breachedReactorDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 2 Bug Nest\\n        // TODO\\n        Effect[] storage bugNestLow = effectsList.push();\\n        bugNestLow.push(Effect(EffectTypes.numEnemyToPlace, 1));\\n        bugNestLow.push(Effect(EffectTypes.enemyType, uint(EnemyType.BUG)));\\n        bugNestLow.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        Effect[] storage bugNestHigh = effectsList.push();\\n        bugNestHigh.push(Effect(EffectTypes.grantEgg, 1)); // TRUE\\n\\n        BCEvent storage bugNest = bcRoomEvents.push();\\n        bugNest.id = 200002;\\n        bugNest.permanent = true; // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n        bugNest.rollForLow = 2;\\n        bugNest.rollForHigh = 6;\\n\\n        bugNest.defaultEffect = emptyEffect;\\n        bugNest.lowEffect = bugNestLow;\\n        bugNest.highEffect = bugNestHigh;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Bug Nest\\\",\\n    //         // \\\"As an action, attempt to harvest an egg.  Roll a die.  On a 6, take an egg token.  On a 1 or 2, take 1 physical damage and place a bug alien in the room.\\\",\\n    //         200002,\\n    //         true,  // TODO: THIS IS SCARY!!! CHAD WITH A LUCKY MAP COULD GET UNLIMITED!!!\\n    //         2,\\n    //         6,\\n    //         emptyEffect,\\n    //         bugNestLow,\\n    //         bugNestHigh\\n    //     ));\\n\\n        // 3 Crossroads\\n        // TODO\\n        Effect[] storage crossroadsDefault = effectsList.push();\\n        crossroadsDefault.push(Effect(EffectTypes.numEnemyToPlace, 3));\\n        crossroadsDefault.push(Effect(EffectTypes.enemyType, uint(EnemyType.SCAV)));\\n        crossroadsDefault.push(Effect(EffectTypes.whereToPlace, uint(EnemyPlacement.IN_ROOM)));\\n\\n        BCEvent storage crossroads = bcRoomEvents.push();\\n        crossroads.id = 200003;\\n        crossroads.permanent = false;\\n        crossroads.rollForLow = 0;\\n        crossroads.rollForHigh = 0;\\n\\n        crossroads.defaultEffect = crossroadsDefault;\\n        crossroads.lowEffect = emptyEffect;\\n        crossroads.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Crossroads\\\",\\n    //         // \\\"You've crashed a party!  Place 3 scavengers in this room.\\\",\\n    //         200003,\\n    //         false,\\n    //         0,\\n    //         0,\\n\\n    //         crossroadsDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 4 Engineering Catwalk\\n        Effect[] storage catwalkDefault = effectsList.push();\\n        catwalkDefault.push(Effect(EffectTypes.moveType, uint(MovePlayer.REACTOR)));\\n\\n        BCEvent storage catwalk = bcRoomEvents.push();\\n        catwalk.id = 200004;\\n        catwalk.permanent = true;\\n        catwalk.rollForLow = 0;\\n        catwalk.rollForHigh = 0;\\n\\n        catwalk.defaultEffect = catwalkDefault;\\n        catwalk.lowEffect = emptyEffect;\\n        catwalk.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Engineering Catwalk\\\",\\n    //         // \\\"As an action, jump down to the Reactor Room, exploring if unexplored.\\\",\\n    //         200004,\\n    //         true,\\n    //         0,\\n    //         0,\\n    //         catwalkDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 5 Hull Breach\\n        // Done\\n        Effect[] storage hullBreachDefault = effectsList.push();\\n        hullBreachDefault.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n\\n        Effect[] storage hullBreachLow = effectsList.push();\\n        hullBreachLow.push(Effect(EffectTypes.placeHazard, 1)); // TRUE\\n        hullBreachLow.push(Effect(EffectTypes.instantDeath, 1)); // TRUE\\n\\n        BCEvent storage hullBreach = bcRoomEvents.push();\\n        hullBreach.id = 200005;\\n        hullBreach.permanent = false;\\n        hullBreach.rollForLow = 1;\\n        hullBreach.rollForHigh = 0;\\n\\n        hullBreach.defaultEffect = hullBreachDefault;\\n        hullBreach.lowEffect = hullBreachLow;\\n        hullBreach.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Hull Breach\\\",\\n    //         // \\\"As you enter the room, a wall buckles and explodes into space!\\\",\\n    //         200005,\\n    //         false,\\n    //         1,\\n    //         0,\\n\\n    //         hullBreachDefault,\\n    //         hullBreachLow,\\n    //         emptyEffect\\n    //     ));\\n\\n        // 6 Medbay\\n        // TODO: No hostiles in room\\n        // HACK:  Full health + heal amount 1 indicates heal to full health +1\\n        Effect[] storage medbayDefault = effectsList.push();\\n        medbayDefault.push(Effect(EffectTypes.fullHealth, 1)); // TRUE\\n\\n        BCEvent storage medbay = bcRoomEvents.push();\\n        medbay.id = 200006;\\n        medbay.permanent = true;\\n        medbay.rollForLow = 0;\\n        medbay.rollForHigh = 0;\\n\\n        medbay.defaultEffect = medbayDefault;\\n        medbay.lowEffect = emptyEffect;\\n        medbay.highEffect = emptyEffect;\\n\\n    //     bcRoomEvents.push(BCEvent(\\n    //         // \\\"Medbay\\\",\\n    //         // \\\"If there are no hostiles in this room, as an action, return to full health +1\\\",\\n    //         200006,\\n    //         true,\\n    //         0,\\n    //         0,\\n\\n    //         medbayDefault,\\n    //         emptyEffect,\\n    //         emptyEffect\\n    //     ));\\n    }\\n\\n    function _initializeDefaultRoomEvents_2() internal {\\n        Effect[] storage emptyEffect = effectsList[0];\\n        // 7 Showers\\n        // Done\\n        Effect[] storage showersDefault = effectsList.push();\\n        showersDefault.push(Effect(EffectTypes.hazardDamage, 1));\\n\\n        BCEvent storage showers = bcRoomEvents.push();\\n        showers.id = 200007;\\n        showers.permanent = false;\\n        showers.rollForLow = 0;\\n        showers.rollForHigh = 0;\\n\\n        showers.defaultEffect = showersDefault;\\n        showers.lowEffect = emptyEffect;\\n        showers.highEffect = emptyEffect;\\n\\n        //     bcRoomEvents.push(BCEvent(\\n        //     // \\\"Showers\\\",\\n        //     // \\\"As you explore this room, a horde of small bugs emerge from the drains.  They get inside your suit, biiting and stinging.  Take 1 hazard damage.\\\",\\n        //     200007,\\n        //     false,\\n        //     0,\\n        //     0,\\n\\n        //     showersDefault,\\n        //     emptyEffect,\\n        //     emptyEffect\\n        // ));\\n\\n        // 8 Trash Compactor\\n        // TODO - Locking doors is done, crushing players and items is not\\n        Effect[] storage trashCompactorDefault = effectsList.push();\\n        trashCompactorDefault.push(Effect(EffectTypes.lockDoorStrength, 4));\\n\\n        BCEvent storage trashCompactor = bcRoomEvents.push();\\n        trashCompactor.id = 200008;\\n        trashCompactor.permanent = false;\\n        trashCompactor.rollForLow = 0;\\n        trashCompactor.rollForHigh = 0;\\n\\n        trashCompactor.defaultEffect = trashCompactorDefault;\\n        trashCompactor.lowEffect = emptyEffect;\\n        trashCompactor.highEffect = emptyEffect;\\n\\n        // bcRoomEvents.push(BCEvent(\\n        //     // \\\"Trash Compactor\\\",\\n        //     // \\\"As you enter, the doors slam shut and the trash compactor comes to life!  In three turns, everything in the room will be destroyed!\\\",\\n        //     200008,\\n        //     false,\\n        //     0,\\n        //     0,\\n\\n        //     trashCompactorDefault,\\n        //     emptyEffect,\\n        //     emptyEffect\\n        // ));\\n\\n        // 9 Ship Services\\n        // TODO: Let player select which services to use.\\n        // TODO\\n        Effect[] storage shipServicesDefault = effectsList.push();\\n        shipServicesDefault.push(Effect(EffectTypes.fullHealth, 0)); // TODO: Prevent this from stripping extra health\\n        // TODO: Sell items to company\\n        // TODO: Buy items from company (only multiplayer?)\\n\\n        BCEvent storage shipServices = bcRoomEvents.push();\\n        shipServices.id = 200009;\\n        shipServices.permanent = true;\\n\\n        shipServices.defaultEffect = shipServicesDefault;\\n    }\\n}\\n\",\"keccak256\":\"0x9439d2f05d1728ff385d6e2bbbc8a1dfe22c853abac4eb3e357c88245c334ee7\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM, DROP_ITEMS, PICK_ITEMS } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType { NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY, ROOM }\\n    enum WorldItemStatus { UNKNOWN, KNOWN, DISCARDED, REMOVED }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead; // TODO: Probably don't need\\n        bool hasEgg;  // TODO: Eval only allowing one egg at a time\\n\\n        uint gameId;\\n    }\\n\\n    // Items on the ground in a game\\n    struct WorldItem {\\n        // address itemContract;\\n        uint gameId;\\n        uint bcItemId; // ID 0 == unknown item (use WorldItemStatus for logic)\\n\\n        WorldItemStatus status;\\n\\n        Position position;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        // TODO:  Either add all events, effects, and traits here, or remove roomList\\n        // mapping (uint => RoomTile) roomList;\\n        // uint8 numRooms;\\n        uint[] unusedNormalRooms;\\n        // mapping (uint => bool) usedRooms;\\n\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        // uint roomTileId // TODO: Critical\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x1fc831f80771bf4306af5f0952086615c89e04bd9f16bb4d7cdf2aa9021e4a86\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61363d80620000836000396000f3fe6080604052600436106100e85760003560e01c80638da5cb5b1161008a578063c06fad0611610059578063c06fad0614610251578063d72be09d14610271578063dc0b356414610291578063f2fde38b146102b157600080fd5b80638da5cb5b146101e0578063955a015b146101fe5780639fca1ee11461021e578063a8ca85bb1461023e57600080fd5b8063425c38d8116100c6578063425c38d81461016b5780635a29638d1461018b578063715018a6146101ab5780637ddae103146101c057600080fd5b806310a2cd0d146100ed5780633deaec2b146101295780634102b1a714610149575b600080fd5b3480156100f957600080fd5b5060015461010d906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b34801561013557600080fd5b5060035461010d906001600160a01b031681565b34801561015557600080fd5b50610169610164366004612216565b6102d1565b005b34801561017757600080fd5b50610169610186366004612238565b610354565b34801561019757600080fd5b5060025461010d906001600160a01b031681565b3480156101b757600080fd5b506101696103dd565b3480156101cc57600080fd5b5060065461010d906001600160a01b031681565b3480156101ec57600080fd5b506000546001600160a01b031661010d565b34801561020a57600080fd5b5060045461010d906001600160a01b031681565b34801561022a57600080fd5b5060085461010d906001600160a01b031681565b61016961024c3660046123a8565b6103f1565b34801561025d57600080fd5b5060055461010d906001600160a01b031681565b34801561027d57600080fd5b5061016961028c3660046124a8565b61206d565b34801561029d57600080fd5b5060075461010d906001600160a01b031681565b3480156102bd57600080fd5b506101696102cc36600461253e565b6120f3565b6102d961216c565b60048054604080518082018252600080825260208201529051631751422560e01b81526001600160a01b039092169263175142259261031e9287929091879101612562565b600060405180830381600087803b15801561033857600080fd5b505af115801561034c573d6000803e3d6000fd5b505050505050565b61035c61216c565b6004805460408051808201825260ff8087168252851660208201529051631751422560e01b81526001600160a01b03909216926317514225926103a59289929091899101612562565b600060405180830381600087803b1580156103bf57600080fd5b505af11580156103d3573d6000803e3d6000fd5b5050505050505050565b6103e561216c565b6103ef60006121c6565b565b6007546040516310f67fb360e01b8152600481018890526000916001600160a01b0316906310f67fb390602401600060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104639190810190612682565b60048054604051630dfd338360e31b81529182018b90529192506000916001600160a01b031690636fe99c1890602401600060405180830381865afa1580156104b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d89190810190612898565b6001546040808501519051634810bc5960e01b81529293506000926001600160a01b0390921691634810bc59916105159160040190815260200190565b6101e060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190612acf565b90508161012001516000146105b35760405162461bcd60e51b815260206004820152601860248201527f4d757374207265736f6c7665206576656e74206669727374000000000000000060448201526064015b60405180910390fd5b81516105f35760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b60448201526064016105aa565b82516001600160a01b0316331461064c5760405162461bcd60e51b815260206004820152601760248201527f53656e646572206e6f7420706c61796572206f776e657200000000000000000060448201526064016105aa565b60038360c0015160ff16106106955760405162461bcd60e51b815260206004820152600f60248201526e139bc81858dd1a5bdb9cc81b19599d608a1b60448201526064016105aa565b81602001518260400151815181106106af576106af612b76565b602002602001015189146106f55760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b60448201526064016105aa565b6000600389600881111561070b5761070b612b8c565b036107485781606001516020015160000b84610120015160000b13156107435760405162461bcd60e51b81526004016105aa90612ba2565b611fb6565b600289600881111561075c5761075c612b8c565b03610ddb5781606001516020015160000b84610120015160000b13156107945760405162461bcd60e51b81526004016105aa90612ba2565b60035460e084015160608601518051602090910151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018990526000916001600160a01b031690636ea1dcd890608401606060405180830381865afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612bd2565b905060028160400151600481111561084657610846612b8c565b1480610867575060038160400151600481111561086557610865612b8c565b145b806108775750602081015160ff16155b6108cf5760405162461bcd60e51b815260206004820152602360248201527f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f636044820152621ad95960ea1b60648201526084016105aa565b6001816040015160048111156108e7576108e7612b8c565b0361096b5760035460e085015160608701518051602090910151604051635921522360e01b81526001600160a01b039094169363592152239361093893909290918e90600290600090600401612c43565b600060405180830381600087803b15801561095257600080fd5b505af1158015610966573d6000803e3d6000fd5b505050505b6002546060860151604051634a8fe1ff60e11b81526000926001600160a01b03169163951fc3fe916109a1918d91600401612c86565b6040805180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612caa565b905060018a60018111156109f7576109f7612b8c565b03610d5d57600254604051634a8fe1ff60e11b81526000916001600160a01b03169063951fc3fe90610a2f908c908690600401612c86565b6040805180830381865afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612caa565b60035460e088015184516020860151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018c90529192506000916001600160a01b0390911690636ea1dcd890608401606060405180830381865afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190612bd2565b9050600281604001516004811115610b2057610b20612b8c565b1480610b415750600381604001516004811115610b3f57610b3f612b8c565b145b80610b515750602081015160ff16155b610ba95760405162461bcd60e51b815260206004820152602360248201527f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f636044820152621ad95960ea1b60648201526084016105aa565b60035460e0880151604051630f78220b60e11b815260048101919091526000916001600160a01b031690631ef0441690602401600060405180830381865afa158015610bf9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c219190810190612d8d565b9050600281856000015160ff1681518110610c3e57610c3e612b76565b6020026020010151856020015160ff1681518110610c5e57610c5e612b76565b60200260200101516000015160ff1611610cae5760405162461bcd60e51b8152602060048201526011602482015270149bdbdb481b9bdd08195e1c1b1bdc9959607a1b60448201526064016105aa565b600182604001516004811115610cc657610cc6612b8c565b03610d5757600360009054906101000a90046001600160a01b03166001600160a01b031663592152238960e00151866000015187602001518f600260006040518763ffffffff1660e01b8152600401610d2496959493929190612c43565b600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b505050505b50909150505b600460009054906101000a90046001600160a01b03166001600160a01b031663175142258e838f6040518463ffffffff1660e01b8152600401610da293929190612562565b600060405180830381600087803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e3d6000fd5b505050505050611fb6565b6000896008811115610def57610def612b8c565b036111675781606001516020015160000b84610120015160000b1315610e275760405162461bcd60e51b81526004016105aa90612ba2565b60035460e084015160608601518051602090910151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018990526000916001600160a01b031690636ea1dcd890608401606060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190612bd2565b9050600181604001516004811115610ed957610ed9612b8c565b14610f185760405162461bcd60e51b815260206004820152600f60248201526e111bdbdc881b9bdd0818db1bdcd959608a1b60448201526064016105aa565b600260009054906101000a90046001600160a01b03166001600160a01b0316635dc969678d85606001516060015184602001516040518463ffffffff1660e01b8152600401610f7d9392919092835260ff918216602084015216604082015260600190565b6020604051808303816000875af1158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190612e9c565b156111615760035460e085015160608701518051602090910151604051635921522360e01b81526001600160a01b039094169363592152239361101193909290918e90600290600090600401612c43565b600060405180830381600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b506001925061104c915050565b89600181111561105e5761105e612b8c565b0361116157600460009054906101000a90046001600160a01b03166001600160a01b031663175142258d600260009054906101000a90046001600160a01b03166001600160a01b031663951fc3fe8c8a606001516040518363ffffffff1660e01b81526004016110cf929190612c86565b6040805180830381865afa1580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f9190612caa565b8e6040518463ffffffff1660e01b815260040161112e93929190612562565b600060405180830381600087803b15801561114857600080fd5b505af115801561115c573d6000803e3d6000fd5b505050505b50611fb6565b600189600881111561117b5761117b612b8c565b0361139a5781606001516020015160000b84610120015160000b13156111b35760405162461bcd60e51b81526004016105aa90612ba2565b60035460e084015160608601518051602090910151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018990526000916001600160a01b031690636ea1dcd890608401606060405180830381865afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190612bd2565b905060018160400151600481111561126557611265612b8c565b146112a45760405162461bcd60e51b815260206004820152600f60248201526e111bdbdc881b9bdd0818db1bdcd959608a1b60448201526064016105aa565b600260009054906101000a90046001600160a01b03166001600160a01b0316635dc969678d85606001516080015184600001516040518463ffffffff1660e01b81526004016113099392919092835260ff918216602084015216604082015260600190565b6020604051808303816000875af1158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190612e9c565b15611161576003805460e086015160608801518051602090910151604051635921522360e01b81526001600160a01b0390941694635921522394611011949392918f91600090600401612c43565b60048960088111156113ae576113ae612b8c565b036117f1575060035460e08301516060850151805160209091015160405163f9dfbfcb60e01b81526001946000946001600160a01b039091169363f9dfbfcb9361140e9360040192835260ff918216602084015216604082015260600190565b61014060405180830381865afa15801561142c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114509190612eb7565b60808101519091501561149b5760405162461bcd60e51b8152602060048201526013602482015272149bdbdb48185b1c9958591e481b1bdbdd1959606a1b60448201526064016105aa565b60035460e08501516060870151805160209091015160405162a1871b60e21b8152600481019390935260ff91821660248401521660448201526000916001600160a01b0316906302861c6c9060640160a060405180830381865afa158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b9190612ed4565b90506000816060015160ff16118061154a57506000816040015160ff16115b61158e5760405162461bcd60e51b815260206004820152601560248201527443616e2774206c6f6f7420656d70747920726f6f6d60581b60448201526064016105aa565b64174876e800816040015160ff166115a69190612f70565b34146115f45760405162461bcd60e51b815260206004820152601860248201527f57726f6e67207061796d656e7420696e20616374696f6e73000000000000000060448201526064016105aa565b60035460e08601516060880151805160209091015160405163086e529d60e41b8152600481019390935260ff91821660248401521660448201526001600160a01b03909116906386e529d090606401600060405180830381600087803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b50505050600760009054906101000a90046001600160a01b03166001600160a01b031663b69071948d83606001516040518363ffffffff1660e01b81526004016116c892919091825260ff16602082015260400190565b600060405180830381600087803b1580156116e257600080fd5b505af11580156116f6573d6000803e3d6000fd5b5050505060005b816040015160ff168110156117b057600560009054906101000a90046001600160a01b03166001600160a01b031663aa3eb1b564174876e8008f8a600001516040518463ffffffff1660e01b815260040161176b9291909182526001600160a01b0316602082015260400190565b6000604051808303818588803b15801561178457600080fd5b505af1158015611798573d6000803e3d6000fd5b505050505080806117a890612f8d565b9150506116fd565b50600754604080830151905163fe23e2df60e01b8152600481018f905260ff90911660248201526001600160a01b039091169063fe23e2df90604401610da2565b600589600881111561180557611805612b8c565b03611a305781606001516020015160000b84610120015160000b131561183d5760405162461bcd60e51b81526004016105aa90612ba2565b60035460e08401516060860151805160209091015160405162a1871b60e21b8152600481019390935260ff91821660248401521660448201526000916001600160a01b0316906302861c6c9060640160a060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190612ed4565b600654602082015160405163c82c37b960e01b81529293506000926001600160a01b039092169163c82c37b99161190a9160040190815260200190565b600060405180830381865afa158015611927573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261194f9190810190613033565b905080602001511515600115151461199f5760405162461bcd60e51b8152602060048201526013602482015272115d995b9d081b9bdd081c195c9b585b995b9d606a1b60448201526064016105aa565b600760009054906101000a90046001600160a01b03166001600160a01b031663ed8619618d8f8860e001518a60600151876020015160006040518763ffffffff1660e01b8152600401610da2969594939291909586526020808701959095526040860193909352815160ff9081166060870152919093015116608084015260a083019190915260c082015260e00190565b6006896008811115611a4457611a44612b8c565b03611a7c5781606001516020015160000b84610120015160000b13156107435760405162461bcd60e51b81526004016105aa90612ba2565b6007896008811115611a9057611a90612b8c565b03611b945750600754845160405163351dacdf60e01b81526001926001600160a01b03169163351dacdf91611ad2918e91600401918252602082015260400190565b600060405180830381600087803b158015611aec57600080fd5b505af1158015611b00573d6000803e3d6000fd5b50505050600560009054906101000a90046001600160a01b03166001600160a01b03166311ff70478c878760600151600001518860600151602001518f6040518663ffffffff1660e01b8152600401611b5d95949392919061315f565b600060405180830381600087803b158015611b7757600080fd5b505af1158015611b8b573d6000803e3d6000fd5b50505050611fb6565b6008896008811115611ba857611ba8612b8c565b03611f6e57600480546040516302c497fb60e11b81526000926001600160a01b03909216916305892ff691611bdf918a9101613196565b600060405180830381865afa158015611bfc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c2491908101906131a9565b905060005b8151811015611ecd57818181518110611c4457611c44612b76565b6020026020010151606001516000015160ff1686606001516000015160ff1614611ca55760405162461bcd60e51b8152602060048201526012602482015271506c61796572206e6f74206174206974656d60701b60448201526064016105aa565b818181518110611cb757611cb7612b76565b6020026020010151606001516020015160ff1686606001516020015160ff1614611d185760405162461bcd60e51b8152602060048201526012602482015271506c61796572206e6f74206174206974656d60701b60448201526064016105aa565b6000828281518110611d2c57611d2c612b76565b6020026020010151604001516003811115611d4957611d49612b8c565b1480611d8357506001828281518110611d6457611d64612b76565b6020026020010151604001516003811115611d8157611d81612b8c565b145b611dcf5760405162461bcd60e51b815260206004820152601e60248201527f4974656d20697320646973636172646564206f722064657374726f796564000060448201526064016105aa565b8c828281518110611de257611de2612b76565b60200260200101516000015114611e335760405162461bcd60e51b81526020600482015260156024820152744974656d206e6f7420696e20746869732067616d6560581b60448201526064016105aa565b6000828281518110611e4757611e47612b76565b6020026020010151604001516003811115611e6457611e64612b8c565b03611ebb5760405162461bcd60e51b815260206004820152602160248201527f556e6b6e6f776e206974656d73206e6f742079657420696d706c656d656e74656044820152601960fa1b60648201526084016105aa565b80611ec581612f8d565b915050611c29565b50600754865160405163fe23e2df60e01b8152600481018e90526024810191909152600193506001600160a01b039091169063fe23e2df90604401600060405180830381600087803b158015611f2257600080fd5b505af1158015611f36573d6000803e3d6000fd5b505060055487516040516307bc9a2360e21b81526001600160a01b039092169350631ef2688c925061112e918f918b91600401613286565b60405162461bcd60e51b815260206004820152601860248201527f4552524f523a2042616420616374696f6e20636f6e666967000000000000000060448201526064016105aa565b60048054604051630aa6e80360e41b81529182018d9052602482018c905282151560448301526001600160a01b03169063aa6e803090606401600060405180830381600087803b15801561200957600080fd5b505af115801561201d573d6000803e3d6000fd5b505050507f47d8a10cd6d278cdcd3ba78a5644a816c4fc82977c7699a483bfce11d1a45caf8b848c878d60405161205895949392919061343b565b60405180910390a15050505050505050505050565b61207561216c565b600180546001600160a01b03199081166001600160a01b03998a1617909155600280548216978916979097179096556003805487169588169590951790945560048054861693871693909317909255600580548516918616919091179055600680548416918516919091179055600780549092169216919091179055565b6120fb61216c565b6001600160a01b0381166121605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105aa565b612169816121c6565b50565b6000546001600160a01b031633146103ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105aa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561222957600080fd5b50508035926020909101359150565b6000806000806080858703121561224e57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156122a2576122a261226a565b60405290565b6040516101c081016001600160401b03811182821017156122a2576122a261226a565b604051608081016001600160401b03811182821017156122a2576122a261226a565b60405161020081016001600160401b03811182821017156122a2576122a261226a565b60405160e081016001600160401b03811182821017156122a2576122a261226a565b60405161012081016001600160401b03811182821017156122a2576122a261226a565b604051601f8201601f191681016001600160401b038111828210171561237d5761237d61226a565b604052919050565b60006001600160401b0382111561239e5761239e61226a565b5060051b60200190565b600080600080600080600060e0888a0312156123c357600080fd5b8735965060208089013596506040890135600981106123e157600080fd5b95506060890135600281106123f557600080fd5b94506080890135935060a0890135925060c08901356001600160401b0381111561241e57600080fd5b8901601f81018b1361242f57600080fd5b803561244261243d82612385565b612355565b81815260059190911b8201830190838101908d83111561246157600080fd5b928401925b8284101561247f57833582529284019290840190612466565b809550505050505092959891949750929550565b6001600160a01b038116811461216957600080fd5b600080600080600080600060e0888a0312156124c357600080fd5b87356124ce81612493565b965060208801356124de81612493565b955060408801356124ee81612493565b945060608801356124fe81612493565b9350608088013561250e81612493565b925060a088013561251e81612493565b915060c088013561252e81612493565b8091505092959891949750929550565b60006020828403121561255057600080fd5b813561255b81612493565b9392505050565b838152608081016125866020830185805160ff908116835260209182015116910152565b826060830152949350505050565b805161259f81612493565b919050565b805160ff8116811461259f57600080fd5b6000604082840312156125c757600080fd5b6125cf612280565b90506125da826125a4565b81526125e8602083016125a4565b602082015292915050565b8051600081900b811461259f57600080fd5b600082601f83011261261657600080fd5b8151602061262661243d83612385565b82815260059290921b8401810191818101908684111561264557600080fd5b8286015b848110156126675761265a816125a4565b8352918301918301612649565b509695505050505050565b8051801515811461259f57600080fd5b60006020828403121561269457600080fd5b81516001600160401b03808211156126ab57600080fd5b908301906101e082860312156126c057600080fd5b6126c86122a8565b6126d183612594565b81526126df60208401612594565b6020820152604083015160408201526126fb86606085016125b5565b606082015261270c60a084016125f3565b608082015261271d60c084016125a4565b60a082015261272e60e084016125a4565b60c08201526101006127418185016125a4565b60e0830152610120808501518481111561275a57600080fd5b61276689828801612605565b8385015250610140935061277b8486016125a4565b908301525061016061278e848201612672565b8383015261018092506127a2838501612672565b908201526101a06127b4848201612672565b928201929092526101c09290920151908201529392505050565b600082601f8301126127df57600080fd5b815160206127ef61243d83612385565b82815260059290921b8401810191818101908684111561280e57600080fd5b8286015b848110156126675780518352918301918301612812565b60006080828403121561283b57600080fd5b6128436122cb565b905061284e826125a4565b815261285c602083016125a4565b602082015261286d604083016125a4565b604082015261287e606083016125a4565b606082015292915050565b80516006811061259f57600080fd5b6000602082840312156128aa57600080fd5b81516001600160401b03808211156128c157600080fd5b9083019061028082860312156128d657600080fd5b6128de6122ed565b6128e783612672565b81526020830151828111156128fb57600080fd5b612907878286016127ce565b6020830152506040830151604082015260608301516060820152608083015160808201526129388660a08501612829565b60a082015261012061294b818501612594565b60c08301526101408085015160e08401526101608086015161010085015261018080870151848601526101a09350612984848801612889565b838601526101c092506129998a8489016125b5565b828601526102008701519150858211156129b257600080fd5b6129be8a8389016127ce565b9085015250610220850151848111156129d657600080fd5b6129e2898288016127ce565b83850152506102408501519150838211156129fc57600080fd5b612a08888387016127ce565b908301525061026083015182811115612a2057600080fd5b612a2c878286016127ce565b6101e08301525095945050505050565b600060e08284031215612a4e57600080fd5b612a56612310565b9050612a61826125f3565b8152612a6f602083016125f3565b6020820152612a80604083016125f3565b6040820152612a91606083016125f3565b6060820152612aa2608083016125f3565b6080820152612ab360a083016125f3565b60a0820152612ac460c083016125f3565b60c082015292915050565b60006101e08284031215612ae257600080fd5b612aea612332565b825181526020830151602082015260408301516040820152612b0f8460608501612a3c565b6060820152612b2161014084016125a4565b6080820152612b3361016084016125a4565b60a0820152612b4561018084016125a4565b60c0820152612b576101a084016125a4565b60e0820152612b696101c08401612672565b6101008201529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b602080825260169082015275486f6c64696e6720746f6f206d616e79206974656d7360501b604082015260600190565b600060608284031215612be457600080fd5b604051606081018181106001600160401b0382111715612c0657612c0661226a565b604052612c12836125a4565b8152612c20602084016125a4565b6020820152604083015160058110612c3757600080fd5b60408201529392505050565b86815260ff8681166020830152851660408201526060810184905260c0810160058410612c7257612c72612b8c565b608082019390935260a00152949350505050565b8281526060810161255b6020830184805160ff908116835260209182015116910152565b600060408284031215612cbc57600080fd5b61255b83836125b5565b60006101408284031215612cd957600080fd5b612ce1612310565b9050612cec826125a4565b81526020612cfb8184016125a4565b8183015283605f840112612d0e57600080fd5b612d166122cb565b8060c0850186811115612d2857600080fd5b604086015b81811015612d445780518452928401928401612d2d565b50816040860152612d5481612672565b606086015250505050612d6960e08301612672565b6080820152612d7b6101008301612672565b60a0820152612ac46101208301612672565b60006020808385031215612da057600080fd5b82516001600160401b0380821115612db757600080fd5b818501915085601f830112612dcb57600080fd5b8151612dd961243d82612385565b81815260059190911b83018401908481019088831115612df857600080fd5b8585015b83811015612e8f57805185811115612e1357600080fd5b8601603f81018b13612e2457600080fd5b87810151612e3461243d82612385565b8181526101409182028301604001918a820191908e841115612e565760008081fd5b6040850194505b83851015612e7e57612e6f8f86612cc6565b835293840193918b0191612e5d565b508652505050918601918601612dfc565b5098975050505050505050565b600060208284031215612eae57600080fd5b61255b82612672565b60006101408284031215612eca57600080fd5b61255b8383612cc6565b600060a08284031215612ee657600080fd5b60405160a081018181106001600160401b0382111715612f0857612f0861226a565b604052612f1483612889565b815260208301516020820152612f2c604084016125a4565b6040820152612f3d606084016125a4565b6060820152612f4e60808401612672565b60808201529392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417612f8757612f87612f5a565b92915050565b600060018201612f9f57612f9f612f5a565b5060010190565b600082601f830112612fb757600080fd5b81516020612fc761243d83612385565b82815260069290921b84018101918181019086841115612fe657600080fd5b8286015b8481101561266757604081890312156130035760008081fd5b61300b612280565b81516017811061301b5760008081fd5b81528185015185820152835291830191604001612fea565b60006020828403121561304557600080fd5b81516001600160401b038082111561305c57600080fd5b9083019060e0828603121561307057600080fd5b613078612310565b8251815261308860208401612672565b6020820152613099604084016125a4565b60408201526130aa606084016125a4565b60608201526080830151828111156130c157600080fd5b6130cd87828601612fa6565b60808301525060a0830151828111156130e557600080fd5b6130f187828601612fa6565b60a08301525060c08301518281111561310957600080fd5b61311587828601612fa6565b60c08301525095945050505050565b600081518084526020808501945080840160005b8381101561315457815187529582019590820190600101613138565b509495945050505050565b85815260a06020820152600061317860a0830187613124565b60ff9586166040840152939094166060820152608001529392505050565b60208152600061255b6020830184613124565b600060208083850312156131bc57600080fd5b82516001600160401b038111156131d257600080fd5b8301601f810185136131e357600080fd5b80516131f161243d82612385565b81815260a0918202830184019184820191908884111561321057600080fd5b938501935b8385101561327a5780858a03121561322d5760008081fd5b6132356122cb565b855181528686015187820152604080870151600481106132555760008081fd5b9082015260606132678b8883016125b5565b9082015283529384019391850191613215565b50979650505050505050565b83815260606020820152600061329f6060830185613124565b905060018060a01b0383166040830152949350505050565b600681106132c7576132c7612b8c565b9052565b600081518084526020808501945080840160005b8381101561315457815160ff16875295820195908201906001016132df565b80516001600160a01b0316825260006101e0602083015161332a60208601826001600160a01b03169052565b506040830151604085015260608301516133576060860182805160ff908116835260209182015116910152565b50608083015161336c60a086018260000b9052565b5060a083015160ff811660c08601525060c083015160ff811660e08601525060e08301516101006133a18187018360ff169052565b8085015191505061012082818701526133bc838701836132cb565b9250808501519150506101406133d68187018360ff169052565b84015190506101606133eb8682018315159052565b84015190506101806134008682018315159052565b84015190506101a06134158682018315159052565b808501516101c087015250508091505092915050565b600981106132c7576132c7612b8c565b85815260a0602082015261345460a08201865115159052565b6000602086015161028060c0840152613471610320840182613124565b9050604087015160e08401526060870151610100818186015260808901519150610120828187015260a08a015192506101406134dc8188018560ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b60c08b015193506101c06134fa818901866001600160a01b03169052565b60e08c015194506101e085818a0152848d01516102008a0152838d01516102208a0152828d015195506135316102408a01876132b7565b6101608d0151805160ff9081166102608c01526020820151166102808b015295506101808d01519550609f19945084898803016102a08a01526135748787613124565b96506101a08d0151955084898803016102c08a01526135938787613124565b9650818d0151955084898803016102e08a01526135b08787613124565b9650808d01519550505050508085840301610300860152506135d28282613124565b91505085604084015282810360608401526135ed81866132fe565b9150506135fd608083018461342b565b969550505050505056fea264697066735822122002c66da9b09bee1f8b38054bc5ee1f1a1fbee9d45a317b853de7490b236f1a5464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80638da5cb5b1161008a578063c06fad0611610059578063c06fad0614610251578063d72be09d14610271578063dc0b356414610291578063f2fde38b146102b157600080fd5b80638da5cb5b146101e0578063955a015b146101fe5780639fca1ee11461021e578063a8ca85bb1461023e57600080fd5b8063425c38d8116100c6578063425c38d81461016b5780635a29638d1461018b578063715018a6146101ab5780637ddae103146101c057600080fd5b806310a2cd0d146100ed5780633deaec2b146101295780634102b1a714610149575b600080fd5b3480156100f957600080fd5b5060015461010d906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b34801561013557600080fd5b5060035461010d906001600160a01b031681565b34801561015557600080fd5b50610169610164366004612216565b6102d1565b005b34801561017757600080fd5b50610169610186366004612238565b610354565b34801561019757600080fd5b5060025461010d906001600160a01b031681565b3480156101b757600080fd5b506101696103dd565b3480156101cc57600080fd5b5060065461010d906001600160a01b031681565b3480156101ec57600080fd5b506000546001600160a01b031661010d565b34801561020a57600080fd5b5060045461010d906001600160a01b031681565b34801561022a57600080fd5b5060085461010d906001600160a01b031681565b61016961024c3660046123a8565b6103f1565b34801561025d57600080fd5b5060055461010d906001600160a01b031681565b34801561027d57600080fd5b5061016961028c3660046124a8565b61206d565b34801561029d57600080fd5b5060075461010d906001600160a01b031681565b3480156102bd57600080fd5b506101696102cc36600461253e565b6120f3565b6102d961216c565b60048054604080518082018252600080825260208201529051631751422560e01b81526001600160a01b039092169263175142259261031e9287929091879101612562565b600060405180830381600087803b15801561033857600080fd5b505af115801561034c573d6000803e3d6000fd5b505050505050565b61035c61216c565b6004805460408051808201825260ff8087168252851660208201529051631751422560e01b81526001600160a01b03909216926317514225926103a59289929091899101612562565b600060405180830381600087803b1580156103bf57600080fd5b505af11580156103d3573d6000803e3d6000fd5b5050505050505050565b6103e561216c565b6103ef60006121c6565b565b6007546040516310f67fb360e01b8152600481018890526000916001600160a01b0316906310f67fb390602401600060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104639190810190612682565b60048054604051630dfd338360e31b81529182018b90529192506000916001600160a01b031690636fe99c1890602401600060405180830381865afa1580156104b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d89190810190612898565b6001546040808501519051634810bc5960e01b81529293506000926001600160a01b0390921691634810bc59916105159160040190815260200190565b6101e060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190612acf565b90508161012001516000146105b35760405162461bcd60e51b815260206004820152601860248201527f4d757374207265736f6c7665206576656e74206669727374000000000000000060448201526064015b60405180910390fd5b81516105f35760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b60448201526064016105aa565b82516001600160a01b0316331461064c5760405162461bcd60e51b815260206004820152601760248201527f53656e646572206e6f7420706c61796572206f776e657200000000000000000060448201526064016105aa565b60038360c0015160ff16106106955760405162461bcd60e51b815260206004820152600f60248201526e139bc81858dd1a5bdb9cc81b19599d608a1b60448201526064016105aa565b81602001518260400151815181106106af576106af612b76565b602002602001015189146106f55760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b60448201526064016105aa565b6000600389600881111561070b5761070b612b8c565b036107485781606001516020015160000b84610120015160000b13156107435760405162461bcd60e51b81526004016105aa90612ba2565b611fb6565b600289600881111561075c5761075c612b8c565b03610ddb5781606001516020015160000b84610120015160000b13156107945760405162461bcd60e51b81526004016105aa90612ba2565b60035460e084015160608601518051602090910151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018990526000916001600160a01b031690636ea1dcd890608401606060405180830381865afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612bd2565b905060028160400151600481111561084657610846612b8c565b1480610867575060038160400151600481111561086557610865612b8c565b145b806108775750602081015160ff16155b6108cf5760405162461bcd60e51b815260206004820152602360248201527f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f636044820152621ad95960ea1b60648201526084016105aa565b6001816040015160048111156108e7576108e7612b8c565b0361096b5760035460e085015160608701518051602090910151604051635921522360e01b81526001600160a01b039094169363592152239361093893909290918e90600290600090600401612c43565b600060405180830381600087803b15801561095257600080fd5b505af1158015610966573d6000803e3d6000fd5b505050505b6002546060860151604051634a8fe1ff60e11b81526000926001600160a01b03169163951fc3fe916109a1918d91600401612c86565b6040805180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612caa565b905060018a60018111156109f7576109f7612b8c565b03610d5d57600254604051634a8fe1ff60e11b81526000916001600160a01b03169063951fc3fe90610a2f908c908690600401612c86565b6040805180830381865afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612caa565b60035460e088015184516020860151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018c90529192506000916001600160a01b0390911690636ea1dcd890608401606060405180830381865afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190612bd2565b9050600281604001516004811115610b2057610b20612b8c565b1480610b415750600381604001516004811115610b3f57610b3f612b8c565b145b80610b515750602081015160ff16155b610ba95760405162461bcd60e51b815260206004820152602360248201527f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f636044820152621ad95960ea1b60648201526084016105aa565b60035460e0880151604051630f78220b60e11b815260048101919091526000916001600160a01b031690631ef0441690602401600060405180830381865afa158015610bf9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c219190810190612d8d565b9050600281856000015160ff1681518110610c3e57610c3e612b76565b6020026020010151856020015160ff1681518110610c5e57610c5e612b76565b60200260200101516000015160ff1611610cae5760405162461bcd60e51b8152602060048201526011602482015270149bdbdb481b9bdd08195e1c1b1bdc9959607a1b60448201526064016105aa565b600182604001516004811115610cc657610cc6612b8c565b03610d5757600360009054906101000a90046001600160a01b03166001600160a01b031663592152238960e00151866000015187602001518f600260006040518763ffffffff1660e01b8152600401610d2496959493929190612c43565b600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b505050505b50909150505b600460009054906101000a90046001600160a01b03166001600160a01b031663175142258e838f6040518463ffffffff1660e01b8152600401610da293929190612562565b600060405180830381600087803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e3d6000fd5b505050505050611fb6565b6000896008811115610def57610def612b8c565b036111675781606001516020015160000b84610120015160000b1315610e275760405162461bcd60e51b81526004016105aa90612ba2565b60035460e084015160608601518051602090910151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018990526000916001600160a01b031690636ea1dcd890608401606060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190612bd2565b9050600181604001516004811115610ed957610ed9612b8c565b14610f185760405162461bcd60e51b815260206004820152600f60248201526e111bdbdc881b9bdd0818db1bdcd959608a1b60448201526064016105aa565b600260009054906101000a90046001600160a01b03166001600160a01b0316635dc969678d85606001516060015184602001516040518463ffffffff1660e01b8152600401610f7d9392919092835260ff918216602084015216604082015260600190565b6020604051808303816000875af1158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190612e9c565b156111615760035460e085015160608701518051602090910151604051635921522360e01b81526001600160a01b039094169363592152239361101193909290918e90600290600090600401612c43565b600060405180830381600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b506001925061104c915050565b89600181111561105e5761105e612b8c565b0361116157600460009054906101000a90046001600160a01b03166001600160a01b031663175142258d600260009054906101000a90046001600160a01b03166001600160a01b031663951fc3fe8c8a606001516040518363ffffffff1660e01b81526004016110cf929190612c86565b6040805180830381865afa1580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f9190612caa565b8e6040518463ffffffff1660e01b815260040161112e93929190612562565b600060405180830381600087803b15801561114857600080fd5b505af115801561115c573d6000803e3d6000fd5b505050505b50611fb6565b600189600881111561117b5761117b612b8c565b0361139a5781606001516020015160000b84610120015160000b13156111b35760405162461bcd60e51b81526004016105aa90612ba2565b60035460e084015160608601518051602090910151604051630dd43b9b60e31b8152600481019390935260ff9182166024840152166044820152606481018990526000916001600160a01b031690636ea1dcd890608401606060405180830381865afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190612bd2565b905060018160400151600481111561126557611265612b8c565b146112a45760405162461bcd60e51b815260206004820152600f60248201526e111bdbdc881b9bdd0818db1bdcd959608a1b60448201526064016105aa565b600260009054906101000a90046001600160a01b03166001600160a01b0316635dc969678d85606001516080015184600001516040518463ffffffff1660e01b81526004016113099392919092835260ff918216602084015216604082015260600190565b6020604051808303816000875af1158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190612e9c565b15611161576003805460e086015160608801518051602090910151604051635921522360e01b81526001600160a01b0390941694635921522394611011949392918f91600090600401612c43565b60048960088111156113ae576113ae612b8c565b036117f1575060035460e08301516060850151805160209091015160405163f9dfbfcb60e01b81526001946000946001600160a01b039091169363f9dfbfcb9361140e9360040192835260ff918216602084015216604082015260600190565b61014060405180830381865afa15801561142c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114509190612eb7565b60808101519091501561149b5760405162461bcd60e51b8152602060048201526013602482015272149bdbdb48185b1c9958591e481b1bdbdd1959606a1b60448201526064016105aa565b60035460e08501516060870151805160209091015160405162a1871b60e21b8152600481019390935260ff91821660248401521660448201526000916001600160a01b0316906302861c6c9060640160a060405180830381865afa158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b9190612ed4565b90506000816060015160ff16118061154a57506000816040015160ff16115b61158e5760405162461bcd60e51b815260206004820152601560248201527443616e2774206c6f6f7420656d70747920726f6f6d60581b60448201526064016105aa565b64174876e800816040015160ff166115a69190612f70565b34146115f45760405162461bcd60e51b815260206004820152601860248201527f57726f6e67207061796d656e7420696e20616374696f6e73000000000000000060448201526064016105aa565b60035460e08601516060880151805160209091015160405163086e529d60e41b8152600481019390935260ff91821660248401521660448201526001600160a01b03909116906386e529d090606401600060405180830381600087803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b50505050600760009054906101000a90046001600160a01b03166001600160a01b031663b69071948d83606001516040518363ffffffff1660e01b81526004016116c892919091825260ff16602082015260400190565b600060405180830381600087803b1580156116e257600080fd5b505af11580156116f6573d6000803e3d6000fd5b5050505060005b816040015160ff168110156117b057600560009054906101000a90046001600160a01b03166001600160a01b031663aa3eb1b564174876e8008f8a600001516040518463ffffffff1660e01b815260040161176b9291909182526001600160a01b0316602082015260400190565b6000604051808303818588803b15801561178457600080fd5b505af1158015611798573d6000803e3d6000fd5b505050505080806117a890612f8d565b9150506116fd565b50600754604080830151905163fe23e2df60e01b8152600481018f905260ff90911660248201526001600160a01b039091169063fe23e2df90604401610da2565b600589600881111561180557611805612b8c565b03611a305781606001516020015160000b84610120015160000b131561183d5760405162461bcd60e51b81526004016105aa90612ba2565b60035460e08401516060860151805160209091015160405162a1871b60e21b8152600481019390935260ff91821660248401521660448201526000916001600160a01b0316906302861c6c9060640160a060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190612ed4565b600654602082015160405163c82c37b960e01b81529293506000926001600160a01b039092169163c82c37b99161190a9160040190815260200190565b600060405180830381865afa158015611927573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261194f9190810190613033565b905080602001511515600115151461199f5760405162461bcd60e51b8152602060048201526013602482015272115d995b9d081b9bdd081c195c9b585b995b9d606a1b60448201526064016105aa565b600760009054906101000a90046001600160a01b03166001600160a01b031663ed8619618d8f8860e001518a60600151876020015160006040518763ffffffff1660e01b8152600401610da2969594939291909586526020808701959095526040860193909352815160ff9081166060870152919093015116608084015260a083019190915260c082015260e00190565b6006896008811115611a4457611a44612b8c565b03611a7c5781606001516020015160000b84610120015160000b13156107435760405162461bcd60e51b81526004016105aa90612ba2565b6007896008811115611a9057611a90612b8c565b03611b945750600754845160405163351dacdf60e01b81526001926001600160a01b03169163351dacdf91611ad2918e91600401918252602082015260400190565b600060405180830381600087803b158015611aec57600080fd5b505af1158015611b00573d6000803e3d6000fd5b50505050600560009054906101000a90046001600160a01b03166001600160a01b03166311ff70478c878760600151600001518860600151602001518f6040518663ffffffff1660e01b8152600401611b5d95949392919061315f565b600060405180830381600087803b158015611b7757600080fd5b505af1158015611b8b573d6000803e3d6000fd5b50505050611fb6565b6008896008811115611ba857611ba8612b8c565b03611f6e57600480546040516302c497fb60e11b81526000926001600160a01b03909216916305892ff691611bdf918a9101613196565b600060405180830381865afa158015611bfc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c2491908101906131a9565b905060005b8151811015611ecd57818181518110611c4457611c44612b76565b6020026020010151606001516000015160ff1686606001516000015160ff1614611ca55760405162461bcd60e51b8152602060048201526012602482015271506c61796572206e6f74206174206974656d60701b60448201526064016105aa565b818181518110611cb757611cb7612b76565b6020026020010151606001516020015160ff1686606001516020015160ff1614611d185760405162461bcd60e51b8152602060048201526012602482015271506c61796572206e6f74206174206974656d60701b60448201526064016105aa565b6000828281518110611d2c57611d2c612b76565b6020026020010151604001516003811115611d4957611d49612b8c565b1480611d8357506001828281518110611d6457611d64612b76565b6020026020010151604001516003811115611d8157611d81612b8c565b145b611dcf5760405162461bcd60e51b815260206004820152601e60248201527f4974656d20697320646973636172646564206f722064657374726f796564000060448201526064016105aa565b8c828281518110611de257611de2612b76565b60200260200101516000015114611e335760405162461bcd60e51b81526020600482015260156024820152744974656d206e6f7420696e20746869732067616d6560581b60448201526064016105aa565b6000828281518110611e4757611e47612b76565b6020026020010151604001516003811115611e6457611e64612b8c565b03611ebb5760405162461bcd60e51b815260206004820152602160248201527f556e6b6e6f776e206974656d73206e6f742079657420696d706c656d656e74656044820152601960fa1b60648201526084016105aa565b80611ec581612f8d565b915050611c29565b50600754865160405163fe23e2df60e01b8152600481018e90526024810191909152600193506001600160a01b039091169063fe23e2df90604401600060405180830381600087803b158015611f2257600080fd5b505af1158015611f36573d6000803e3d6000fd5b505060055487516040516307bc9a2360e21b81526001600160a01b039092169350631ef2688c925061112e918f918b91600401613286565b60405162461bcd60e51b815260206004820152601860248201527f4552524f523a2042616420616374696f6e20636f6e666967000000000000000060448201526064016105aa565b60048054604051630aa6e80360e41b81529182018d9052602482018c905282151560448301526001600160a01b03169063aa6e803090606401600060405180830381600087803b15801561200957600080fd5b505af115801561201d573d6000803e3d6000fd5b505050507f47d8a10cd6d278cdcd3ba78a5644a816c4fc82977c7699a483bfce11d1a45caf8b848c878d60405161205895949392919061343b565b60405180910390a15050505050505050505050565b61207561216c565b600180546001600160a01b03199081166001600160a01b03998a1617909155600280548216978916979097179096556003805487169588169590951790945560048054861693871693909317909255600580548516918616919091179055600680548416918516919091179055600780549092169216919091179055565b6120fb61216c565b6001600160a01b0381166121605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105aa565b612169816121c6565b50565b6000546001600160a01b031633146103ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105aa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561222957600080fd5b50508035926020909101359150565b6000806000806080858703121561224e57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156122a2576122a261226a565b60405290565b6040516101c081016001600160401b03811182821017156122a2576122a261226a565b604051608081016001600160401b03811182821017156122a2576122a261226a565b60405161020081016001600160401b03811182821017156122a2576122a261226a565b60405160e081016001600160401b03811182821017156122a2576122a261226a565b60405161012081016001600160401b03811182821017156122a2576122a261226a565b604051601f8201601f191681016001600160401b038111828210171561237d5761237d61226a565b604052919050565b60006001600160401b0382111561239e5761239e61226a565b5060051b60200190565b600080600080600080600060e0888a0312156123c357600080fd5b8735965060208089013596506040890135600981106123e157600080fd5b95506060890135600281106123f557600080fd5b94506080890135935060a0890135925060c08901356001600160401b0381111561241e57600080fd5b8901601f81018b1361242f57600080fd5b803561244261243d82612385565b612355565b81815260059190911b8201830190838101908d83111561246157600080fd5b928401925b8284101561247f57833582529284019290840190612466565b809550505050505092959891949750929550565b6001600160a01b038116811461216957600080fd5b600080600080600080600060e0888a0312156124c357600080fd5b87356124ce81612493565b965060208801356124de81612493565b955060408801356124ee81612493565b945060608801356124fe81612493565b9350608088013561250e81612493565b925060a088013561251e81612493565b915060c088013561252e81612493565b8091505092959891949750929550565b60006020828403121561255057600080fd5b813561255b81612493565b9392505050565b838152608081016125866020830185805160ff908116835260209182015116910152565b826060830152949350505050565b805161259f81612493565b919050565b805160ff8116811461259f57600080fd5b6000604082840312156125c757600080fd5b6125cf612280565b90506125da826125a4565b81526125e8602083016125a4565b602082015292915050565b8051600081900b811461259f57600080fd5b600082601f83011261261657600080fd5b8151602061262661243d83612385565b82815260059290921b8401810191818101908684111561264557600080fd5b8286015b848110156126675761265a816125a4565b8352918301918301612649565b509695505050505050565b8051801515811461259f57600080fd5b60006020828403121561269457600080fd5b81516001600160401b03808211156126ab57600080fd5b908301906101e082860312156126c057600080fd5b6126c86122a8565b6126d183612594565b81526126df60208401612594565b6020820152604083015160408201526126fb86606085016125b5565b606082015261270c60a084016125f3565b608082015261271d60c084016125a4565b60a082015261272e60e084016125a4565b60c08201526101006127418185016125a4565b60e0830152610120808501518481111561275a57600080fd5b61276689828801612605565b8385015250610140935061277b8486016125a4565b908301525061016061278e848201612672565b8383015261018092506127a2838501612672565b908201526101a06127b4848201612672565b928201929092526101c09290920151908201529392505050565b600082601f8301126127df57600080fd5b815160206127ef61243d83612385565b82815260059290921b8401810191818101908684111561280e57600080fd5b8286015b848110156126675780518352918301918301612812565b60006080828403121561283b57600080fd5b6128436122cb565b905061284e826125a4565b815261285c602083016125a4565b602082015261286d604083016125a4565b604082015261287e606083016125a4565b606082015292915050565b80516006811061259f57600080fd5b6000602082840312156128aa57600080fd5b81516001600160401b03808211156128c157600080fd5b9083019061028082860312156128d657600080fd5b6128de6122ed565b6128e783612672565b81526020830151828111156128fb57600080fd5b612907878286016127ce565b6020830152506040830151604082015260608301516060820152608083015160808201526129388660a08501612829565b60a082015261012061294b818501612594565b60c08301526101408085015160e08401526101608086015161010085015261018080870151848601526101a09350612984848801612889565b838601526101c092506129998a8489016125b5565b828601526102008701519150858211156129b257600080fd5b6129be8a8389016127ce565b9085015250610220850151848111156129d657600080fd5b6129e2898288016127ce565b83850152506102408501519150838211156129fc57600080fd5b612a08888387016127ce565b908301525061026083015182811115612a2057600080fd5b612a2c878286016127ce565b6101e08301525095945050505050565b600060e08284031215612a4e57600080fd5b612a56612310565b9050612a61826125f3565b8152612a6f602083016125f3565b6020820152612a80604083016125f3565b6040820152612a91606083016125f3565b6060820152612aa2608083016125f3565b6080820152612ab360a083016125f3565b60a0820152612ac460c083016125f3565b60c082015292915050565b60006101e08284031215612ae257600080fd5b612aea612332565b825181526020830151602082015260408301516040820152612b0f8460608501612a3c565b6060820152612b2161014084016125a4565b6080820152612b3361016084016125a4565b60a0820152612b4561018084016125a4565b60c0820152612b576101a084016125a4565b60e0820152612b696101c08401612672565b6101008201529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b602080825260169082015275486f6c64696e6720746f6f206d616e79206974656d7360501b604082015260600190565b600060608284031215612be457600080fd5b604051606081018181106001600160401b0382111715612c0657612c0661226a565b604052612c12836125a4565b8152612c20602084016125a4565b6020820152604083015160058110612c3757600080fd5b60408201529392505050565b86815260ff8681166020830152851660408201526060810184905260c0810160058410612c7257612c72612b8c565b608082019390935260a00152949350505050565b8281526060810161255b6020830184805160ff908116835260209182015116910152565b600060408284031215612cbc57600080fd5b61255b83836125b5565b60006101408284031215612cd957600080fd5b612ce1612310565b9050612cec826125a4565b81526020612cfb8184016125a4565b8183015283605f840112612d0e57600080fd5b612d166122cb565b8060c0850186811115612d2857600080fd5b604086015b81811015612d445780518452928401928401612d2d565b50816040860152612d5481612672565b606086015250505050612d6960e08301612672565b6080820152612d7b6101008301612672565b60a0820152612ac46101208301612672565b60006020808385031215612da057600080fd5b82516001600160401b0380821115612db757600080fd5b818501915085601f830112612dcb57600080fd5b8151612dd961243d82612385565b81815260059190911b83018401908481019088831115612df857600080fd5b8585015b83811015612e8f57805185811115612e1357600080fd5b8601603f81018b13612e2457600080fd5b87810151612e3461243d82612385565b8181526101409182028301604001918a820191908e841115612e565760008081fd5b6040850194505b83851015612e7e57612e6f8f86612cc6565b835293840193918b0191612e5d565b508652505050918601918601612dfc565b5098975050505050505050565b600060208284031215612eae57600080fd5b61255b82612672565b60006101408284031215612eca57600080fd5b61255b8383612cc6565b600060a08284031215612ee657600080fd5b60405160a081018181106001600160401b0382111715612f0857612f0861226a565b604052612f1483612889565b815260208301516020820152612f2c604084016125a4565b6040820152612f3d606084016125a4565b6060820152612f4e60808401612672565b60808201529392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417612f8757612f87612f5a565b92915050565b600060018201612f9f57612f9f612f5a565b5060010190565b600082601f830112612fb757600080fd5b81516020612fc761243d83612385565b82815260069290921b84018101918181019086841115612fe657600080fd5b8286015b8481101561266757604081890312156130035760008081fd5b61300b612280565b81516017811061301b5760008081fd5b81528185015185820152835291830191604001612fea565b60006020828403121561304557600080fd5b81516001600160401b038082111561305c57600080fd5b9083019060e0828603121561307057600080fd5b613078612310565b8251815261308860208401612672565b6020820152613099604084016125a4565b60408201526130aa606084016125a4565b60608201526080830151828111156130c157600080fd5b6130cd87828601612fa6565b60808301525060a0830151828111156130e557600080fd5b6130f187828601612fa6565b60a08301525060c08301518281111561310957600080fd5b61311587828601612fa6565b60c08301525095945050505050565b600081518084526020808501945080840160005b8381101561315457815187529582019590820190600101613138565b509495945050505050565b85815260a06020820152600061317860a0830187613124565b60ff9586166040840152939094166060820152608001529392505050565b60208152600061255b6020830184613124565b600060208083850312156131bc57600080fd5b82516001600160401b038111156131d257600080fd5b8301601f810185136131e357600080fd5b80516131f161243d82612385565b81815260a0918202830184019184820191908884111561321057600080fd5b938501935b8385101561327a5780858a03121561322d5760008081fd5b6132356122cb565b855181528686015187820152604080870151600481106132555760008081fd5b9082015260606132678b8883016125b5565b9082015283529384019391850191613215565b50979650505050505050565b83815260606020820152600061329f6060830185613124565b905060018060a01b0383166040830152949350505050565b600681106132c7576132c7612b8c565b9052565b600081518084526020808501945080840160005b8381101561315457815160ff16875295820195908201906001016132df565b80516001600160a01b0316825260006101e0602083015161332a60208601826001600160a01b03169052565b506040830151604085015260608301516133576060860182805160ff908116835260209182015116910152565b50608083015161336c60a086018260000b9052565b5060a083015160ff811660c08601525060c083015160ff811660e08601525060e08301516101006133a18187018360ff169052565b8085015191505061012082818701526133bc838701836132cb565b9250808501519150506101406133d68187018360ff169052565b84015190506101606133eb8682018315159052565b84015190506101806134008682018315159052565b84015190506101a06134158682018315159052565b808501516101c087015250508091505092915050565b600981106132c7576132c7612b8c565b85815260a0602082015261345460a08201865115159052565b6000602086015161028060c0840152613471610320840182613124565b9050604087015160e08401526060870151610100818186015260808901519150610120828187015260a08a015192506101406134dc8188018560ff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301525050565b60c08b015193506101c06134fa818901866001600160a01b03169052565b60e08c015194506101e085818a0152848d01516102008a0152838d01516102208a0152828d015195506135316102408a01876132b7565b6101608d0151805160ff9081166102608c01526020820151166102808b015295506101808d01519550609f19945084898803016102a08a01526135748787613124565b96506101a08d0151955084898803016102c08a01526135938787613124565b9650818d0151955084898803016102e08a01526135b08787613124565b9650808d01519550505050508085840301610300860152506135d28282613124565b91505085604084015282810360608401526135ed81866132fe565b9150506135fd608083018461342b565b969550505050505056fea264697066735822122002c66da9b09bee1f8b38054bc5ee1f1a1fbee9d45a317b853de7490b236f1a5464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Actions.sol:Actions",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2114,
        "contract": "contracts/Actions.sol:Actions",
        "label": "chars",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CharInterface)1845"
      },
      {
        "astId": 2117,
        "contract": "contracts/Actions.sol:Actions",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)1868"
      },
      {
        "astId": 2120,
        "contract": "contracts/Actions.sol:Actions",
        "label": "maps",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MapInterface)1952"
      },
      {
        "astId": 2123,
        "contract": "contracts/Actions.sol:Actions",
        "label": "games",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(GamesInterface)1990"
      },
      {
        "astId": 2126,
        "contract": "contracts/Actions.sol:Actions",
        "label": "items",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ItemsInterface)2022"
      },
      {
        "astId": 2129,
        "contract": "contracts/Actions.sol:Actions",
        "label": "bcEvents",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(EventsInterface)2063"
      },
      {
        "astId": 2132,
        "contract": "contracts/Actions.sol:Actions",
        "label": "players",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(PlayersInterface)2109"
      },
      {
        "astId": 2134,
        "contract": "contracts/Actions.sol:Actions",
        "label": "charsAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CharInterface)1845": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(EventsInterface)2063": {
        "encoding": "inplace",
        "label": "contract EventsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(GamesInterface)1990": {
        "encoding": "inplace",
        "label": "contract GamesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)2022": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)1952": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PlayersInterface)2109": {
        "encoding": "inplace",
        "label": "contract PlayersInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)1868": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      }
    }
  }
}