{
  "address": "0xA46748b141Bd180C3D94c48E593724178fF032A0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "charContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "healthDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "inventoryIDs",
              "type": "uint8[]"
            },
            {
              "internalType": "bool",
              "name": "canHarmOthers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct BCTypes.Player",
          "name": "player",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "ActionCompleteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        }
      ],
      "name": "debugMovePlayerForTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.Followthrough",
          "name": "_followthrough",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_1stDirection",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_2ndDirection",
          "type": "uint256"
        }
      ],
      "name": "doAction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "games",
      "outputs": [
        {
          "internalType": "contract GamesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gamesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1ee7089dc5a0a9b46c4a660156c76ecb2775b182cd21c30522aa7f5323bd5af",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0xA46748b141Bd180C3D94c48E593724178fF032A0",
    "transactionIndex": 6,
    "gasUsed": "3693035",
    "logsBloom": "0x
    "blockHash": "0x365bf76f08d407ccf859235673661cd809b47957f3766b65a73656b01407dd6f",
    "transactionHash": "0xc1ee7089dc5a0a9b46c4a660156c76ecb2775b182cd21c30522aa7f5323bd5af",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 28998370,
        "transactionHash": "0xc1ee7089dc5a0a9b46c4a660156c76ecb2775b182cd21c30522aa7f5323bd5af",
        "address": "0xA46748b141Bd180C3D94c48E593724178fF032A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x365bf76f08d407ccf859235673661cd809b47957f3766b65a73656b01407dd6f"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 28998370,
        "transactionHash": "0xc1ee7089dc5a0a9b46c4a660156c76ecb2775b182cd21c30522aa7f5323bd5af",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002debc9019d01000000000000000000000000000000000000000000000000000eade5f673b5356700000000000000000000000000000000000000000000175685449b3aa3b5bcbf0000000000000000000000000000000000000000000000000e7ffa2d7218346700000000000000000000000000000000000000000000175685728703a552bdbf",
        "logIndex": 26,
        "blockHash": "0x365bf76f08d407ccf859235673661cd809b47957f3766b65a73656b01407dd6f"
      }
    ],
    "blockNumber": 28998370,
    "cumulativeGasUsed": "4559458",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1b1da7861813629c3e9659a29993196a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"healthDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"inventoryIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct BCTypes.Player\",\"name\":\"player\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"ActionCompleteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"debugMovePlayerForTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.Followthrough\",\"name\":\"_followthrough\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_1stDirection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_2ndDirection\",\"type\":\"uint256\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GamesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gamesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Actions.sol\":\"Actions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Actions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ninterface CharInterface {\\n    function characters(uint _id) external view returns(BCTypes.Character memory);\\n    function incrementCloneNumber(uint _charId) external;\\n}\\n\\ninterface UtilsInterface {\\n    // function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll() external returns (uint8);\\n    // function abs(int x) external pure returns(int);\\n    // function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n    function resolveChallenge(uint _for, uint _against) external returns(bool);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n    function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) external view returns (BCTypes.GameTile memory);\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) external view returns (BCTypes.Door memory);\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) external;\\n    function discoverRoom(uint _mapId, uint _row, uint _col) external returns (bool);\\n    function resetOpenDoors(uint _mapId) external;\\n    function setLooted(uint _mapId, uint _row, uint _col) external;\\n    function extGetRoom(uint _mapId, uint _row, uint _col) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface GamesInterface {\\n    function extGetPlayer(uint _id) external view returns(BCTypes.Player memory);\\n    function extGetGame(uint _id) external view returns(BCTypes.Game memory);\\n    function extMovePlayer(uint _mapId, BCTypes.Position memory _position, uint _playerId) external;\\n    function grantDataToPlayer(uint _playerId, uint8 amount) external;\\n    function endPlayerAction(uint _gameId, uint _playerId) external;\\n}\\n\\ninterface ItemsInterface {\\n    function lootItem(uint _holdingPlayerId, address _holderAddress) external payable;\\n}\\n\\ncontract Actions is Ownable {\\n\\n    CharInterface public chars;\\n    UtilsInterface public utils;\\n    MapInterface public maps;\\n    GamesInterface public games;\\n    ItemsInterface public items;\\n\\n    address public charsAddress;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _utilsAddress,\\n        address _mapsAddress,\\n        address _gamesAddress,\\n        address _itemsAddress)\\n        public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        maps = MapInterface(_mapsAddress);\\n        games = GamesInterface(_gamesAddress);\\n        items = ItemsInterface(_itemsAddress);\\n    }\\n\\n    event ActionCompleteEvent(uint currentPlayerTurnIndex, BCTypes.Player player, BCTypes.Action action);\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3; // TODO: Duped in BCGames.sol\\n\\n    uint constant START_ROOM_ID = 2; // TODO: Duplicated in BCMaps.sol\\n    uint8 constant UNDISCOVERED_ROOM = 1;\\n\\n    uint constant ITEM_COST = 100 gwei;  // TODO: Duplicated in UniversalInventory\\n\\n    // TODO: Decompose\\n    function doAction(\\n        uint _gameId,\\n        uint _playerId,\\n        BCTypes.Action _action,\\n        BCTypes.Followthrough _followthrough,\\n        // Using room positions requires more checks, try to avoid\\n        // Position memory _roomPos, // For followthrough move, shoot, etc.\\n        uint _1stDirection, // NSEW 4==in room\\n        uint _2ndDirection  // NSEW 4==in room\\n        ) public payable\\n    {\\n        // Universal requirements for all actions\\n        // TODO: Player must not be dead!\\n        // TODO: Optimize?  Would it actually be better to make a local copy of the player stats?\\n        // TODO: Optimize:  Since using memory now, explore just getting what is needed\\n        // TODO: WHY DO I NEED EXT FOR PLAYER AND GAME BUT NOT CHAR?????\\n        BCTypes.Player memory currentPlayer = games.extGetPlayer(_playerId);\\n        BCTypes.Game memory currentGame = games.extGetGame(_gameId); // Games are huge, get less\\n        BCTypes.Character memory currentChar = chars.characters(currentPlayer.characterId);\\n\\n        require(currentGame.active, \\\"Game not active\\\");\\n        require(msg.sender == currentPlayer.owner, \\\"Sender not player owner\\\");\\n        require(currentPlayer.actionsTaken < DEFAULT_ACTIONS_NUM, \\\"No actions left\\\"); // TODO: Confirm this won't ever trigger // TODO: Get effects and items\\n        require(_playerId == currentGame.playerIndexes[currentGame.currentPlayerTurnIndex], \\\"Not your turn\\\");\\n\\n        // TODO: Add respawn action for living or dead players\\n        // TODO: Require player to drop items before any other actions if holding too many\\n        // TODO: Check for value here?\\n\\n        if (_action == BCTypes.Action.PASS) {\\n            // Do nothing\\n        } else if (_action == BCTypes.Action.MOVE) {\\n            // Main move\\n            // TODO: Handle using door number 4 to represent in room and DRY\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    firstRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    firstRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"1st Door not open/breached/unlocked\\\");\\n\\n            if(firstRefDoor.status == BCTypes.DoorStatus.CLOSED) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.OPEN);\\n            }\\n\\n            BCTypes.Position memory targetRoomPos = utils.getNeighborRoom(_1stDirection, currentPlayer.position);\\n\\n            // Followthrough\\n            if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                BCTypes.Position memory secondRoom = utils.getNeighborRoom(_2ndDirection, targetRoomPos);\\n                BCTypes.Door memory secondRefDoor = maps.getDoor(currentGame.mapId, targetRoomPos.row, targetRoomPos.col, _2ndDirection);\\n                require(secondRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    secondRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    secondRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"2nd Door not open/breached/unlocked\\\");\\n\\n                BCTypes.GameTile[][] memory currentMap = maps.extGetBoard(currentGame.mapId);\\n                require(currentMap[targetRoomPos.row][targetRoomPos.col].roomId > START_ROOM_ID, \\\"Room not explored\\\");\\n\\n                if(secondRefDoor.status == BCTypes.DoorStatus.CLOSED) {\\n                    maps.setDoorFromPos(\\n                        currentGame.mapId,\\n                        targetRoomPos.row,\\n                        targetRoomPos.col,\\n                        _2ndDirection,\\n                        BCTypes.DoorStatus.OPEN);\\n                }\\n                targetRoomPos = secondRoom;\\n            }\\n            games.extMovePlayer(currentGame.mapId, targetRoomPos, _playerId);\\n\\n        } else if (_action == BCTypes.Action.HACK) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n\\n            if (utils.resolveChallenge(currentChar.traits.hack, firstRefDoor.vsHack)) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.OPEN);\\n                // TODO: DRY - consolidate with breach\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    games.extMovePlayer(\\n                        currentGame.mapId,\\n                        utils.getNeighborRoom(_1stDirection, currentPlayer.position),\\n                        _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n            }\\n        } else if (_action == BCTypes.Action.BREACH) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n\\n            if (utils.resolveChallenge(currentChar.traits.breach, firstRefDoor.vsBreach)) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.BREACHED);\\n                // TODO: DRY - consolidate with hack\\n                // console.log(\\\"Roll succeeded\\\");\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    games.extMovePlayer(\\n                        currentGame.mapId,\\n                        utils.getNeighborRoom(_1stDirection, currentPlayer.position),\\n                        _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n                // TODO: Handle breaching into space\\n            }\\n        } else if(_action == BCTypes.Action.LOOT) {\\n            // TODO: Looting should not cost an action\\n            console.log(\\\"Starting loot action\\\");\\n            BCTypes.GameTile memory currentTile = maps.extGetGameTile(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            require(currentTile.looted == false, \\\"Room already looted\\\");\\n\\n            BCTypes.RoomTile memory currentRoomTile = maps.extGetRoom(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            require((currentRoomTile.numData > 0 || currentRoomTile.numItems > 0), \\\"Can't loot empty room\\\");\\n            require(msg.value == currentRoomTile.numItems * ITEM_COST, \\\"Wrong payment in actions\\\");\\n            maps.setLooted(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n\\n            games.grantDataToPlayer(_playerId, currentRoomTile.numData);\\n\\n\\n            for(uint i = 0; i < currentRoomTile.numItems; i++) {\\n                // TODO: Confirm this is ok because I control destination address\\n                items.lootItem{value: 100 gwei}(_playerId, address(games));\\n            }\\n\\n        } else {\\n            revert(\\\"ERROR: Bad action config\\\");\\n        }\\n\\n        games.endPlayerAction(_gameId, _playerId);\\n\\n        emit ActionCompleteEvent(currentGame.currentPlayerTurnIndex, currentPlayer, _action);\\n    }\\n\\n    // Move player to 0,0 for various mechanic tests\\n    function debugMovePlayerForTesting(uint _mapId, uint _playerId) public onlyOwner {\\n        games.extMovePlayer(_mapId, BCTypes.Position(0, 0), _playerId);\\n    }\\n}\\n\",\"keccak256\":\"0x271097f20ca4e918f02eadfc13489f504dfc9d6e01783805b116934d9399ff53\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x9f66a4e65d4153df6b166945090637137e3a90aa3efb95315789cf391af23395\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61418980620001146000396000f3fe6080604052600436106100a75760003560e01c8063955a015b11610064578063955a015b146101985780639fca1ee1146101c3578063c06fad06146101ee578063e847ae1e14610219578063f069869914610242578063f2fde38b1461025e576100a7565b806310a2cd0d146100ac5780633deaec2b146100d75780634102b1a7146101025780635a29638d1461012b578063715018a6146101565780638da5cb5b1461016d575b600080fd5b3480156100b857600080fd5b506100c1610287565b6040516100ce9190612277565b60405180910390f35b3480156100e357600080fd5b506100ec6102ad565b6040516100f991906122b3565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190612318565b6102d3565b005b34801561013757600080fd5b5061014061038c565b60405161014d9190612379565b60405180910390f35b34801561016257600080fd5b5061016b6103b2565b005b34801561017957600080fd5b506101826103c6565b60405161018f91906123b5565b60405180910390f35b3480156101a457600080fd5b506101ad6103ef565b6040516101ba91906123f1565b60405180910390f35b3480156101cf57600080fd5b506101d8610415565b6040516101e591906123b5565b60405180910390f35b3480156101fa57600080fd5b5061020361043b565b604051610210919061242d565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b9190612474565b610461565b005b61025c60048036038101906102579190612539565b6105b5565b005b34801561026a57600080fd5b50610285600480360381019061028091906125c6565b611f68565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102db611fec565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317514225836040518060400160405280600060ff168152602001600060ff16815250846040518463ffffffff1660e01b81526004016103569392919061264d565b600060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103ba611fec565b6103c4600061206a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610469611fec565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310f67fb3876040518263ffffffff1660e01b81526004016106129190612684565b600060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106589190612a3b565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fe99c18896040518263ffffffff1660e01b81526004016106b79190612684565b600060405180830381865afa1580156106d4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106fd9190612ca7565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634810bc5984604001516040518263ffffffff1660e01b81526004016107609190612684565b6101e060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a29190612ebe565b905081600001516107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90612f49565b60405180910390fd5b826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085190612fb5565b60405180910390fd5b60038360c0015160ff16106108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b90613021565b60405180910390fd5b81602001518260400151815181106108bf576108be613041565b5b60200260200101518814610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff906130bc565b60405180910390fd5b6003600481111561091c5761091b6130dc565b5b87600481111561092f5761092e6130dc565b5b141561093a57611e8f565b6002600481111561094e5761094d6130dc565b5b876004811115610961576109606130dc565b5b141561112d576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016109de949392919061313c565b606060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f919061320a565b905060026004811115610a3557610a346130dc565b5b81604001516004811115610a4c57610a4b6130dc565b5b1480610a80575060036004811115610a6757610a666130dc565b5b81604001516004811115610a7e57610a7d6130dc565b5b145b80610a9257506000816020015160ff16145b610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac8906132a9565b60405180910390fd5b60016004811115610ae557610ae46130dc565b5b81604001516004811115610afc57610afb6130dc565b5b1415610bad57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b8152600401610b7a959493929190613311565b600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8887606001516040518363ffffffff1660e01b8152600401610c10929190613364565b6040805180830381865afa158015610c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c50919061338d565b9050600180811115610c6557610c646130dc565b5b886001811115610c7857610c776130dc565b5b1415611091576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88846040518363ffffffff1660e01b8152600401610cdd929190613364565b6040805180830381865afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d919061338d565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88760e00151856000015186602001518c6040518563ffffffff1660e01b8152600401610d8e949392919061313c565b606060405180830381865afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf919061320a565b905060026004811115610de557610de46130dc565b5b81604001516004811115610dfc57610dfb6130dc565b5b1480610e30575060036004811115610e1757610e166130dc565b5b81604001516004811115610e2e57610e2d6130dc565b5b145b80610e4257506000816020015160ff16145b610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e789061342c565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ef044168860e001516040518263ffffffff1660e01b8152600401610ee29190612684565b600060405180830381865afa158015610eff573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f289190613745565b9050600281856000015160ff1681518110610f4657610f45613041565b5b6020026020010151856020015160ff1681518110610f6757610f66613041565b5b60200260200101516000015160ff1611610fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fad906137da565b60405180910390fd5b60016004811115610fca57610fc96130dc565b5b82604001516004811115610fe157610fe06130dc565b5b141561108a57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48860e00151866000015187602001518d60026040518663ffffffff1660e01b8152600401611057959493929190613311565b600060405180830381600087803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b505050505b8293505050505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258560e00151838d6040518463ffffffff1660e01b81526004016110f49392919061264d565b600060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050505050611e8e565b60006004811115611141576111406130dc565b5b876004811115611154576111536130dc565b5b1415611543576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016111d1949392919061313c565b606060405180830381865afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611212919061320a565b905060016004811115611228576112276130dc565b5b8160400151600481111561123f5761123e6130dc565b5b1461127f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127690613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516060015183602001516040518363ffffffff1660e01b81526004016112e8929190613866565b6020604051808303816000875af1158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b919061388f565b1561153d57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b81526004016113a8959493929190613311565b600060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506001808111156113ed576113ec6130dc565b5b876001811115611400576113ff6130dc565b5b141561153c57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b81526004016114aa929190613364565b6040805180830381865afa1580156114c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ea919061338d565b8c6040518463ffffffff1660e01b81526004016115099392919061264d565b600060405180830381600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b505050505b5b50611e8d565b60016004811115611557576115566130dc565b5b87600481111561156a576115696130dc565b5b1415611959576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016115e7949392919061313c565b606060405180830381865afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611628919061320a565b90506001600481111561163e5761163d6130dc565b5b81604001516004811115611655576116546130dc565b5b14611695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168c90613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516080015183600001516040518363ffffffff1660e01b81526004016116fe929190613866565b6020604051808303816000875af115801561171d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611741919061388f565b1561195357600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60036040518663ffffffff1660e01b81526004016117be959493929190613311565b600060405180830381600087803b1580156117d857600080fd5b505af11580156117ec573d6000803e3d6000fd5b50505050600180811115611803576118026130dc565b5b876001811115611816576118156130dc565b5b141561195257600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b81526004016118c0929190613364565b6040805180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611900919061338d565b8c6040518463ffffffff1660e01b815260040161191f9392919061264d565b600060405180830381600087803b15801561193957600080fd5b505af115801561194d573d6000803e3d6000fd5b505050505b5b50611e8c565b60048081111561196c5761196b6130dc565b5b87600481111561197f5761197e6130dc565b5b1415611e50576119c36040518060400160405280601481526020017f5374617274696e67206c6f6f7420616374696f6e00000000000000000000000081525061212e565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9dfbfcb8460e001518660600151600001518760600151602001516040518463ffffffff1660e01b8152600401611a38939291906138bc565b61012060405180830381865afa158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7a91906138f3565b9050600015158160800151151514611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe9061396d565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302861c6c8560e001518760600151600001518860600151602001516040518463ffffffff1660e01b8152600401611b3c939291906138bc565b60c060405180830381865afa158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d9190613a52565b90506000816060015160ff161180611b9c57506000816040015160ff16115b611bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd290613acb565b60405180910390fd5b64174876e800816040015160ff16611bf39190613b1a565b3414611c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2b90613bc0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386e529d08560e001518760600151600001518860600151602001516040518463ffffffff1660e01b8152600401611ca7939291906138bc565b600060405180830381600087803b158015611cc157600080fd5b505af1158015611cd5573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b69071948b83606001516040518363ffffffff1660e01b8152600401611d3a929190613bef565b600060405180830381600087803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b5050505060005b816040015160ff16811015611e4857600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa3eb1b564174876e8008d600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401611e03929190613c18565b6000604051808303818588803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b50505050508080611e4090613c41565b915050611d6f565b505050611e8b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8290613cd6565b60405180910390fd5b5b5b5b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360fe842e8a8a6040518363ffffffff1660e01b8152600401611eec929190613cf6565b600060405180830381600087803b158015611f0657600080fd5b505af1158015611f1a573d6000803e3d6000fd5b505050507f81f0468752500ded70032fadd8011a832ccdbaddfc2cae78738f1a5f78e5f49082604001518489604051611f5593929190613f7e565b60405180910390a1505050505050505050565b611f70611fec565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd79061402e565b60405180910390fd5b611fe98161206a565b50565b611ff46121c7565b73ffffffffffffffffffffffffffffffffffffffff166120126103c6565b73ffffffffffffffffffffffffffffffffffffffff1614612068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205f9061409a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6121c4816040516024016121429190614131565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121cf565b50565b600033905090565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061223d612238612233846121f8565b612218565b6121f8565b9050919050565b600061224f82612222565b9050919050565b600061226182612244565b9050919050565b61227181612256565b82525050565b600060208201905061228c6000830184612268565b92915050565b600061229d82612244565b9050919050565b6122ad81612292565b82525050565b60006020820190506122c860008301846122a4565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6122f5816122e2565b811461230057600080fd5b50565b600081359050612312816122ec565b92915050565b6000806040838503121561232f5761232e6122d8565b5b600061233d85828601612303565b925050602061234e85828601612303565b9150509250929050565b600061236382612244565b9050919050565b61237381612358565b82525050565b600060208201905061238e600083018461236a565b92915050565b600061239f826121f8565b9050919050565b6123af81612394565b82525050565b60006020820190506123ca60008301846123a6565b92915050565b60006123db82612244565b9050919050565b6123eb816123d0565b82525050565b600060208201905061240660008301846123e2565b92915050565b600061241782612244565b9050919050565b6124278161240c565b82525050565b6000602082019050612442600083018461241e565b92915050565b61245181612394565b811461245c57600080fd5b50565b60008135905061246e81612448565b92915050565b600080600080600060a086880312156124905761248f6122d8565b5b600061249e8882890161245f565b95505060206124af8882890161245f565b94505060406124c08882890161245f565b93505060606124d18882890161245f565b92505060806124e28882890161245f565b9150509295509295909350565b600581106124fc57600080fd5b50565b60008135905061250e816124ef565b92915050565b6002811061252157600080fd5b50565b60008135905061253381612514565b92915050565b60008060008060008060c08789031215612556576125556122d8565b5b600061256489828a01612303565b965050602061257589828a01612303565b955050604061258689828a016124ff565b945050606061259789828a01612524565b93505060806125a889828a01612303565b92505060a06125b989828a01612303565b9150509295509295509295565b6000602082840312156125dc576125db6122d8565b5b60006125ea8482850161245f565b91505092915050565b6125fc816122e2565b82525050565b600060ff82169050919050565b61261881612602565b82525050565b604082016000820151612634600085018261260f565b506020820151612647602085018261260f565b50505050565b600060808201905061266260008301866125f3565b61266f602083018561261e565b61267c60608301846125f3565b949350505050565b600060208201905061269960008301846125f3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126ed826126a4565b810181811067ffffffffffffffff8211171561270c5761270b6126b5565b5b80604052505050565b600061271f6122ce565b905061272b82826126e4565b919050565b600080fd5b60008151905061274481612448565b92915050565b600081519050612759816122ec565b92915050565b61276881612602565b811461277357600080fd5b50565b6000815190506127858161275f565b92915050565b6000604082840312156127a1576127a061269f565b5b6127ab6040612715565b905060006127bb84828501612776565b60008301525060206127cf84828501612776565b60208301525092915050565b600080fd5b600067ffffffffffffffff8211156127fb576127fa6126b5565b5b602082029050602081019050919050565b600080fd5b600061282461281f846127e0565b612715565b905080838252602082019050602084028301858111156128475761284661280c565b5b835b81811015612870578061285c8882612776565b845260208401935050602081019050612849565b5050509392505050565b600082601f83011261288f5761288e6127db565b5b815161289f848260208601612811565b91505092915050565b60008115159050919050565b6128bd816128a8565b81146128c857600080fd5b50565b6000815190506128da816128b4565b92915050565b60006101a082840312156128f7576128f661269f565b5b612902610180612715565b9050600061291284828501612735565b600083015250602061292684828501612735565b602083015250604061293a8482850161274a565b604083015250606061294e8482850161278b565b60608301525060a061296284828501612776565b60808301525060c061297684828501612776565b60a08301525060e061298a84828501612776565b60c08301525061010061299f84828501612776565b60e08301525061012082015167ffffffffffffffff8111156129c4576129c3612730565b5b6129d08482850161287a565b6101008301525061014082015167ffffffffffffffff8111156129f6576129f5612730565b5b612a028482850161287a565b61012083015250610160612a18848285016128cb565b61014083015250610180612a2e848285016128cb565b6101608301525092915050565b600060208284031215612a5157612a506122d8565b5b600082015167ffffffffffffffff811115612a6f57612a6e6122dd565b5b612a7b848285016128e0565b91505092915050565b600067ffffffffffffffff821115612a9f57612a9e6126b5565b5b602082029050602081019050919050565b6000612ac3612abe84612a84565b612715565b90508083825260208201905060208402830185811115612ae657612ae561280c565b5b835b81811015612b0f5780612afb888261274a565b845260208401935050602081019050612ae8565b5050509392505050565b600082601f830112612b2e57612b2d6127db565b5b8151612b3e848260208601612ab0565b91505092915050565b600060808284031215612b5d57612b5c61269f565b5b612b676080612715565b90506000612b7784828501612776565b6000830152506020612b8b84828501612776565b6020830152506040612b9f84828501612776565b6040830152506060612bb384828501612776565b60608301525092915050565b60006101608284031215612bd657612bd561269f565b5b612be1610100612715565b90506000612bf1848285016128cb565b600083015250602082015167ffffffffffffffff811115612c1557612c14612730565b5b612c2184828501612b19565b6020830152506040612c358482850161274a565b6040830152506060612c498482850161274a565b6060830152506080612c5d8482850161274a565b60808301525060a0612c7184828501612b47565b60a083015250610120612c8684828501612735565b60c083015250610140612c9b8482850161274a565b60e08301525092915050565b600060208284031215612cbd57612cbc6122d8565b5b600082015167ffffffffffffffff811115612cdb57612cda6122dd565b5b612ce784828501612bbf565b91505092915050565b6000819050919050565b612d0381612cf0565b8114612d0e57600080fd5b50565b600081519050612d2081612cfa565b92915050565b600060e08284031215612d3c57612d3b61269f565b5b612d4660e0612715565b90506000612d5684828501612776565b6000830152506020612d6a84828501612776565b6020830152506040612d7e84828501612776565b6040830152506060612d9284828501612776565b6060830152506080612da684828501612776565b60808301525060a0612dba84828501612776565b60a08301525060c0612dce84828501612776565b60c08301525092915050565b60006101e08284031215612df157612df061269f565b5b612dfc610120612715565b90506000612e0c84828501612d11565b6000830152506020612e208482850161274a565b6020830152506040612e348482850161274a565b6040830152506060612e4884828501612d26565b606083015250610140612e5d84828501612776565b608083015250610160612e7284828501612776565b60a083015250610180612e8784828501612776565b60c0830152506101a0612e9c84828501612776565b60e0830152506101c0612eb1848285016128cb565b6101008301525092915050565b60006101e08284031215612ed557612ed46122d8565b5b6000612ee384828501612dda565b91505092915050565b600082825260208201905092915050565b7f47616d65206e6f74206163746976650000000000000000000000000000000000600082015250565b6000612f33600f83612eec565b9150612f3e82612efd565b602082019050919050565b60006020820190508181036000830152612f6281612f26565b9050919050565b7f53656e646572206e6f7420706c61796572206f776e6572000000000000000000600082015250565b6000612f9f601783612eec565b9150612faa82612f69565b602082019050919050565b60006020820190508181036000830152612fce81612f92565b9050919050565b7f4e6f20616374696f6e73206c6566740000000000000000000000000000000000600082015250565b600061300b600f83612eec565b915061301682612fd5565b602082019050919050565b6000602082019050818103600083015261303a81612ffe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000600082015250565b60006130a6600d83612eec565b91506130b182613070565b602082019050919050565b600060208201905081810360008301526130d581613099565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600061312661312161311c84612602565b612218565b6122e2565b9050919050565b6131368161310b565b82525050565b600060808201905061315160008301876125f3565b61315e602083018661312d565b61316b604083018561312d565b61317860608301846125f3565b95945050505050565b6005811061318e57600080fd5b50565b6000815190506131a081613181565b92915050565b6000606082840312156131bc576131bb61269f565b5b6131c66060612715565b905060006131d684828501612776565b60008301525060206131ea84828501612776565b60208301525060406131fe84828501613191565b60408301525092915050565b6000606082840312156132205761321f6122d8565b5b600061322e848285016131a6565b91505092915050565b7f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b6000613293602383612eec565b915061329e82613237565b604082019050919050565b600060208201905081810360008301526132c281613286565b9050919050565b600581106132da576132d96130dc565b5b50565b60008190506132eb826132c9565b919050565b60006132fb826132dd565b9050919050565b61330b816132f0565b82525050565b600060a08201905061332660008301886125f3565b613333602083018761312d565b613340604083018661312d565b61334d60608301856125f3565b61335a6080830184613302565b9695505050505050565b600060608201905061337960008301856125f3565b613386602083018461261e565b9392505050565b6000604082840312156133a3576133a26122d8565b5b60006133b18482850161278b565b91505092915050565b7f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b6000613416602383612eec565b9150613421826133ba565b604082019050919050565b6000602082019050818103600083015261344581613409565b9050919050565b600067ffffffffffffffff821115613467576134666126b5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613493576134926126b5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156134bf576134be6126b5565b5b602082029050919050565b60006134dd6134d8846134a4565b612715565b905080602084028301858111156134f7576134f661280c565b5b835b81811015613520578061350c888261274a565b8452602084019350506020810190506134f9565b5050509392505050565b600082601f83011261353f5761353e6127db565b5b600461354c8482856134ca565b91505092915050565b6000610120828403121561356c5761356b61269f565b5b61357660c0612715565b9050600061358684828501612776565b600083015250602061359a84828501612776565b60208301525060406135ae8482850161352a565b60408301525060c06135c2848285016128cb565b60608301525060e06135d6848285016128cb565b6080830152506101006135eb848285016128cb565b60a08301525092915050565b600061360a61360584613478565b612715565b905080838252602082019050610120840283018581111561362e5761362d61280c565b5b835b8181101561365857806136438882613555565b84526020840193505061012081019050613630565b5050509392505050565b600082601f830112613677576136766127db565b5b81516136878482602086016135f7565b91505092915050565b60006136a361369e8461344c565b612715565b905080838252602082019050602084028301858111156136c6576136c561280c565b5b835b8181101561370d57805167ffffffffffffffff8111156136eb576136ea6127db565b5b8086016136f88982613662565b855260208501945050506020810190506136c8565b5050509392505050565b600082601f83011261372c5761372b6127db565b5b815161373c848260208601613690565b91505092915050565b60006020828403121561375b5761375a6122d8565b5b600082015167ffffffffffffffff811115613779576137786122dd565b5b61378584828501613717565b91505092915050565b7f526f6f6d206e6f74206578706c6f726564000000000000000000000000000000600082015250565b60006137c4601183612eec565b91506137cf8261378e565b602082019050919050565b600060208201905081810360008301526137f3816137b7565b9050919050565b7f446f6f72206e6f7420636c6f7365640000000000000000000000000000000000600082015250565b6000613830600f83612eec565b915061383b826137fa565b602082019050919050565b6000602082019050818103600083015261385f81613823565b9050919050565b600060408201905061387b600083018561312d565b613888602083018461312d565b9392505050565b6000602082840312156138a5576138a46122d8565b5b60006138b3848285016128cb565b91505092915050565b60006060820190506138d160008301866125f3565b6138de602083018561312d565b6138eb604083018461312d565b949350505050565b6000610120828403121561390a576139096122d8565b5b600061391884828501613555565b91505092915050565b7f526f6f6d20616c7265616479206c6f6f74656400000000000000000000000000600082015250565b6000613957601383612eec565b915061396282613921565b602082019050919050565b600060208201905081810360008301526139868161394a565b9050919050565b6005811061399a57600080fd5b50565b6000815190506139ac8161398d565b92915050565b600060c082840312156139c8576139c761269f565b5b6139d260c0612715565b905060006139e28482850161399d565b60008301525060206139f68482850161274a565b6020830152506040613a0a84828501612776565b6040830152506060613a1e84828501612776565b6060830152506080613a32848285016128cb565b60808301525060a0613a46848285016128cb565b60a08301525092915050565b600060c08284031215613a6857613a676122d8565b5b6000613a76848285016139b2565b91505092915050565b7f43616e2774206c6f6f7420656d70747920726f6f6d0000000000000000000000600082015250565b6000613ab5601583612eec565b9150613ac082613a7f565b602082019050919050565b60006020820190508181036000830152613ae481613aa8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b25826122e2565b9150613b30836122e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b6957613b68613aeb565b5b828202905092915050565b7f57726f6e67207061796d656e7420696e20616374696f6e730000000000000000600082015250565b6000613baa601883612eec565b9150613bb582613b74565b602082019050919050565b60006020820190508181036000830152613bd981613b9d565b9050919050565b613be981612602565b82525050565b6000604082019050613c0460008301856125f3565b613c116020830184613be0565b9392505050565b6000604082019050613c2d60008301856125f3565b613c3a60208301846123a6565b9392505050565b6000613c4c826122e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c7f57613c7e613aeb565b5b600182019050919050565b7f4552524f523a2042616420616374696f6e20636f6e6669670000000000000000600082015250565b6000613cc0601883612eec565b9150613ccb82613c8a565b602082019050919050565b60006020820190508181036000830152613cef81613cb3565b9050919050565b6000604082019050613d0b60008301856125f3565b613d1860208301846125f3565b9392505050565b613d2881612394565b82525050565b613d37816122e2565b82525050565b604082016000820151613d53600085018261260f565b506020820151613d66602085018261260f565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613da4838361260f565b60208301905092915050565b6000602082019050919050565b6000613dc882613d6c565b613dd28185613d77565b9350613ddd83613d88565b8060005b83811015613e0e578151613df58882613d98565b9750613e0083613db0565b925050600181019050613de1565b5085935050505092915050565b613e24816128a8565b82525050565b60006101a083016000830151613e436000860182613d1f565b506020830151613e566020860182613d1f565b506040830151613e696040860182613d2e565b506060830151613e7c6060860182613d3d565b506080830151613e8f60a086018261260f565b5060a0830151613ea260c086018261260f565b5060c0830151613eb560e086018261260f565b5060e0830151613ec961010086018261260f565b50610100830151848203610120860152613ee38282613dbd565b915050610120830151848203610140860152613eff8282613dbd565b915050610140830151613f16610160860182613e1b565b50610160830151613f2b610180860182613e1b565b508091505092915050565b60058110613f4757613f466130dc565b5b50565b6000819050613f5882613f36565b919050565b6000613f6882613f4a565b9050919050565b613f7881613f5d565b82525050565b6000606082019050613f9360008301866125f3565b8181036020830152613fa58185613e2a565b9050613fb46040830184613f6f565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614018602683612eec565b915061402382613fbc565b604082019050919050565b600060208201905081810360008301526140478161400b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614084602083612eec565b915061408f8261404e565b602082019050919050565b600060208201905081810360008301526140b381614077565b9050919050565b600081519050919050565b60005b838110156140e35780820151818401526020810190506140c8565b838111156140f2576000848401525b50505050565b6000614103826140ba565b61410d8185612eec565b935061411d8185602086016140c5565b614126816126a4565b840191505092915050565b6000602082019050818103600083015261414b81846140f8565b90509291505056fea2646970667358221220f1c00ae8b723f93d4c040af2dacec481f8c003e5f0a4f2fd0146bd9b66acfa7264736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063955a015b11610064578063955a015b146101985780639fca1ee1146101c3578063c06fad06146101ee578063e847ae1e14610219578063f069869914610242578063f2fde38b1461025e576100a7565b806310a2cd0d146100ac5780633deaec2b146100d75780634102b1a7146101025780635a29638d1461012b578063715018a6146101565780638da5cb5b1461016d575b600080fd5b3480156100b857600080fd5b506100c1610287565b6040516100ce9190612277565b60405180910390f35b3480156100e357600080fd5b506100ec6102ad565b6040516100f991906122b3565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190612318565b6102d3565b005b34801561013757600080fd5b5061014061038c565b60405161014d9190612379565b60405180910390f35b34801561016257600080fd5b5061016b6103b2565b005b34801561017957600080fd5b506101826103c6565b60405161018f91906123b5565b60405180910390f35b3480156101a457600080fd5b506101ad6103ef565b6040516101ba91906123f1565b60405180910390f35b3480156101cf57600080fd5b506101d8610415565b6040516101e591906123b5565b60405180910390f35b3480156101fa57600080fd5b5061020361043b565b604051610210919061242d565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b9190612474565b610461565b005b61025c60048036038101906102579190612539565b6105b5565b005b34801561026a57600080fd5b50610285600480360381019061028091906125c6565b611f68565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102db611fec565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317514225836040518060400160405280600060ff168152602001600060ff16815250846040518463ffffffff1660e01b81526004016103569392919061264d565b600060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103ba611fec565b6103c4600061206a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610469611fec565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310f67fb3876040518263ffffffff1660e01b81526004016106129190612684565b600060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106589190612a3b565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fe99c18896040518263ffffffff1660e01b81526004016106b79190612684565b600060405180830381865afa1580156106d4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106fd9190612ca7565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634810bc5984604001516040518263ffffffff1660e01b81526004016107609190612684565b6101e060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a29190612ebe565b905081600001516107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90612f49565b60405180910390fd5b826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085190612fb5565b60405180910390fd5b60038360c0015160ff16106108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b90613021565b60405180910390fd5b81602001518260400151815181106108bf576108be613041565b5b60200260200101518814610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff906130bc565b60405180910390fd5b6003600481111561091c5761091b6130dc565b5b87600481111561092f5761092e6130dc565b5b141561093a57611e8f565b6002600481111561094e5761094d6130dc565b5b876004811115610961576109606130dc565b5b141561112d576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016109de949392919061313c565b606060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f919061320a565b905060026004811115610a3557610a346130dc565b5b81604001516004811115610a4c57610a4b6130dc565b5b1480610a80575060036004811115610a6757610a666130dc565b5b81604001516004811115610a7e57610a7d6130dc565b5b145b80610a9257506000816020015160ff16145b610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac8906132a9565b60405180910390fd5b60016004811115610ae557610ae46130dc565b5b81604001516004811115610afc57610afb6130dc565b5b1415610bad57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b8152600401610b7a959493929190613311565b600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8887606001516040518363ffffffff1660e01b8152600401610c10929190613364565b6040805180830381865afa158015610c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c50919061338d565b9050600180811115610c6557610c646130dc565b5b886001811115610c7857610c776130dc565b5b1415611091576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88846040518363ffffffff1660e01b8152600401610cdd929190613364565b6040805180830381865afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d919061338d565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88760e00151856000015186602001518c6040518563ffffffff1660e01b8152600401610d8e949392919061313c565b606060405180830381865afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf919061320a565b905060026004811115610de557610de46130dc565b5b81604001516004811115610dfc57610dfb6130dc565b5b1480610e30575060036004811115610e1757610e166130dc565b5b81604001516004811115610e2e57610e2d6130dc565b5b145b80610e4257506000816020015160ff16145b610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e789061342c565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ef044168860e001516040518263ffffffff1660e01b8152600401610ee29190612684565b600060405180830381865afa158015610eff573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f289190613745565b9050600281856000015160ff1681518110610f4657610f45613041565b5b6020026020010151856020015160ff1681518110610f6757610f66613041565b5b60200260200101516000015160ff1611610fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fad906137da565b60405180910390fd5b60016004811115610fca57610fc96130dc565b5b82604001516004811115610fe157610fe06130dc565b5b141561108a57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48860e00151866000015187602001518d60026040518663ffffffff1660e01b8152600401611057959493929190613311565b600060405180830381600087803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b505050505b8293505050505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258560e00151838d6040518463ffffffff1660e01b81526004016110f49392919061264d565b600060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050505050611e8e565b60006004811115611141576111406130dc565b5b876004811115611154576111536130dc565b5b1415611543576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016111d1949392919061313c565b606060405180830381865afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611212919061320a565b905060016004811115611228576112276130dc565b5b8160400151600481111561123f5761123e6130dc565b5b1461127f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127690613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516060015183602001516040518363ffffffff1660e01b81526004016112e8929190613866565b6020604051808303816000875af1158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b919061388f565b1561153d57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b81526004016113a8959493929190613311565b600060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506001808111156113ed576113ec6130dc565b5b876001811115611400576113ff6130dc565b5b141561153c57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b81526004016114aa929190613364565b6040805180830381865afa1580156114c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ea919061338d565b8c6040518463ffffffff1660e01b81526004016115099392919061264d565b600060405180830381600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b505050505b5b50611e8d565b60016004811115611557576115566130dc565b5b87600481111561156a576115696130dc565b5b1415611959576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016115e7949392919061313c565b606060405180830381865afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611628919061320a565b90506001600481111561163e5761163d6130dc565b5b81604001516004811115611655576116546130dc565b5b14611695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168c90613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516080015183600001516040518363ffffffff1660e01b81526004016116fe929190613866565b6020604051808303816000875af115801561171d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611741919061388f565b1561195357600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60036040518663ffffffff1660e01b81526004016117be959493929190613311565b600060405180830381600087803b1580156117d857600080fd5b505af11580156117ec573d6000803e3d6000fd5b50505050600180811115611803576118026130dc565b5b876001811115611816576118156130dc565b5b141561195257600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b81526004016118c0929190613364565b6040805180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611900919061338d565b8c6040518463ffffffff1660e01b815260040161191f9392919061264d565b600060405180830381600087803b15801561193957600080fd5b505af115801561194d573d6000803e3d6000fd5b505050505b5b50611e8c565b60048081111561196c5761196b6130dc565b5b87600481111561197f5761197e6130dc565b5b1415611e50576119c36040518060400160405280601481526020017f5374617274696e67206c6f6f7420616374696f6e00000000000000000000000081525061212e565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9dfbfcb8460e001518660600151600001518760600151602001516040518463ffffffff1660e01b8152600401611a38939291906138bc565b61012060405180830381865afa158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7a91906138f3565b9050600015158160800151151514611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe9061396d565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302861c6c8560e001518760600151600001518860600151602001516040518463ffffffff1660e01b8152600401611b3c939291906138bc565b60c060405180830381865afa158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d9190613a52565b90506000816060015160ff161180611b9c57506000816040015160ff16115b611bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd290613acb565b60405180910390fd5b64174876e800816040015160ff16611bf39190613b1a565b3414611c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2b90613bc0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386e529d08560e001518760600151600001518860600151602001516040518463ffffffff1660e01b8152600401611ca7939291906138bc565b600060405180830381600087803b158015611cc157600080fd5b505af1158015611cd5573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b69071948b83606001516040518363ffffffff1660e01b8152600401611d3a929190613bef565b600060405180830381600087803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b5050505060005b816040015160ff16811015611e4857600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa3eb1b564174876e8008d600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401611e03929190613c18565b6000604051808303818588803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b50505050508080611e4090613c41565b915050611d6f565b505050611e8b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8290613cd6565b60405180910390fd5b5b5b5b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360fe842e8a8a6040518363ffffffff1660e01b8152600401611eec929190613cf6565b600060405180830381600087803b158015611f0657600080fd5b505af1158015611f1a573d6000803e3d6000fd5b505050507f81f0468752500ded70032fadd8011a832ccdbaddfc2cae78738f1a5f78e5f49082604001518489604051611f5593929190613f7e565b60405180910390a1505050505050505050565b611f70611fec565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd79061402e565b60405180910390fd5b611fe98161206a565b50565b611ff46121c7565b73ffffffffffffffffffffffffffffffffffffffff166120126103c6565b73ffffffffffffffffffffffffffffffffffffffff1614612068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205f9061409a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6121c4816040516024016121429190614131565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121cf565b50565b600033905090565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061223d612238612233846121f8565b612218565b6121f8565b9050919050565b600061224f82612222565b9050919050565b600061226182612244565b9050919050565b61227181612256565b82525050565b600060208201905061228c6000830184612268565b92915050565b600061229d82612244565b9050919050565b6122ad81612292565b82525050565b60006020820190506122c860008301846122a4565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6122f5816122e2565b811461230057600080fd5b50565b600081359050612312816122ec565b92915050565b6000806040838503121561232f5761232e6122d8565b5b600061233d85828601612303565b925050602061234e85828601612303565b9150509250929050565b600061236382612244565b9050919050565b61237381612358565b82525050565b600060208201905061238e600083018461236a565b92915050565b600061239f826121f8565b9050919050565b6123af81612394565b82525050565b60006020820190506123ca60008301846123a6565b92915050565b60006123db82612244565b9050919050565b6123eb816123d0565b82525050565b600060208201905061240660008301846123e2565b92915050565b600061241782612244565b9050919050565b6124278161240c565b82525050565b6000602082019050612442600083018461241e565b92915050565b61245181612394565b811461245c57600080fd5b50565b60008135905061246e81612448565b92915050565b600080600080600060a086880312156124905761248f6122d8565b5b600061249e8882890161245f565b95505060206124af8882890161245f565b94505060406124c08882890161245f565b93505060606124d18882890161245f565b92505060806124e28882890161245f565b9150509295509295909350565b600581106124fc57600080fd5b50565b60008135905061250e816124ef565b92915050565b6002811061252157600080fd5b50565b60008135905061253381612514565b92915050565b60008060008060008060c08789031215612556576125556122d8565b5b600061256489828a01612303565b965050602061257589828a01612303565b955050604061258689828a016124ff565b945050606061259789828a01612524565b93505060806125a889828a01612303565b92505060a06125b989828a01612303565b9150509295509295509295565b6000602082840312156125dc576125db6122d8565b5b60006125ea8482850161245f565b91505092915050565b6125fc816122e2565b82525050565b600060ff82169050919050565b61261881612602565b82525050565b604082016000820151612634600085018261260f565b506020820151612647602085018261260f565b50505050565b600060808201905061266260008301866125f3565b61266f602083018561261e565b61267c60608301846125f3565b949350505050565b600060208201905061269960008301846125f3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126ed826126a4565b810181811067ffffffffffffffff8211171561270c5761270b6126b5565b5b80604052505050565b600061271f6122ce565b905061272b82826126e4565b919050565b600080fd5b60008151905061274481612448565b92915050565b600081519050612759816122ec565b92915050565b61276881612602565b811461277357600080fd5b50565b6000815190506127858161275f565b92915050565b6000604082840312156127a1576127a061269f565b5b6127ab6040612715565b905060006127bb84828501612776565b60008301525060206127cf84828501612776565b60208301525092915050565b600080fd5b600067ffffffffffffffff8211156127fb576127fa6126b5565b5b602082029050602081019050919050565b600080fd5b600061282461281f846127e0565b612715565b905080838252602082019050602084028301858111156128475761284661280c565b5b835b81811015612870578061285c8882612776565b845260208401935050602081019050612849565b5050509392505050565b600082601f83011261288f5761288e6127db565b5b815161289f848260208601612811565b91505092915050565b60008115159050919050565b6128bd816128a8565b81146128c857600080fd5b50565b6000815190506128da816128b4565b92915050565b60006101a082840312156128f7576128f661269f565b5b612902610180612715565b9050600061291284828501612735565b600083015250602061292684828501612735565b602083015250604061293a8482850161274a565b604083015250606061294e8482850161278b565b60608301525060a061296284828501612776565b60808301525060c061297684828501612776565b60a08301525060e061298a84828501612776565b60c08301525061010061299f84828501612776565b60e08301525061012082015167ffffffffffffffff8111156129c4576129c3612730565b5b6129d08482850161287a565b6101008301525061014082015167ffffffffffffffff8111156129f6576129f5612730565b5b612a028482850161287a565b61012083015250610160612a18848285016128cb565b61014083015250610180612a2e848285016128cb565b6101608301525092915050565b600060208284031215612a5157612a506122d8565b5b600082015167ffffffffffffffff811115612a6f57612a6e6122dd565b5b612a7b848285016128e0565b91505092915050565b600067ffffffffffffffff821115612a9f57612a9e6126b5565b5b602082029050602081019050919050565b6000612ac3612abe84612a84565b612715565b90508083825260208201905060208402830185811115612ae657612ae561280c565b5b835b81811015612b0f5780612afb888261274a565b845260208401935050602081019050612ae8565b5050509392505050565b600082601f830112612b2e57612b2d6127db565b5b8151612b3e848260208601612ab0565b91505092915050565b600060808284031215612b5d57612b5c61269f565b5b612b676080612715565b90506000612b7784828501612776565b6000830152506020612b8b84828501612776565b6020830152506040612b9f84828501612776565b6040830152506060612bb384828501612776565b60608301525092915050565b60006101608284031215612bd657612bd561269f565b5b612be1610100612715565b90506000612bf1848285016128cb565b600083015250602082015167ffffffffffffffff811115612c1557612c14612730565b5b612c2184828501612b19565b6020830152506040612c358482850161274a565b6040830152506060612c498482850161274a565b6060830152506080612c5d8482850161274a565b60808301525060a0612c7184828501612b47565b60a083015250610120612c8684828501612735565b60c083015250610140612c9b8482850161274a565b60e08301525092915050565b600060208284031215612cbd57612cbc6122d8565b5b600082015167ffffffffffffffff811115612cdb57612cda6122dd565b5b612ce784828501612bbf565b91505092915050565b6000819050919050565b612d0381612cf0565b8114612d0e57600080fd5b50565b600081519050612d2081612cfa565b92915050565b600060e08284031215612d3c57612d3b61269f565b5b612d4660e0612715565b90506000612d5684828501612776565b6000830152506020612d6a84828501612776565b6020830152506040612d7e84828501612776565b6040830152506060612d9284828501612776565b6060830152506080612da684828501612776565b60808301525060a0612dba84828501612776565b60a08301525060c0612dce84828501612776565b60c08301525092915050565b60006101e08284031215612df157612df061269f565b5b612dfc610120612715565b90506000612e0c84828501612d11565b6000830152506020612e208482850161274a565b6020830152506040612e348482850161274a565b6040830152506060612e4884828501612d26565b606083015250610140612e5d84828501612776565b608083015250610160612e7284828501612776565b60a083015250610180612e8784828501612776565b60c0830152506101a0612e9c84828501612776565b60e0830152506101c0612eb1848285016128cb565b6101008301525092915050565b60006101e08284031215612ed557612ed46122d8565b5b6000612ee384828501612dda565b91505092915050565b600082825260208201905092915050565b7f47616d65206e6f74206163746976650000000000000000000000000000000000600082015250565b6000612f33600f83612eec565b9150612f3e82612efd565b602082019050919050565b60006020820190508181036000830152612f6281612f26565b9050919050565b7f53656e646572206e6f7420706c61796572206f776e6572000000000000000000600082015250565b6000612f9f601783612eec565b9150612faa82612f69565b602082019050919050565b60006020820190508181036000830152612fce81612f92565b9050919050565b7f4e6f20616374696f6e73206c6566740000000000000000000000000000000000600082015250565b600061300b600f83612eec565b915061301682612fd5565b602082019050919050565b6000602082019050818103600083015261303a81612ffe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000600082015250565b60006130a6600d83612eec565b91506130b182613070565b602082019050919050565b600060208201905081810360008301526130d581613099565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600061312661312161311c84612602565b612218565b6122e2565b9050919050565b6131368161310b565b82525050565b600060808201905061315160008301876125f3565b61315e602083018661312d565b61316b604083018561312d565b61317860608301846125f3565b95945050505050565b6005811061318e57600080fd5b50565b6000815190506131a081613181565b92915050565b6000606082840312156131bc576131bb61269f565b5b6131c66060612715565b905060006131d684828501612776565b60008301525060206131ea84828501612776565b60208301525060406131fe84828501613191565b60408301525092915050565b6000606082840312156132205761321f6122d8565b5b600061322e848285016131a6565b91505092915050565b7f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b6000613293602383612eec565b915061329e82613237565b604082019050919050565b600060208201905081810360008301526132c281613286565b9050919050565b600581106132da576132d96130dc565b5b50565b60008190506132eb826132c9565b919050565b60006132fb826132dd565b9050919050565b61330b816132f0565b82525050565b600060a08201905061332660008301886125f3565b613333602083018761312d565b613340604083018661312d565b61334d60608301856125f3565b61335a6080830184613302565b9695505050505050565b600060608201905061337960008301856125f3565b613386602083018461261e565b9392505050565b6000604082840312156133a3576133a26122d8565b5b60006133b18482850161278b565b91505092915050565b7f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b6000613416602383612eec565b9150613421826133ba565b604082019050919050565b6000602082019050818103600083015261344581613409565b9050919050565b600067ffffffffffffffff821115613467576134666126b5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613493576134926126b5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156134bf576134be6126b5565b5b602082029050919050565b60006134dd6134d8846134a4565b612715565b905080602084028301858111156134f7576134f661280c565b5b835b81811015613520578061350c888261274a565b8452602084019350506020810190506134f9565b5050509392505050565b600082601f83011261353f5761353e6127db565b5b600461354c8482856134ca565b91505092915050565b6000610120828403121561356c5761356b61269f565b5b61357660c0612715565b9050600061358684828501612776565b600083015250602061359a84828501612776565b60208301525060406135ae8482850161352a565b60408301525060c06135c2848285016128cb565b60608301525060e06135d6848285016128cb565b6080830152506101006135eb848285016128cb565b60a08301525092915050565b600061360a61360584613478565b612715565b905080838252602082019050610120840283018581111561362e5761362d61280c565b5b835b8181101561365857806136438882613555565b84526020840193505061012081019050613630565b5050509392505050565b600082601f830112613677576136766127db565b5b81516136878482602086016135f7565b91505092915050565b60006136a361369e8461344c565b612715565b905080838252602082019050602084028301858111156136c6576136c561280c565b5b835b8181101561370d57805167ffffffffffffffff8111156136eb576136ea6127db565b5b8086016136f88982613662565b855260208501945050506020810190506136c8565b5050509392505050565b600082601f83011261372c5761372b6127db565b5b815161373c848260208601613690565b91505092915050565b60006020828403121561375b5761375a6122d8565b5b600082015167ffffffffffffffff811115613779576137786122dd565b5b61378584828501613717565b91505092915050565b7f526f6f6d206e6f74206578706c6f726564000000000000000000000000000000600082015250565b60006137c4601183612eec565b91506137cf8261378e565b602082019050919050565b600060208201905081810360008301526137f3816137b7565b9050919050565b7f446f6f72206e6f7420636c6f7365640000000000000000000000000000000000600082015250565b6000613830600f83612eec565b915061383b826137fa565b602082019050919050565b6000602082019050818103600083015261385f81613823565b9050919050565b600060408201905061387b600083018561312d565b613888602083018461312d565b9392505050565b6000602082840312156138a5576138a46122d8565b5b60006138b3848285016128cb565b91505092915050565b60006060820190506138d160008301866125f3565b6138de602083018561312d565b6138eb604083018461312d565b949350505050565b6000610120828403121561390a576139096122d8565b5b600061391884828501613555565b91505092915050565b7f526f6f6d20616c7265616479206c6f6f74656400000000000000000000000000600082015250565b6000613957601383612eec565b915061396282613921565b602082019050919050565b600060208201905081810360008301526139868161394a565b9050919050565b6005811061399a57600080fd5b50565b6000815190506139ac8161398d565b92915050565b600060c082840312156139c8576139c761269f565b5b6139d260c0612715565b905060006139e28482850161399d565b60008301525060206139f68482850161274a565b6020830152506040613a0a84828501612776565b6040830152506060613a1e84828501612776565b6060830152506080613a32848285016128cb565b60808301525060a0613a46848285016128cb565b60a08301525092915050565b600060c08284031215613a6857613a676122d8565b5b6000613a76848285016139b2565b91505092915050565b7f43616e2774206c6f6f7420656d70747920726f6f6d0000000000000000000000600082015250565b6000613ab5601583612eec565b9150613ac082613a7f565b602082019050919050565b60006020820190508181036000830152613ae481613aa8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b25826122e2565b9150613b30836122e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b6957613b68613aeb565b5b828202905092915050565b7f57726f6e67207061796d656e7420696e20616374696f6e730000000000000000600082015250565b6000613baa601883612eec565b9150613bb582613b74565b602082019050919050565b60006020820190508181036000830152613bd981613b9d565b9050919050565b613be981612602565b82525050565b6000604082019050613c0460008301856125f3565b613c116020830184613be0565b9392505050565b6000604082019050613c2d60008301856125f3565b613c3a60208301846123a6565b9392505050565b6000613c4c826122e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c7f57613c7e613aeb565b5b600182019050919050565b7f4552524f523a2042616420616374696f6e20636f6e6669670000000000000000600082015250565b6000613cc0601883612eec565b9150613ccb82613c8a565b602082019050919050565b60006020820190508181036000830152613cef81613cb3565b9050919050565b6000604082019050613d0b60008301856125f3565b613d1860208301846125f3565b9392505050565b613d2881612394565b82525050565b613d37816122e2565b82525050565b604082016000820151613d53600085018261260f565b506020820151613d66602085018261260f565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613da4838361260f565b60208301905092915050565b6000602082019050919050565b6000613dc882613d6c565b613dd28185613d77565b9350613ddd83613d88565b8060005b83811015613e0e578151613df58882613d98565b9750613e0083613db0565b925050600181019050613de1565b5085935050505092915050565b613e24816128a8565b82525050565b60006101a083016000830151613e436000860182613d1f565b506020830151613e566020860182613d1f565b506040830151613e696040860182613d2e565b506060830151613e7c6060860182613d3d565b506080830151613e8f60a086018261260f565b5060a0830151613ea260c086018261260f565b5060c0830151613eb560e086018261260f565b5060e0830151613ec961010086018261260f565b50610100830151848203610120860152613ee38282613dbd565b915050610120830151848203610140860152613eff8282613dbd565b915050610140830151613f16610160860182613e1b565b50610160830151613f2b610180860182613e1b565b508091505092915050565b60058110613f4757613f466130dc565b5b50565b6000819050613f5882613f36565b919050565b6000613f6882613f4a565b9050919050565b613f7881613f5d565b82525050565b6000606082019050613f9360008301866125f3565b8181036020830152613fa58185613e2a565b9050613fb46040830184613f6f565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614018602683612eec565b915061402382613fbc565b604082019050919050565b600060208201905081810360008301526140478161400b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614084602083612eec565b915061408f8261404e565b602082019050919050565b600060208201905081810360008301526140b381614077565b9050919050565b600081519050919050565b60005b838110156140e35780820151818401526020810190506140c8565b838111156140f2576000848401525b50505050565b6000614103826140ba565b61410d8185612eec565b935061411d8185602086016140c5565b614126816126a4565b840191505092915050565b6000602082019050818103600083015261414b81846140f8565b90509291505056fea2646970667358221220f1c00ae8b723f93d4c040af2dacec481f8c003e5f0a4f2fd0146bd9b66acfa7264736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Actions.sol:Actions",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 474,
        "contract": "contracts/Actions.sol:Actions",
        "label": "chars",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CharInterface)301"
      },
      {
        "astId": 477,
        "contract": "contracts/Actions.sol:Actions",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)327"
      },
      {
        "astId": 480,
        "contract": "contracts/Actions.sol:Actions",
        "label": "maps",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MapInterface)420"
      },
      {
        "astId": 483,
        "contract": "contracts/Actions.sol:Actions",
        "label": "games",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(GamesInterface)461"
      },
      {
        "astId": 486,
        "contract": "contracts/Actions.sol:Actions",
        "label": "items",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ItemsInterface)469"
      },
      {
        "astId": 488,
        "contract": "contracts/Actions.sol:Actions",
        "label": "charsAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CharInterface)301": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(GamesInterface)461": {
        "encoding": "inplace",
        "label": "contract GamesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)469": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)420": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)327": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      }
    }
  }
}