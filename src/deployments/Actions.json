{
  "address": "0x2888F623491eFee3cD0fDAd1b48f468839769b97",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPlayerTurnIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "charContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "characterId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "row",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "col",
                  "type": "uint8"
                }
              ],
              "internalType": "struct BCTypes.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "healthDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "armorDmgTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "actionsTaken",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "dataTokens",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "currentEffects",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "inventoryIDs",
              "type": "uint8[]"
            },
            {
              "internalType": "bool",
              "name": "canHarmOthers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "dead",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct BCTypes.Player",
          "name": "player",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "enum BCTypes.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "ActionCompleteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "chars",
      "outputs": [
        {
          "internalType": "contract CharInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "enum BCTypes.Followthrough",
          "name": "_followthrough",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_1stDirection",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_2ndDirection",
          "type": "uint256"
        }
      ],
      "name": "doAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "games",
      "outputs": [
        {
          "internalType": "contract GamesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "items",
      "outputs": [
        {
          "internalType": "contract ItemsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maps",
      "outputs": [
        {
          "internalType": "contract MapInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gamesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_itemsAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c00b3ed287a9d8ed091280f72ef0d066916149a52376529137dab23e4095b8f",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0x2888F623491eFee3cD0fDAd1b48f468839769b97",
    "transactionIndex": 19,
    "gasUsed": "3448608",
    "logsBloom": "0x
    "blockHash": "0xc354dca9f8c8086f449ada56990f133f44ec483e8a3f0279a794ce038c03f586",
    "transactionHash": "0x7c00b3ed287a9d8ed091280f72ef0d066916149a52376529137dab23e4095b8f",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 28876238,
        "transactionHash": "0x7c00b3ed287a9d8ed091280f72ef0d066916149a52376529137dab23e4095b8f",
        "address": "0x2888F623491eFee3cD0fDAd1b48f468839769b97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0xc354dca9f8c8086f449ada56990f133f44ec483e8a3f0279a794ce038c03f586"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 28876238,
        "transactionHash": "0x7c00b3ed287a9d8ed091280f72ef0d066916149a52376529137dab23e4095b8f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001fb3975e7e4f000000000000000000000000000000000000000000000000004093b55464689bdb000000000000000000000000000000000000000000000000041502db6105d222000000000000000000000000000000000000000000000000407401bd05ea4cdb0000000000000000000000000000000000000000000000000434b672bf842122",
        "logIndex": 75,
        "blockHash": "0xc354dca9f8c8086f449ada56990f133f44ec483e8a3f0279a794ce038c03f586"
      }
    ],
    "blockNumber": 28876238,
    "cumulativeGasUsed": "6377045",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "106b24de3a9c6176496e0aea719f22ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPlayerTurnIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"healthDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armorDmgTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actionsTaken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dataTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"currentEffects\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"inventoryIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"canHarmOthers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dead\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct BCTypes.Player\",\"name\":\"player\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum BCTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"ActionCompleteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chars\",\"outputs\":[{\"internalType\":\"contract CharInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.Followthrough\",\"name\":\"_followthrough\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_1stDirection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_2ndDirection\",\"type\":\"uint256\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GamesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"internalType\":\"contract ItemsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"contract MapInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gamesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Actions.sol\":\"Actions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Actions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ninterface CharInterface {\\n    function characters(uint _id) external view returns(BCTypes.Character memory);\\n    function incrementCloneNumber(uint _charId) external;\\n}\\n\\ninterface UtilsInterface {\\n    // function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll() external returns (uint8);\\n    // function abs(int x) external pure returns(int);\\n    // function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n    function resolveChallenge(uint _for, uint _against) external returns(bool);\\n}\\n\\ninterface MapInterface {\\n    function createMap() external returns (uint);\\n    function extGetBoard(uint _mapId) external view returns (BCTypes.GameTile[][] memory);\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) external view returns (BCTypes.GameTile memory);\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) external view returns (BCTypes.Door memory);\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) external;\\n    function discoverRoom(uint _mapId, uint _row, uint _col) external returns (bool);\\n    function resetOpenDoors(uint _mapId) external;\\n    function setLooted(uint _mapId, uint _row, uint _col) external;\\n    function extGetRoom(uint _mapId, uint _row, uint _col) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface GamesInterface {\\n    function extGetPlayer(uint _id) external view returns(BCTypes.Player memory);\\n    function extGetGame(uint _id) external view returns(BCTypes.Game memory);\\n    function extMovePlayer(uint _mapId, BCTypes.Position memory _position, uint _playerId) external;\\n    function endPlayerAction(uint _gameId, uint _playerId) external;\\n    function grantData(uint _playerId, uint _amount) external;\\n}\\n\\ninterface ItemsInterface {\\n    function lootItem(uint _holdingPlayerId, address _holderAddress) external payable;\\n}\\n\\ncontract Actions is Ownable {\\n\\n    CharInterface public chars;\\n    UtilsInterface public utils;\\n    MapInterface public maps;\\n    GamesInterface public games;\\n    ItemsInterface public items;\\n\\n    address public charsAddress;\\n\\n    function setContractAddresses(\\n        address _charAddress,\\n        address _utilsAddress,\\n        address _mapsAddress,\\n        address _gamesAddress,\\n        address _itemsAddress)\\n        public onlyOwner {\\n        chars = CharInterface(_charAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        maps = MapInterface(_mapsAddress);\\n        games = GamesInterface(_gamesAddress);\\n        items = ItemsInterface(_itemsAddress);\\n    }\\n\\n    event ActionCompleteEvent(uint currentPlayerTurnIndex, BCTypes.Player player, BCTypes.Action action);\\n\\n    uint constant DEFAULT_ACTIONS_NUM = 3; // TODO: Duped in BCGames.sol\\n\\n    uint constant START_ROOM_ID = 2; // TODO: Duplicated in BCMaps.sol\\n    uint8 constant UNDISCOVERED_ROOM = 1;\\n\\n    // TODO: Decompose\\n    function doAction(\\n        uint _gameId,\\n        uint _playerId,\\n        BCTypes.Action _action,\\n        BCTypes.Followthrough _followthrough,\\n        // Using room positions requires more checks, try to avoid\\n        // Position memory _roomPos, // For followthrough move, shoot, etc.\\n        uint _1stDirection, // NSEW 4==in room\\n        uint _2ndDirection  // NSEW 4==in room\\n        ) public\\n    {\\n        // Universal requirements for all actions\\n        // TODO: Player must not be dead!\\n        // TODO: Optimize?  Would it actually be better to make a local copy of the player stats?\\n        // TODO: Optimize:  Since using memory now, explore just getting what is needed\\n        // TODO: WHY DO I NEED EXT FOR PLAYER AND GAME BUT NOT CHAR?????\\n        BCTypes.Player memory currentPlayer = games.extGetPlayer(_playerId);\\n        BCTypes.Game memory currentGame = games.extGetGame(_gameId); // Games are huge, get less\\n        BCTypes.Character memory currentChar = chars.characters(currentPlayer.characterId);\\n\\n        require(currentGame.active, \\\"Game not active\\\");\\n        require(msg.sender == currentPlayer.owner, \\\"Sender not player owner\\\");\\n        require(currentPlayer.actionsTaken < DEFAULT_ACTIONS_NUM, \\\"No actions left\\\"); // TODO: Confirm this won't ever trigger // TODO: Get effects and items\\n        require(_playerId == currentGame.playerIndexes[currentGame.currentPlayerTurnIndex], \\\"Not your turn\\\");\\n\\n        // TODO: Add respawn action for living or dead players\\n        // TODO: Require player to drop items before any other actions if holding too many\\n\\n        if (_action == BCTypes.Action.PASS) {\\n            // Do nothing\\n        } else if (_action == BCTypes.Action.MOVE) {\\n            // Main move\\n            // TODO: Handle using door number 4 to represent in room and DRY\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    firstRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    firstRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"1st Door not open/breached/unlocked\\\");\\n\\n            if(firstRefDoor.status == BCTypes.DoorStatus.CLOSED) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.OPEN);\\n            }\\n\\n            BCTypes.Position memory targetRoomPos = utils.getNeighborRoom(_1stDirection, currentPlayer.position);\\n\\n            // Followthrough\\n            if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                BCTypes.Position memory secondRoom = utils.getNeighborRoom(_2ndDirection, targetRoomPos);\\n                BCTypes.Door memory secondRefDoor = maps.getDoor(currentGame.mapId, targetRoomPos.row, targetRoomPos.col, _2ndDirection);\\n                require(secondRefDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    secondRefDoor.status == BCTypes.DoorStatus.BREACHED ||\\n                    secondRefDoor.vsHack == 0,  // TODO: Confirm no edge cases\\n                    \\\"2nd Door not open/breached/unlocked\\\");\\n\\n                BCTypes.GameTile[][] memory currentMap = maps.extGetBoard(currentGame.mapId);\\n                require(currentMap[targetRoomPos.row][targetRoomPos.col].roomId > START_ROOM_ID, \\\"Room not explored\\\");\\n\\n                if(secondRefDoor.status == BCTypes.DoorStatus.CLOSED) {\\n                    maps.setDoorFromPos(\\n                        currentGame.mapId,\\n                        targetRoomPos.row,\\n                        targetRoomPos.col,\\n                        _2ndDirection,\\n                        BCTypes.DoorStatus.OPEN);\\n                }\\n                targetRoomPos = secondRoom;\\n            }\\n            games.extMovePlayer(currentGame.mapId, targetRoomPos, _playerId);\\n\\n        } else if (_action == BCTypes.Action.HACK) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n\\n            if (utils.resolveChallenge(currentChar.traits.hack, firstRefDoor.vsHack)) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.OPEN);\\n                // TODO: DRY - consolidate with breach\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    games.extMovePlayer(\\n                        currentGame.mapId,\\n                        utils.getNeighborRoom(_1stDirection, currentPlayer.position),\\n                        _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n            }\\n        } else if (_action == BCTypes.Action.BREACH) {\\n            BCTypes.Door memory firstRefDoor = maps.getDoor(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col, _1stDirection);\\n            require(firstRefDoor.status == BCTypes.DoorStatus.CLOSED, \\\"Door not closed\\\");\\n\\n            if (utils.resolveChallenge(currentChar.traits.breach, firstRefDoor.vsBreach)) {\\n                maps.setDoorFromPos(\\n                    currentGame.mapId,\\n                    currentPlayer.position.row,\\n                    currentPlayer.position.col,\\n                    _1stDirection,\\n                    BCTypes.DoorStatus.BREACHED);\\n                // TODO: DRY - consolidate with hack\\n                // console.log(\\\"Roll succeeded\\\");\\n                if (_followthrough == BCTypes.Followthrough.MOVE) {\\n                    games.extMovePlayer(\\n                        currentGame.mapId,\\n                        utils.getNeighborRoom(_1stDirection, currentPlayer.position),\\n                        _playerId);\\n                }\\n                // TODO: Handle shoot through doorway\\n                // TODO: Handle grenade through doorway\\n                // TODO: Handle breaching into space\\n            }\\n        } else if(_action == BCTypes.Action.LOOT) {\\n            // TODO: Looting should not cost an action\\n            BCTypes.GameTile memory currentTile = maps.extGetGameTile(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            require(currentTile.looted == false, \\\"Room already looted\\\");\\n            BCTypes.RoomTile memory currentRoomTile = maps.extGetRoom(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n            require((currentRoomTile.numData > 0 || currentRoomTile.numItems > 0), \\\"Can't loot empty room\\\");\\n            maps.setLooted(currentGame.mapId, currentPlayer.position.row, currentPlayer.position.col);\\n\\n            games.grantData(_playerId, currentRoomTile.numData);\\n\\n            for(uint i = 0; i < currentRoomTile.numItems; i++) {\\n                // TODO: Confirm this is ok because I control destination address\\n                items.lootItem(_playerId, address(games));\\n            }\\n\\n        } else {\\n            revert(\\\"ERROR: Bad action config\\\");\\n        }\\n\\n        games.endPlayerAction(_gameId, _playerId);\\n\\n        emit ActionCompleteEvent(currentGame.currentPlayerTurnIndex, currentPlayer, _action);\\n    }\\n}\\n\",\"keccak256\":\"0x8308611bfa37e32b83142e072316651c59f71fe20d64427d91a1f52d5aa5c374\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x98de0b6eda4b7063aed4af3ef6fb5242d12e409c304123621491ef3d8d74d506\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613d1a80620001146000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063955a015b11610071578063955a015b146101305780639fca1ee11461014e578063c06fad061461016c578063e847ae1e1461018a578063f0698699146101a6578063f2fde38b146101c2576100a9565b806310a2cd0d146100ae5780633deaec2b146100cc5780635a29638d146100ea578063715018a6146101085780638da5cb5b14610112575b600080fd5b6100b66101de565b6040516100c39190611fb6565b60405180910390f35b6100d4610204565b6040516100e19190611ff2565b60405180910390f35b6100f261022a565b6040516100ff919061202e565b60405180910390f35b610110610250565b005b61011a610264565b604051610127919061206a565b60405180910390f35b61013861028d565b60405161014591906120a6565b60405180910390f35b6101566102b3565b604051610163919061206a565b60405180910390f35b6101746102d9565b60405161018191906120e2565b60405180910390f35b6101a4600480360381019061019f919061213d565b6102ff565b005b6101c060048036038101906101bb9190612238565b610453565b005b6101dc60048036038101906101d791906122c5565b611d69565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610258611ded565b6102626000611e6b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610307611ded565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310f67fb3876040518263ffffffff1660e01b81526004016104b09190612301565b600060405180830381865afa1580156104cd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104f691906126c5565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fe99c18896040518263ffffffff1660e01b81526004016105559190612301565b600060405180830381865afa158015610572573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061059b9190612931565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634810bc5984604001516040518263ffffffff1660e01b81526004016105fe9190612301565b6101e060405180830381865afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190612b48565b90508160000151610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90612bd3565b60405180910390fd5b826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef90612c3f565b60405180910390fd5b60038360c0015160ff1610610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990612cab565b60405180910390fd5b816020015182604001518151811061075d5761075c612ccb565b5b602002602001015188146107a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90612d46565b60405180910390fd5b600360048111156107ba576107b9612d66565b5b8760048111156107cd576107cc612d66565b5b14156107d857611c90565b600260048111156107ec576107eb612d66565b5b8760048111156107ff576107fe612d66565b5b1415610fcb576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b815260040161087c9493929190612dc6565b606060405180830381865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612e94565b9050600260048111156108d3576108d2612d66565b5b816040015160048111156108ea576108e9612d66565b5b148061091e57506003600481111561090557610904612d66565b5b8160400151600481111561091c5761091b612d66565b5b145b8061093057506000816020015160ff16145b61096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690612f33565b60405180910390fd5b6001600481111561098357610982612d66565b5b8160400151600481111561099a57610999612d66565b5b1415610a4b57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b8152600401610a18959493929190612f9b565b600060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b505050505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8887606001516040518363ffffffff1660e01b8152600401610aae92919061302c565b6040805180830381865afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190613055565b9050600180811115610b0357610b02612d66565b5b886001811115610b1657610b15612d66565b5b1415610f2f576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88846040518363ffffffff1660e01b8152600401610b7b92919061302c565b6040805180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190613055565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88760e00151856000015186602001518c6040518563ffffffff1660e01b8152600401610c2c9493929190612dc6565b606060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190612e94565b905060026004811115610c8357610c82612d66565b5b81604001516004811115610c9a57610c99612d66565b5b1480610cce575060036004811115610cb557610cb4612d66565b5b81604001516004811115610ccc57610ccb612d66565b5b145b80610ce057506000816020015160ff16145b610d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d16906130f4565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ef044168860e001516040518263ffffffff1660e01b8152600401610d809190612301565b600060405180830381865afa158015610d9d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dc6919061340d565b9050600281856000015160ff1681518110610de457610de3612ccb565b5b6020026020010151856020015160ff1681518110610e0557610e04612ccb565b5b60200260200101516000015160ff1611610e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4b906134a2565b60405180910390fd5b60016004811115610e6857610e67612d66565b5b82604001516004811115610e7f57610e7e612d66565b5b1415610f2857600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48860e00151866000015187602001518d60026040518663ffffffff1660e01b8152600401610ef5959493929190612f9b565b600060405180830381600087803b158015610f0f57600080fd5b505af1158015610f23573d6000803e3d6000fd5b505050505b8293505050505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258560e00151838d6040518463ffffffff1660e01b8152600401610f92939291906134c2565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b505050505050611c8f565b60006004811115610fdf57610fde612d66565b5b876004811115610ff257610ff1612d66565b5b14156113e1576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b815260040161106f9493929190612dc6565b606060405180830381865afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b09190612e94565b9050600160048111156110c6576110c5612d66565b5b816040015160048111156110dd576110dc612d66565b5b1461111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111490613545565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516060015183602001516040518363ffffffff1660e01b8152600401611186929190613565565b6020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c9919061358e565b156113db57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b8152600401611246959493929190612f9b565b600060405180830381600087803b15801561126057600080fd5b505af1158015611274573d6000803e3d6000fd5b5050505060018081111561128b5761128a612d66565b5b87600181111561129e5761129d612d66565b5b14156113da57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b815260040161134892919061302c565b6040805180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613055565b8c6040518463ffffffff1660e01b81526004016113a7939291906134c2565b600060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b505050505b5b50611c8e565b600160048111156113f5576113f4612d66565b5b87600481111561140857611407612d66565b5b14156117f7576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016114859493929190612dc6565b606060405180830381865afa1580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c69190612e94565b9050600160048111156114dc576114db612d66565b5b816040015160048111156114f3576114f2612d66565b5b14611533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152a90613545565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516080015183600001516040518363ffffffff1660e01b815260040161159c929190613565565b6020604051808303816000875af11580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df919061358e565b156117f157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60036040518663ffffffff1660e01b815260040161165c959493929190612f9b565b600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b505050506001808111156116a1576116a0612d66565b5b8760018111156116b4576116b3612d66565b5b14156117f057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b815260040161175e92919061302c565b6040805180830381865afa15801561177a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179e9190613055565b8c6040518463ffffffff1660e01b81526004016117bd939291906134c2565b600060405180830381600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050505b5b50611c8d565b60048081111561180a57611809612d66565b5b87600481111561181d5761181c612d66565b5b1415611c51576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9dfbfcb8460e001518660600151600001518760600151602001516040518463ffffffff1660e01b8152600401611898939291906135bb565b61012060405180830381865afa1580156118b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118da91906135f2565b9050600015158160800151151514611927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191e9061366c565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302861c6c8560e001518760600151600001518860600151602001516040518463ffffffff1660e01b815260040161199c939291906135bb565b60c060405180830381865afa1580156119b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dd9190613751565b90506000816060015160ff1611806119fc57506000816040015160ff16115b611a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a32906137ca565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386e529d08560e001518760600151600001518860600151602001516040518463ffffffff1660e01b8152600401611aae939291906135bb565b600060405180830381600087803b158015611ac857600080fd5b505af1158015611adc573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a75197eb8b83606001516040518363ffffffff1660e01b8152600401611b419291906137ea565b600060405180830381600087803b158015611b5b57600080fd5b505af1158015611b6f573d6000803e3d6000fd5b5050505060005b816040015160ff16811015611c4957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa3eb1b58c600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401611c04929190613813565b600060405180830381600087803b158015611c1e57600080fd5b505af1158015611c32573d6000803e3d6000fd5b505050508080611c419061386b565b915050611b76565b505050611c8c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8390613900565b60405180910390fd5b5b5b5b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360fe842e8a8a6040518363ffffffff1660e01b8152600401611ced929190613920565b600060405180830381600087803b158015611d0757600080fd5b505af1158015611d1b573d6000803e3d6000fd5b505050507f81f0468752500ded70032fadd8011a832ccdbaddfc2cae78738f1a5f78e5f49082604001518489604051611d5693929190613ba8565b60405180910390a1505050505050505050565b611d71611ded565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd890613c58565b60405180910390fd5b611dea81611e6b565b50565b611df5611f2f565b73ffffffffffffffffffffffffffffffffffffffff16611e13610264565b73ffffffffffffffffffffffffffffffffffffffff1614611e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6090613cc4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f7c611f77611f7284611f37565b611f57565b611f37565b9050919050565b6000611f8e82611f61565b9050919050565b6000611fa082611f83565b9050919050565b611fb081611f95565b82525050565b6000602082019050611fcb6000830184611fa7565b92915050565b6000611fdc82611f83565b9050919050565b611fec81611fd1565b82525050565b60006020820190506120076000830184611fe3565b92915050565b600061201882611f83565b9050919050565b6120288161200d565b82525050565b6000602082019050612043600083018461201f565b92915050565b600061205482611f37565b9050919050565b61206481612049565b82525050565b600060208201905061207f600083018461205b565b92915050565b600061209082611f83565b9050919050565b6120a081612085565b82525050565b60006020820190506120bb6000830184612097565b92915050565b60006120cc82611f83565b9050919050565b6120dc816120c1565b82525050565b60006020820190506120f760008301846120d3565b92915050565b6000604051905090565b600080fd5b600080fd5b61211a81612049565b811461212557600080fd5b50565b60008135905061213781612111565b92915050565b600080600080600060a0868803121561215957612158612107565b5b600061216788828901612128565b955050602061217888828901612128565b945050604061218988828901612128565b935050606061219a88828901612128565b92505060806121ab88828901612128565b9150509295509295909350565b6000819050919050565b6121cb816121b8565b81146121d657600080fd5b50565b6000813590506121e8816121c2565b92915050565b600581106121fb57600080fd5b50565b60008135905061220d816121ee565b92915050565b6002811061222057600080fd5b50565b60008135905061223281612213565b92915050565b60008060008060008060c0878903121561225557612254612107565b5b600061226389828a016121d9565b965050602061227489828a016121d9565b955050604061228589828a016121fe565b945050606061229689828a01612223565b93505060806122a789828a016121d9565b92505060a06122b889828a016121d9565b9150509295509295509295565b6000602082840312156122db576122da612107565b5b60006122e984828501612128565b91505092915050565b6122fb816121b8565b82525050565b600060208201905061231660008301846122f2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61236a82612321565b810181811067ffffffffffffffff8211171561238957612388612332565b5b80604052505050565b600061239c6120fd565b90506123a88282612361565b919050565b600080fd5b6000815190506123c181612111565b92915050565b6000815190506123d6816121c2565b92915050565b600060ff82169050919050565b6123f2816123dc565b81146123fd57600080fd5b50565b60008151905061240f816123e9565b92915050565b60006040828403121561242b5761242a61231c565b5b6124356040612392565b9050600061244584828501612400565b600083015250602061245984828501612400565b60208301525092915050565b600080fd5b600067ffffffffffffffff82111561248557612484612332565b5b602082029050602081019050919050565b600080fd5b60006124ae6124a98461246a565b612392565b905080838252602082019050602084028301858111156124d1576124d0612496565b5b835b818110156124fa57806124e68882612400565b8452602084019350506020810190506124d3565b5050509392505050565b600082601f83011261251957612518612465565b5b815161252984826020860161249b565b91505092915050565b60008115159050919050565b61254781612532565b811461255257600080fd5b50565b6000815190506125648161253e565b92915050565b60006101a082840312156125815761258061231c565b5b61258c610180612392565b9050600061259c848285016123b2565b60008301525060206125b0848285016123b2565b60208301525060406125c4848285016123c7565b60408301525060606125d884828501612415565b60608301525060a06125ec84828501612400565b60808301525060c061260084828501612400565b60a08301525060e061261484828501612400565b60c08301525061010061262984828501612400565b60e08301525061012082015167ffffffffffffffff81111561264e5761264d6123ad565b5b61265a84828501612504565b6101008301525061014082015167ffffffffffffffff8111156126805761267f6123ad565b5b61268c84828501612504565b610120830152506101606126a284828501612555565b610140830152506101806126b884828501612555565b6101608301525092915050565b6000602082840312156126db576126da612107565b5b600082015167ffffffffffffffff8111156126f9576126f861210c565b5b6127058482850161256a565b91505092915050565b600067ffffffffffffffff82111561272957612728612332565b5b602082029050602081019050919050565b600061274d6127488461270e565b612392565b905080838252602082019050602084028301858111156127705761276f612496565b5b835b81811015612799578061278588826123c7565b845260208401935050602081019050612772565b5050509392505050565b600082601f8301126127b8576127b7612465565b5b81516127c884826020860161273a565b91505092915050565b6000608082840312156127e7576127e661231c565b5b6127f16080612392565b9050600061280184828501612400565b600083015250602061281584828501612400565b602083015250604061282984828501612400565b604083015250606061283d84828501612400565b60608301525092915050565b600061016082840312156128605761285f61231c565b5b61286b610100612392565b9050600061287b84828501612555565b600083015250602082015167ffffffffffffffff81111561289f5761289e6123ad565b5b6128ab848285016127a3565b60208301525060406128bf848285016123c7565b60408301525060606128d3848285016123c7565b60608301525060806128e7848285016123c7565b60808301525060a06128fb848285016127d1565b60a083015250610120612910848285016123b2565b60c083015250610140612925848285016123c7565b60e08301525092915050565b60006020828403121561294757612946612107565b5b600082015167ffffffffffffffff8111156129655761296461210c565b5b61297184828501612849565b91505092915050565b6000819050919050565b61298d8161297a565b811461299857600080fd5b50565b6000815190506129aa81612984565b92915050565b600060e082840312156129c6576129c561231c565b5b6129d060e0612392565b905060006129e084828501612400565b60008301525060206129f484828501612400565b6020830152506040612a0884828501612400565b6040830152506060612a1c84828501612400565b6060830152506080612a3084828501612400565b60808301525060a0612a4484828501612400565b60a08301525060c0612a5884828501612400565b60c08301525092915050565b60006101e08284031215612a7b57612a7a61231c565b5b612a86610120612392565b90506000612a968482850161299b565b6000830152506020612aaa848285016123c7565b6020830152506040612abe848285016123c7565b6040830152506060612ad2848285016129b0565b606083015250610140612ae784828501612400565b608083015250610160612afc84828501612400565b60a083015250610180612b1184828501612400565b60c0830152506101a0612b2684828501612400565b60e0830152506101c0612b3b84828501612555565b6101008301525092915050565b60006101e08284031215612b5f57612b5e612107565b5b6000612b6d84828501612a64565b91505092915050565b600082825260208201905092915050565b7f47616d65206e6f74206163746976650000000000000000000000000000000000600082015250565b6000612bbd600f83612b76565b9150612bc882612b87565b602082019050919050565b60006020820190508181036000830152612bec81612bb0565b9050919050565b7f53656e646572206e6f7420706c61796572206f776e6572000000000000000000600082015250565b6000612c29601783612b76565b9150612c3482612bf3565b602082019050919050565b60006020820190508181036000830152612c5881612c1c565b9050919050565b7f4e6f20616374696f6e73206c6566740000000000000000000000000000000000600082015250565b6000612c95600f83612b76565b9150612ca082612c5f565b602082019050919050565b60006020820190508181036000830152612cc481612c88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000600082015250565b6000612d30600d83612b76565b9150612d3b82612cfa565b602082019050919050565b60006020820190508181036000830152612d5f81612d23565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000612db0612dab612da6846123dc565b611f57565b6121b8565b9050919050565b612dc081612d95565b82525050565b6000608082019050612ddb60008301876122f2565b612de86020830186612db7565b612df56040830185612db7565b612e0260608301846122f2565b95945050505050565b60058110612e1857600080fd5b50565b600081519050612e2a81612e0b565b92915050565b600060608284031215612e4657612e4561231c565b5b612e506060612392565b90506000612e6084828501612400565b6000830152506020612e7484828501612400565b6020830152506040612e8884828501612e1b565b60408301525092915050565b600060608284031215612eaa57612ea9612107565b5b6000612eb884828501612e30565b91505092915050565b7f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b6000612f1d602383612b76565b9150612f2882612ec1565b604082019050919050565b60006020820190508181036000830152612f4c81612f10565b9050919050565b60058110612f6457612f63612d66565b5b50565b6000819050612f7582612f53565b919050565b6000612f8582612f67565b9050919050565b612f9581612f7a565b82525050565b600060a082019050612fb060008301886122f2565b612fbd6020830187612db7565b612fca6040830186612db7565b612fd760608301856122f2565b612fe46080830184612f8c565b9695505050505050565b612ff7816123dc565b82525050565b6040820160008201516130136000850182612fee565b5060208201516130266020850182612fee565b50505050565b600060608201905061304160008301856122f2565b61304e6020830184612ffd565b9392505050565b60006040828403121561306b5761306a612107565b5b600061307984828501612415565b91505092915050565b7f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b60006130de602383612b76565b91506130e982613082565b604082019050919050565b6000602082019050818103600083015261310d816130d1565b9050919050565b600067ffffffffffffffff82111561312f5761312e612332565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561315b5761315a612332565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561318757613186612332565b5b602082029050919050565b60006131a56131a08461316c565b612392565b905080602084028301858111156131bf576131be612496565b5b835b818110156131e857806131d488826123c7565b8452602084019350506020810190506131c1565b5050509392505050565b600082601f83011261320757613206612465565b5b6004613214848285613192565b91505092915050565b600061012082840312156132345761323361231c565b5b61323e60c0612392565b9050600061324e84828501612400565b600083015250602061326284828501612400565b6020830152506040613276848285016131f2565b60408301525060c061328a84828501612555565b60608301525060e061329e84828501612555565b6080830152506101006132b384828501612555565b60a08301525092915050565b60006132d26132cd84613140565b612392565b90508083825260208201905061012084028301858111156132f6576132f5612496565b5b835b81811015613320578061330b888261321d565b845260208401935050610120810190506132f8565b5050509392505050565b600082601f83011261333f5761333e612465565b5b815161334f8482602086016132bf565b91505092915050565b600061336b61336684613114565b612392565b9050808382526020820190506020840283018581111561338e5761338d612496565b5b835b818110156133d557805167ffffffffffffffff8111156133b3576133b2612465565b5b8086016133c0898261332a565b85526020850194505050602081019050613390565b5050509392505050565b600082601f8301126133f4576133f3612465565b5b8151613404848260208601613358565b91505092915050565b60006020828403121561342357613422612107565b5b600082015167ffffffffffffffff8111156134415761344061210c565b5b61344d848285016133df565b91505092915050565b7f526f6f6d206e6f74206578706c6f726564000000000000000000000000000000600082015250565b600061348c601183612b76565b915061349782613456565b602082019050919050565b600060208201905081810360008301526134bb8161347f565b9050919050565b60006080820190506134d760008301866122f2565b6134e46020830185612ffd565b6134f160608301846122f2565b949350505050565b7f446f6f72206e6f7420636c6f7365640000000000000000000000000000000000600082015250565b600061352f600f83612b76565b915061353a826134f9565b602082019050919050565b6000602082019050818103600083015261355e81613522565b9050919050565b600060408201905061357a6000830185612db7565b6135876020830184612db7565b9392505050565b6000602082840312156135a4576135a3612107565b5b60006135b284828501612555565b91505092915050565b60006060820190506135d060008301866122f2565b6135dd6020830185612db7565b6135ea6040830184612db7565b949350505050565b6000610120828403121561360957613608612107565b5b60006136178482850161321d565b91505092915050565b7f526f6f6d20616c7265616479206c6f6f74656400000000000000000000000000600082015250565b6000613656601383612b76565b915061366182613620565b602082019050919050565b6000602082019050818103600083015261368581613649565b9050919050565b6005811061369957600080fd5b50565b6000815190506136ab8161368c565b92915050565b600060c082840312156136c7576136c661231c565b5b6136d160c0612392565b905060006136e18482850161369c565b60008301525060206136f5848285016123c7565b602083015250604061370984828501612400565b604083015250606061371d84828501612400565b606083015250608061373184828501612555565b60808301525060a061374584828501612555565b60a08301525092915050565b600060c0828403121561376757613766612107565b5b6000613775848285016136b1565b91505092915050565b7f43616e2774206c6f6f7420656d70747920726f6f6d0000000000000000000000600082015250565b60006137b4601583612b76565b91506137bf8261377e565b602082019050919050565b600060208201905081810360008301526137e3816137a7565b9050919050565b60006040820190506137ff60008301856122f2565b61380c6020830184612db7565b9392505050565b600060408201905061382860008301856122f2565b613835602083018461205b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613876826121b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138a9576138a861383c565b5b600182019050919050565b7f4552524f523a2042616420616374696f6e20636f6e6669670000000000000000600082015250565b60006138ea601883612b76565b91506138f5826138b4565b602082019050919050565b60006020820190508181036000830152613919816138dd565b9050919050565b600060408201905061393560008301856122f2565b61394260208301846122f2565b9392505050565b61395281612049565b82525050565b613961816121b8565b82525050565b60408201600082015161397d6000850182612fee565b5060208201516139906020850182612fee565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006139ce8383612fee565b60208301905092915050565b6000602082019050919050565b60006139f282613996565b6139fc81856139a1565b9350613a07836139b2565b8060005b83811015613a38578151613a1f88826139c2565b9750613a2a836139da565b925050600181019050613a0b565b5085935050505092915050565b613a4e81612532565b82525050565b60006101a083016000830151613a6d6000860182613949565b506020830151613a806020860182613949565b506040830151613a936040860182613958565b506060830151613aa66060860182613967565b506080830151613ab960a0860182612fee565b5060a0830151613acc60c0860182612fee565b5060c0830151613adf60e0860182612fee565b5060e0830151613af3610100860182612fee565b50610100830151848203610120860152613b0d82826139e7565b915050610120830151848203610140860152613b2982826139e7565b915050610140830151613b40610160860182613a45565b50610160830151613b55610180860182613a45565b508091505092915050565b60058110613b7157613b70612d66565b5b50565b6000819050613b8282613b60565b919050565b6000613b9282613b74565b9050919050565b613ba281613b87565b82525050565b6000606082019050613bbd60008301866122f2565b8181036020830152613bcf8185613a54565b9050613bde6040830184613b99565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613c42602683612b76565b9150613c4d82613be6565b604082019050919050565b60006020820190508181036000830152613c7181613c35565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613cae602083612b76565b9150613cb982613c78565b602082019050919050565b60006020820190508181036000830152613cdd81613ca1565b905091905056fea26469706673582212204e45bc770b58dfa210e65d7ecbbbc420c4ea4ca29f5081c5ad9e520e81a41fa564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063955a015b11610071578063955a015b146101305780639fca1ee11461014e578063c06fad061461016c578063e847ae1e1461018a578063f0698699146101a6578063f2fde38b146101c2576100a9565b806310a2cd0d146100ae5780633deaec2b146100cc5780635a29638d146100ea578063715018a6146101085780638da5cb5b14610112575b600080fd5b6100b66101de565b6040516100c39190611fb6565b60405180910390f35b6100d4610204565b6040516100e19190611ff2565b60405180910390f35b6100f261022a565b6040516100ff919061202e565b60405180910390f35b610110610250565b005b61011a610264565b604051610127919061206a565b60405180910390f35b61013861028d565b60405161014591906120a6565b60405180910390f35b6101566102b3565b604051610163919061206a565b60405180910390f35b6101746102d9565b60405161018191906120e2565b60405180910390f35b6101a4600480360381019061019f919061213d565b6102ff565b005b6101c060048036038101906101bb9190612238565b610453565b005b6101dc60048036038101906101d791906122c5565b611d69565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610258611ded565b6102626000611e6b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610307611ded565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310f67fb3876040518263ffffffff1660e01b81526004016104b09190612301565b600060405180830381865afa1580156104cd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104f691906126c5565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fe99c18896040518263ffffffff1660e01b81526004016105559190612301565b600060405180830381865afa158015610572573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061059b9190612931565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634810bc5984604001516040518263ffffffff1660e01b81526004016105fe9190612301565b6101e060405180830381865afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190612b48565b90508160000151610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90612bd3565b60405180910390fd5b826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef90612c3f565b60405180910390fd5b60038360c0015160ff1610610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990612cab565b60405180910390fd5b816020015182604001518151811061075d5761075c612ccb565b5b602002602001015188146107a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90612d46565b60405180910390fd5b600360048111156107ba576107b9612d66565b5b8760048111156107cd576107cc612d66565b5b14156107d857611c90565b600260048111156107ec576107eb612d66565b5b8760048111156107ff576107fe612d66565b5b1415610fcb576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b815260040161087c9493929190612dc6565b606060405180830381865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612e94565b9050600260048111156108d3576108d2612d66565b5b816040015160048111156108ea576108e9612d66565b5b148061091e57506003600481111561090557610904612d66565b5b8160400151600481111561091c5761091b612d66565b5b145b8061093057506000816020015160ff16145b61096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690612f33565b60405180910390fd5b6001600481111561098357610982612d66565b5b8160400151600481111561099a57610999612d66565b5b1415610a4b57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b8152600401610a18959493929190612f9b565b600060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b505050505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8887606001516040518363ffffffff1660e01b8152600401610aae92919061302c565b6040805180830381865afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190613055565b9050600180811115610b0357610b02612d66565b5b886001811115610b1657610b15612d66565b5b1415610f2f576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe88846040518363ffffffff1660e01b8152600401610b7b92919061302c565b6040805180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190613055565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88760e00151856000015186602001518c6040518563ffffffff1660e01b8152600401610c2c9493929190612dc6565b606060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190612e94565b905060026004811115610c8357610c82612d66565b5b81604001516004811115610c9a57610c99612d66565b5b1480610cce575060036004811115610cb557610cb4612d66565b5b81604001516004811115610ccc57610ccb612d66565b5b145b80610ce057506000816020015160ff16145b610d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d16906130f4565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ef044168860e001516040518263ffffffff1660e01b8152600401610d809190612301565b600060405180830381865afa158015610d9d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dc6919061340d565b9050600281856000015160ff1681518110610de457610de3612ccb565b5b6020026020010151856020015160ff1681518110610e0557610e04612ccb565b5b60200260200101516000015160ff1611610e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4b906134a2565b60405180910390fd5b60016004811115610e6857610e67612d66565b5b82604001516004811115610e7f57610e7e612d66565b5b1415610f2857600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48860e00151866000015187602001518d60026040518663ffffffff1660e01b8152600401610ef5959493929190612f9b565b600060405180830381600087803b158015610f0f57600080fd5b505af1158015610f23573d6000803e3d6000fd5b505050505b8293505050505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258560e00151838d6040518463ffffffff1660e01b8152600401610f92939291906134c2565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b505050505050611c8f565b60006004811115610fdf57610fde612d66565b5b876004811115610ff257610ff1612d66565b5b14156113e1576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b815260040161106f9493929190612dc6565b606060405180830381865afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b09190612e94565b9050600160048111156110c6576110c5612d66565b5b816040015160048111156110dd576110dc612d66565b5b1461111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111490613545565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516060015183602001516040518363ffffffff1660e01b8152600401611186929190613565565b6020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c9919061358e565b156113db57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60026040518663ffffffff1660e01b8152600401611246959493929190612f9b565b600060405180830381600087803b15801561126057600080fd5b505af1158015611274573d6000803e3d6000fd5b5050505060018081111561128b5761128a612d66565b5b87600181111561129e5761129d612d66565b5b14156113da57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b815260040161134892919061302c565b6040805180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613055565b8c6040518463ffffffff1660e01b81526004016113a7939291906134c2565b600060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b505050505b5b50611c8e565b600160048111156113f5576113f4612d66565b5b87600481111561140857611407612d66565b5b14156117f7576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ea1dcd88460e001518660600151600001518760600151602001518a6040518563ffffffff1660e01b81526004016114859493929190612dc6565b606060405180830381865afa1580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c69190612e94565b9050600160048111156114dc576114db612d66565b5b816040015160048111156114f3576114f2612d66565b5b14611533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152a90613545565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff2fb3183606001516080015183600001516040518363ffffffff1660e01b815260040161159c929190613565565b6020604051808303816000875af11580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df919061358e565b156117f157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6cdd3b48460e001518660600151600001518760600151602001518a60036040518663ffffffff1660e01b815260040161165c959493929190612f9b565b600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b505050506001808111156116a1576116a0612d66565b5b8760018111156116b4576116b3612d66565b5b14156117f057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175142258460e00151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8a89606001516040518363ffffffff1660e01b815260040161175e92919061302c565b6040805180830381865afa15801561177a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179e9190613055565b8c6040518463ffffffff1660e01b81526004016117bd939291906134c2565b600060405180830381600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050505b5b50611c8d565b60048081111561180a57611809612d66565b5b87600481111561181d5761181c612d66565b5b1415611c51576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9dfbfcb8460e001518660600151600001518760600151602001516040518463ffffffff1660e01b8152600401611898939291906135bb565b61012060405180830381865afa1580156118b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118da91906135f2565b9050600015158160800151151514611927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191e9061366c565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302861c6c8560e001518760600151600001518860600151602001516040518463ffffffff1660e01b815260040161199c939291906135bb565b60c060405180830381865afa1580156119b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dd9190613751565b90506000816060015160ff1611806119fc57506000816040015160ff16115b611a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a32906137ca565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386e529d08560e001518760600151600001518860600151602001516040518463ffffffff1660e01b8152600401611aae939291906135bb565b600060405180830381600087803b158015611ac857600080fd5b505af1158015611adc573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a75197eb8b83606001516040518363ffffffff1660e01b8152600401611b419291906137ea565b600060405180830381600087803b158015611b5b57600080fd5b505af1158015611b6f573d6000803e3d6000fd5b5050505060005b816040015160ff16811015611c4957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa3eb1b58c600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401611c04929190613813565b600060405180830381600087803b158015611c1e57600080fd5b505af1158015611c32573d6000803e3d6000fd5b505050508080611c419061386b565b915050611b76565b505050611c8c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8390613900565b60405180910390fd5b5b5b5b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360fe842e8a8a6040518363ffffffff1660e01b8152600401611ced929190613920565b600060405180830381600087803b158015611d0757600080fd5b505af1158015611d1b573d6000803e3d6000fd5b505050507f81f0468752500ded70032fadd8011a832ccdbaddfc2cae78738f1a5f78e5f49082604001518489604051611d5693929190613ba8565b60405180910390a1505050505050505050565b611d71611ded565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd890613c58565b60405180910390fd5b611dea81611e6b565b50565b611df5611f2f565b73ffffffffffffffffffffffffffffffffffffffff16611e13610264565b73ffffffffffffffffffffffffffffffffffffffff1614611e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6090613cc4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f7c611f77611f7284611f37565b611f57565b611f37565b9050919050565b6000611f8e82611f61565b9050919050565b6000611fa082611f83565b9050919050565b611fb081611f95565b82525050565b6000602082019050611fcb6000830184611fa7565b92915050565b6000611fdc82611f83565b9050919050565b611fec81611fd1565b82525050565b60006020820190506120076000830184611fe3565b92915050565b600061201882611f83565b9050919050565b6120288161200d565b82525050565b6000602082019050612043600083018461201f565b92915050565b600061205482611f37565b9050919050565b61206481612049565b82525050565b600060208201905061207f600083018461205b565b92915050565b600061209082611f83565b9050919050565b6120a081612085565b82525050565b60006020820190506120bb6000830184612097565b92915050565b60006120cc82611f83565b9050919050565b6120dc816120c1565b82525050565b60006020820190506120f760008301846120d3565b92915050565b6000604051905090565b600080fd5b600080fd5b61211a81612049565b811461212557600080fd5b50565b60008135905061213781612111565b92915050565b600080600080600060a0868803121561215957612158612107565b5b600061216788828901612128565b955050602061217888828901612128565b945050604061218988828901612128565b935050606061219a88828901612128565b92505060806121ab88828901612128565b9150509295509295909350565b6000819050919050565b6121cb816121b8565b81146121d657600080fd5b50565b6000813590506121e8816121c2565b92915050565b600581106121fb57600080fd5b50565b60008135905061220d816121ee565b92915050565b6002811061222057600080fd5b50565b60008135905061223281612213565b92915050565b60008060008060008060c0878903121561225557612254612107565b5b600061226389828a016121d9565b965050602061227489828a016121d9565b955050604061228589828a016121fe565b945050606061229689828a01612223565b93505060806122a789828a016121d9565b92505060a06122b889828a016121d9565b9150509295509295509295565b6000602082840312156122db576122da612107565b5b60006122e984828501612128565b91505092915050565b6122fb816121b8565b82525050565b600060208201905061231660008301846122f2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61236a82612321565b810181811067ffffffffffffffff8211171561238957612388612332565b5b80604052505050565b600061239c6120fd565b90506123a88282612361565b919050565b600080fd5b6000815190506123c181612111565b92915050565b6000815190506123d6816121c2565b92915050565b600060ff82169050919050565b6123f2816123dc565b81146123fd57600080fd5b50565b60008151905061240f816123e9565b92915050565b60006040828403121561242b5761242a61231c565b5b6124356040612392565b9050600061244584828501612400565b600083015250602061245984828501612400565b60208301525092915050565b600080fd5b600067ffffffffffffffff82111561248557612484612332565b5b602082029050602081019050919050565b600080fd5b60006124ae6124a98461246a565b612392565b905080838252602082019050602084028301858111156124d1576124d0612496565b5b835b818110156124fa57806124e68882612400565b8452602084019350506020810190506124d3565b5050509392505050565b600082601f83011261251957612518612465565b5b815161252984826020860161249b565b91505092915050565b60008115159050919050565b61254781612532565b811461255257600080fd5b50565b6000815190506125648161253e565b92915050565b60006101a082840312156125815761258061231c565b5b61258c610180612392565b9050600061259c848285016123b2565b60008301525060206125b0848285016123b2565b60208301525060406125c4848285016123c7565b60408301525060606125d884828501612415565b60608301525060a06125ec84828501612400565b60808301525060c061260084828501612400565b60a08301525060e061261484828501612400565b60c08301525061010061262984828501612400565b60e08301525061012082015167ffffffffffffffff81111561264e5761264d6123ad565b5b61265a84828501612504565b6101008301525061014082015167ffffffffffffffff8111156126805761267f6123ad565b5b61268c84828501612504565b610120830152506101606126a284828501612555565b610140830152506101806126b884828501612555565b6101608301525092915050565b6000602082840312156126db576126da612107565b5b600082015167ffffffffffffffff8111156126f9576126f861210c565b5b6127058482850161256a565b91505092915050565b600067ffffffffffffffff82111561272957612728612332565b5b602082029050602081019050919050565b600061274d6127488461270e565b612392565b905080838252602082019050602084028301858111156127705761276f612496565b5b835b81811015612799578061278588826123c7565b845260208401935050602081019050612772565b5050509392505050565b600082601f8301126127b8576127b7612465565b5b81516127c884826020860161273a565b91505092915050565b6000608082840312156127e7576127e661231c565b5b6127f16080612392565b9050600061280184828501612400565b600083015250602061281584828501612400565b602083015250604061282984828501612400565b604083015250606061283d84828501612400565b60608301525092915050565b600061016082840312156128605761285f61231c565b5b61286b610100612392565b9050600061287b84828501612555565b600083015250602082015167ffffffffffffffff81111561289f5761289e6123ad565b5b6128ab848285016127a3565b60208301525060406128bf848285016123c7565b60408301525060606128d3848285016123c7565b60608301525060806128e7848285016123c7565b60808301525060a06128fb848285016127d1565b60a083015250610120612910848285016123b2565b60c083015250610140612925848285016123c7565b60e08301525092915050565b60006020828403121561294757612946612107565b5b600082015167ffffffffffffffff8111156129655761296461210c565b5b61297184828501612849565b91505092915050565b6000819050919050565b61298d8161297a565b811461299857600080fd5b50565b6000815190506129aa81612984565b92915050565b600060e082840312156129c6576129c561231c565b5b6129d060e0612392565b905060006129e084828501612400565b60008301525060206129f484828501612400565b6020830152506040612a0884828501612400565b6040830152506060612a1c84828501612400565b6060830152506080612a3084828501612400565b60808301525060a0612a4484828501612400565b60a08301525060c0612a5884828501612400565b60c08301525092915050565b60006101e08284031215612a7b57612a7a61231c565b5b612a86610120612392565b90506000612a968482850161299b565b6000830152506020612aaa848285016123c7565b6020830152506040612abe848285016123c7565b6040830152506060612ad2848285016129b0565b606083015250610140612ae784828501612400565b608083015250610160612afc84828501612400565b60a083015250610180612b1184828501612400565b60c0830152506101a0612b2684828501612400565b60e0830152506101c0612b3b84828501612555565b6101008301525092915050565b60006101e08284031215612b5f57612b5e612107565b5b6000612b6d84828501612a64565b91505092915050565b600082825260208201905092915050565b7f47616d65206e6f74206163746976650000000000000000000000000000000000600082015250565b6000612bbd600f83612b76565b9150612bc882612b87565b602082019050919050565b60006020820190508181036000830152612bec81612bb0565b9050919050565b7f53656e646572206e6f7420706c61796572206f776e6572000000000000000000600082015250565b6000612c29601783612b76565b9150612c3482612bf3565b602082019050919050565b60006020820190508181036000830152612c5881612c1c565b9050919050565b7f4e6f20616374696f6e73206c6566740000000000000000000000000000000000600082015250565b6000612c95600f83612b76565b9150612ca082612c5f565b602082019050919050565b60006020820190508181036000830152612cc481612c88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000600082015250565b6000612d30600d83612b76565b9150612d3b82612cfa565b602082019050919050565b60006020820190508181036000830152612d5f81612d23565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000612db0612dab612da6846123dc565b611f57565b6121b8565b9050919050565b612dc081612d95565b82525050565b6000608082019050612ddb60008301876122f2565b612de86020830186612db7565b612df56040830185612db7565b612e0260608301846122f2565b95945050505050565b60058110612e1857600080fd5b50565b600081519050612e2a81612e0b565b92915050565b600060608284031215612e4657612e4561231c565b5b612e506060612392565b90506000612e6084828501612400565b6000830152506020612e7484828501612400565b6020830152506040612e8884828501612e1b565b60408301525092915050565b600060608284031215612eaa57612ea9612107565b5b6000612eb884828501612e30565b91505092915050565b7f31737420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b6000612f1d602383612b76565b9150612f2882612ec1565b604082019050919050565b60006020820190508181036000830152612f4c81612f10565b9050919050565b60058110612f6457612f63612d66565b5b50565b6000819050612f7582612f53565b919050565b6000612f8582612f67565b9050919050565b612f9581612f7a565b82525050565b600060a082019050612fb060008301886122f2565b612fbd6020830187612db7565b612fca6040830186612db7565b612fd760608301856122f2565b612fe46080830184612f8c565b9695505050505050565b612ff7816123dc565b82525050565b6040820160008201516130136000850182612fee565b5060208201516130266020850182612fee565b50505050565b600060608201905061304160008301856122f2565b61304e6020830184612ffd565b9392505050565b60006040828403121561306b5761306a612107565b5b600061307984828501612415565b91505092915050565b7f326e6420446f6f72206e6f74206f70656e2f62726561636865642f756e6c6f6360008201527f6b65640000000000000000000000000000000000000000000000000000000000602082015250565b60006130de602383612b76565b91506130e982613082565b604082019050919050565b6000602082019050818103600083015261310d816130d1565b9050919050565b600067ffffffffffffffff82111561312f5761312e612332565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561315b5761315a612332565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561318757613186612332565b5b602082029050919050565b60006131a56131a08461316c565b612392565b905080602084028301858111156131bf576131be612496565b5b835b818110156131e857806131d488826123c7565b8452602084019350506020810190506131c1565b5050509392505050565b600082601f83011261320757613206612465565b5b6004613214848285613192565b91505092915050565b600061012082840312156132345761323361231c565b5b61323e60c0612392565b9050600061324e84828501612400565b600083015250602061326284828501612400565b6020830152506040613276848285016131f2565b60408301525060c061328a84828501612555565b60608301525060e061329e84828501612555565b6080830152506101006132b384828501612555565b60a08301525092915050565b60006132d26132cd84613140565b612392565b90508083825260208201905061012084028301858111156132f6576132f5612496565b5b835b81811015613320578061330b888261321d565b845260208401935050610120810190506132f8565b5050509392505050565b600082601f83011261333f5761333e612465565b5b815161334f8482602086016132bf565b91505092915050565b600061336b61336684613114565b612392565b9050808382526020820190506020840283018581111561338e5761338d612496565b5b835b818110156133d557805167ffffffffffffffff8111156133b3576133b2612465565b5b8086016133c0898261332a565b85526020850194505050602081019050613390565b5050509392505050565b600082601f8301126133f4576133f3612465565b5b8151613404848260208601613358565b91505092915050565b60006020828403121561342357613422612107565b5b600082015167ffffffffffffffff8111156134415761344061210c565b5b61344d848285016133df565b91505092915050565b7f526f6f6d206e6f74206578706c6f726564000000000000000000000000000000600082015250565b600061348c601183612b76565b915061349782613456565b602082019050919050565b600060208201905081810360008301526134bb8161347f565b9050919050565b60006080820190506134d760008301866122f2565b6134e46020830185612ffd565b6134f160608301846122f2565b949350505050565b7f446f6f72206e6f7420636c6f7365640000000000000000000000000000000000600082015250565b600061352f600f83612b76565b915061353a826134f9565b602082019050919050565b6000602082019050818103600083015261355e81613522565b9050919050565b600060408201905061357a6000830185612db7565b6135876020830184612db7565b9392505050565b6000602082840312156135a4576135a3612107565b5b60006135b284828501612555565b91505092915050565b60006060820190506135d060008301866122f2565b6135dd6020830185612db7565b6135ea6040830184612db7565b949350505050565b6000610120828403121561360957613608612107565b5b60006136178482850161321d565b91505092915050565b7f526f6f6d20616c7265616479206c6f6f74656400000000000000000000000000600082015250565b6000613656601383612b76565b915061366182613620565b602082019050919050565b6000602082019050818103600083015261368581613649565b9050919050565b6005811061369957600080fd5b50565b6000815190506136ab8161368c565b92915050565b600060c082840312156136c7576136c661231c565b5b6136d160c0612392565b905060006136e18482850161369c565b60008301525060206136f5848285016123c7565b602083015250604061370984828501612400565b604083015250606061371d84828501612400565b606083015250608061373184828501612555565b60808301525060a061374584828501612555565b60a08301525092915050565b600060c0828403121561376757613766612107565b5b6000613775848285016136b1565b91505092915050565b7f43616e2774206c6f6f7420656d70747920726f6f6d0000000000000000000000600082015250565b60006137b4601583612b76565b91506137bf8261377e565b602082019050919050565b600060208201905081810360008301526137e3816137a7565b9050919050565b60006040820190506137ff60008301856122f2565b61380c6020830184612db7565b9392505050565b600060408201905061382860008301856122f2565b613835602083018461205b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613876826121b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138a9576138a861383c565b5b600182019050919050565b7f4552524f523a2042616420616374696f6e20636f6e6669670000000000000000600082015250565b60006138ea601883612b76565b91506138f5826138b4565b602082019050919050565b60006020820190508181036000830152613919816138dd565b9050919050565b600060408201905061393560008301856122f2565b61394260208301846122f2565b9392505050565b61395281612049565b82525050565b613961816121b8565b82525050565b60408201600082015161397d6000850182612fee565b5060208201516139906020850182612fee565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006139ce8383612fee565b60208301905092915050565b6000602082019050919050565b60006139f282613996565b6139fc81856139a1565b9350613a07836139b2565b8060005b83811015613a38578151613a1f88826139c2565b9750613a2a836139da565b925050600181019050613a0b565b5085935050505092915050565b613a4e81612532565b82525050565b60006101a083016000830151613a6d6000860182613949565b506020830151613a806020860182613949565b506040830151613a936040860182613958565b506060830151613aa66060860182613967565b506080830151613ab960a0860182612fee565b5060a0830151613acc60c0860182612fee565b5060c0830151613adf60e0860182612fee565b5060e0830151613af3610100860182612fee565b50610100830151848203610120860152613b0d82826139e7565b915050610120830151848203610140860152613b2982826139e7565b915050610140830151613b40610160860182613a45565b50610160830151613b55610180860182613a45565b508091505092915050565b60058110613b7157613b70612d66565b5b50565b6000819050613b8282613b60565b919050565b6000613b9282613b74565b9050919050565b613ba281613b87565b82525050565b6000606082019050613bbd60008301866122f2565b8181036020830152613bcf8185613a54565b9050613bde6040830184613b99565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613c42602683612b76565b9150613c4d82613be6565b604082019050919050565b60006020820190508181036000830152613c7181613c35565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613cae602083612b76565b9150613cb982613c78565b602082019050919050565b60006020820190508181036000830152613cdd81613ca1565b905091905056fea26469706673582212204e45bc770b58dfa210e65d7ecbbbc420c4ea4ca29f5081c5ad9e520e81a41fa564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Actions.sol:Actions",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1987,
        "contract": "contracts/Actions.sol:Actions",
        "label": "chars",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CharInterface)1814"
      },
      {
        "astId": 1990,
        "contract": "contracts/Actions.sol:Actions",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)1840"
      },
      {
        "astId": 1993,
        "contract": "contracts/Actions.sol:Actions",
        "label": "maps",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MapInterface)1933"
      },
      {
        "astId": 1996,
        "contract": "contracts/Actions.sol:Actions",
        "label": "games",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(GamesInterface)1974"
      },
      {
        "astId": 1999,
        "contract": "contracts/Actions.sol:Actions",
        "label": "items",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ItemsInterface)1982"
      },
      {
        "astId": 2001,
        "contract": "contracts/Actions.sol:Actions",
        "label": "charsAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CharInterface)1814": {
        "encoding": "inplace",
        "label": "contract CharInterface",
        "numberOfBytes": "20"
      },
      "t_contract(GamesInterface)1974": {
        "encoding": "inplace",
        "label": "contract GamesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ItemsInterface)1982": {
        "encoding": "inplace",
        "label": "contract ItemsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MapInterface)1933": {
        "encoding": "inplace",
        "label": "contract MapInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)1840": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      }
    }
  }
}