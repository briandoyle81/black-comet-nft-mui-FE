{
  "address": "0xD4Bac753d8eD800242976e81448AB8C72e551f6e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "debugForceRoomId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debugForceId",
          "type": "uint256"
        }
      ],
      "name": "discoverRoom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetDoors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetGameTile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetMainReactorCoords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasHazard",
          "type": "bool"
        }
      ],
      "name": "extSetHazardStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distance",
          "type": "uint256"
        }
      ],
      "name": "extSpreadHazards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "getDoor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maps",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numDoors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "startPosition",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mainReactorRow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mainReactorCol",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRooms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "resetOpenDoors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roomList",
      "outputs": [
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "eventNum",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numItems",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numData",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "sigDetected",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roomTilesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DoorStatus",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_strength",
          "type": "uint256"
        }
      ],
      "name": "setDoorFromPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "setLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0acc7956fa115fe509744528e38b9412333e76e17e372e3138f45ac00f1ecc11",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xD4Bac753d8eD800242976e81448AB8C72e551f6e",
    "transactionIndex": 3,
    "gasUsed": "3359516",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000800000000000000000000000000000000000000008000002000000000000000000000000000000000000000000020000000800001000000000000040100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000020000000000000000000000000000000000000000000200000000000000200000000000000000000000000000000000040000000004000000100000000000001000000000000000000000000000000100000000020000800000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xd2177d602b42ab24f5c686c6e3460ff04849c447d57cd2ddc196e0922f570635",
    "transactionHash": "0x0acc7956fa115fe509744528e38b9412333e76e17e372e3138f45ac00f1ecc11",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 34290502,
        "transactionHash": "0x0acc7956fa115fe509744528e38b9412333e76e17e372e3138f45ac00f1ecc11",
        "address": "0xD4Bac753d8eD800242976e81448AB8C72e551f6e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xd2177d602b42ab24f5c686c6e3460ff04849c447d57cd2ddc196e0922f570635"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 34290502,
        "transactionHash": "0x0acc7956fa115fe509744528e38b9412333e76e17e372e3138f45ac00f1ecc11",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000019f3e4a0d2436400000000000000000000000000000000000000000000000001073bf6d3bc3578000000000000000000000000000000000000000000000f6b6c2ba54ec411a9fd00000000000000000000000000000000000000000000000000ed481232e9f214000000000000000000000000000000000000000000000f6b6c45993364e3ed61",
        "logIndex": 7,
        "blockHash": "0xd2177d602b42ab24f5c686c6e3460ff04849c447d57cd2ddc196e0922f570635"
      }
    ],
    "blockNumber": 34290502,
    "cumulativeGasUsed": "3482560",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e1e83ba9ee77b944b8675384efabcd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"debugForceRoomId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debugForceId\",\"type\":\"uint256\"}],\"name\":\"discoverRoom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetDoors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetGameTile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetMainReactorCoords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomById\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col\",\"type\":\"uint256\"}],\"name\":\"extGetRoomId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomList\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasHazard\",\"type\":\"bool\"}],\"name\":\"extSetHazardStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distance\",\"type\":\"uint256\"}],\"name\":\"extSpreadHazards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"getDoor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numDoors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"startPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mainReactorRow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainReactorCol\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRooms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"resetOpenDoors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roomList\",\"outputs\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roomTilesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_strength\",\"type\":\"uint256\"}],\"name\":\"setDoorFromPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"setLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCMaps.sol\":\"Maps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/BCMaps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCUtils.sol\\\";\\n\\n// TODO: Eval putting constants in a separate file that is imported/shared\\nuint constant BOARD_SIZE = 11;\\nuint constant VENT_CHANCE = 33;\\nuint constant WINDOW_CHANCE = 66;\\nuint constant DOOR_CHANCE = 66;\\nuint constant DOOR_MOD_STEP = 22;\\nuint8 constant MAX_DOOR_STR = 4;\\n\\nuint constant START_ROOM_ID = 2; // TODO: Possibility of more than one start room?\\nuint8 constant UNDISCOVERED_ROOM = 1;\\nuint8 constant UNEXPLORED_MAIN_REACTOR = 100; // TODO: Random hardcoded value with meanging\\nuint8 constant EXPLORED_MAIN_REACTOR = 18;\\nuint8 constant SPACE_ROOM = 0;\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ncontract Maps is Ownable, BCUtils {\\n\\n    address public game;\\n    RoomTileInterface public roomTiles;\\n\\n    address public actionsAddress;\\n    address public playersAddress;\\n\\n    function setContractAddresses(\\n        address _gameAddress,\\n        address _utilsAddress, // TODO: Remove\\n        address _roomTilesAddress,\\n        address _actionsAddress,\\n        address _playersAddress\\n        ) public onlyOwner {\\n        game = _gameAddress;\\n        roomTiles = RoomTileInterface(_roomTilesAddress);\\n        actionsAddress = _actionsAddress;\\n        playersAddress = _playersAddress;\\n        numRooms = _setGameRoomTiles();\\n    }\\n\\n    // One room list for all games\\n    mapping (uint => BCTypes.RoomTile) public roomList;\\n    uint public numRooms;\\n\\n    BCTypes.Map[] public maps;\\n\\n    // TODO: System for options like static start and debug maps for testing\\n    function createMap() public onlyGame returns (uint) {\\n        BCTypes.Map storage newMap = maps.push();\\n                                                                                        // Skipping 18 main reactor\\n        uint[26] memory rooms = [uint(3), 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];\\n        newMap.unusedNormalRooms = rooms;\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        newMap.startPosition = BCTypes.Position(10, 6); // TODO: Hardcoding\\n        _buildMap(newMap);\\n        _addFeatures(newMap);\\n\\n        // Return the map id for the games contract\\n        return maps.length-1;\\n    }\\n\\n    function _addFeatures(BCTypes.Map storage _newMap) internal {\\n        // TODO: Eval how this is working, should usually place reactor near the back\\n        uint rooms = 0;\\n        for(uint row = 0; row < BOARD_SIZE; row++){\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                if(_newMap.board[row][col].roomId == UNDISCOVERED_ROOM) {\\n                    rooms++;\\n                    if(rooms == 5) { // TODO: Hardcoding\\n                        _newMap.board[row][col].roomId = UNEXPLORED_MAIN_REACTOR;\\n                        _newMap.mainReactorRow = row;\\n                        _newMap.mainReactorCol = col;\\n                    }\\n                    // Place Windows\\n                    for (uint i = 0; i < 4; i++) {\\n                        if (_newMap.board[row][col].doors[i] == 0) {\\n                                // TODO: Hardcoding\\n                                if(row == 9 && col == 6) {\\n                                    continue;\\n                                }\\n                                BCTypes.Position memory neighborPos = getNeighborRoom(i, BCTypes.Position(uint8(row), uint8(col)));\\n                                uint neighborId = _newMap.board[neighborPos.row][neighborPos.col].roomId;\\n                                if (neighborId == SPACE_ROOM && smallIntBetweenVals(0, 99) < WINDOW_CHANCE) {\\n                                    _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                                    255,\\n                                    255,\\n                                    BCTypes.DoorStatus.WINDOW);\\n                                    _newMap.numDoors++;\\n                                    _newMap.board[row][col].doors[i] = _newMap.numDoors-1; // -1 for correct index\\n                                    // _newMap.board[row][col].doors[opposite(i)] = _newMap.numDoors-1; //TODO: this breaks things\\n                                }\\n                            }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _buildMap(BCTypes.Map storage _newMap) internal {\\n        uint stackCount = 0;\\n        uint numToPlace = numRooms - 2; // -1 for space and -1 for empty room\\n\\n        uint availableDoors = 1; // Start with 1 because tracking is done in the pop current phase\\n\\n        uint doorModifier = 0;\\n\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_newMap.startPosition.row][_newMap.startPosition.col] = true;\\n\\n        BCTypes.Position[30] memory stack; // TODO: Write a stack library? // TODO: This can probably be 27\\n        stack[stackCount] = _newMap.startPosition; // Start by enstacking the Donghaijiu location\\n        stackCount++;\\n\\n        while (numToPlace > 0 && stackCount > 0) { // TODO: Need to track stack count to avoid crash on error if all rooms not placed\\n            // Pop the top item from the stack\\n            BCTypes.Position memory current = stack[stackCount-1];\\n            stackCount--;\\n            delete stack[stackCount]; // TODO: Confirm utility of deleting\\n\\n            numToPlace--;\\n            availableDoors--;\\n\\n            _newMap.board[current.row][current.col].roomId = UNDISCOVERED_ROOM;\\n\\n            // Add vent\\n            if (smallIntBetweenVals(0, 99) < VENT_CHANCE) {\\n                _newMap.board[current.row][current.col].hasVent = true;\\n            }\\n\\n            // Also ugly but fighting stack limit\\n            uint[4] memory order = [uint(0), 1, 2, 3];\\n\\n            // Fischer-Yates shuffle to avoid direction bias in room placement\\n            for (uint i = order.length-1; i > 0; i--) {\\n                uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n                (order[i], order[k]) = (order[k], order[i]);\\n            }\\n\\n            for (uint i = 0; i < order.length; i++) {\\n                int newRow = int8(current.row);\\n                int newCol = int8(current.col);\\n\\n                if(order[i] == 0) {\\n                    newRow--;\\n                } else if (order[i] == 1) {\\n                    newRow++;\\n                } else if (order[i] == 2) {\\n                    newCol++;\\n                } else if (order[i] == 3) {\\n                    newCol--;\\n                }\\n\\n                // Stay in bounds, reserving outside edge for Donghaijiu only\\n                if (newRow < 1 ||\\n                    newCol < 1 ||\\n                    newRow > int(BOARD_SIZE-2) ||\\n                    newCol > int(BOARD_SIZE-2)) {\\n                        continue;\\n                }\\n                BCTypes.Position memory neighbor = BCTypes.Position(uint8(int8(newRow)), uint8(int8(newCol)));\\n                                                                    // Hideous but hashtag #stacklimit\\n                if (found[neighbor.row][neighbor.col] == false || _newMap.board[current.row][current.col].doors[getDirectionBetween(current, neighbor)] == 0) {\\n                    if (availableDoors == 0 || smallIntBetweenVals(0, 99) < DOOR_CHANCE - doorModifier) {\\n                        _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                        smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        BCTypes.DoorStatus.CLOSED);\\n                        // Pre-breach doors with strength 0\\n                        if (_newMap.doors[_newMap.numDoors].vsBreach == 0) {\\n                            _newMap.doors[_newMap.numDoors].status = BCTypes.DoorStatus.BREACHED;\\n                        }\\n                        _newMap.numDoors++;\\n\\n                        doorModifier += DOOR_MOD_STEP;\\n                        // Prevent negative uint in DOOR_CHANCE - doorModifier\\n                        if (doorModifier > DOOR_CHANCE) {\\n                            doorModifier = DOOR_CHANCE;\\n                        }\\n\\n                        // Only enstack if we haven't found this one yet\\n                        // Otherwise it will overwrite existing tiles\\n                        if (found[neighbor.row][neighbor.col] == false) {\\n                            stack[stackCount] = neighbor;\\n                            stackCount++;\\n                            availableDoors++;\\n\\n                            found[neighbor.row][neighbor.col] = true;\\n                        }\\n\\n                        // Add the door if one isn't present already\\n                        // TODO: Check may be unnecessary\\n                        if(_newMap.board[current.row][current.col].doors[order[i]] == 0) {\\n                            _newMap.board[current.row][current.col].doors[order[i]] = _newMap.numDoors-1;\\n                            _newMap.board[neighbor.row][neighbor.col].doors[opposite(order[i])] = _newMap.numDoors-1;\\n                        }\\n                    } else {\\n                        doorModifier = 0;\\n                    }\\n                }\\n\\n            }\\n            // Detect mapgen stuck and reset by adding a new valid room in the stack\\n        }\\n\\n\\n        // Cleanup Tasks\\n        // TODO Detect and prevent failure to deploy all tiles\\n        // require(numToPlace == 0, \\\"Error: Bad mapgen.  Unplaced rooms\\\");\\n\\n        // Reset Donghaijiu ID (Was changed by map building)\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].roomId = uint8(START_ROOM_ID);\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].hasVent = false;\\n\\n        // Set the first door placed to breached, this is the entrance\\n        _newMap.doors[1].status = BCTypes.DoorStatus.BREACHED;\\n\\n        // TODO: Add signature detected\\n    }\\n\\n    // Create an internal copy of roomTiles\\n    function _setGameRoomTiles() internal returns (uint) {\\n        // Doing loop because can't set nested mapping all at once\\n        uint number = roomTiles.getNumRoomTiles();\\n        for(uint i = 0; i < number; i++) {\\n            roomList[i] = roomTiles.extGetRoomTile(i);\\n        }\\n        return number;\\n    }\\n\\n    function extGetBoard(uint _mapId) public view returns (BCTypes.GameTile[][] memory) {\\n        BCTypes.GameTile[][] memory board = new BCTypes.GameTile[][](BOARD_SIZE);\\n        for (uint i = 0; i < BOARD_SIZE; i++) {\\n            board[i] = new BCTypes.GameTile[](BOARD_SIZE);\\n        }\\n\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                board[row][col] = maps[_mapId].board[row][col];\\n            }\\n        }\\n\\n        return board;\\n    }\\n\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) public view returns (BCTypes.GameTile memory) {\\n        return maps[_mapId].board[_row][_col];\\n    }\\n\\n    function extGetRoomList(uint _mapId) public view returns (BCTypes.RoomTile[] memory) {\\n        BCTypes.RoomTile[] memory roomListArr = new BCTypes.RoomTile[](numRooms);\\n        for (uint i = 0; i < roomListArr.length; i++) {\\n            roomListArr[i] = roomList[i];\\n        }\\n        return roomListArr;\\n    }\\n\\n    function extGetRoom(uint _mapId, uint _row, uint _col) public view returns(BCTypes.RoomTile memory) {\\n        return roomList[maps[_mapId].board[_row][_col].roomId];\\n    }\\n\\n    function extGetRoomById(uint _mapId, uint _roomId) public view returns (BCTypes.RoomTile memory) {\\n        return roomList[_roomId];\\n    }\\n\\n    function extGetRoomId(uint _mapId, uint row, uint col) public view returns (uint) {\\n        return maps[_mapId].board[row][col].roomId;\\n    }\\n\\n    function extGetMainReactorCoords(uint _mapId) public view returns (uint, uint) {\\n        return (maps[_mapId].mainReactorRow, maps[_mapId].mainReactorCol);\\n    }\\n\\n    function extGetDoors(uint _mapId) public view returns (BCTypes.Door[] memory) {\\n        BCTypes.Door[] memory doors = new BCTypes.Door[](maps[_mapId].numDoors);\\n        for (uint i = 0; i < doors.length; i++) {\\n            doors[i] = maps[_mapId].doors[i];\\n        }\\n\\n        return doors;\\n    }\\n\\n    // TODO:  These need to validate that this is the right version of BCMaps\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) public view returns (BCTypes.Door memory){\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        return maps[_mapId].doors[currentRoomDoors[_direction]];\\n    }\\n                                                                                                                // 0 -> no change\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status, uint _strength) public {\\n        require((msg.sender == game || msg.sender == actionsAddress || msg.sender == playersAddress), \\\"Not game/actions/players contract\\\");\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        BCTypes.Door storage currentDoor = maps[_mapId].doors[currentRoomDoors[_direction]];\\n        currentDoor.status = _status;\\n        if(_strength > 0) {\\n            currentDoor.vsHack = uint8(_strength);\\n            currentDoor.vsBreach = uint8(_strength);\\n        }\\n    }\\n    // TODO: Below is better, but having trouble with contract size\\n    // See ~line 265 in BCPlayers, effect for locking doors\\n    // function lockDownRoom(uint _mapId, uint _row, uint _col, uint _strength) public {\\n    //     require(msg.sender == playersAddress, \\\"Not players contract\\\");\\n    //     for(uint i = 0; i < 4; i++) {\\n    //         BCTypes.Door memory currentDoor = getDoor(_mapId, _row, _col, i);\\n    //         if (currentDoor.status == BCTypes.DoorStatus.CLOSED ||\\n    //             currentDoor.status == BCTypes.DoorStatus.OPEN ||\\n    //             currentDoor.status == BCTypes.DoorStatus.BREACHED) {\\n    //                 _setDoorFromPos(_mapId, _row, _col, i, BCTypes.DoorStatus.CLOSED, _strength);\\n    //         }\\n    //     }\\n    // }\\n\\n    function setLooted(uint _mapId, uint _row, uint _col) public {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract - setLooted\\\");\\n        maps[_mapId].board[_row][_col].looted = true;\\n    }\\n\\n    function extSetHazardStatus(uint _mapId, uint _row, uint _col, bool _hasHazard) public {\\n        require(msg.sender == playersAddress, \\\"Not player contract\\\");\\n        maps[_mapId].board[_row][_col].hasHazard = _hasHazard;\\n    }\\n\\n    function extSpreadHazards(uint _mapId, uint _distance) public onlyGame {\\n        // TODO: CRITICAL -> this is untested\\n        bool[BOARD_SIZE][BOARD_SIZE] memory buffer;\\n\\n        for(uint times = 0; times < _distance; times++) {\\n            for(uint row = 0; row < BOARD_SIZE; row++) {\\n                for(uint col = 0; col < BOARD_SIZE; col++) {\\n                    buffer[row][col] = maps[_mapId].board[row][col].hasHazard;\\n                }\\n            }\\n\\n            for(uint row = 0; row < BOARD_SIZE; row++) {\\n                for(uint col = 0; col < BOARD_SIZE; col++) {\\n                    if(buffer[row][col]) {\\n                        for(uint dir = 0; dir < 4; dir++) {\\n                            uint doorId = maps[_mapId].board[row][col].doors[dir];\\n                            BCTypes.DoorStatus doorStatus = maps[_mapId].doors[doorId].status;\\n                            if(doorStatus == BCTypes.DoorStatus.BREACHED) {\\n                                if(row == 0 && dir == 0) {\\n                                    continue;\\n                                }\\n                                if (row == BOARD_SIZE-1 && dir == 1) {\\n                                    continue;\\n                                }\\n                                if(col == 0 && dir == 3) {\\n                                    continue;\\n                                }\\n                                if(col == BOARD_SIZE-1 && dir == 2) {\\n                                    continue;\\n                                }\\n                                BCTypes.Position memory neighborPos = getNeighborRoom(dir, BCTypes.Position(uint8(row), uint8(col)));\\n                                BCTypes.GameTile storage neighbor = maps[_mapId].board[neighborPos.row][neighborPos.col];\\n                                if(neighbor.roomId != SPACE_ROOM && neighbor.roomId != START_ROOM_ID) {\\n                                    neighbor.hasHazard = true;\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n\\n    function resetOpenDoors(uint _mapId) public onlyGame {\\n        for (uint i = 0; i < maps[_mapId].numDoors; i++) {\\n            if (maps[_mapId].doors[i].status == BCTypes.DoorStatus.OPEN) {\\n                maps[_mapId].doors[i].status = BCTypes.DoorStatus.CLOSED;\\n            }\\n        }\\n    }\\n\\n    function _getUnusedRoomId(BCTypes.Map storage _map) internal returns (uint8) {\\n        for (uint i = _map.unusedNormalRooms.length-1; i > 0; i--) {\\n            uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n            (_map.unusedNormalRooms[i], _map.unusedNormalRooms[k]) = (_map.unusedNormalRooms[k], _map.unusedNormalRooms[i]);\\n        }\\n\\n        uint room = _map.unusedNormalRooms[_map.unusedNormalRooms.length-1];\\n        _map.unusedNormalRooms.pop();\\n        return uint8(room);\\n    }\\n\\n    // Discover a room and return the uint id for that room's event\\n    // Return either the room's number, or 0 to indicate room already discovered\\n    function discoverRoom(uint _mapId, uint _row, uint _col, uint debugForceId) public onlyGame returns (uint) {\\n        BCTypes.GameTile storage gameTile = maps[_mapId].board[_row][_col];\\n        if(debugForceId != 0) {\\n            gameTile.roomId = uint8(debugForceId);\\n            return debugForceId;\\n        }\\n        // Handle the main reactor\\n        if(gameTile.roomId == UNEXPLORED_MAIN_REACTOR) {\\n            gameTile.roomId = uint8(EXPLORED_MAIN_REACTOR);\\n            return EXPLORED_MAIN_REACTOR;\\n        }\\n        if(gameTile.roomId == UNDISCOVERED_ROOM) {\\n            gameTile.roomId = _getUnusedRoomId(maps[_mapId]);\\n            return gameTile.roomId;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function debugForceRoomId(uint _mapId, uint _row, uint _col, uint _roomId) public onlyOwner {\\n        maps[_mapId].board[_row][_col].roomId = uint8(_roomId);\\n    }\\n\\n    modifier onlyGame {\\n        require(msg.sender == game);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x085fc94265c5ec3ae515cb95d15b57b9edb6d57e6441958eb89a874bfc873715\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM, DROP_ITEMS, PICK_ITEMS, LEAVE_GAME } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType { NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY, ROOM }\\n    enum WorldItemStatus { DESTROYED, HELD, ON_GROUND, DISCARDED, OUT_OF_GAME }\\n\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { CONSUMABLE, HEALTH, CARRY, DEFENSE, HACK, BREACH, HAZARD, ARMOR, RANGED, MELEE, SPECIAL }\\n\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n\\n        Position position;\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;  // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;  // Currently unused\\n        bool hasEgg;\\n\\n        uint gameId;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n\\n        uint turnsTaken;\\n\\n        EventTracker eventTracker;\\n\\n        // address mapContract;\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n\\n        uint DEBUG_returnAmount;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame;\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n\\n        uint weight;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType;\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n\\n        WorldItemStatus status;\\n\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0x254a6919c1a2e22b8ea8c01590d2deefd29f3ff1dbf2955554d4eef0d6f4e96c\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) public returns(uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns(uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return(keccak256(abi.encodePacked(TODO_randomSeed, blockhash(block.number-1), msg.sender)));\\n    }\\n\\n    function abs(int x) public pure returns (int) { // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(uint _min, uint _max, uint _val, uint _valMax) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = adjustedMax * _val / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(bytes32 _hash, uint256 _size, uint256 _offset) public pure returns(uint8) {\\n        bytes32 mask = bytes32((2**_size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(uint _traitNum, uint _subTraitNum) public pure returns(uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) public pure returns(uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row-1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row+1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col+1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col-1);\\n        }\\n        string memory message = string.concat(\\\"Invalid direction: \\\", Strings.toString(_direction));\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(uint _gameId, uint _for, uint _against) public returns(bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if(_direction == 0) {\\n            return 1;\\n        }\\n        if(_direction == 1) {\\n            return 0;\\n        }\\n        if(_direction == 2) {\\n            return 3;\\n        }\\n        if(_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a51f6da3b262b3322a372cf15e062a7ab3b5836906021b891a6bb75cafa8232\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006001553480156200001657600080fd5b50620000223362000028565b62000078565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613b5380620000886000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806381bad36d1161013b578063c6b41b45116100b8578063f2fde38b1161007c578063f2fde38b146105a6578063f7157f64146105b9578063f9dfbfcb146105cc578063fa3993c2146105ec578063fe368d7a146105ff57600080fd5b8063c6b41b4514610552578063c8e9ac9614610565578063ce28613f14610578578063e847ae1e1461058b578063f01fc35a1461059e57600080fd5b8063951fc3fe116100ff578063951fc3fe146104a157806397f34c3f146104c1578063a63a9aab146104d4578063b14ca5751461052c578063c3fe3e281461053f57600080fd5b806381bad36d146104375780638214f2221461044a57806386e529d01461045d5780638af13fd2146104705780638da5cb5b1461049057600080fd5b806358308aa8116101c957806369568fd51161018d57806369568fd5146103b95780636ea1dcd8146103d9578063715018a6146103f957806375990a0e146104015780637b45c0d41461042457600080fd5b806358308aa81461033357806359215223146103485780635dc969671461035b5780635f8951e61461037e57806364db84bf146103a657600080fd5b80631e1de205116102105780631e1de205146102c05780631ef04416146102c85780631f7b4f30146102e857806353011696146102fb578063580582831461032057600080fd5b806302861c6c1461024257806303b414e41461026b5780631b5ac4b5146102965780631cdec3ad146102b7575b600080fd5b610255610250366004613121565b610612565b60405161026291906131b6565b60405180910390f35b60055461027e906001600160a01b031681565b6040516001600160a01b039091168152602001610262565b6102a96102a43660046131c4565b6106e1565b604051908152602001610262565b6102a960075481565b6102a9610701565b6102db6102d63660046131c4565b610779565b6040516102629190613254565b6102a96102f63660046131c4565b61096d565b61030e6103093660046132e9565b6109c9565b60405160ff9091168152602001610262565b61025561032e36600461331b565b610a08565b6103466103413660046131c4565b610a91565b005b61034661035636600461333d565b610b9e565b61036e610369366004613121565b610d45565b6040519015158152602001610262565b61039161038c3660046131c4565b610de0565b60408051928352602083019190915201610262565b6102a96103b436600461331b565b610e36565b6103cc6103c73660046131c4565b610e4e565b60405161026291906133ca565b6103ec6103e73660046132e9565b610fae565b6040516102629190613418565b6103466110ec565b61041461040f3660046131c4565b611100565b6040516102629493929190613426565b60045461027e906001600160a01b031681565b6102a96104453660046132e9565b611161565b6102a96104583660046131c4565b611251565b61034661046b366004613121565b6112cb565b61048361047e3660046131c4565b61137e565b604051610262919061345f565b6000546001600160a01b031661027e565b6104b46104af366004613537565b611491565b6040516102629190613564565b61030e6104cf366004613121565b6115bb565b61051b6104e23660046131c4565b60066020526000908152604090208054600182015460029092015460ff9182169291818116916101008104821691620100009091041685565b604051610262959493929190613582565b61034661053a3660046132e9565b6115e6565b60025461027e906001600160a01b031681565b61034661056036600461331b565b611642565b6102a9610573366004613121565b61199f565b61030e6105863660046135ba565b6119e7565b61034661059936600461360f565b611a97565b6102a9611afb565b6103466105b4366004613674565b611d34565b60035461027e906001600160a01b031681565b6105df6105da366004613121565b611dad565b604051610262919061368f565b6102a96105fa36600461369e565b611e91565b61034661060d3660046136d8565b611f59565b61061a612fcc565b600660006008868154811061063157610631613719565b600091825260208083208884526001600790930201919091018152604080832087845282528083205460ff9081168552918401949094529183019020825160a0810190935280549091839116600581111561068e5761068e61314d565b600581111561069f5761069f61314d565b81526001820154602082015260029091015460ff80821660408401526101008204811660608401526201000090910416151560809091015290505b9392505050565b6000808212156106f9576106f482613745565b6106fb565b815b92915050565b600180546000918261071283613761565b9190505550600154600143610727919061377a565b403360405160200161075e93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b60408051600b808252610180820190925260609160009190816020015b606081526020019060019003908161079657905050905060005b600b81101561081b5760408051600b808252610180820190925290816020015b6107d8612ffd565b8152602001906001900390816107d0579050508282815181106107fd576107fd613719565b6020026020010181905250808061081390613761565b9150506107b0565b5060005b600b8110156109665760005b600b811015610953576008858154811061084757610847613719565b600091825260208083208584526001600790930201820181526040808420858552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b8154815260200190600101908083116108ac5750505091835250506005919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152835184908490811061091c5761091c613719565b6020026020010151828151811061093557610935613719565b6020026020010181905250808061094b90613761565b91505061082b565b508061095e81613761565b91505061081f565b5092915050565b60008061097c600160066119e7565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5183826040516109bb929190918252602082015260400190565b60405180910390a192915050565b6000806109d6868661377a565b90506000836109e5868461378d565b6109ef91906137ba565b90506109fb87826137ce565b925050505b949350505050565b610a10612fcc565b60008281526006602052604090819020815160a081019092528054829060ff166005811115610a4157610a4161314d565b6005811115610a5257610a5261314d565b81526001820154602082015260029091015460ff8082166040840152610100820481166060840152620100009091041615156080909101529392505050565b6002546001600160a01b03163314610aa857600080fd5b60005b60088281548110610abe57610abe613719565b600091825260209091206003600790920201015460ff16811015610b9a57600260088381548110610af157610af1613719565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff166004811115610b2b57610b2b61314d565b03610b8857600160088381548110610b4557610b45613719565b60009182526020808320858452600260079093020191909101905260409020805462ff0000191662010000836004811115610b8257610b8261314d565b02179055505b80610b9281613761565b915050610aab565b5050565b6002546001600160a01b0316331480610bc157506004546001600160a01b031633145b80610bd657506005546001600160a01b031633145b610c315760405162461bcd60e51b815260206004820152602160248201527f4e6f742067616d652f616374696f6e732f706c617965727320636f6e747261636044820152601d60fa1b60648201526084015b60405180910390fd5b600060088781548110610c4657610c46613719565b600091825260208083208984526001600790930201820181526040808420898552909152918290208251608081019093520160048282826020028201915b815481526020019060010190808311610c845750505050509050600060088881548110610cb357610cb3613719565b90600052602060002090600702016002016000838760048110610cd857610cd8613719565b602002015181526020019081526020016000209050838160000160026101000a81548160ff02191690836004811115610d1357610d1361314d565b02179055508215610d3b57805461ffff191661010060ff851690810260ff1916919091171781555b5050505050505050565b600080610d518561096d565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a180600103610dae5760009150506106da565b600383610dbb86846137ce565b610dc591906137e1565b1315610dd55760019150506106da565b506000949350505050565b60008060088381548110610df657610df6613719565b90600052602060002090600702016005015460088481548110610e1b57610e1b613719565b90600052602060002090600702016006015491509150915091565b600081610e4484600461378d565b6106da91906137ce565b6060600060088381548110610e6557610e65613719565b600091825260209091206003600790920201015460ff1667ffffffffffffffff811115610e9457610e946134a1565b604051908082528060200260200182016040528015610ee657816020015b610ed360408051606081018252600080825260208201819052909182015290565b815260200190600190039081610eb25790505b50905060005b81518110156109665760088481548110610f0857610f08613719565b6000918252602080832084845260026007909302019190910181526040918290208251606081018452815460ff80821683526101008204811694830194909452909391929184019162010000909104166004811115610f6957610f6961314d565b6004811115610f7a57610f7a61314d565b81525050828281518110610f9057610f90613719565b60200260200101819052508080610fa690613761565b915050610eec565b610fcf60408051606081018252600080825260208201819052909182015290565b600060088681548110610fe457610fe4613719565b600091825260208083208884526001600790930201820181526040808420888552909152918290208251608081019093520160048282826020028201915b81548152602001906001019080831161102257505050505090506008868154811061104f5761104f613719565b9060005260206000209060070201600201600082856004811061107457611074613719565b6020908102919091015182528181019290925260409081016000208151606081018352815460ff8082168352610100820481169583019590955290939192840191620100009091041660048111156110ce576110ce61314d565b60048111156110df576110df61314d565b9052509695505050505050565b6110f4612008565b6110fe6000612062565b565b6008818154811061111057600080fd5b600091825260209182902060036007909202019081015460408051808201909152600483015460ff818116835261010090910481169482019490945260058301546006909301549390911693509184565b6002546000906001600160a01b0316331461117b57600080fd5b60006008868154811061119057611190613719565b60009182526020808320888452600160079093020191909101815260408083208784529091529020905082156111d457805460ff191660ff84161790555080610a00565b805460ff16606319016111f657805460ff191660129081179091559050610a00565b805460ff16600019016112455761122c6008878154811061121957611219613719565b90600052602060002090600702016120b2565b815460ff191660ff919091169081179091559050610a00565b50600095945050505050565b60008160000361126357506001919050565b8160010361127357506000919050565b8160020361128357506003919050565b8160030361129357506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b6044820152606401610c28565b6004546001600160a01b031633146113255760405162461bcd60e51b815260206004820181905260248201527f4e6f7420616374696f6e7320636f6e7472616374202d207365744c6f6f7465646044820152606401610c28565b60016008848154811061133a5761133a613719565b6000918252602080832095835260016007909202909501018452604080822093825292909352912060050180549115156101000261ff001990921691909117905550565b6060600060075467ffffffffffffffff81111561139d5761139d6134a1565b6040519080825280602002602001820160405280156113d657816020015b6113c3612fcc565b8152602001906001900390816113bb5790505b50905060005b81518110156109665760008181526006602052604090819020815160a081019092528054829060ff1660058111156114165761141661314d565b60058111156114275761142761314d565b81526001820154602082015260029091015460ff808216604084015261010082048116606084015262010000909104161515608090910152825183908390811061147357611473613719565b6020026020010181905250808061148990613761565b9150506113dc565b6040805180820190915260008082526020820152826000036114e3576040518060400160405280600184600001516114c99190613801565b60ff168152602001836020015160ff1681525090506106fb565b82600103611507576040518060400160405280836000015160016114c9919061381a565b82600203611544576040518060400160405280836000015160ff16815260200183602001516001611538919061381a565b60ff16905290506106fb565b82600303611575576040518060400160405280836000015160ff168152602001600184602001516115389190613801565b6000611580846121e4565b6040516020016115909190613857565b60405160208183030381529060405290508060405162461bcd60e51b8152600401610c289190613892565b6000808260016115cc8660026139a9565b6115d6919061377a565b901b8516831c9150509392505050565b6115ee612008565b806008858154811061160257611602613719565b60009182526020808320968352600791909102909501600101855260408082209482529390945291909220805460ff191660ff9092169190911790555050565b6002546001600160a01b0316331461165957600080fd5b61166161301c565b60005b828110156119995760005b600b8110156117245760005b600b811015611711576008868154811061169757611697613719565b60009182526020808320858452600792909202909101600101815260408083208484529091529020600501546301000000900460ff168483600b81106116df576116df613719565b602002015182600b81106116f5576116f5613719565b911515602090920201528061170981613761565b91505061167b565b508061171c81613761565b91505061166f565b5060005b600b8110156119865760005b600b811015611973578382600b811061174f5761174f613719565b602002015181600b811061176557611765613719565b6020020151156119615760005b600481101561195f5760006008888154811061179057611790613719565b6000918252602080832087845260016007909302018201815260408084208785529091529091200182600481106117c9576117c9613719565b015490506000600889815481106117e2576117e2613719565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff16905060038160048111156118215761182161314d565b0361194a5784158015611832575082155b1561183e57505061194d565b61184a6001600b61377a565b851480156118585750826001145b1561186457505061194d565b831580156118725750826003145b1561187e57505061194d565b61188a6001600b61377a565b841480156118985750826002145b156118a457505061194d565b60006118ca8460405180604001604052808960ff1681526020018860ff16815250611491565b9050600060088b815481106118e1576118e1613719565b60009182526020808320855160ff9081168552600793909302016001018152604080842086830151841685529091529091208054909250161580159061192c5750805460ff16600214155b156119475760058101805463ff000000191663010000001790555b50505b50505b8061195781613761565b915050611772565b505b8061196b81613761565b915050611734565b508061197e81613761565b915050611728565b508061199181613761565b915050611664565b50505050565b6000600884815481106119b4576119b4613719565b6000918252602080832095835260079190910290940160010184526040808220938252929093525090205460ff16919050565b60018054600091826119f883613761565b9190505550600033600154600143611a10919061377a565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000611a648585613801565b611a6f90600161381a565b90508460ff168160ff1683611a8491906139b5565b611a8e91906137ce565b95945050505050565b611a9f612008565b600280546001600160a01b038088166001600160a01b03199283161790925560038054868416908316179055600480548584169083161790556005805492841692909116919091179055611af16122e5565b6007555050505050565b6002546000906001600160a01b03163314611b1557600080fd5b600880546001810182556000829052604080516103408101825260038152600460208201526005918101919091526006606082015260076080820181905260a0820193909352600960c0820152600a60e0820152600b610100820152600c610120820152600d610140820152600e610160820152600f61018082015260106101a082015260116101c082015260136101e08201526014610200820152601561022082015260166102408201526017610260820152601861028082015260196102a0820152601a6102c08201819052601b6102e0830152601c610300830152601d610320830152929091027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30191611c2f908390839061304a565b506040805160608101825260ff808252602082015290810160009052600383015460ff9081166000908152600285016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff0000191662010000836004811115611cab57611cab61314d565b0217905550505060038201805460ff16906000611cc7836139c9565b82546101009290920a60ff8181021990931691909216919091021790555060408051808201909152600a8152600660209091015260048201805461ffff191661060a179055611d1582612472565b611d1e82612d39565b600854611d2d9060019061377a565b9250505090565b611d3c612008565b6001600160a01b038116611da15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c28565b611daa81612062565b50565b611db5612ffd565b60088481548110611dc857611dc8613719565b600091825260208083208684526001600790930201820181526040808420868552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b815481526020019060010190808311611e2d5750505091835250506005919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152949350505050565b80518251600091611ea1916139e8565b60000b600103611eb3575060006106fb565b81518351611ec191906139e8565b60000b19611ed1575060016106fb565b81602001518360200151611ee591906139e8565b60000b19611ef5575060026106fb565b81602001518360200151611f0991906139e8565b60000b600103611f1b575060036106fb565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b6044820152606401610c28565b6005546001600160a01b03163314611fa95760405162461bcd60e51b8152602060048201526013602482015272139bdd081c1b185e595c8818dbdb9d1c9858dd606a1b6044820152606401610c28565b8060088581548110611fbd57611fbd613719565b600091825260208083209683526001600790920290960101855260408082209482529390945291909220600501805491151563010000000263ff000000199092169190911790555050565b6000546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c28565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805460009081906120c59060019061377a565b90505b80156121815760006120db6000836119e7565b9050836000018160ff16815481106120f5576120f5613719565b906000526020600020015484600001838154811061211557612115613719565b906000526020600020015485600001848154811061213557612135613719565b906000526020600020016000876000018560ff168154811061215957612159613719565b600091825260209091200192909255919091555081905061217981613a09565b9150506120c8565b50815460009083906121959060019061377a565b815481106121a5576121a5613719565b90600052602060002001549050826000018054806121c5576121c5613a20565b6001900381819060005260206000200160009055905580915050919050565b60608160000361220b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612235578061221f81613761565b915061222e9050600a836137ba565b915061220f565b60008167ffffffffffffffff811115612250576122506134a1565b6040519080825280601f01601f19166020018201604052801561227a576020820181803683370190505b5090505b8415610a005761228f60018361377a565b915061229c600a866139b5565b6122a79060306137ce565b60f81b8183815181106122bc576122bc613719565b60200101906001600160f81b031916908160001a9053506122de600a866137ba565b945061227e565b600080600360009054906101000a90046001600160a01b03166001600160a01b03166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561233b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235f9190613a36565b905060005b8181101561246c5760035460405163413a9f5f60e11b8152600481018390526001600160a01b03909116906382753ebe9060240160a060405180830381865afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190613a4f565b600082815260066020526040902081518154829060ff191660018360058111156124055761240561314d565b02179055506020820151600182015560408201516002909101805460608401516080909401511515620100000262ff00001960ff9586166101000261ffff19909316959094169490941717919091169190911790558061246481613761565b915050612364565b50919050565b6000806002600754612484919061377a565b90506001600061249261301c565b6004860154600190829060ff16600b81106124af576124af613719565b60200201516004880154610100900460ff16600b81106124d1576124d1613719565b911515602090920201526124e3613095565b60408051808201909152600488015460ff80821683526101009091041660208201528187601e811061251757612517613719565b60200201528561252681613761565b9650505b60008511801561253a5750600086115b15612cad5760008161254d60018961377a565b601e811061255d5761255d613719565b602002015190508661256e81613a09565b9750508187601e811061258357612583613719565b602002016125aa6040518060400160405280600060ff168152602001600060ff1681525090565b9052856125b681613a09565b96505084806125c490613a09565b825160ff908116600090815260018c810160209081526040808420828901519095168452939052918120805460ff19169092179091559096506021915061260c9060636119e7565b60ff16101561264f57805160ff908116600090815260018a016020908152604080832082860151909416835292905220600501805462ff00001916620100001790555b6000604051806080016040528060008152602001600181526020016002815260200160038152509050600060016004612688919061377a565b90505b801561271857600061269e6000836119e7565b9050828160ff16600481106126b5576126b5613719565b60200201518383600481106126cc576126cc613719565b60200201518484600481106126e3576126e3613719565b60200201858460ff16600481106126fc576126fc613719565b602002019190915252508061271081613a09565b91505061268b565b5060005b6004811015612ca55782516020840151600091820b910b83836004811061274557612745613719565b6020020151600003612763578161275b81613af0565b9250506127e7565b83836004811061277557612775613719565b602002015160010361278b578161275b81613b05565b83836004811061279d5761279d613719565b60200201516002036127bb57806127b381613b05565b9150506127e7565b8383600481106127cd576127cd613719565b60200201516003036127e757806127e381613af0565b9150505b60018212806127f65750600181125b8061280b57506128086002600b61377a565b82135b80612820575061281d6002600b61377a565b81135b1561282c575050612c93565b6040805180820190915260ff80841680835290831660208301528890600b811061285857612858613719565b6020020151816020015160ff16600b811061287557612875613719565b602002015115806128d657508c6001016000876000015160ff1681526020019081526020016000206000876020015160ff1681526020019081526020016000206001016128c28783611e91565b600481106128d2576128d2613719565b0154155b15612c8f578915806128ff57506128ee89604261377a565b6128fa600060636119e7565b60ff16105b15612c8a57604051806060016040528061291b600060046119e7565b60ff16815260200161292f600060046119e7565b60ff16815260200160018152508d60020160008f60030160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156129d1576129d161314d565b0217905550505060038d015460ff908116600090815260028f0160205260408120549091169003612a245760038d015460ff16600090815260028e0160205260409020805462ff00001916620300001790555b60038d01805460ff16906000612a39836139c9565b91906101000a81548160ff021916908360ff16021790555050601689612a5f91906137ce565b98506042891115612a6f57604298505b8051889060ff16600b8110612a8657612a86613719565b6020020151816020015160ff16600b8110612aa357612aa3613719565b60200201511515600003612b275780878d601e8110612ac457612ac4613719565b60200201528b612ad381613761565b9c50508980612ae190613761565b9a5050600188826000015160ff16600b8110612aff57612aff613719565b6020020151826020015160ff16600b8110612b1c57612b1c613719565b911515602090920201525b8c6001016000876000015160ff1681526020019081526020016000206000876020015160ff168152602001908152602001600020600101858560048110612b7057612b70613719565b602002015160048110612b8557612b85613719565b0154600003612c855760038d0154612ba29060019060ff16613801565b60ff168d6001016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612bee57612bee613719565b602002015160048110612c0357612c03613719565b015560038d0154612c199060019060ff16613801565b60ff168d6001016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101612c72878760048110612c6857612c68613719565b6020020151611251565b60048110612c8257612c82613719565b01555b612c8f565b600098505b5050505b80612c9d81613761565b91505061271c565b50505061252a565b60048701805460ff80821660009081526001808c016020818152604080852061010097889004871686528252808520805460ff1916600290811790915597548087168652928252808520969092049094168352938352838220600501805462ff000019908116909155908252938b01909152208054600392166201000083021790555050505050505050565b6000805b600b811015612fc75760005b600b811015612fb4576000828152600185016020908152604080832084845290915290205460ff1660001901612fa25782612d8381613761565b93505082600503612dc357600082815260018501602090815260408083208484529091529020805460ff1916606417905560058401829055600684018190555b60005b6004811015612fa0576000838152600180870160209081526040808420868552909152909120018160048110612dfe57612dfe613719565b0154600003612f8e57826009148015612e175750816006145b612f8e576000612e418260405180604001604052808760ff1681526020018660ff16815250611491565b805160ff9081166000908152600189016020908152604080832082860151851684529091529020549192501680158015612e8957506042612e84600060636119e7565b60ff16105b15612f8b576040805160608101825260ff808252602082015290810160049052600388015460ff908116600090815260028a016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff0000191662010000836004811115612f0957612f0961314d565b0217905550505060038701805460ff16906000612f25836139c9565b82546101009290920a60ff8181021990931691831602179091556003890154612f52925060019116613801565b60008681526001808a016020908152604080842089855290915290912060ff9290921691018460048110612f8857612f88613719565b01555b50505b80612f9881613761565b915050612dc6565b505b80612fac81613761565b915050612d49565b5080612fbf81613761565b915050612d3d565b505050565b6040805160a081019091528060005b8152600060208201819052604082018190526060820181905260809091015290565b6040805160e08101825260008082526020820152908101612fdb6130cf565b604051806101600160405280600b905b6130346130ed565b81526020019060019003908161302c5790505090565b828054828255906000526020600020908101928215613085579160200282015b8281111561308557825182559160200191906001019061306a565b5061309192915061310c565b5090565b604051806103c00160405280601e905b60408051808201909152600080825260208201528152602001906001900390816130a55790505090565b60405180608001604052806004906020820280368337509192915050565b604051806101600160405280600b906020820280368337509192915050565b5b80821115613091576000815560010161310d565b60008060006060848603121561313657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b600681106131735761317361314d565b9052565b613182828251613163565b6020810151602083015260ff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b60a081016106fb8284613177565b6000602082840312156131d657600080fd5b5035919050565b60ff8151168252602060ff81830151168184015260408201516040840160005b600481101561321a578251825291830191908301906001016131fd565b505050506060810151151560c0838101919091526080820151151560e084015260a082015115156101008401520151151561012090910152565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156132db57888603603f19018552825180518088529088019088880190845b818110156132c5576132b18385516131dd565b928a0192610140929092019160010161329e565b509097505050938601939186019160010161327c565b509398975050505050505050565b600080600080608085870312156132ff57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561332e57600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561335657600080fd5b8635955060208701359450604087013593506060870135925060808701356005811061338157600080fd5b8092505060a087013590509295509295509295565b60ff815116825260ff60208201511660208301526040810151600581106133bf576133bf61314d565b806040840152505050565b6020808252825182820181905260009190848201906040850190845b8181101561340c576133f9838551613396565b92840192606092909201916001016133e6565b50909695505050505050565b606081016106fb8284613396565b60ff8516815260a0810161344d6020830186805160ff908116835260209182015116910152565b60608201939093526080015292915050565b6020808252825182820181905260009190848201906040850190845b8181101561340c5761348e838551613177565b9284019260a0929092019160010161347b565b634e487b7160e01b600052604160045260246000fd5b60ff81168114611daa57600080fd5b6000604082840312156134d857600080fd5b6040516040810181811067ffffffffffffffff8211171561350957634e487b7160e01b600052604160045260246000fd5b604052905080823561351a816134b7565b8152602083013561352a816134b7565b6020919091015292915050565b6000806060838503121561354a57600080fd5b8235915061355b84602085016134c6565b90509250929050565b604081016106fb8284805160ff908116835260209182015116910152565b60a081016135908288613163565b85602083015260ff8516604083015260ff8416606083015282151560808301529695505050505050565b600080604083850312156135cd57600080fd5b82356135d8816134b7565b915060208301356135e8816134b7565b809150509250929050565b80356001600160a01b038116811461360a57600080fd5b919050565b600080600080600060a0868803121561362757600080fd5b613630866135f3565b945061363e602087016135f3565b935061364c604087016135f3565b925061365a606087016135f3565b9150613668608087016135f3565b90509295509295909350565b60006020828403121561368657600080fd5b6106da826135f3565b61014081016106fb82846131dd565b600080608083850312156136b157600080fd5b6136bb84846134c6565b915061355b84604085016134c6565b8015158114611daa57600080fd5b600080600080608085870312156136ee57600080fd5b843593506020850135925060408501359150606085013561370e816136ca565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820161375a5761375a61372f565b5060000390565b6000600182016137735761377361372f565b5060010190565b818103818111156106fb576106fb61372f565b80820281158282048414176106fb576106fb61372f565b634e487b7160e01b600052601260045260246000fd5b6000826137c9576137c96137a4565b500490565b808201808211156106fb576106fb61372f565b81810360008312801583831316838312821617156109665761096661372f565b60ff82811682821603908111156106fb576106fb61372f565b60ff81811683821601908111156106fb576106fb61372f565b60005b8381101561384e578181015183820152602001613836565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251613885816013850160208701613833565b9190910160130192915050565b60208152600082518060208401526138b1816040850160208701613833565b601f01601f19169190910160400192915050565b600181815b808511156139005781600019048211156138e6576138e661372f565b808516156138f357918102915b93841c93908002906138ca565b509250929050565b600082613917575060016106fb565b81613924575060006106fb565b816001811461393a576002811461394457613960565b60019150506106fb565b60ff8411156139555761395561372f565b50506001821b6106fb565b5060208310610133831016604e8410600b8410161715613983575081810a6106fb565b61398d83836138c5565b80600019048211156139a1576139a161372f565b029392505050565b60006106da8383613908565b6000826139c4576139c46137a4565b500690565b600060ff821660ff81036139df576139df61372f565b60010192915050565b600082810b9082900b03607f198112607f821317156106fb576106fb61372f565b600081613a1857613a1861372f565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613a4857600080fd5b5051919050565b600060a08284031215613a6157600080fd5b60405160a0810181811067ffffffffffffffff82111715613a9257634e487b7160e01b600052604160045260246000fd5b604052825160068110613aa457600080fd5b8152602083810151908201526040830151613abe816134b7565b60408201526060830151613ad1816134b7565b60608201526080830151613ae4816136ca565b60808201529392505050565b6000600160ff1b8201613a1857613a1861372f565b60006001600160ff1b0182016137735761377361372f56fea26469706673582212203896527ee92a6de41793f2389cca27c6b4f46d270ef82236c906f1f70bf74ab464736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17101,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13069,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "game",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13072,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomTiles",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(RoomTileInterface)13063"
      },
      {
        "astId": 13074,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13076,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "playersAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 13120,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(RoomTile)17005_storage)"
      },
      {
        "astId": 13122,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "numRooms",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13126,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "maps",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Map)16940_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Map)16940_storage)dyn_storage": {
        "base": "t_struct(Map)16940_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Map[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RoomTileInterface)13063": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)16822": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DoorStatus)16801": {
        "encoding": "inplace",
        "label": "enum BCTypes.DoorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)16907_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BCTypes.GameTile))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GameTile)16907_storage)"
      },
      "t_mapping(t_uint256,t_struct(Door)16915_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.Door)",
        "numberOfBytes": "32",
        "value": "t_struct(Door)16915_storage"
      },
      "t_mapping(t_uint256,t_struct(GameTile)16907_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.GameTile)",
        "numberOfBytes": "32",
        "value": "t_struct(GameTile)16907_storage"
      },
      "t_mapping(t_uint256,t_struct(RoomTile)17005_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.RoomTile)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomTile)17005_storage"
      },
      "t_struct(Door)16915_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Door",
        "members": [
          {
            "astId": 16909,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsBreach",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16911,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsHack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16914,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "status",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(DoorStatus)16801"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameTile)16907_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.GameTile",
        "members": [
          {
            "astId": 16892,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16894,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "parentId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16898,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 16900,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "explored",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 16902,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "looted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 16904,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasVent",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 16906,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasHazard",
            "offset": 3,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)16940_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Map",
        "members": [
          {
            "astId": 16918,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "unusedNormalRooms",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 16925,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "board",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)16907_storage))"
          },
          {
            "astId": 16930,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Door)16915_storage)"
          },
          {
            "astId": 16932,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numDoors",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 16935,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "startPosition",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Position)16890_storage"
          },
          {
            "astId": 16937,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "mainReactorRow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16939,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "mainReactorCol",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Position)16890_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 16887,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16889,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoomTile)17005_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.RoomTile",
        "members": [
          {
            "astId": 16996,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BCEventType)16822"
          },
          {
            "astId": 16998,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17000,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numItems",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 17002,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numData",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 17004,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "sigDetected",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}