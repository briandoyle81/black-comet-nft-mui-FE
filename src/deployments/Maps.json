{
  "address": "0xFA34B4D60ea1C3550e607d4e5813f605B36A6F35",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "debugForceRoomId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debugForceId",
          "type": "uint256"
        }
      ],
      "name": "discoverRoom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetDoors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetGameTile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetMainReactorCoords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasHazard",
          "type": "bool"
        }
      ],
      "name": "extSetHazardStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distance",
          "type": "uint256"
        }
      ],
      "name": "extSpreadHazards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "getDoor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "getDoorDirections",
      "outputs": [
        {
          "internalType": "bool[4]",
          "name": "",
          "type": "bool[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getEventBlocks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_first",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_second",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_ignoreClosed",
          "type": "bool"
        }
      ],
      "name": "getLineOfSight",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maps",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numDoors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "startPosition",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mainReactorRow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mainReactorCol",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_finish",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_ignoreClosed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_useVents",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_moveLimit",
          "type": "uint256"
        }
      ],
      "name": "moveToOrCloser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRooms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "resetOpenDoors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roomList",
      "outputs": [
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "eventNum",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numItems",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numData",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "sigDetected",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roomTilesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DoorStatus",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_strength",
          "type": "uint256"
        }
      ],
      "name": "setDoorFromPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "setLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bc43694f9065527b9ca6a5cee1c43ca584a9a5c880cff089c5c6abeb089e36f",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xFA34B4D60ea1C3550e607d4e5813f605B36A6F35",
    "transactionIndex": 6,
    "gasUsed": "3892541",
    "logsBloom": "0x
    "blockHash": "0x503221610e9886cc59f47907e9741d01009d98cb4d999c96160b57b54ea1f9ee",
    "transactionHash": "0x1bc43694f9065527b9ca6a5cee1c43ca584a9a5c880cff089c5c6abeb089e36f",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 41873824,
        "transactionHash": "0x1bc43694f9065527b9ca6a5cee1c43ca584a9a5c880cff089c5c6abeb089e36f",
        "address": "0xFA34B4D60ea1C3550e607d4e5813f605B36A6F35",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x503221610e9886cc59f47907e9741d01009d98cb4d999c96160b57b54ea1f9ee"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41873824,
        "transactionHash": "0x1bc43694f9065527b9ca6a5cee1c43ca584a9a5c880cff089c5c6abeb089e36f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000014be5e3d5e3300000000000000000000000000000000000000000000000000174fa3ca6c703fe8000000000000000000000000000000000000000000001354451befe85133ca5a000000000000000000000000000000000000000000000000173ae56c2f120ce80000000000000000000000000000000000000000000013544530ae468e91fd5a",
        "logIndex": 12,
        "blockHash": "0x503221610e9886cc59f47907e9741d01009d98cb4d999c96160b57b54ea1f9ee"
      }
    ],
    "blockNumber": 41873824,
    "cumulativeGasUsed": "4458927",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "53343237385e44ecb26c93379ee6715d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"debugForceRoomId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debugForceId\",\"type\":\"uint256\"}],\"name\":\"discoverRoom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetDoors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetGameTile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetMainReactorCoords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomById\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col\",\"type\":\"uint256\"}],\"name\":\"extGetRoomId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomList\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasHazard\",\"type\":\"bool\"}],\"name\":\"extSetHazardStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distance\",\"type\":\"uint256\"}],\"name\":\"extSpreadHazards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"getDoor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"getDoorDirections\",\"outputs\":[{\"internalType\":\"bool[4]\",\"name\":\"\",\"type\":\"bool[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getEventBlocks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_first\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_second\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_ignoreClosed\",\"type\":\"bool\"}],\"name\":\"getLineOfSight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numDoors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"startPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mainReactorRow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainReactorCol\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_finish\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_ignoreClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useVents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_moveLimit\",\"type\":\"uint256\"}],\"name\":\"moveToOrCloser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRooms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"resetOpenDoors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roomList\",\"outputs\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roomTilesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_strength\",\"type\":\"uint256\"}],\"name\":\"setDoorFromPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"setLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCMaps.sol\":\"Maps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BCMaps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCUtils.sol\\\";\\n\\n// TODO: Eval putting constants in a separate file that is imported/shared\\nuint constant BOARD_SIZE = 11;\\nuint constant VENT_CHANCE = 33;\\nuint constant WINDOW_CHANCE = 66;\\nuint constant DOOR_CHANCE = 66;\\nuint constant DOOR_MOD_STEP = 22;\\nuint8 constant MAX_DOOR_STR = 4;\\n\\nuint constant START_ROOM_ID = 2; // TODO: Possibility of more than one start room?\\nuint8 constant UNDISCOVERED_ROOM = 1;\\nuint8 constant UNEXPLORED_MAIN_REACTOR = 100; // TODO: Random hardcoded value with meanging\\nuint8 constant EXPLORED_MAIN_REACTOR = 18;\\nuint8 constant SPACE_ROOM = 0;\\n\\nuint constant QUEUE_SIZE = 25;\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns (uint256);\\n\\n    function extGetRoomTile(\\n        uint _id\\n    ) external view returns (BCTypes.RoomTile memory);\\n}\\n\\ncontract Maps is Ownable, BCUtils {\\n    address public game;\\n    RoomTileInterface public roomTiles;\\n\\n    address public actionsAddress;\\n    address public playersAddress;\\n\\n    function setContractAddresses(\\n        address _gameAddress,\\n        address _utilsAddress, // TODO: Remove\\n        address _roomTilesAddress,\\n        address _actionsAddress,\\n        address _playersAddress\\n    ) public onlyOwner {\\n        game = _gameAddress;\\n        roomTiles = RoomTileInterface(_roomTilesAddress);\\n        actionsAddress = _actionsAddress;\\n        playersAddress = _playersAddress;\\n        numRooms = _setGameRoomTiles();\\n    }\\n\\n    // One room list for all games\\n    mapping(uint => BCTypes.RoomTile) public roomList;\\n    uint public numRooms;\\n\\n    BCTypes.Map[] public maps;\\n\\n    constructor() {\\n        maps.push();\\n    }\\n\\n    // TODO: System for options like static start and debug maps for testing\\n    function createMap() public onlyGame returns (uint) {\\n        BCTypes.Map storage newMap = maps.push();\\n        // Skipping 18 main reactor\\n        uint[26] memory rooms = [\\n            uint(3),\\n            4,\\n            5,\\n            6,\\n            7,\\n            8,\\n            9,\\n            10,\\n            11,\\n            12,\\n            13,\\n            14,\\n            15,\\n            16,\\n            17,\\n            19,\\n            20,\\n            21,\\n            22,\\n            23,\\n            24,\\n            25,\\n            26,\\n            27,\\n            28,\\n            29\\n        ];\\n        newMap.unusedNormalRooms = rooms;\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        newMap.startPosition = BCTypes.Position(10, 6); // TODO: Hardcoding\\n        _buildMap(newMap);\\n        _addFeatures(newMap);\\n\\n        // Return the map id for the games contract\\n        return maps.length - 1;\\n    }\\n\\n    function _addFeatures(BCTypes.Map storage _newMap) internal {\\n        // TODO: Eval how this is working, should usually place reactor near the back\\n        uint rooms = 0;\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                if (_newMap.board[row][col].roomId == UNDISCOVERED_ROOM) {\\n                    rooms++;\\n                    if (rooms == 5) {\\n                        // TODO: Hardcoding\\n                        _newMap\\n                        .board[row][col].roomId = UNEXPLORED_MAIN_REACTOR;\\n                        _newMap.mainReactorRow = row;\\n                        _newMap.mainReactorCol = col;\\n                    }\\n                    // Place Windows\\n                    for (uint i = 0; i < 4; i++) {\\n                        if (_newMap.board[row][col].doors[i] == 0) {\\n                            // TODO: Hardcoding\\n                            if (row == 9 && col == 6) {\\n                                continue;\\n                            }\\n                            BCTypes.Position\\n                                memory neighborPos = getNeighborRoom(\\n                                    i,\\n                                    BCTypes.Position(uint8(row), uint8(col))\\n                                );\\n                            uint neighborId = _newMap\\n                            .board[neighborPos.row][neighborPos.col].roomId;\\n                            if (\\n                                neighborId == SPACE_ROOM &&\\n                                smallIntBetweenVals(0, 99) < WINDOW_CHANCE\\n                            ) {\\n                                _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                                    255,\\n                                    255,\\n                                    BCTypes.DoorStatus.WINDOW\\n                                );\\n                                _newMap.numDoors++;\\n                                _newMap.board[row][col].doors[i] =\\n                                    _newMap.numDoors -\\n                                    1; // -1 for correct index\\n                                // _newMap.board[row][col].doors[opposite(i)] = _newMap.numDoors-1; //TODO: this breaks things\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _buildMap(BCTypes.Map storage _newMap) internal {\\n        uint stackCount = 0;\\n        uint numToPlace = numRooms - 2; // -1 for space and -1 for empty room\\n\\n        uint availableDoors = 1; // Start with 1 because tracking is done in the pop current phase\\n\\n        uint doorModifier = 0;\\n\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_newMap.startPosition.row][_newMap.startPosition.col] = true;\\n\\n        BCTypes.Position[30] memory stack; // TODO: Write a stack library? // TODO: This can probably be 27\\n        stack[stackCount] = _newMap.startPosition; // Start by enstacking the Donghaijiu location\\n        stackCount++;\\n\\n        while (numToPlace > 0 && stackCount > 0) {\\n            // TODO: Need to track stack count to avoid crash on error if all rooms not placed\\n            // Pop the top item from the stack\\n            BCTypes.Position memory current = stack[stackCount - 1];\\n            stackCount--;\\n            delete stack[stackCount]; // TODO: Confirm utility of deleting\\n\\n            numToPlace--;\\n            availableDoors--;\\n\\n            _newMap.board[current.row][current.col].roomId = UNDISCOVERED_ROOM;\\n\\n            // Add vent\\n            if (smallIntBetweenVals(0, 99) < VENT_CHANCE) {\\n                _newMap.board[current.row][current.col].hasVent = true;\\n            }\\n\\n            // Also ugly but fighting stack limit\\n            uint[4] memory order = [uint(0), 1, 2, 3];\\n\\n            // Fischer-Yates shuffle to avoid direction bias in room placement\\n            for (uint i = order.length - 1; i > 0; i--) {\\n                uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n                (order[i], order[k]) = (order[k], order[i]);\\n            }\\n\\n            for (uint i = 0; i < order.length; i++) {\\n                int newRow = int8(current.row);\\n                int newCol = int8(current.col);\\n\\n                if (order[i] == 0) {\\n                    newRow--;\\n                } else if (order[i] == 1) {\\n                    newRow++;\\n                } else if (order[i] == 2) {\\n                    newCol++;\\n                } else if (order[i] == 3) {\\n                    newCol--;\\n                }\\n\\n                // Stay in bounds, reserving outside edge for Donghaijiu only\\n                if (\\n                    newRow < 1 ||\\n                    newCol < 1 ||\\n                    newRow > int(BOARD_SIZE - 2) ||\\n                    newCol > int(BOARD_SIZE - 2)\\n                ) {\\n                    continue;\\n                }\\n                BCTypes.Position memory neighbor = BCTypes.Position(\\n                    uint8(int8(newRow)),\\n                    uint8(int8(newCol))\\n                );\\n                // Hideous but hashtag #stacklimit\\n                if (\\n                    found[neighbor.row][neighbor.col] == false ||\\n                    _newMap.board[current.row][current.col].doors[\\n                        getDirectionBetween(current, neighbor)\\n                    ] ==\\n                    0\\n                ) {\\n                    if (\\n                        availableDoors == 0 ||\\n                        smallIntBetweenVals(0, 99) < DOOR_CHANCE - doorModifier\\n                    ) {\\n                        _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                            smallIntBetweenVals(0, MAX_DOOR_STR),\\n                            smallIntBetweenVals(0, MAX_DOOR_STR),\\n                            BCTypes.DoorStatus.CLOSED\\n                        );\\n                        // Pre-breach doors with strength 0\\n                        if (_newMap.doors[_newMap.numDoors].vsBreach == 0) {\\n                            _newMap.doors[_newMap.numDoors].status = BCTypes\\n                                .DoorStatus\\n                                .BREACHED;\\n                        }\\n                        _newMap.numDoors++;\\n\\n                        doorModifier += DOOR_MOD_STEP;\\n                        // Prevent negative uint in DOOR_CHANCE - doorModifier\\n                        if (doorModifier > DOOR_CHANCE) {\\n                            doorModifier = DOOR_CHANCE;\\n                        }\\n\\n                        // Only enstack if we haven't found this one yet\\n                        // Otherwise it will overwrite existing tiles\\n                        if (found[neighbor.row][neighbor.col] == false) {\\n                            stack[stackCount] = neighbor;\\n                            stackCount++;\\n                            availableDoors++;\\n\\n                            found[neighbor.row][neighbor.col] = true;\\n                        }\\n\\n                        // Add the door if one isn't present already\\n                        // TODO: Check may be unnecessary\\n                        if (\\n                            _newMap.board[current.row][current.col].doors[\\n                                order[i]\\n                            ] == 0\\n                        ) {\\n                            _newMap.board[current.row][current.col].doors[\\n                                order[i]\\n                            ] = _newMap.numDoors - 1;\\n                            _newMap.board[neighbor.row][neighbor.col].doors[\\n                                opposite(order[i])\\n                            ] = _newMap.numDoors - 1;\\n                        }\\n                    } else {\\n                        doorModifier = 0;\\n                    }\\n                }\\n            }\\n            // Detect mapgen stuck and reset by adding a new valid room in the stack\\n        }\\n\\n        // Cleanup Tasks\\n        // TODO Detect and prevent failure to deploy all tiles\\n        // require(numToPlace == 0, \\\"Error: Bad mapgen.  Unplaced rooms\\\");\\n\\n        // Reset Donghaijiu ID (Was changed by map building)\\n        _newMap\\n        .board[_newMap.startPosition.row][_newMap.startPosition.col]\\n            .roomId = uint8(START_ROOM_ID);\\n        _newMap\\n        .board[_newMap.startPosition.row][_newMap.startPosition.col]\\n            .hasVent = false;\\n\\n        // Set the first door placed to breached, this is the entrance\\n        _newMap.doors[1].status = BCTypes.DoorStatus.BREACHED;\\n\\n        // TODO: Add signature detected\\n    }\\n\\n    // Create an internal copy of roomTiles\\n    function _setGameRoomTiles() internal returns (uint) {\\n        // Doing loop because can't set nested mapping all at once\\n        uint number = roomTiles.getNumRoomTiles();\\n        for (uint i = 0; i < number; i++) {\\n            roomList[i] = roomTiles.extGetRoomTile(i);\\n        }\\n        return number;\\n    }\\n\\n    function extGetBoard(\\n        uint _mapId\\n    ) public view returns (BCTypes.GameTile[][] memory) {\\n        BCTypes.GameTile[][] memory board = new BCTypes.GameTile[][](\\n            BOARD_SIZE\\n        );\\n        for (uint i = 0; i < BOARD_SIZE; i++) {\\n            board[i] = new BCTypes.GameTile[](BOARD_SIZE);\\n        }\\n\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                board[row][col] = maps[_mapId].board[row][col];\\n            }\\n        }\\n\\n        return board;\\n    }\\n\\n    function extGetGameTile(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) public view returns (BCTypes.GameTile memory) {\\n        return maps[_mapId].board[_row][_col];\\n    }\\n\\n    function extGetRoomList(\\n        uint _mapId\\n    ) public view returns (BCTypes.RoomTile[] memory) {\\n        BCTypes.RoomTile[] memory roomListArr = new BCTypes.RoomTile[](\\n            numRooms\\n        );\\n        for (uint i = 0; i < roomListArr.length; i++) {\\n            roomListArr[i] = roomList[i];\\n        }\\n        return roomListArr;\\n    }\\n\\n    function extGetRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) public view returns (BCTypes.RoomTile memory) {\\n        return roomList[maps[_mapId].board[_row][_col].roomId];\\n    }\\n\\n    function extGetRoomById(\\n        uint _mapId,\\n        uint _roomId\\n    ) public view returns (BCTypes.RoomTile memory) {\\n        return roomList[_roomId];\\n    }\\n\\n    function extGetRoomId(\\n        uint _mapId,\\n        uint row,\\n        uint col\\n    ) public view returns (uint) {\\n        return maps[_mapId].board[row][col].roomId;\\n    }\\n\\n    function extGetMainReactorCoords(\\n        uint _mapId\\n    ) public view returns (uint, uint) {\\n        return (maps[_mapId].mainReactorRow, maps[_mapId].mainReactorCol);\\n    }\\n\\n    /* Get ALL the doors on a given map\\n     * @param _mapId The map to get doors from\\n     * @return doors An array of all the doors on the map\\n     */\\n    function extGetDoors(\\n        uint _mapId\\n    ) public view returns (BCTypes.Door[] memory) {\\n        BCTypes.Door[] memory doors = new BCTypes.Door[](maps[_mapId].numDoors);\\n        for (uint i = 0; i < doors.length; i++) {\\n            doors[i] = maps[_mapId].doors[i];\\n        }\\n\\n        return doors;\\n    }\\n\\n    // TODO:  These need to validate that this is the right version of BCMaps\\n    function getDoor(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction\\n    ) public view returns (BCTypes.Door memory) {\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        return maps[_mapId].doors[currentRoomDoors[_direction]];\\n    }\\n\\n    function getDoorDirections(\\n        uint _mapId,\\n        uint _row,\\n        uint _col\\n    ) public view returns (bool[4] memory) {\\n        uint[4] storage currentRoomDoorIds = maps[_mapId]\\n        .board[_row][_col].doors;\\n        bool[4] memory directions;\\n\\n        for (uint i = 0; i < 4; i++) {\\n            BCTypes.Door storage currentDoor = maps[_mapId].doors[\\n                currentRoomDoorIds[i]\\n            ];\\n            BCTypes.DoorStatus status = currentDoor.status;\\n            if (\\n                status == BCTypes.DoorStatus.CLOSED ||\\n                status == BCTypes.DoorStatus.OPEN ||\\n                status == BCTypes.DoorStatus.BREACHED\\n            ) {\\n                directions[i] = true;\\n            }\\n        }\\n\\n        return directions;\\n    }\\n\\n    // 0 -> no change\\n    function setDoorFromPos(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _direction,\\n        BCTypes.DoorStatus _status,\\n        uint _strength\\n    ) public {\\n        require(\\n            (msg.sender == game ||\\n                msg.sender == actionsAddress ||\\n                msg.sender == playersAddress),\\n            \\\"Not game/actions/players contract\\\"\\n        );\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        BCTypes.Door storage currentDoor = maps[_mapId].doors[\\n            currentRoomDoors[_direction]\\n        ];\\n        currentDoor.status = _status;\\n        if (_strength > 0) {\\n            currentDoor.vsHack = uint8(_strength);\\n            currentDoor.vsBreach = uint8(_strength);\\n        }\\n    }\\n\\n    // TODO: Below is better, but having trouble with contract size\\n    // See ~line 265 in BCPlayers, effect for locking doors\\n    // function lockDownRoom(uint _mapId, uint _row, uint _col, uint _strength) public {\\n    //     require(msg.sender == playersAddress, \\\"Not players contract\\\");\\n    //     for(uint i = 0; i < 4; i++) {\\n    //         BCTypes.Door memory currentDoor = getDoor(_mapId, _row, _col, i);\\n    //         if (currentDoor.status == BCTypes.DoorStatus.CLOSED ||\\n    //             currentDoor.status == BCTypes.DoorStatus.OPEN ||\\n    //             currentDoor.status == BCTypes.DoorStatus.BREACHED) {\\n    //                 _setDoorFromPos(_mapId, _row, _col, i, BCTypes.DoorStatus.CLOSED, _strength);\\n    //         }\\n    //     }\\n    // }\\n\\n    function setLooted(uint _mapId, uint _row, uint _col) public {\\n        require(\\n            msg.sender == actionsAddress,\\n            \\\"Not actions contract - setLooted\\\"\\n        );\\n        maps[_mapId].board[_row][_col].looted = true;\\n    }\\n\\n    function extSetHazardStatus(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        bool _hasHazard\\n    ) public {\\n        require(msg.sender == playersAddress, \\\"Not player contract\\\");\\n        maps[_mapId].board[_row][_col].hasHazard = _hasHazard;\\n    }\\n\\n    function extSpreadHazards(uint _mapId, uint _distance) public onlyGame {\\n        // TODO: CRITICAL -> this is untested\\n        bool[BOARD_SIZE][BOARD_SIZE] memory buffer;\\n\\n        for (uint times = 0; times < _distance; times++) {\\n            for (uint row = 0; row < BOARD_SIZE; row++) {\\n                for (uint col = 0; col < BOARD_SIZE; col++) {\\n                    buffer[row][col] = maps[_mapId].board[row][col].hasHazard;\\n                }\\n            }\\n\\n            for (uint row = 0; row < BOARD_SIZE; row++) {\\n                for (uint col = 0; col < BOARD_SIZE; col++) {\\n                    if (buffer[row][col]) {\\n                        for (uint dir = 0; dir < 4; dir++) {\\n                            uint doorId = maps[_mapId].board[row][col].doors[\\n                                dir\\n                            ];\\n                            BCTypes.DoorStatus doorStatus = maps[_mapId]\\n                                .doors[doorId]\\n                                .status;\\n                            if (doorStatus == BCTypes.DoorStatus.BREACHED) {\\n                                if (row == 0 && dir == 0) {\\n                                    continue;\\n                                }\\n                                if (row == BOARD_SIZE - 1 && dir == 1) {\\n                                    continue;\\n                                }\\n                                if (col == 0 && dir == 3) {\\n                                    continue;\\n                                }\\n                                if (col == BOARD_SIZE - 1 && dir == 2) {\\n                                    continue;\\n                                }\\n                                BCTypes.Position\\n                                    memory neighborPos = getNeighborRoom(\\n                                        dir,\\n                                        BCTypes.Position(uint8(row), uint8(col))\\n                                    );\\n                                BCTypes.GameTile storage neighbor = maps[_mapId]\\n                                    .board[neighborPos.row][neighborPos.col];\\n                                if (\\n                                    neighbor.roomId != SPACE_ROOM &&\\n                                    neighbor.roomId != START_ROOM_ID\\n                                ) {\\n                                    neighbor.hasHazard = true;\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function resetOpenDoors(uint _mapId) public onlyGame {\\n        for (uint i = 0; i < maps[_mapId].numDoors; i++) {\\n            if (maps[_mapId].doors[i].status == BCTypes.DoorStatus.OPEN) {\\n                maps[_mapId].doors[i].status = BCTypes.DoorStatus.CLOSED;\\n            }\\n        }\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(\\n        BCTypes.Position memory _firstRoom,\\n        BCTypes.Position memory _secondRoom\\n    ) public pure returns (uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if (_direction == 0) {\\n            return 1;\\n        }\\n        if (_direction == 1) {\\n            return 0;\\n        }\\n        if (_direction == 2) {\\n            return 3;\\n        }\\n        if (_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n\\n    function _getUnusedRoomId(\\n        BCTypes.Map storage _map\\n    ) internal returns (uint8) {\\n        for (uint i = _map.unusedNormalRooms.length - 1; i > 0; i--) {\\n            uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n            (_map.unusedNormalRooms[i], _map.unusedNormalRooms[k]) = (\\n                _map.unusedNormalRooms[k],\\n                _map.unusedNormalRooms[i]\\n            );\\n        }\\n\\n        uint room = _map.unusedNormalRooms[_map.unusedNormalRooms.length - 1];\\n        _map.unusedNormalRooms.pop();\\n        return uint8(room);\\n    }\\n\\n    // Discover a room and return the uint id for that room's event\\n    // Return either the room's number, or 0 to indicate room already discovered\\n    function discoverRoom(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint debugForceId\\n    ) public onlyGame returns (uint) {\\n        BCTypes.GameTile storage gameTile = maps[_mapId].board[_row][_col];\\n        if (debugForceId != 0) {\\n            gameTile.roomId = uint8(debugForceId);\\n            return debugForceId;\\n        }\\n        // Handle the main reactor\\n        if (gameTile.roomId == UNEXPLORED_MAIN_REACTOR) {\\n            gameTile.roomId = uint8(EXPLORED_MAIN_REACTOR);\\n            return EXPLORED_MAIN_REACTOR;\\n        }\\n        if (gameTile.roomId == UNDISCOVERED_ROOM) {\\n            gameTile.roomId = _getUnusedRoomId(maps[_mapId]);\\n            return gameTile.roomId;\\n        }\\n\\n        return 0;\\n    }\\n\\n    // Find IF there is a path from one room to another, or return as far as you got\\n    // WARNING: This could get expensive, but it is a sparse graph\\n    // Return the room we get to along this path if we can't get all the way\\n    function moveToOrCloser(\\n        uint _mapId,\\n        BCTypes.Position memory _start,\\n        BCTypes.Position memory _finish,\\n        bool _ignoreClosed,\\n        bool _useVents,\\n        uint _moveLimit\\n    ) public view returns (BCTypes.Position memory) {\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_start.row][_start.col] = true;\\n\\n        // TODO: Make queue library, or custom one for this\\n        // TODO: Critical.  Confirm 25 (or 21) is big enough.  10x10 -> max manhattan distance of 20\\n        // Except that's not how many paths will be explored, silly\\n        // Add to left, pop from right\\n\\n        // popping/shifting from the front is very expensive\\n        // Instead, simply move the front by tracking a cursor\\n        // Pop by reading from the cursor, and then cursor++\\n        // Append new paths to the end\\n        // Track count\\n\\n        BCTypes.Position[][QUEUE_SIZE] memory qq;\\n\\n        // Stack limit, will calculate instead\\n        // uint count = 1;\\n\\n        uint leftCursor = 0; // The front of the queue\\n        uint rightCursor = 1; // Where to enqueue\\n\\n        BCTypes.Position[] memory startArray = new BCTypes.Position[](1);\\n        startArray[0] = _start;\\n        qq[0] = startArray;\\n\\n        while (rightCursor - leftCursor > 0) {\\n            // TODO: This will prevent crashes, but also hide them.  Refine\\n            if (rightCursor >= QUEUE_SIZE) {\\n                return _start;\\n            }\\n            // Pop from the front/left\\n            BCTypes.Position[] memory currentPath = qq[leftCursor];\\n            BCTypes.Position memory currentPos = currentPath[\\n                currentPath.length - 1\\n            ];\\n\\n            leftCursor++;\\n            // count--;\\n\\n            // Get neighbor Positions\\n            BCTypes.Position[4] memory neighbors = _getNeighbors(\\n                _mapId,\\n                currentPos,\\n                _ignoreClosed,\\n                _useVents\\n            );\\n\\n            // Iterate through neighbor positions\\n            for (uint i = 0; i < 4; i++) {\\n                BCTypes.Position memory neighbor = neighbors[i];\\n                // TODO: Probably safe to jsut use row == 0\\n                // Neighbors will always have 4 elements.  If a position is 0,0 then it is not a neighbor\\n                if (neighbor.row == 0 && neighbor.col == 0) {\\n                    continue;\\n                }\\n                if (found[neighbor.row][neighbor.col]) {\\n                    continue;\\n                }\\n\\n                // DO THE THING here for efficiency\\n                if (\\n                    neighbor.row == _finish.row && neighbor.col == _finish.col\\n                ) {\\n                    // Found A shortest path, add 1 because this room isn't in the path\\n                    // TODO: CRITICAL -> Validate the above\\n                    if (currentPath.length + 1 <= _moveLimit) {\\n                        return (_finish);\\n                    } else {\\n                        return currentPath[_moveLimit - 1]; // -1 because array\\n                    }\\n                }\\n                // Otherwise:\\n\\n                // Add to found\\n                found[neighbor.row][neighbor.col] = true;\\n\\n                // Add to queue\\n                BCTypes.Position[] memory newPath = new BCTypes.Position[](\\n                    currentPath.length + 1\\n                );\\n                // -1 because there is one less than length to copy over\\n                for (uint k = 0; k < newPath.length - 1; k++) {\\n                    newPath[k] = currentPath[k];\\n                }\\n                // add the newly found neighbor to the end\\n                newPath[newPath.length - 1] = neighbor;\\n\\n                // Add to right\\n                qq[rightCursor] = newPath;\\n                rightCursor++;\\n\\n                if (rightCursor == qq.length) {\\n                    // Ran out of queue space abort\\n                    return newPath[0]; // TODO: Could use the end here to go somewhere randomish\\n                }\\n            }\\n        }\\n        // TODO: This will prevent crashes, but also hide them.  Refine, there is at least one case this happens\\n        return _start; // TEMP:  Just don't move\\n\\n        // revert(\\\"Failed to find path\\\");  //TODO: This should be an assert probably\\n    }\\n\\n    function _getNeighbors(\\n        uint _mapId,\\n        BCTypes.Position memory _position,\\n        bool _ignoreClosed,\\n        bool _useVents\\n    ) internal view returns (BCTypes.Position[4] memory) {\\n        BCTypes.Position[4] memory neighbors; // 0,0 == not a neighbor\\n        for (uint i = 0; i < 4; i++) {\\n            BCTypes.Position memory neighbor = getNeighborRoom(i, _position);\\n\\n            uint doorId = maps[_mapId]\\n            .board[_position.row][_position.col].doors[i];\\n            BCTypes.Door storage door = maps[_mapId].doors[doorId];\\n\\n            if (\\n                door.status == BCTypes.DoorStatus.OPEN ||\\n                door.status == BCTypes.DoorStatus.BREACHED ||\\n                (door.status == BCTypes.DoorStatus.CLOSED && _ignoreClosed) ||\\n                (_useVents &&\\n                    (maps[_mapId].board[_position.row][_position.col].hasVent &&\\n                        maps[_mapId].board[neighbor.row][neighbor.col].hasVent))\\n            ) {\\n                neighbors[i] = neighbor;\\n            } else {\\n                neighbors[i] = BCTypes.Position(0, 0);\\n            }\\n        }\\n\\n        return neighbors;\\n    }\\n\\n    // Return true if postions are in LOS\\n    function getLineOfSight(\\n        uint _mapId,\\n        BCTypes.Position memory _first,\\n        BCTypes.Position memory _second,\\n        bool _ignoreClosed\\n    ) public view returns (bool) {\\n        if (_first.row == _second.row && _first.col == _second.col) {\\n            return true;\\n        }\\n\\n        if (_first.row != _second.row && _first.col != _second.col) {\\n            return false;\\n        }\\n\\n        uint direction;\\n        if (_first.row == _second.row) {\\n            if (_second.row > _first.row) {\\n                // East to _second\\n                direction = 2;\\n            } else {\\n                direction = 3;\\n            }\\n        } else {\\n            // It must be matching columns\\n            if (_second.col > _first.col) {\\n                // South to _second\\n                direction = 1;\\n            } else {\\n                direction = 0;\\n            }\\n        }\\n\\n        BCTypes.Position memory current = _first;\\n        BCTypes.Map storage currentMap = maps[_mapId];\\n\\n        while (!(current.row == _second.row && current.col == _second.col)) {\\n            BCTypes.Door storage currentDoor = currentMap.doors[direction];\\n            if (\\n                (_ignoreClosed &&\\n                    currentDoor.status == BCTypes.DoorStatus.CLOSED) ||\\n                (currentDoor.status == BCTypes.DoorStatus.OPEN ||\\n                    currentDoor.status == BCTypes.DoorStatus.BREACHED)\\n            ) {\\n                current = getNeighborRoom(direction, current);\\n            } else {\\n                // TODO: CRITICAL -> THis appears broken\\n                return false;\\n            }\\n        }\\n        // We made it to the room\\n        return true;\\n    }\\n\\n    function debugForceRoomId(\\n        uint _mapId,\\n        uint _row,\\n        uint _col,\\n        uint _roomId\\n    ) public onlyOwner {\\n        maps[_mapId].board[_row][_col].roomId = uint8(_roomId);\\n    }\\n\\n    modifier onlyGame() {\\n        require(msg.sender == game);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7d96c5b6f018b29795c64871930e7199b0b91417321d38d14dfbe4c31ab4416e\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n    // From BCGames.sol\\n    enum DoorStatus {\\n        NO_DOOR,\\n        CLOSED,\\n        OPEN,\\n        BREACHED,\\n        WINDOW\\n    }\\n    enum Action {\\n        HACK,\\n        BREACH,\\n        MOVE,\\n        PASS,\\n        LOOT,\\n        USE_ROOM,\\n        USE_ITEM,\\n        DROP_ITEMS,\\n        PICK_ITEMS,\\n        LEAVE_GAME,\\n        MELEE_ATTACK,\\n        SHOOT_ATTACK,\\n        LOOT_DENIZEN\\n    } // TODO: Add rest\\n    enum Followthrough {\\n        NONE,\\n        MOVE\\n    }\\n    enum BCEventType {\\n        NONE,\\n        BUG,\\n        MYSTERY,\\n        SCAVENGER,\\n        SHIP_SECURITY,\\n        ROOM // TODO: Is this still useful\\n    }\\n    enum WorldItemStatus {\\n        DESTROYED,\\n        HELD,\\n        ON_GROUND,\\n        DISCARDED,\\n        OUT_OF_GAME\\n    }\\n\\n    enum ItemCategory {\\n        COMPANY,\\n        ARTIFACT,\\n        SCAVENGER\\n    }\\n    enum ItemType {\\n        CONSUMABLE,\\n        HEALTH,\\n        CARRY,\\n        DEFENSE,\\n        HACK,\\n        BREACH,\\n        HAZARD,\\n        ARMOR,\\n        RANGED,\\n        MELEE,\\n        SPECIAL\\n    }\\n\\n    enum DenizenType {\\n        NONE,\\n        BUG,\\n        SCAV,\\n        TURRET,\\n        ROBOT,\\n        QUEEN,\\n        BUTCHER,\\n        BEHEMOTH,\\n        DOCTOR\\n    }\\n\\n    struct CompleteGame {\\n        Game game;\\n        GameTile[][] board;\\n        Door[] doors;\\n        RoomTile[] roomTiles;\\n        Character[] characters;\\n        Player[] players;\\n        Denizen[] denizens;\\n        Item[][] playerItems;\\n        Item[] worldItems;\\n        uint[] actionsEventBlocks;\\n        uint[] gameEventBlocks;\\n        uint[] playersEventBlocks;\\n        uint[] denizensEventBlocks;\\n    }\\n\\n    // WARNING: At stack limit\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n        uint id; // playerId;\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n        Position position;\\n        Position lastPos; // This is needed for events that use the player's prior position\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken; // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n        uint8 dataTokens; // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n        // Flags\\n\\n        bool dead; // Move to traits?\\n        uint gameId;\\n    }\\n\\n    struct Denizen {\\n        uint id;\\n        uint gameId;\\n        DenizenType denizenType; // Traits are derived from type. //TODO: rename to type\\n        Position position;\\n        uint healthRemaining; // Denizen is dead if this is zero\\n        bool looted;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n        uint[4] doors; // n, s, e, w // TODO: Make an enum for this.  Also,, this should be named doorIds\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n        // Row, Col => GameTile\\n        mapping(uint => mapping(uint => GameTile)) board;\\n        mapping(uint => Door) doors;\\n        uint8 numDoors;\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n        bool denizenTurn;\\n        uint gameId;\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint[] charIds;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        uint turnsTaken;\\n        EventTracker eventTracker;\\n        // address mapContract;  // TODO: If making separately upgradable, need all addys in game\\n        uint mapId;\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n        uint[] denizenIds;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n        uint8 numItems;\\n        uint8 numData;\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n        // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n        bool hasGun;\\n        // bool hasEgg;\\n        // bool canHarmOthers;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber; // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        // uint holdingPlayerId; // TODO: Eval if this is needed\\n        bool inGame; // For now, keep both.  Enlisting puts you in a lobby, but don't know game id yet\\n        uint gameId;\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n        uint weight;\\n        ItemCategory itemCategory;\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n        ItemType itemType;\\n        uint8 power; // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n        WorldItemStatus status;\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0xdce0e7becc3a21d11b11d54fb54a8b22e5f137b6d0adcddd729a04f9690a1a32\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    uint constant DEFAULT_ROLL_RES = 3; // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(\\n        uint indexed gameId,\\n        uint roll,\\n        uint forValue,\\n        uint against\\n    );\\n    event DiceRollEvent(uint indexed gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    mapping(uint256 => EnumerableSet.UintSet) gameToEventBlocks;\\n\\n    // TODO: Duped currently in BCGames so it doesn't need to inherit from this contract\\n    function smallIntBetweenVals(\\n        uint8 _min,\\n        uint8 _max\\n    ) public returns (uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    msg.sender,\\n                    TODO_randomSeed,\\n                    blockhash(block.number - 1)\\n                )\\n            )\\n        );\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns (uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    // function randKeccak() public returns (bytes32) {\\n    //     TODO_randomSeed++;\\n    //     return (\\n    //         keccak256(\\n    //             abi.encodePacked(\\n    //                 TODO_randomSeed,\\n    //                 blockhash(block.number - 1),\\n    //                 msg.sender\\n    //             )\\n    //         )\\n    //     );\\n    // }\\n\\n    function getNeighborRoom(\\n        uint _direction,\\n        BCTypes.Position memory _start\\n    ) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row - 1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row + 1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col + 1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col - 1);\\n        }\\n        string memory message = string.concat(\\n            \\\"Invalid direction: \\\",\\n            Strings.toString(_direction)\\n        );\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(\\n        uint _gameId,\\n        uint _for,\\n        uint _against\\n    ) public returns (bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Only denizens uses now, moved for contract size\\n    // function abs(int x) public pure returns (int) {\\n    //     // TODO: Why isn't this returning uint?\\n    //     return x >= 0 ? x : -x;\\n    // }\\n\\n    // function manhattanDistance(\\n    //     BCTypes.Position memory _pos1,\\n    //     BCTypes.Position memory _pos2\\n    // ) public pure returns (uint) {\\n    //     uint row = uint(abs(int(int8(_pos1.row)) - int(int8(_pos2.row))));\\n    //     uint col = uint(abs(int(int8(_pos1.col)) - int(int8(_pos2.col))));\\n    //     return row + col;\\n    // }\\n\\n    function getEventBlocks(uint _gameId) public view returns (uint[] memory) {\\n        return gameToEventBlocks[_gameId].values();\\n    }\\n}\\n\",\"keccak256\":\"0xca41de83bed99509db3fbbbb9b9233d8406ace962eda5f1224a1b5a1ef72e025\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006001553480156200001657600080fd5b50620000223362000034565b60098054600101815560005262000084565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61449080620000946000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806381bad36d11610130578063c6b41b45116100b8578063f2fde38b1161007c578063f2fde38b146105ad578063f7157f64146105c0578063f9dfbfcb146105d3578063fa3993c2146105f3578063fe368d7a1461060657600080fd5b8063c6b41b4514610547578063c8e9ac961461055a578063ce28613f1461056d578063e847ae1e14610592578063f01fc35a146105a557600080fd5b80638da5cb5b116100ff5780638da5cb5b146104a5578063951fc3fe146104b6578063a63a9aab146104c9578063b14ca57514610521578063c3fe3e281461053457600080fd5b806381bad36d1461044c5780638214f2221461045f57806386e529d0146104725780638af13fd21461048557600080fd5b806358058283116101be57806369568fd51161018257806369568fd5146103ce5780636ea1dcd8146103ee578063715018a61461040e57806375990a0e146104165780637b45c0d41461043957600080fd5b8063580582831461035857806358308aa81461036b57806359215223146103805780635dc96967146103935780635f8951e6146103a657600080fd5b80631cdec3ad116102055780631cdec3ad146102cb5780631ef04416146102e25780631f7b4f30146103025780632ec6572a1461031557806345e1e03c1461033857600080fd5b806302861c6c1461023757806303b414e4146102605780630e73c0241461028b57806315636a4d146102ab575b600080fd5b61024a610245366004613a61565b610619565b6040516102579190613af6565b60405180910390f35b600654610273906001600160a01b031681565b6040516001600160a01b039091168152602001610257565b61029e610299366004613b04565b6106e8565b6040516102579190613b1d565b6102be6102b9366004613a61565b610708565b6040516102579190613b61565b6102d460085481565b604051908152602001610257565b6102f56102f0366004613b04565b61084d565b6040516102579190613c0b565b6102d4610310366004613b04565b610a41565b610328610323366004613d44565b610a95565b6040519015158152602001610257565b61034b610346366004613d95565b610c64565b6040516102579190613e04565b61024a610366366004613e22565b61109a565b61037e610379366004613b04565b611123565b005b61037e61038e366004613e44565b611230565b6103286103a1366004613a61565b6113d7565b6103b96103b4366004613b04565b61146d565b60408051928352602083019190915201610257565b6103e16103dc366004613b04565b6114c3565b6040516102579190613ed1565b6104016103fc366004613f13565b611623565b6040516102579190613f45565b61037e611761565b610429610424366004613b04565b611775565b6040516102579493929190613f53565b600554610273906001600160a01b031681565b6102d461045a366004613f13565b6117d6565b6102d461046d366004613b04565b6118c6565b61037e610480366004613a61565b611940565b610498610493366004613b04565b6119f3565b6040516102579190613f8c565b6000546001600160a01b0316610273565b61034b6104c4366004613fce565b611b06565b6105106104d7366004613b04565b60076020526000908152604090208054600182015460029092015460ff9182169291818116916101008104821691620100009091041685565b604051610257959493929190613ffb565b61037e61052f366004613f13565b611c30565b600354610273906001600160a01b031681565b61037e610555366004613e22565b611c8c565b6102d4610568366004613a61565b611fe9565b61058061057b366004614033565b612031565b60405160ff9091168152602001610257565b61037e6105a0366004614088565b6120e1565b6102d4612145565b61037e6105bb3660046140ed565b61237e565b600454610273906001600160a01b031681565b6105e66105e1366004613a61565b6123f7565b6040516102579190614108565b6102d4610601366004614117565b6124db565b61037e610614366004614143565b6125a3565b6106216138b9565b600760006009868154811061063857610638614179565b600091825260208083208884526001600790930201919091018152604080832087845282528083205460ff9081168552918401949094529183019020825160a0810190935280549091839116600581111561069557610695613a8d565b60058111156106a6576106a6613a8d565b81526001820154602082015260029091015460ff80821660408401526101008204811660608401526201000090910416151560809091015290505b9392505050565b600081815260026020526040902060609061070290612652565b92915050565b6107106138ea565b60006009858154811061072557610725614179565b6000918252602080832087845260016007909302018201815260408084208785529091529091200190506107576138ea565b60005b60048110156108435760006009888154811061077857610778614179565b9060005260206000209060070201600201600085846004811061079d5761079d614179565b015481526020810191909152604001600020805490915062010000900460ff1660018160048111156107d1576107d1613a8d565b14806107ee575060028160048111156107ec576107ec613a8d565b145b8061080a5750600381600481111561080857610808613a8d565b145b1561082e57600184846004811061082357610823614179565b911515602090920201525b5050808061083b906141a5565b91505061075a565b5095945050505050565b60408051600b808252610180820190925260609160009190816020015b606081526020019060019003908161086a57905050905060005b600b8110156108ef5760408051600b808252610180820190925290816020015b6108ac613908565b8152602001906001900390816108a4579050508282815181106108d1576108d1614179565b602002602001018190525080806108e7906141a5565b915050610884565b5060005b600b811015610a3a5760005b600b811015610a27576009858154811061091b5761091b614179565b600091825260208083208584526001600790930201820181526040808420858552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b8154815260200190600101908083116109805750505091835250506005919091015460ff808216151560208401526101008204811615156040840152620100008204811615156060840152630100000090910416151560809091015283518490849081106109f0576109f0614179565b60200260200101518281518110610a0957610a09614179565b60200260200101819052508080610a1f906141a5565b9150506108ff565b5080610a32816141a5565b9150506108f3565b5092915050565b600080610a5060016006612031565b60ff169050827ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5182604051610a8791815260200190565b60405180910390a292915050565b8151835160009160ff9182169116148015610abd5750826020015160ff16846020015160ff16145b15610aca57506001610c5c565b8251845160ff908116911614801590610af15750826020015160ff16846020015160ff1614155b15610afe57506000610c5c565b8251845160009160ff908116911603610b32578451845160ff91821691161115610b2a57506002610b54565b506003610b54565b846020015160ff16846020015160ff161115610b5057506001610b54565b5060005b6000859050600060098881548110610b6e57610b6e614179565b906000526020600020906007020190505b8551825160ff9081169116148015610ba45750856020015160ff16826020015160ff16145b610c545760008381526002820160205260409020858015610be057506001815462010000900460ff166004811115610bde57610bde613a8d565b145b80610c2b57506002815462010000900460ff166004811115610c0457610c04613a8d565b1480610c2b57506003815462010000900460ff166004811115610c2957610c29613a8d565b145b15610c4157610c3a8484611b06565b9250610c4e565b6000945050505050610c5c565b50610b7f565b600193505050505b949350505050565b6040805180820190915260008082526020820152610c80613927565b600181886000015160ff16600b8110610c9b57610c9b614179565b6020020151886020015160ff16600b8110610cb857610cb8614179565b91151560209092020152610cca613955565b60408051600180825281830190925260009190829082816020015b6040805180820190915260008082526020820152815260200190600190039081610ce55790505090508a81600081518110610d2257610d22614179565b60209081029190910101528084525b6000610d3d84846141be565b11156110875760198210610d58578a95505050505050611090565b6000848460198110610d6c57610d6c614179565b6020020151905060008160018351610d8491906141be565b81518110610d9457610d94614179565b602002602001015190508480610da9906141a5565b9550506000610dba8f838e8e61265f565b905060005b600481101561107e576000828260048110610ddc57610ddc614179565b6020020151805190915060ff16158015610dfb5750602081015160ff16155b15610e06575061106c565b80518a9060ff16600b8110610e1d57610e1d614179565b6020020151816020015160ff16600b8110610e3a57610e3a614179565b602002015115610e4a575061106c565b8e51815160ff9081169116148015610e6f57508e6020015160ff16816020015160ff16145b15610ecf578b85516001610e8391906141d1565b11610e9a578e9a5050505050505050505050611090565b84610ea660018e6141be565b81518110610eb657610eb6614179565b60200260200101519a5050505050505050505050611090565b60018a826000015160ff16600b8110610eea57610eea614179565b6020020151826020015160ff16600b8110610f0757610f07614179565b911515602090920201528451600090610f219060016141d1565b67ffffffffffffffff811115610f3957610f39613ca0565b604051908082528060200260200182016040528015610f7e57816020015b6040805180820190915260008082526020820152815260200190600190039081610f575790505b50905060005b60018251610f9291906141be565b811015610fe357868181518110610fab57610fab614179565b6020026020010151828281518110610fc557610fc5614179565b60200260200101819052508080610fdb906141a5565b915050610f84565b50818160018351610ff491906141be565b8151811061100457611004614179565b6020026020010181905250808a896019811061102257611022614179565b602002015287611031816141a5565b98505060198803611069578060008151811061104f5761104f614179565b60200260200101519b505050505050505050505050611090565b50505b80611076816141a5565b915050610dbf565b50505050610d31565b8a955050505050505b9695505050505050565b6110a26138b9565b60008281526007602052604090819020815160a081019092528054829060ff1660058111156110d3576110d3613a8d565b60058111156110e4576110e4613a8d565b81526001820154602082015260029091015460ff8082166040840152610100820481166060840152620100009091041615156080909101529392505050565b6003546001600160a01b0316331461113a57600080fd5b60005b6009828154811061115057611150614179565b600091825260209091206003600790920201015460ff1681101561122c5760026009838154811061118357611183614179565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff1660048111156111bd576111bd613a8d565b0361121a576001600983815481106111d7576111d7614179565b60009182526020808320858452600260079093020191909101905260409020805462ff000019166201000083600481111561121457611214613a8d565b02179055505b80611224816141a5565b91505061113d565b5050565b6003546001600160a01b031633148061125357506005546001600160a01b031633145b8061126857506006546001600160a01b031633145b6112c35760405162461bcd60e51b815260206004820152602160248201527f4e6f742067616d652f616374696f6e732f706c617965727320636f6e747261636044820152601d60fa1b60648201526084015b60405180910390fd5b6000600987815481106112d8576112d8614179565b600091825260208083208984526001600790930201820181526040808420898552909152918290208251608081019093520160048282826020028201915b815481526020019060010190808311611316575050505050905060006009888154811061134557611345614179565b9060005260206000209060070201600201600083876004811061136a5761136a614179565b602002015181526020019081526020016000209050838160000160026101000a81548160ff021916908360048111156113a5576113a5613a8d565b021790555082156113cd57805461ffff191661010060ff851690810260ff1916919091171781555b5050505050505050565b6000806113e385610a41565b604080518281526020810187905290810185905290915085907f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060600160405180910390a28060010361143b5760009150506106e1565b60038361144886846141d1565b61145291906141e4565b13156114625760019150506106e1565b506000949350505050565b6000806009838154811061148357611483614179565b906000526020600020906007020160050154600984815481106114a8576114a8614179565b90600052602060002090600702016006015491509150915091565b60606000600983815481106114da576114da614179565b600091825260209091206003600790920201015460ff1667ffffffffffffffff81111561150957611509613ca0565b60405190808252806020026020018201604052801561155b57816020015b61154860408051606081018252600080825260208201819052909182015290565b8152602001906001900390816115275790505b50905060005b8151811015610a3a576009848154811061157d5761157d614179565b6000918252602080832084845260026007909302019190910181526040918290208251606081018452815460ff808216835261010082048116948301949094529093919291840191620100009091041660048111156115de576115de613a8d565b60048111156115ef576115ef613a8d565b8152505082828151811061160557611605614179565b6020026020010181905250808061161b906141a5565b915050611561565b61164460408051606081018252600080825260208201819052909182015290565b60006009868154811061165957611659614179565b600091825260208083208884526001600790930201820181526040808420888552909152918290208251608081019093520160048282826020028201915b8154815260200190600101908083116116975750505050509050600986815481106116c4576116c4614179565b906000526020600020906007020160020160008285600481106116e9576116e9614179565b6020908102919091015182528181019290925260409081016000208151606081018352815460ff80821683526101008204811695830195909552909391928401916201000090910416600481111561174357611743613a8d565b600481111561175457611754613a8d565b9052509695505050505050565b6117696128a8565b6117736000612902565b565b6009818154811061178557600080fd5b600091825260209182902060036007909202019081015460408051808201909152600483015460ff818116835261010090910481169482019490945260058301546006909301549390911693509184565b6003546000906001600160a01b031633146117f057600080fd5b60006009868154811061180557611805614179565b600091825260208083208884526001600790930201919091018152604080832087845290915290209050821561184957805460ff191660ff84161790555080610c5c565b805460ff166063190161186b57805460ff191660129081179091559050610c5c565b805460ff16600019016118ba576118a16009878154811061188e5761188e614179565b9060005260206000209060070201612952565b815460ff191660ff919091169081179091559050610c5c565b50600095945050505050565b6000816000036118d857506001919050565b816001036118e857506000919050565b816002036118f857506003919050565b8160030361190857506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b60448201526064016112ba565b6005546001600160a01b0316331461199a5760405162461bcd60e51b815260206004820181905260248201527f4e6f7420616374696f6e7320636f6e7472616374202d207365744c6f6f74656460448201526064016112ba565b6001600984815481106119af576119af614179565b6000918252602080832095835260016007909202909501018452604080822093825292909352912060050180549115156101000261ff001990921691909117905550565b6060600060085467ffffffffffffffff811115611a1257611a12613ca0565b604051908082528060200260200182016040528015611a4b57816020015b611a386138b9565b815260200190600190039081611a305790505b50905060005b8151811015610a3a5760008181526007602052604090819020815160a081019092528054829060ff166005811115611a8b57611a8b613a8d565b6005811115611a9c57611a9c613a8d565b81526001820154602082015260029091015460ff8082166040840152610100820481166060840152620100009091041615156080909101528251839083908110611ae857611ae8614179565b60200260200101819052508080611afe906141a5565b915050611a51565b604080518082019091526000808252602082015282600003611b5857604051806040016040528060018460000151611b3e9190614204565b60ff168152602001836020015160ff168152509050610702565b82600103611b7c57604051806040016040528083600001516001611b3e919061421d565b82600203611bb9576040518060400160405280836000015160ff16815260200183602001516001611bad919061421d565b60ff1690529050610702565b82600303611bea576040518060400160405280836000015160ff16815260200160018460200151611bad9190614204565b6000611bf584612a84565b604051602001611c05919061425a565b60405160208183030381529060405290508060405162461bcd60e51b81526004016112ba9190614295565b611c386128a8565b8060098581548110611c4c57611c4c614179565b60009182526020808320968352600791909102909501600101855260408082209482529390945291909220805460ff191660ff9092169190911790555050565b6003546001600160a01b03163314611ca357600080fd5b611cab613927565b60005b82811015611fe35760005b600b811015611d6e5760005b600b811015611d5b5760098681548110611ce157611ce1614179565b60009182526020808320858452600792909202909101600101815260408083208484529091529020600501546301000000900460ff168483600b8110611d2957611d29614179565b602002015182600b8110611d3f57611d3f614179565b9115156020909202015280611d53816141a5565b915050611cc5565b5080611d66816141a5565b915050611cb9565b5060005b600b811015611fd05760005b600b811015611fbd578382600b8110611d9957611d99614179565b602002015181600b8110611daf57611daf614179565b602002015115611fab5760005b6004811015611fa957600060098881548110611dda57611dda614179565b600091825260208083208784526001600790930201820181526040808420878552909152909120018260048110611e1357611e13614179565b01549050600060098981548110611e2c57611e2c614179565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff1690506003816004811115611e6b57611e6b613a8d565b03611f945784158015611e7c575082155b15611e88575050611f97565b611e946001600b6141be565b85148015611ea25750826001145b15611eae575050611f97565b83158015611ebc5750826003145b15611ec8575050611f97565b611ed46001600b6141be565b84148015611ee25750826002145b15611eee575050611f97565b6000611f148460405180604001604052808960ff1681526020018860ff16815250611b06565b9050600060098b81548110611f2b57611f2b614179565b60009182526020808320855160ff90811685526007939093020160010181526040808420868301518416855290915290912080549092501615801590611f765750805460ff16600214155b15611f915760058101805463ff000000191663010000001790555b50505b50505b80611fa1816141a5565b915050611dbc565b505b80611fb5816141a5565b915050611d7e565b5080611fc8816141a5565b915050611d72565b5080611fdb816141a5565b915050611cae565b50505050565b600060098481548110611ffe57611ffe614179565b6000918252602080832095835260079190910290940160010184526040808220938252929093525090205460ff16919050565b6001805460009182612042836141a5565b919050555060003360015460014361205a91906141be565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f198184030181529190528051602090910120905060006120ae8585614204565b6120b990600161421d565b90508460ff168160ff16836120ce91906142de565b6120d891906141d1565b95945050505050565b6120e96128a8565b600380546001600160a01b038088166001600160a01b0319928316179092556004805486841690831617905560058054858416908316179055600680549284169290911691909117905561213b612b85565b6008555050505050565b6003546000906001600160a01b0316331461215f57600080fd5b6009805460018101825560008290526040805161034081018252600381526004602082015260059181019190915260066060820152600760808201819052600860a083015260c0820193909352600a60e0820152600b610100820152600c610120820152600d610140820152600e610160820152600f61018082015260106101a082015260116101c082015260136101e08201526014610200820152601561022082015260166102408201526017610260820152601861028082015260196102a0820152601a6102c08201819052601b6102e0830152601c610300830152601d610320830152929091027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0191612279908390839061397d565b506040805160608101825260ff808252602082015290810160009052600383015460ff9081166000908152600285016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff00001916620100008360048111156122f5576122f5613a8d565b0217905550505060038201805460ff16906000612311836142f2565b82546101009290920a60ff8181021990931691909216919091021790555060408051808201909152600a8152600660209091015260048201805461ffff191661060a17905561235f82612d03565b612368826135ca565b600954612377906001906141be565b9250505090565b6123866128a8565b6001600160a01b0381166123eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016112ba565b6123f481612902565b50565b6123ff613908565b6009848154811061241257612412614179565b600091825260208083208684526001600790930201820181526040808420868552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b8154815260200190600101908083116124775750505091835250506005919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152949350505050565b805182516000916124eb91614311565b60000b6001036124fd57506000610702565b8151835161250b9190614311565b60000b1961251b57506001610702565b8160200151836020015161252f9190614311565b60000b1961253f57506002610702565b816020015183602001516125539190614311565b60000b60010361256557506003610702565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b60448201526064016112ba565b6006546001600160a01b031633146125f35760405162461bcd60e51b8152602060048201526013602482015272139bdd081c1b185e595c8818dbdb9d1c9858dd606a1b60448201526064016112ba565b806009858154811061260757612607614179565b600091825260208083209683526001600790920290960101855260408082209482529390945291909220600501805491151563010000000263ff000000199092169190911790555050565b606060006106e18361385d565b6126676139c8565b61266f6139c8565b60005b60048110156108435760006126878288611b06565b905060006009898154811061269e5761269e614179565b600091825260208083208b5160ff9081168552600160079094029091018301825260408085208d840151909216855291529091200183600481106126e4576126e4614179565b01549050600060098a815481106126fd576126fd614179565b6000918252602080832085845260026007909302018201905260409091209150815462010000900460ff16600481111561273957612739613a8d565b148061276057506003815462010000900460ff16600481111561275e5761275e613a8d565b145b8061278e57506001815462010000900460ff16600481111561278457612784613a8d565b14801561278e5750875b806128445750868015612844575060098a815481106127af576127af614179565b600091825260208083208c5160ff908116855260079390930201600101815260408084208d8301518416855290915290912060050154620100009004168015612844575060098a8154811061280657612806614179565b60009182526020808320865160ff90811685526007939093020160010181526040808420878301518416855290915290912060050154620100009004165b15612866578285856004811061285c5761285c614179565b6020020152612892565b604080518082019091526000808252602082015285856004811061288c5761288c614179565b60200201525b50505080806128a0906141a5565b915050612672565b6000546001600160a01b031633146117735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016112ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80546000908190612965906001906141be565b90505b8015612a2157600061297b600083612031565b9050836000018160ff168154811061299557612995614179565b90600052602060002001548460000183815481106129b5576129b5614179565b90600052602060002001548560000184815481106129d5576129d5614179565b906000526020600020016000876000018560ff16815481106129f9576129f9614179565b6000918252602090912001929092559190915550819050612a1981614332565b915050612968565b5081546000908390612a35906001906141be565b81548110612a4557612a45614179565b9060005260206000200154905082600001805480612a6557612a65614349565b6001900381819060005260206000200160009055905580915050919050565b606081600003612aab5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ad55780612abf816141a5565b9150612ace9050600a8361435f565b9150612aaf565b60008167ffffffffffffffff811115612af057612af0613ca0565b6040519080825280601f01601f191660200182016040528015612b1a576020820181803683370190505b5090505b8415610c5c57612b2f6001836141be565b9150612b3c600a866142de565b612b479060306141d1565b60f81b818381518110612b5c57612b5c614179565b60200101906001600160f81b031916908160001a905350612b7e600a8661435f565b9450612b1e565b60048054604080516338fdf0bd60e01b8152905160009384936001600160a01b0316926338fdf0bd92818301926020928290030181865afa158015612bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf29190614373565b905060005b81811015612cfd576004805460405163413a9f5f60e11b81529182018390526001600160a01b0316906382753ebe9060240160a060405180830381865afa158015612c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6a919061438c565b600082815260076020526040902081518154829060ff19166001836005811115612c9657612c96613a8d565b02179055506020820151600182015560408201516002909101805460608401516080909401511515620100000262ff00001960ff9586166101000261ffff199093169590941694909417179190911691909117905580612cf5816141a5565b915050612bf7565b50919050565b6000806002600854612d1591906141be565b905060016000612d23613927565b6004860154600190829060ff16600b8110612d4057612d40614179565b60200201516004880154610100900460ff16600b8110612d6257612d62614179565b91151560209092020152612d74613a01565b60408051808201909152600488015460ff80821683526101009091041660208201528187601e8110612da857612da8614179565b602002015285612db7816141a5565b9650505b600085118015612dcb5750600086115b1561353e57600081612dde6001896141be565b601e8110612dee57612dee614179565b6020020151905086612dff81614332565b9750508187601e8110612e1457612e14614179565b60200201612e3b6040518060400160405280600060ff168152602001600060ff1681525090565b905285612e4781614332565b9650508480612e5590614332565b825160ff908116600090815260018c810160209081526040808420828901519095168452939052918120805460ff191690921790915590965060219150612e9d906063612031565b60ff161015612ee057805160ff908116600090815260018a016020908152604080832082860151909416835292905220600501805462ff00001916620100001790555b6000604051806080016040528060008152602001600181526020016002815260200160038152509050600060016004612f1991906141be565b90505b8015612fa9576000612f2f600083612031565b9050828160ff1660048110612f4657612f46614179565b6020020151838360048110612f5d57612f5d614179565b6020020151848460048110612f7457612f74614179565b60200201858460ff1660048110612f8d57612f8d614179565b6020020191909152525080612fa181614332565b915050612f1c565b5060005b60048110156135365782516020840151600091820b910b838360048110612fd657612fd6614179565b6020020151600003612ff45781612fec8161442d565b925050613078565b83836004811061300657613006614179565b602002015160010361301c5781612fec81614442565b83836004811061302e5761302e614179565b602002015160020361304c578061304481614442565b915050613078565b83836004811061305e5761305e614179565b602002015160030361307857806130748161442d565b9150505b60018212806130875750600181125b8061309c57506130996002600b6141be565b82135b806130b157506130ae6002600b6141be565b81135b156130bd575050613524565b6040805180820190915260ff80841680835290831660208301528890600b81106130e9576130e9614179565b6020020151816020015160ff16600b811061310657613106614179565b6020020151158061316757508c6001016000876000015160ff1681526020019081526020016000206000876020015160ff16815260200190815260200160002060010161315387836124db565b6004811061316357613163614179565b0154155b1561352057891580613190575061317f8960426141be565b61318b60006063612031565b60ff16105b1561351b5760405180606001604052806131ac60006004612031565b60ff1681526020016131c060006004612031565b60ff16815260200160018152508d60020160008f60030160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff0219169083600481111561326257613262613a8d565b0217905550505060038d015460ff908116600090815260028f01602052604081205490911690036132b55760038d015460ff16600090815260028e0160205260409020805462ff00001916620300001790555b60038d01805460ff169060006132ca836142f2565b91906101000a81548160ff021916908360ff160217905550506016896132f091906141d1565b9850604289111561330057604298505b8051889060ff16600b811061331757613317614179565b6020020151816020015160ff16600b811061333457613334614179565b602002015115156000036133b85780878d601e811061335557613355614179565b60200201528b613364816141a5565b9c50508980613372906141a5565b9a5050600188826000015160ff16600b811061339057613390614179565b6020020151826020015160ff16600b81106133ad576133ad614179565b911515602090920201525b8c6001016000876000015160ff1681526020019081526020016000206000876020015160ff16815260200190815260200160002060010185856004811061340157613401614179565b60200201516004811061341657613416614179565b01546000036135165760038d01546134339060019060ff16614204565b60ff168d6001016000886000015160ff1681526020019081526020016000206000886020015160ff16815260200190815260200160002060010186866004811061347f5761347f614179565b60200201516004811061349457613494614179565b015560038d01546134aa9060019060ff16614204565b60ff168d6001016000836000015160ff1681526020019081526020016000206000836020015160ff1681526020019081526020016000206001016135038787600481106134f9576134f9614179565b60200201516118c6565b6004811061351357613513614179565b01555b613520565b600098505b5050505b8061352e816141a5565b915050612fad565b505050612dbb565b60048701805460ff80821660009081526001808c016020818152604080852061010097889004871686528252808520805460ff1916600290811790915597548087168652928252808520969092049094168352938352838220600501805462ff000019908116909155908252938b01909152208054600392166201000083021790555050505050505050565b6000805b600b8110156138585760005b600b811015613845576000828152600185016020908152604080832084845290915290205460ff16600019016138335782613614816141a5565b9350508260050361365457600082815260018501602090815260408083208484529091529020805460ff1916606417905560058401829055600684018190555b60005b600481101561383157600083815260018087016020908152604080842086855290915290912001816004811061368f5761368f614179565b015460000361381f578260091480156136a85750816006145b61381f5760006136d28260405180604001604052808760ff1681526020018660ff16815250611b06565b805160ff908116600090815260018901602090815260408083208286015185168452909152902054919250168015801561371a5750604261371560006063612031565b60ff16105b1561381c576040805160608101825260ff808252602082015290810160049052600388015460ff908116600090815260028a016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff000019166201000083600481111561379a5761379a613a8d565b0217905550505060038701805460ff169060006137b6836142f2565b82546101009290920a60ff81810219909316918316021790915560038901546137e3925060019116614204565b60008681526001808a016020908152604080842089855290915290912060ff929092169101846004811061381957613819614179565b01555b50505b80613829816141a5565b915050613657565b505b8061383d816141a5565b9150506135da565b5080613850816141a5565b9150506135ce565b505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156138ad57602002820191906000526020600020905b815481526020019060010190808311613899575b50505050509050919050565b6040805160a081019091528060005b8152600060208201819052604082018190526060820181905260809091015290565b60405180608001604052806004906020820280368337509192915050565b6040805160e081018252600080825260208201529081016138c86138ea565b604051806101600160405280600b905b61393f613a2d565b8152602001906001900390816139375790505090565b6040518061032001604052806019905b60608152602001906001900390816139655790505090565b8280548282559060005260206000209081019282156139b8579160200282015b828111156139b857825182559160200191906001019061399d565b506139c4929150613a4c565b5090565b60405180608001604052806004905b60408051808201909152600080825260208201528152602001906001900390816139d75790505090565b60408051610400810190915260006103c082018181526103e08301919091528152601d602082016139d7565b604051806101600160405280600b906020820280368337509192915050565b5b808211156139c45760008155600101613a4d565b600080600060608486031215613a7657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b60068110613ab357613ab3613a8d565b9052565b613ac2828251613aa3565b6020810151602083015260ff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b60a081016107028284613ab7565b600060208284031215613b1657600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015613b5557835183529284019291840191600101613b39565b50909695505050505050565b60808101818360005b6004811015613b8b5781511515835260209283019290910190600101613b6a565b50505092915050565b60ff8151168252602060ff81830151168184015260408201516040840160005b6004811015613bd157825182529183019190830190600101613bb4565b505050506060810151151560c0838101919091526080820151151560e084015260a082015115156101008401520151151561012090910152565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b83811015613c9257888603603f19018552825180518088529088019088880190845b81811015613c7c57613c68838551613b94565b928a01926101409290920191600101613c55565b5090975050509386019391860191600101613c33565b509398975050505050505050565b634e487b7160e01b600052604160045260246000fd5b60ff811681146123f457600080fd5b600060408284031215613cd757600080fd5b6040516040810181811067ffffffffffffffff82111715613d0857634e487b7160e01b600052604160045260246000fd5b6040529050808235613d1981613cb6565b81526020830135613d2981613cb6565b6020919091015292915050565b80151581146123f457600080fd5b60008060008060c08587031215613d5a57600080fd5b84359350613d6b8660208701613cc5565b9250613d7a8660608701613cc5565b915060a0850135613d8a81613d36565b939692955090935050565b6000806000806000806101008789031215613daf57600080fd5b86359550613dc08860208901613cc5565b9450613dcf8860608901613cc5565b935060a0870135613ddf81613d36565b925060c0870135613def81613d36565b8092505060e087013590509295509295509295565b604081016107028284805160ff908116835260209182015116910152565b60008060408385031215613e3557600080fd5b50508035926020909101359150565b60008060008060008060c08789031215613e5d57600080fd5b86359550602087013594506040870135935060608701359250608087013560058110613e8857600080fd5b8092505060a087013590509295509295509295565b60ff815116825260ff6020820151166020830152604081015160058110613ec657613ec6613a8d565b806040840152505050565b6020808252825182820181905260009190848201906040850190845b81811015613b5557613f00838551613e9d565b9284019260609290920191600101613eed565b60008060008060808587031215613f2957600080fd5b5050823594602084013594506040840135936060013592509050565b606081016107028284613e9d565b60ff8516815260a08101613f7a6020830186805160ff908116835260209182015116910152565b60608201939093526080015292915050565b6020808252825182820181905260009190848201906040850190845b81811015613b5557613fbb838551613ab7565b9284019260a09290920191600101613fa8565b60008060608385031215613fe157600080fd5b82359150613ff28460208501613cc5565b90509250929050565b60a081016140098288613aa3565b85602083015260ff8516604083015260ff8416606083015282151560808301529695505050505050565b6000806040838503121561404657600080fd5b823561405181613cb6565b9150602083013561406181613cb6565b809150509250929050565b80356001600160a01b038116811461408357600080fd5b919050565b600080600080600060a086880312156140a057600080fd5b6140a98661406c565b94506140b76020870161406c565b93506140c56040870161406c565b92506140d36060870161406c565b91506140e16080870161406c565b90509295509295909350565b6000602082840312156140ff57600080fd5b6106e18261406c565b61014081016107028284613b94565b6000806080838503121561412a57600080fd5b6141348484613cc5565b9150613ff28460408501613cc5565b6000806000806080858703121561415957600080fd5b8435935060208501359250604085013591506060850135613d8a81613d36565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016141b7576141b761418f565b5060010190565b818103818111156107025761070261418f565b808201808211156107025761070261418f565b8181036000831280158383131683831282161715610a3a57610a3a61418f565b60ff82811682821603908111156107025761070261418f565b60ff81811683821601908111156107025761070261418f565b60005b83811015614251578181015183820152602001614239565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251614288816013850160208701614236565b9190910160130192915050565b60208152600082518060208401526142b4816040850160208701614236565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601260045260246000fd5b6000826142ed576142ed6142c8565b500690565b600060ff821660ff81036143085761430861418f565b60010192915050565b600082810b9082900b03607f198112607f821317156107025761070261418f565b6000816143415761434161418f565b506000190190565b634e487b7160e01b600052603160045260246000fd5b60008261436e5761436e6142c8565b500490565b60006020828403121561438557600080fd5b5051919050565b600060a0828403121561439e57600080fd5b60405160a0810181811067ffffffffffffffff821117156143cf57634e487b7160e01b600052604160045260246000fd5b6040528251600681106143e157600080fd5b81526020838101519082015260408301516143fb81613cb6565b6040820152606083015161440e81613cb6565b6060820152608083015161442181613d36565b60808201529392505050565b6000600160ff1b82016143415761434161418f565b60006001600160ff1b0182016141b7576141b761418f56fea26469706673582212203ff063e08438e5f7791a5288e08e35dfa83679b146942666ec7542b1c5661ada64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806381bad36d11610130578063c6b41b45116100b8578063f2fde38b1161007c578063f2fde38b146105ad578063f7157f64146105c0578063f9dfbfcb146105d3578063fa3993c2146105f3578063fe368d7a1461060657600080fd5b8063c6b41b4514610547578063c8e9ac961461055a578063ce28613f1461056d578063e847ae1e14610592578063f01fc35a146105a557600080fd5b80638da5cb5b116100ff5780638da5cb5b146104a5578063951fc3fe146104b6578063a63a9aab146104c9578063b14ca57514610521578063c3fe3e281461053457600080fd5b806381bad36d1461044c5780638214f2221461045f57806386e529d0146104725780638af13fd21461048557600080fd5b806358058283116101be57806369568fd51161018257806369568fd5146103ce5780636ea1dcd8146103ee578063715018a61461040e57806375990a0e146104165780637b45c0d41461043957600080fd5b8063580582831461035857806358308aa81461036b57806359215223146103805780635dc96967146103935780635f8951e6146103a657600080fd5b80631cdec3ad116102055780631cdec3ad146102cb5780631ef04416146102e25780631f7b4f30146103025780632ec6572a1461031557806345e1e03c1461033857600080fd5b806302861c6c1461023757806303b414e4146102605780630e73c0241461028b57806315636a4d146102ab575b600080fd5b61024a610245366004613a61565b610619565b6040516102579190613af6565b60405180910390f35b600654610273906001600160a01b031681565b6040516001600160a01b039091168152602001610257565b61029e610299366004613b04565b6106e8565b6040516102579190613b1d565b6102be6102b9366004613a61565b610708565b6040516102579190613b61565b6102d460085481565b604051908152602001610257565b6102f56102f0366004613b04565b61084d565b6040516102579190613c0b565b6102d4610310366004613b04565b610a41565b610328610323366004613d44565b610a95565b6040519015158152602001610257565b61034b610346366004613d95565b610c64565b6040516102579190613e04565b61024a610366366004613e22565b61109a565b61037e610379366004613b04565b611123565b005b61037e61038e366004613e44565b611230565b6103286103a1366004613a61565b6113d7565b6103b96103b4366004613b04565b61146d565b60408051928352602083019190915201610257565b6103e16103dc366004613b04565b6114c3565b6040516102579190613ed1565b6104016103fc366004613f13565b611623565b6040516102579190613f45565b61037e611761565b610429610424366004613b04565b611775565b6040516102579493929190613f53565b600554610273906001600160a01b031681565b6102d461045a366004613f13565b6117d6565b6102d461046d366004613b04565b6118c6565b61037e610480366004613a61565b611940565b610498610493366004613b04565b6119f3565b6040516102579190613f8c565b6000546001600160a01b0316610273565b61034b6104c4366004613fce565b611b06565b6105106104d7366004613b04565b60076020526000908152604090208054600182015460029092015460ff9182169291818116916101008104821691620100009091041685565b604051610257959493929190613ffb565b61037e61052f366004613f13565b611c30565b600354610273906001600160a01b031681565b61037e610555366004613e22565b611c8c565b6102d4610568366004613a61565b611fe9565b61058061057b366004614033565b612031565b60405160ff9091168152602001610257565b61037e6105a0366004614088565b6120e1565b6102d4612145565b61037e6105bb3660046140ed565b61237e565b600454610273906001600160a01b031681565b6105e66105e1366004613a61565b6123f7565b6040516102579190614108565b6102d4610601366004614117565b6124db565b61037e610614366004614143565b6125a3565b6106216138b9565b600760006009868154811061063857610638614179565b600091825260208083208884526001600790930201919091018152604080832087845282528083205460ff9081168552918401949094529183019020825160a0810190935280549091839116600581111561069557610695613a8d565b60058111156106a6576106a6613a8d565b81526001820154602082015260029091015460ff80821660408401526101008204811660608401526201000090910416151560809091015290505b9392505050565b600081815260026020526040902060609061070290612652565b92915050565b6107106138ea565b60006009858154811061072557610725614179565b6000918252602080832087845260016007909302018201815260408084208785529091529091200190506107576138ea565b60005b60048110156108435760006009888154811061077857610778614179565b9060005260206000209060070201600201600085846004811061079d5761079d614179565b015481526020810191909152604001600020805490915062010000900460ff1660018160048111156107d1576107d1613a8d565b14806107ee575060028160048111156107ec576107ec613a8d565b145b8061080a5750600381600481111561080857610808613a8d565b145b1561082e57600184846004811061082357610823614179565b911515602090920201525b5050808061083b906141a5565b91505061075a565b5095945050505050565b60408051600b808252610180820190925260609160009190816020015b606081526020019060019003908161086a57905050905060005b600b8110156108ef5760408051600b808252610180820190925290816020015b6108ac613908565b8152602001906001900390816108a4579050508282815181106108d1576108d1614179565b602002602001018190525080806108e7906141a5565b915050610884565b5060005b600b811015610a3a5760005b600b811015610a27576009858154811061091b5761091b614179565b600091825260208083208584526001600790930201820181526040808420858552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b8154815260200190600101908083116109805750505091835250506005919091015460ff808216151560208401526101008204811615156040840152620100008204811615156060840152630100000090910416151560809091015283518490849081106109f0576109f0614179565b60200260200101518281518110610a0957610a09614179565b60200260200101819052508080610a1f906141a5565b9150506108ff565b5080610a32816141a5565b9150506108f3565b5092915050565b600080610a5060016006612031565b60ff169050827ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c5182604051610a8791815260200190565b60405180910390a292915050565b8151835160009160ff9182169116148015610abd5750826020015160ff16846020015160ff16145b15610aca57506001610c5c565b8251845160ff908116911614801590610af15750826020015160ff16846020015160ff1614155b15610afe57506000610c5c565b8251845160009160ff908116911603610b32578451845160ff91821691161115610b2a57506002610b54565b506003610b54565b846020015160ff16846020015160ff161115610b5057506001610b54565b5060005b6000859050600060098881548110610b6e57610b6e614179565b906000526020600020906007020190505b8551825160ff9081169116148015610ba45750856020015160ff16826020015160ff16145b610c545760008381526002820160205260409020858015610be057506001815462010000900460ff166004811115610bde57610bde613a8d565b145b80610c2b57506002815462010000900460ff166004811115610c0457610c04613a8d565b1480610c2b57506003815462010000900460ff166004811115610c2957610c29613a8d565b145b15610c4157610c3a8484611b06565b9250610c4e565b6000945050505050610c5c565b50610b7f565b600193505050505b949350505050565b6040805180820190915260008082526020820152610c80613927565b600181886000015160ff16600b8110610c9b57610c9b614179565b6020020151886020015160ff16600b8110610cb857610cb8614179565b91151560209092020152610cca613955565b60408051600180825281830190925260009190829082816020015b6040805180820190915260008082526020820152815260200190600190039081610ce55790505090508a81600081518110610d2257610d22614179565b60209081029190910101528084525b6000610d3d84846141be565b11156110875760198210610d58578a95505050505050611090565b6000848460198110610d6c57610d6c614179565b6020020151905060008160018351610d8491906141be565b81518110610d9457610d94614179565b602002602001015190508480610da9906141a5565b9550506000610dba8f838e8e61265f565b905060005b600481101561107e576000828260048110610ddc57610ddc614179565b6020020151805190915060ff16158015610dfb5750602081015160ff16155b15610e06575061106c565b80518a9060ff16600b8110610e1d57610e1d614179565b6020020151816020015160ff16600b8110610e3a57610e3a614179565b602002015115610e4a575061106c565b8e51815160ff9081169116148015610e6f57508e6020015160ff16816020015160ff16145b15610ecf578b85516001610e8391906141d1565b11610e9a578e9a5050505050505050505050611090565b84610ea660018e6141be565b81518110610eb657610eb6614179565b60200260200101519a5050505050505050505050611090565b60018a826000015160ff16600b8110610eea57610eea614179565b6020020151826020015160ff16600b8110610f0757610f07614179565b911515602090920201528451600090610f219060016141d1565b67ffffffffffffffff811115610f3957610f39613ca0565b604051908082528060200260200182016040528015610f7e57816020015b6040805180820190915260008082526020820152815260200190600190039081610f575790505b50905060005b60018251610f9291906141be565b811015610fe357868181518110610fab57610fab614179565b6020026020010151828281518110610fc557610fc5614179565b60200260200101819052508080610fdb906141a5565b915050610f84565b50818160018351610ff491906141be565b8151811061100457611004614179565b6020026020010181905250808a896019811061102257611022614179565b602002015287611031816141a5565b98505060198803611069578060008151811061104f5761104f614179565b60200260200101519b505050505050505050505050611090565b50505b80611076816141a5565b915050610dbf565b50505050610d31565b8a955050505050505b9695505050505050565b6110a26138b9565b60008281526007602052604090819020815160a081019092528054829060ff1660058111156110d3576110d3613a8d565b60058111156110e4576110e4613a8d565b81526001820154602082015260029091015460ff8082166040840152610100820481166060840152620100009091041615156080909101529392505050565b6003546001600160a01b0316331461113a57600080fd5b60005b6009828154811061115057611150614179565b600091825260209091206003600790920201015460ff1681101561122c5760026009838154811061118357611183614179565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff1660048111156111bd576111bd613a8d565b0361121a576001600983815481106111d7576111d7614179565b60009182526020808320858452600260079093020191909101905260409020805462ff000019166201000083600481111561121457611214613a8d565b02179055505b80611224816141a5565b91505061113d565b5050565b6003546001600160a01b031633148061125357506005546001600160a01b031633145b8061126857506006546001600160a01b031633145b6112c35760405162461bcd60e51b815260206004820152602160248201527f4e6f742067616d652f616374696f6e732f706c617965727320636f6e747261636044820152601d60fa1b60648201526084015b60405180910390fd5b6000600987815481106112d8576112d8614179565b600091825260208083208984526001600790930201820181526040808420898552909152918290208251608081019093520160048282826020028201915b815481526020019060010190808311611316575050505050905060006009888154811061134557611345614179565b9060005260206000209060070201600201600083876004811061136a5761136a614179565b602002015181526020019081526020016000209050838160000160026101000a81548160ff021916908360048111156113a5576113a5613a8d565b021790555082156113cd57805461ffff191661010060ff851690810260ff1916919091171781555b5050505050505050565b6000806113e385610a41565b604080518281526020810187905290810185905290915085907f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060600160405180910390a28060010361143b5760009150506106e1565b60038361144886846141d1565b61145291906141e4565b13156114625760019150506106e1565b506000949350505050565b6000806009838154811061148357611483614179565b906000526020600020906007020160050154600984815481106114a8576114a8614179565b90600052602060002090600702016006015491509150915091565b60606000600983815481106114da576114da614179565b600091825260209091206003600790920201015460ff1667ffffffffffffffff81111561150957611509613ca0565b60405190808252806020026020018201604052801561155b57816020015b61154860408051606081018252600080825260208201819052909182015290565b8152602001906001900390816115275790505b50905060005b8151811015610a3a576009848154811061157d5761157d614179565b6000918252602080832084845260026007909302019190910181526040918290208251606081018452815460ff808216835261010082048116948301949094529093919291840191620100009091041660048111156115de576115de613a8d565b60048111156115ef576115ef613a8d565b8152505082828151811061160557611605614179565b6020026020010181905250808061161b906141a5565b915050611561565b61164460408051606081018252600080825260208201819052909182015290565b60006009868154811061165957611659614179565b600091825260208083208884526001600790930201820181526040808420888552909152918290208251608081019093520160048282826020028201915b8154815260200190600101908083116116975750505050509050600986815481106116c4576116c4614179565b906000526020600020906007020160020160008285600481106116e9576116e9614179565b6020908102919091015182528181019290925260409081016000208151606081018352815460ff80821683526101008204811695830195909552909391928401916201000090910416600481111561174357611743613a8d565b600481111561175457611754613a8d565b9052509695505050505050565b6117696128a8565b6117736000612902565b565b6009818154811061178557600080fd5b600091825260209182902060036007909202019081015460408051808201909152600483015460ff818116835261010090910481169482019490945260058301546006909301549390911693509184565b6003546000906001600160a01b031633146117f057600080fd5b60006009868154811061180557611805614179565b600091825260208083208884526001600790930201919091018152604080832087845290915290209050821561184957805460ff191660ff84161790555080610c5c565b805460ff166063190161186b57805460ff191660129081179091559050610c5c565b805460ff16600019016118ba576118a16009878154811061188e5761188e614179565b9060005260206000209060070201612952565b815460ff191660ff919091169081179091559050610c5c565b50600095945050505050565b6000816000036118d857506001919050565b816001036118e857506000919050565b816002036118f857506003919050565b8160030361190857506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b60448201526064016112ba565b6005546001600160a01b0316331461199a5760405162461bcd60e51b815260206004820181905260248201527f4e6f7420616374696f6e7320636f6e7472616374202d207365744c6f6f74656460448201526064016112ba565b6001600984815481106119af576119af614179565b6000918252602080832095835260016007909202909501018452604080822093825292909352912060050180549115156101000261ff001990921691909117905550565b6060600060085467ffffffffffffffff811115611a1257611a12613ca0565b604051908082528060200260200182016040528015611a4b57816020015b611a386138b9565b815260200190600190039081611a305790505b50905060005b8151811015610a3a5760008181526007602052604090819020815160a081019092528054829060ff166005811115611a8b57611a8b613a8d565b6005811115611a9c57611a9c613a8d565b81526001820154602082015260029091015460ff8082166040840152610100820481166060840152620100009091041615156080909101528251839083908110611ae857611ae8614179565b60200260200101819052508080611afe906141a5565b915050611a51565b604080518082019091526000808252602082015282600003611b5857604051806040016040528060018460000151611b3e9190614204565b60ff168152602001836020015160ff168152509050610702565b82600103611b7c57604051806040016040528083600001516001611b3e919061421d565b82600203611bb9576040518060400160405280836000015160ff16815260200183602001516001611bad919061421d565b60ff1690529050610702565b82600303611bea576040518060400160405280836000015160ff16815260200160018460200151611bad9190614204565b6000611bf584612a84565b604051602001611c05919061425a565b60405160208183030381529060405290508060405162461bcd60e51b81526004016112ba9190614295565b611c386128a8565b8060098581548110611c4c57611c4c614179565b60009182526020808320968352600791909102909501600101855260408082209482529390945291909220805460ff191660ff9092169190911790555050565b6003546001600160a01b03163314611ca357600080fd5b611cab613927565b60005b82811015611fe35760005b600b811015611d6e5760005b600b811015611d5b5760098681548110611ce157611ce1614179565b60009182526020808320858452600792909202909101600101815260408083208484529091529020600501546301000000900460ff168483600b8110611d2957611d29614179565b602002015182600b8110611d3f57611d3f614179565b9115156020909202015280611d53816141a5565b915050611cc5565b5080611d66816141a5565b915050611cb9565b5060005b600b811015611fd05760005b600b811015611fbd578382600b8110611d9957611d99614179565b602002015181600b8110611daf57611daf614179565b602002015115611fab5760005b6004811015611fa957600060098881548110611dda57611dda614179565b600091825260208083208784526001600790930201820181526040808420878552909152909120018260048110611e1357611e13614179565b01549050600060098981548110611e2c57611e2c614179565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff1690506003816004811115611e6b57611e6b613a8d565b03611f945784158015611e7c575082155b15611e88575050611f97565b611e946001600b6141be565b85148015611ea25750826001145b15611eae575050611f97565b83158015611ebc5750826003145b15611ec8575050611f97565b611ed46001600b6141be565b84148015611ee25750826002145b15611eee575050611f97565b6000611f148460405180604001604052808960ff1681526020018860ff16815250611b06565b9050600060098b81548110611f2b57611f2b614179565b60009182526020808320855160ff90811685526007939093020160010181526040808420868301518416855290915290912080549092501615801590611f765750805460ff16600214155b15611f915760058101805463ff000000191663010000001790555b50505b50505b80611fa1816141a5565b915050611dbc565b505b80611fb5816141a5565b915050611d7e565b5080611fc8816141a5565b915050611d72565b5080611fdb816141a5565b915050611cae565b50505050565b600060098481548110611ffe57611ffe614179565b6000918252602080832095835260079190910290940160010184526040808220938252929093525090205460ff16919050565b6001805460009182612042836141a5565b919050555060003360015460014361205a91906141be565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f198184030181529190528051602090910120905060006120ae8585614204565b6120b990600161421d565b90508460ff168160ff16836120ce91906142de565b6120d891906141d1565b95945050505050565b6120e96128a8565b600380546001600160a01b038088166001600160a01b0319928316179092556004805486841690831617905560058054858416908316179055600680549284169290911691909117905561213b612b85565b6008555050505050565b6003546000906001600160a01b0316331461215f57600080fd5b6009805460018101825560008290526040805161034081018252600381526004602082015260059181019190915260066060820152600760808201819052600860a083015260c0820193909352600a60e0820152600b610100820152600c610120820152600d610140820152600e610160820152600f61018082015260106101a082015260116101c082015260136101e08201526014610200820152601561022082015260166102408201526017610260820152601861028082015260196102a0820152601a6102c08201819052601b6102e0830152601c610300830152601d610320830152929091027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0191612279908390839061397d565b506040805160608101825260ff808252602082015290810160009052600383015460ff9081166000908152600285016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff00001916620100008360048111156122f5576122f5613a8d565b0217905550505060038201805460ff16906000612311836142f2565b82546101009290920a60ff8181021990931691909216919091021790555060408051808201909152600a8152600660209091015260048201805461ffff191661060a17905561235f82612d03565b612368826135ca565b600954612377906001906141be565b9250505090565b6123866128a8565b6001600160a01b0381166123eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016112ba565b6123f481612902565b50565b6123ff613908565b6009848154811061241257612412614179565b600091825260208083208684526001600790930201820181526040808420868552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b8154815260200190600101908083116124775750505091835250506005919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152949350505050565b805182516000916124eb91614311565b60000b6001036124fd57506000610702565b8151835161250b9190614311565b60000b1961251b57506001610702565b8160200151836020015161252f9190614311565b60000b1961253f57506002610702565b816020015183602001516125539190614311565b60000b60010361256557506003610702565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b60448201526064016112ba565b6006546001600160a01b031633146125f35760405162461bcd60e51b8152602060048201526013602482015272139bdd081c1b185e595c8818dbdb9d1c9858dd606a1b60448201526064016112ba565b806009858154811061260757612607614179565b600091825260208083209683526001600790920290960101855260408082209482529390945291909220600501805491151563010000000263ff000000199092169190911790555050565b606060006106e18361385d565b6126676139c8565b61266f6139c8565b60005b60048110156108435760006126878288611b06565b905060006009898154811061269e5761269e614179565b600091825260208083208b5160ff9081168552600160079094029091018301825260408085208d840151909216855291529091200183600481106126e4576126e4614179565b01549050600060098a815481106126fd576126fd614179565b6000918252602080832085845260026007909302018201905260409091209150815462010000900460ff16600481111561273957612739613a8d565b148061276057506003815462010000900460ff16600481111561275e5761275e613a8d565b145b8061278e57506001815462010000900460ff16600481111561278457612784613a8d565b14801561278e5750875b806128445750868015612844575060098a815481106127af576127af614179565b600091825260208083208c5160ff908116855260079390930201600101815260408084208d8301518416855290915290912060050154620100009004168015612844575060098a8154811061280657612806614179565b60009182526020808320865160ff90811685526007939093020160010181526040808420878301518416855290915290912060050154620100009004165b15612866578285856004811061285c5761285c614179565b6020020152612892565b604080518082019091526000808252602082015285856004811061288c5761288c614179565b60200201525b50505080806128a0906141a5565b915050612672565b6000546001600160a01b031633146117735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016112ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80546000908190612965906001906141be565b90505b8015612a2157600061297b600083612031565b9050836000018160ff168154811061299557612995614179565b90600052602060002001548460000183815481106129b5576129b5614179565b90600052602060002001548560000184815481106129d5576129d5614179565b906000526020600020016000876000018560ff16815481106129f9576129f9614179565b6000918252602090912001929092559190915550819050612a1981614332565b915050612968565b5081546000908390612a35906001906141be565b81548110612a4557612a45614179565b9060005260206000200154905082600001805480612a6557612a65614349565b6001900381819060005260206000200160009055905580915050919050565b606081600003612aab5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ad55780612abf816141a5565b9150612ace9050600a8361435f565b9150612aaf565b60008167ffffffffffffffff811115612af057612af0613ca0565b6040519080825280601f01601f191660200182016040528015612b1a576020820181803683370190505b5090505b8415610c5c57612b2f6001836141be565b9150612b3c600a866142de565b612b479060306141d1565b60f81b818381518110612b5c57612b5c614179565b60200101906001600160f81b031916908160001a905350612b7e600a8661435f565b9450612b1e565b60048054604080516338fdf0bd60e01b8152905160009384936001600160a01b0316926338fdf0bd92818301926020928290030181865afa158015612bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf29190614373565b905060005b81811015612cfd576004805460405163413a9f5f60e11b81529182018390526001600160a01b0316906382753ebe9060240160a060405180830381865afa158015612c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6a919061438c565b600082815260076020526040902081518154829060ff19166001836005811115612c9657612c96613a8d565b02179055506020820151600182015560408201516002909101805460608401516080909401511515620100000262ff00001960ff9586166101000261ffff199093169590941694909417179190911691909117905580612cf5816141a5565b915050612bf7565b50919050565b6000806002600854612d1591906141be565b905060016000612d23613927565b6004860154600190829060ff16600b8110612d4057612d40614179565b60200201516004880154610100900460ff16600b8110612d6257612d62614179565b91151560209092020152612d74613a01565b60408051808201909152600488015460ff80821683526101009091041660208201528187601e8110612da857612da8614179565b602002015285612db7816141a5565b9650505b600085118015612dcb5750600086115b1561353e57600081612dde6001896141be565b601e8110612dee57612dee614179565b6020020151905086612dff81614332565b9750508187601e8110612e1457612e14614179565b60200201612e3b6040518060400160405280600060ff168152602001600060ff1681525090565b905285612e4781614332565b9650508480612e5590614332565b825160ff908116600090815260018c810160209081526040808420828901519095168452939052918120805460ff191690921790915590965060219150612e9d906063612031565b60ff161015612ee057805160ff908116600090815260018a016020908152604080832082860151909416835292905220600501805462ff00001916620100001790555b6000604051806080016040528060008152602001600181526020016002815260200160038152509050600060016004612f1991906141be565b90505b8015612fa9576000612f2f600083612031565b9050828160ff1660048110612f4657612f46614179565b6020020151838360048110612f5d57612f5d614179565b6020020151848460048110612f7457612f74614179565b60200201858460ff1660048110612f8d57612f8d614179565b6020020191909152525080612fa181614332565b915050612f1c565b5060005b60048110156135365782516020840151600091820b910b838360048110612fd657612fd6614179565b6020020151600003612ff45781612fec8161442d565b925050613078565b83836004811061300657613006614179565b602002015160010361301c5781612fec81614442565b83836004811061302e5761302e614179565b602002015160020361304c578061304481614442565b915050613078565b83836004811061305e5761305e614179565b602002015160030361307857806130748161442d565b9150505b60018212806130875750600181125b8061309c57506130996002600b6141be565b82135b806130b157506130ae6002600b6141be565b81135b156130bd575050613524565b6040805180820190915260ff80841680835290831660208301528890600b81106130e9576130e9614179565b6020020151816020015160ff16600b811061310657613106614179565b6020020151158061316757508c6001016000876000015160ff1681526020019081526020016000206000876020015160ff16815260200190815260200160002060010161315387836124db565b6004811061316357613163614179565b0154155b1561352057891580613190575061317f8960426141be565b61318b60006063612031565b60ff16105b1561351b5760405180606001604052806131ac60006004612031565b60ff1681526020016131c060006004612031565b60ff16815260200160018152508d60020160008f60030160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff0219169083600481111561326257613262613a8d565b0217905550505060038d015460ff908116600090815260028f01602052604081205490911690036132b55760038d015460ff16600090815260028e0160205260409020805462ff00001916620300001790555b60038d01805460ff169060006132ca836142f2565b91906101000a81548160ff021916908360ff160217905550506016896132f091906141d1565b9850604289111561330057604298505b8051889060ff16600b811061331757613317614179565b6020020151816020015160ff16600b811061333457613334614179565b602002015115156000036133b85780878d601e811061335557613355614179565b60200201528b613364816141a5565b9c50508980613372906141a5565b9a5050600188826000015160ff16600b811061339057613390614179565b6020020151826020015160ff16600b81106133ad576133ad614179565b911515602090920201525b8c6001016000876000015160ff1681526020019081526020016000206000876020015160ff16815260200190815260200160002060010185856004811061340157613401614179565b60200201516004811061341657613416614179565b01546000036135165760038d01546134339060019060ff16614204565b60ff168d6001016000886000015160ff1681526020019081526020016000206000886020015160ff16815260200190815260200160002060010186866004811061347f5761347f614179565b60200201516004811061349457613494614179565b015560038d01546134aa9060019060ff16614204565b60ff168d6001016000836000015160ff1681526020019081526020016000206000836020015160ff1681526020019081526020016000206001016135038787600481106134f9576134f9614179565b60200201516118c6565b6004811061351357613513614179565b01555b613520565b600098505b5050505b8061352e816141a5565b915050612fad565b505050612dbb565b60048701805460ff80821660009081526001808c016020818152604080852061010097889004871686528252808520805460ff1916600290811790915597548087168652928252808520969092049094168352938352838220600501805462ff000019908116909155908252938b01909152208054600392166201000083021790555050505050505050565b6000805b600b8110156138585760005b600b811015613845576000828152600185016020908152604080832084845290915290205460ff16600019016138335782613614816141a5565b9350508260050361365457600082815260018501602090815260408083208484529091529020805460ff1916606417905560058401829055600684018190555b60005b600481101561383157600083815260018087016020908152604080842086855290915290912001816004811061368f5761368f614179565b015460000361381f578260091480156136a85750816006145b61381f5760006136d28260405180604001604052808760ff1681526020018660ff16815250611b06565b805160ff908116600090815260018901602090815260408083208286015185168452909152902054919250168015801561371a5750604261371560006063612031565b60ff16105b1561381c576040805160608101825260ff808252602082015290810160049052600388015460ff908116600090815260028a016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff000019166201000083600481111561379a5761379a613a8d565b0217905550505060038701805460ff169060006137b6836142f2565b82546101009290920a60ff81810219909316918316021790915560038901546137e3925060019116614204565b60008681526001808a016020908152604080842089855290915290912060ff929092169101846004811061381957613819614179565b01555b50505b80613829816141a5565b915050613657565b505b8061383d816141a5565b9150506135da565b5080613850816141a5565b9150506135ce565b505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156138ad57602002820191906000526020600020905b815481526020019060010190808311613899575b50505050509050919050565b6040805160a081019091528060005b8152600060208201819052604082018190526060820181905260809091015290565b60405180608001604052806004906020820280368337509192915050565b6040805160e081018252600080825260208201529081016138c86138ea565b604051806101600160405280600b905b61393f613a2d565b8152602001906001900390816139375790505090565b6040518061032001604052806019905b60608152602001906001900390816139655790505090565b8280548282559060005260206000209081019282156139b8579160200282015b828111156139b857825182559160200191906001019061399d565b506139c4929150613a4c565b5090565b60405180608001604052806004905b60408051808201909152600080825260208201528152602001906001900390816139d75790505090565b60408051610400810190915260006103c082018181526103e08301919091528152601d602082016139d7565b604051806101600160405280600b906020820280368337509192915050565b5b808211156139c45760008155600101613a4d565b600080600060608486031215613a7657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b60068110613ab357613ab3613a8d565b9052565b613ac2828251613aa3565b6020810151602083015260ff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b60a081016107028284613ab7565b600060208284031215613b1657600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015613b5557835183529284019291840191600101613b39565b50909695505050505050565b60808101818360005b6004811015613b8b5781511515835260209283019290910190600101613b6a565b50505092915050565b60ff8151168252602060ff81830151168184015260408201516040840160005b6004811015613bd157825182529183019190830190600101613bb4565b505050506060810151151560c0838101919091526080820151151560e084015260a082015115156101008401520151151561012090910152565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b83811015613c9257888603603f19018552825180518088529088019088880190845b81811015613c7c57613c68838551613b94565b928a01926101409290920191600101613c55565b5090975050509386019391860191600101613c33565b509398975050505050505050565b634e487b7160e01b600052604160045260246000fd5b60ff811681146123f457600080fd5b600060408284031215613cd757600080fd5b6040516040810181811067ffffffffffffffff82111715613d0857634e487b7160e01b600052604160045260246000fd5b6040529050808235613d1981613cb6565b81526020830135613d2981613cb6565b6020919091015292915050565b80151581146123f457600080fd5b60008060008060c08587031215613d5a57600080fd5b84359350613d6b8660208701613cc5565b9250613d7a8660608701613cc5565b915060a0850135613d8a81613d36565b939692955090935050565b6000806000806000806101008789031215613daf57600080fd5b86359550613dc08860208901613cc5565b9450613dcf8860608901613cc5565b935060a0870135613ddf81613d36565b925060c0870135613def81613d36565b8092505060e087013590509295509295509295565b604081016107028284805160ff908116835260209182015116910152565b60008060408385031215613e3557600080fd5b50508035926020909101359150565b60008060008060008060c08789031215613e5d57600080fd5b86359550602087013594506040870135935060608701359250608087013560058110613e8857600080fd5b8092505060a087013590509295509295509295565b60ff815116825260ff6020820151166020830152604081015160058110613ec657613ec6613a8d565b806040840152505050565b6020808252825182820181905260009190848201906040850190845b81811015613b5557613f00838551613e9d565b9284019260609290920191600101613eed565b60008060008060808587031215613f2957600080fd5b5050823594602084013594506040840135936060013592509050565b606081016107028284613e9d565b60ff8516815260a08101613f7a6020830186805160ff908116835260209182015116910152565b60608201939093526080015292915050565b6020808252825182820181905260009190848201906040850190845b81811015613b5557613fbb838551613ab7565b9284019260a09290920191600101613fa8565b60008060608385031215613fe157600080fd5b82359150613ff28460208501613cc5565b90509250929050565b60a081016140098288613aa3565b85602083015260ff8516604083015260ff8416606083015282151560808301529695505050505050565b6000806040838503121561404657600080fd5b823561405181613cb6565b9150602083013561406181613cb6565b809150509250929050565b80356001600160a01b038116811461408357600080fd5b919050565b600080600080600060a086880312156140a057600080fd5b6140a98661406c565b94506140b76020870161406c565b93506140c56040870161406c565b92506140d36060870161406c565b91506140e16080870161406c565b90509295509295909350565b6000602082840312156140ff57600080fd5b6106e18261406c565b61014081016107028284613b94565b6000806080838503121561412a57600080fd5b6141348484613cc5565b9150613ff28460408501613cc5565b6000806000806080858703121561415957600080fd5b8435935060208501359250604085013591506060850135613d8a81613d36565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016141b7576141b761418f565b5060010190565b818103818111156107025761070261418f565b808201808211156107025761070261418f565b8181036000831280158383131683831282161715610a3a57610a3a61418f565b60ff82811682821603908111156107025761070261418f565b60ff81811683821601908111156107025761070261418f565b60005b83811015614251578181015183820152602001614239565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251614288816013850160208701614236565b9190910160130192915050565b60208152600082518060208401526142b4816040850160208701614236565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601260045260246000fd5b6000826142ed576142ed6142c8565b500690565b600060ff821660ff81036143085761430861418f565b60010192915050565b600082810b9082900b03607f198112607f821317156107025761070261418f565b6000816143415761434161418f565b506000190190565b634e487b7160e01b600052603160045260246000fd5b60008261436e5761436e6142c8565b500490565b60006020828403121561438557600080fd5b5051919050565b600060a0828403121561439e57600080fd5b60405160a0810181811067ffffffffffffffff821117156143cf57634e487b7160e01b600052604160045260246000fd5b6040528251600681106143e157600080fd5b81526020838101519082015260408301516143fb81613cb6565b6040820152606083015161440e81613cb6565b6060820152608083015161442181613d36565b60808201529392505050565b6000600160ff1b82016143415761434161418f565b60006001600160ff1b0182016141b7576141b761418f56fea26469706673582212203ff063e08438e5f7791a5288e08e35dfa83679b146942666ec7542b1c5661ada64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21289,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 21294,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "gameToEventBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2262_storage)"
      },
      {
        "astId": 16008,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "game",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 16011,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomTiles",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RoomTileInterface)16002"
      },
      {
        "astId": 16013,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 16015,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "playersAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16059,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(RoomTile)21184_storage)"
      },
      {
        "astId": 16061,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "numRooms",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 16065,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "maps",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Map)21111_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Map)21111_storage)dyn_storage": {
        "base": "t_struct(Map)21111_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Map[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RoomTileInterface)16002": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)20917": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DoorStatus)20893": {
        "encoding": "inplace",
        "label": "enum BCTypes.DoorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)21078_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BCTypes.GameTile))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GameTile)21078_storage)"
      },
      "t_mapping(t_uint256,t_struct(Door)21086_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.Door)",
        "numberOfBytes": "32",
        "value": "t_struct(Door)21086_storage"
      },
      "t_mapping(t_uint256,t_struct(GameTile)21078_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.GameTile)",
        "numberOfBytes": "32",
        "value": "t_struct(GameTile)21078_storage"
      },
      "t_mapping(t_uint256,t_struct(RoomTile)21184_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.RoomTile)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomTile)21184_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)2262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2262_storage"
      },
      "t_struct(Door)21086_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Door",
        "members": [
          {
            "astId": 21080,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsBreach",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 21082,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsHack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 21085,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "status",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(DoorStatus)20893"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameTile)21078_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.GameTile",
        "members": [
          {
            "astId": 21063,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 21065,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "parentId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 21069,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 21071,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "explored",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 21073,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "looted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 21075,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasVent",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 21077,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasHazard",
            "offset": 3,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)21111_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Map",
        "members": [
          {
            "astId": 21089,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "unusedNormalRooms",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 21096,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "board",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)21078_storage))"
          },
          {
            "astId": 21101,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Door)21086_storage)"
          },
          {
            "astId": 21103,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numDoors",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 21106,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "startPosition",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Position)21061_storage"
          },
          {
            "astId": 21108,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "mainReactorRow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21110,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "mainReactorCol",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Position)21061_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 21058,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 21060,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoomTile)21184_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.RoomTile",
        "members": [
          {
            "astId": 21175,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BCEventType)20917"
          },
          {
            "astId": 21177,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21179,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numItems",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 21181,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numData",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 21183,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "sigDetected",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1804_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1799,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1803,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2262_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2261,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1804_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}