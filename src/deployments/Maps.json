{
  "address": "0x1A660C715Ba84eAEF3414226A4DD005e0B5B9Fbe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "discoverRoom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetDoors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetGameTile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "contract GameInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "getDoor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maps",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numRooms",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numDoors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "startPosition",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "resetOpenDoors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roomTilesAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DoorStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setDoorFromPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "setLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x236d9eebeb7116f05c430cfe55c02e0d04c07a25e6355fe413ba2c1ad2ac0079",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0x1A660C715Ba84eAEF3414226A4DD005e0B5B9Fbe",
    "transactionIndex": 9,
    "gasUsed": "4118945",
    "logsBloom": "0x
    "blockHash": "0x0adbd9ae351ff5c8f7db7b7070450d69d0787b8a45074141a3f226d712103305",
    "transactionHash": "0x236d9eebeb7116f05c430cfe55c02e0d04c07a25e6355fe413ba2c1ad2ac0079",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 28876236,
        "transactionHash": "0x236d9eebeb7116f05c430cfe55c02e0d04c07a25e6355fe413ba2c1ad2ac0079",
        "address": "0x1A660C715Ba84eAEF3414226A4DD005e0B5B9Fbe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x0adbd9ae351ff5c8f7db7b7070450d69d0787b8a45074141a3f226d712103305"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 28876236,
        "transactionHash": "0x236d9eebeb7116f05c430cfe55c02e0d04c07a25e6355fe413ba2c1ad2ac0079",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003fb038109e7a9000000000000000000000000000000000000000000000000040e49683fc5f12a700000000000000000000000000000000000000000000000003611ff73c4d661b00000000000000000000000000000000000000000000000040a4e64bebc0981700000000000000000000000000000000000000000000000003a0d02f4cebe0ab",
        "logIndex": 33,
        "blockHash": "0x0adbd9ae351ff5c8f7db7b7070450d69d0787b8a45074141a3f226d712103305"
      }
    ],
    "blockNumber": 28876236,
    "cumulativeGasUsed": "5384349",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "106b24de3a9c6176496e0aea719f22ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"discoverRoom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetDoors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetGameTile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomList\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contract GameInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"getDoor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numRooms\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numDoors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"startPosition\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"resetOpenDoors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roomTilesAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setDoorFromPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"setLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCMaps.sol\":\"Maps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BCMaps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// TODO: Eval putting constants in a separate file that is imported/shared\\nuint constant BOARD_SIZE = 11;\\nuint constant VENT_CHANCE = 33;\\nuint constant WINDOW_CHANCE = 66;\\nuint constant DOOR_CHANCE = 66;\\nuint constant DOOR_MOD_STEP = 22;\\nuint8 constant MAX_DOOR_STR = 3;\\n\\nuint constant START_ROOM_ID = 2; // TODO: Possibility of more than one start room?\\nuint8 constant UNDISCOVERED_ROOM = 1;\\nuint8 constant SPACE_ROOM = 0;\\n\\ninterface GameInterface {\\n\\n}\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll() external returns (uint8);\\n    function abs(int x) external pure returns(int);\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n    function opposite(uint _direction) external pure returns (uint);\\n}\\n\\ncontract Maps is Ownable {\\n\\n    GameInterface public game;\\n    UtilsInterface public utils;\\n    RoomTileInterface public roomTiles;\\n\\n    function setContractAddresses(\\n        address _gameAddress,\\n        address _utilsAddress,\\n        address _roomTilesAddress\\n        ) public onlyOwner {\\n        game = GameInterface(_gameAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        roomTiles = RoomTileInterface(_roomTilesAddress);\\n    }\\n\\n    // TODO: This array is here just to support making an empty one to put in the mapping\\n    BCTypes.GameTile[] private gameTiles;\\n    BCTypes.Map[] public maps;\\n\\n    // TODO: System for options like static start and debug maps for testing\\n    function createMap() public returns (uint) {\\n        require(msg.sender == address(game), \\\"Only game contract can use\\\");\\n\\n        BCTypes.Map storage newMap = maps.push();\\n\\n        // Get the room list and save the number of rooms\\n        newMap.numRooms = uint8(_setGameRoomTiles(newMap.roomList));\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        _staticStart(newMap);\\n        _buildMap(newMap);\\n        _addWindows(newMap);\\n\\n        // Return the map id for the games contract\\n        return maps.length-1;\\n    }\\n\\n    // TODO: Is there any reason NOT to just always place start bottom center???\\n    function _staticStart(BCTypes.Map storage _newMap) internal {\\n        BCTypes.GameTile storage startTile = gameTiles.push(); // TODO: Can I make an empty one and reference it this way without the array?\\n\\n        uint startRow = BOARD_SIZE-1;\\n        uint startCol = (BOARD_SIZE/2)+1;\\n\\n        _newMap.startPosition = BCTypes.Position(uint8(startRow), uint8(startCol));\\n        _newMap.board[startRow][startCol] = startTile;\\n    }\\n\\n    function _addWindows(BCTypes.Map storage _newMap) internal {\\n        for(uint row = 0; row < BOARD_SIZE; row++){\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                if(_newMap.board[row][col].roomId == UNDISCOVERED_ROOM) {\\n                    for (uint i = 0; i < 4; i++) {\\n                        // Position memory neighbor = utils.getNeighborRoom(i, Position(uint8(row), uint8(col)));\\n                        if (_newMap.board[row][col].doors[i] == 0) {\\n                                BCTypes.Position memory neighborPos = utils.getNeighborRoom(i, BCTypes.Position(uint8(row), uint8(col)));\\n                                uint neighborId = _newMap.board[neighborPos.row][neighborPos.col].roomId;\\n                                if (utils.smallIntBetweenVals(0, 99) < WINDOW_CHANCE && neighborId == SPACE_ROOM) {\\n                                    _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                                    255,\\n                                    255,\\n                                    BCTypes.DoorStatus.WINDOW);\\n                                    _newMap.numDoors++;\\n                                    _newMap.board[row][col].doors[i] = _newMap.numDoors-1; // -1 for correct index\\n                                    // TODO: Conform that neighbor doesn't need this door/window\\n                                }\\n                            }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _buildMap(BCTypes.Map storage _newMap) internal {\\n        uint stackCount = 0;\\n        uint numToPlace = _newMap.numRooms - 2; // -1 for space and -1 for empty room\\n\\n        uint availableDoors = 1; // Start with 1 because tracking is done in the pop current phase\\n\\n        uint doorModifier = 0;\\n\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_newMap.startPosition.row][_newMap.startPosition.col] = true;\\n\\n        BCTypes.Position[30] memory stack; // TODO: Write a stack library? // TODO: This can probably be 27\\n        stack[stackCount] = _newMap.startPosition; // Start by enstacking the Donghaijiu location\\n        stackCount++;\\n\\n        while (numToPlace > 0 && stackCount > 0) { // TODO: Need to track stack count to avoid crash on error if all rooms not placed\\n            // Pop the top item from the stack\\n            BCTypes.Position memory current = stack[stackCount-1];\\n            stackCount--;\\n            delete stack[stackCount]; // TODO: Confirm utility of deleting\\n\\n            numToPlace--;\\n            availableDoors--;\\n\\n            _newMap.board[current.row][current.col].roomId = UNDISCOVERED_ROOM;\\n\\n            // Add vent\\n            if (utils.smallIntBetweenVals(0, 99) < VENT_CHANCE) {\\n                _newMap.board[current.row][current.col].hasVent = true;\\n            }\\n\\n            // Also ugly but fighting stack limit\\n            uint[4] memory order = [uint(0), 1, 2, 3];\\n\\n            // Fischer-Yates shuffle to avoid direction bias in room placement\\n            for (uint i = order.length-1; i > 0; i--) {\\n                uint8 k = utils.smallIntBetweenVals(0, 3);\\n\\n                (order[i], order[k]) = (order[k], order[i]);\\n            }\\n\\n            for (uint i = 0; i < order.length; i++) {\\n                int newRow = int8(current.row);\\n                int newCol = int8(current.col);\\n\\n                if(order[i] == 0) {\\n                    newRow--;\\n                } else if (order[i] == 1) {\\n                    newRow++;\\n                } else if (order[i] == 2) {\\n                    newCol++;\\n                } else if (order[i] == 3) {\\n                    newCol--;\\n                }\\n\\n                // Stay in bounds, reserving outside edge for Donghaijiu only\\n                if (newRow < 1 ||\\n                    newCol < 1 ||\\n                    newRow > int(BOARD_SIZE-2) ||\\n                    newCol > int(BOARD_SIZE-2)) {\\n                        continue;\\n                }\\n                BCTypes.Position memory neighbor = BCTypes.Position(uint8(int8(newRow)), uint8(int8(newCol)));\\n                                                                    // Hideous but hashtag #stacklimit\\n                if (found[neighbor.row][neighbor.col] == false || _newMap.board[current.row][current.col].doors[utils.getDirectionBetween(current, neighbor)] == 0) {\\n                    if (availableDoors == 0 || utils.smallIntBetweenVals(0, 99) < DOOR_CHANCE - doorModifier) {\\n                        _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                        utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        BCTypes.DoorStatus.CLOSED);\\n                        // Pre-breach doors with strength 0\\n                        if (_newMap.doors[_newMap.numDoors].vsBreach == 0) {\\n                            _newMap.doors[_newMap.numDoors].status = BCTypes.DoorStatus.BREACHED;\\n                        }\\n                        _newMap.numDoors++;\\n\\n                        doorModifier += DOOR_MOD_STEP;\\n                        // Prevent negative uint in DOOR_CHANCE - doorModifier\\n                        if (doorModifier > DOOR_CHANCE) {\\n                            doorModifier = DOOR_CHANCE;\\n                        }\\n\\n                        // Only enstack if we haven't found this one yet\\n                        // Otherwise it will overwrite existing tiles\\n                        if (found[neighbor.row][neighbor.col] == false) {\\n                            stack[stackCount] = neighbor;\\n                            stackCount++;\\n                            availableDoors++;\\n\\n                            found[neighbor.row][neighbor.col] = true;\\n                        }\\n\\n                        // Add the door if one isn't present already\\n                        // TODO: Check may be unnecessary\\n                        if(_newMap.board[current.row][current.col].doors[order[i]] == 0) {\\n                            _newMap.board[current.row][current.col].doors[order[i]] = _newMap.numDoors-1;\\n                            _newMap.board[neighbor.row][neighbor.col].doors[utils.opposite(order[i])] = _newMap.numDoors-1;\\n                        }\\n                    } else {\\n                        doorModifier = 0;\\n                    }\\n                }\\n\\n            }\\n            // Detect mapgen stuck and reset by adding a new valid room in the stack\\n        }\\n        // Cleanup Tasks\\n\\n        // TODO Detect and prevent failure to deploy all tiles\\n\\n        // require(numToPlace == 0, \\\"Error: Bad mapgen.  Unplaced rooms\\\");\\n\\n        // Reset Donghaijiu ID (Was changed by map building)\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].roomId = uint8(START_ROOM_ID);\\n\\n        // Set the first door placed to breached, this is the entrance\\n        _newMap.doors[1].status = BCTypes.DoorStatus.BREACHED;\\n\\n        // TODO: Add signature detected\\n    }\\n\\n    function _setGameRoomTiles(mapping (uint => BCTypes.RoomTile) storage _roomList) internal returns (uint) {\\n        uint number = roomTiles.getNumRoomTiles();\\n        for(uint i = 0; i < number; i++) {\\n            _roomList[i] = roomTiles.extGetRoomTile(i);\\n        }\\n        return number;\\n    }\\n\\n    function extGetBoard(uint _mapId) public view returns (BCTypes.GameTile[][] memory) {\\n        BCTypes.GameTile[][] memory board = new BCTypes.GameTile[][](BOARD_SIZE);\\n        for (uint i = 0; i < BOARD_SIZE; i++) {\\n            board[i] = new BCTypes.GameTile[](BOARD_SIZE);\\n        }\\n\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                board[row][col] = maps[_mapId].board[row][col];\\n            }\\n        }\\n\\n        return board;\\n    }\\n\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) public view returns (BCTypes.GameTile memory) {\\n        return maps[_mapId].board[_row][_col];\\n    }\\n\\n    function extGetRoomList(uint _mapId) public view returns (BCTypes.RoomTile[] memory) {\\n        BCTypes.RoomTile[] memory roomList = new BCTypes.RoomTile[](maps[_mapId].numRooms);\\n        for (uint i = 0; i < roomList.length; i++) {\\n            roomList[i] = maps[_mapId].roomList[i];\\n        }\\n        return roomList;\\n    }\\n\\n    function extGetRoom(uint _mapId, uint _row, uint _col) public view returns(BCTypes.RoomTile memory) {\\n        return maps[_mapId].roomList[maps[_mapId].board[_row][_col].roomId];\\n    }\\n\\n    function extGetDoors(uint _mapId) public view returns (BCTypes.Door[] memory) {\\n        BCTypes.Door[] memory doors = new BCTypes.Door[](maps[_mapId].numDoors);\\n        for (uint i = 0; i < doors.length; i++) {\\n            doors[i] = maps[_mapId].doors[i];\\n        }\\n\\n        return doors;\\n    }\\n\\n    // TODO:  These need to validate that this is the right version of BCMaps\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) public view returns (BCTypes.Door memory){\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        return maps[_mapId].doors[currentRoomDoors[_direction]];\\n    }\\n\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        BCTypes.Door storage currentDoor = maps[_mapId].doors[currentRoomDoors[_direction]];\\n        currentDoor.status = _status;\\n    }\\n\\n    function setLooted(uint _mapId, uint _row, uint _col) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        maps[_mapId].board[_row][_col].looted = true;\\n    }\\n\\n    function resetOpenDoors(uint _mapId) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        for (uint i = 0; i < maps[_mapId].numDoors; i++) {\\n            if (maps[_mapId].doors[i].status == BCTypes.DoorStatus.OPEN) {\\n                maps[_mapId].doors[i].status = BCTypes.DoorStatus.CLOSED;\\n            }\\n        }\\n    }\\n\\n    function _getUnusedRoomId(BCTypes.Map storage _map) internal returns (uint8) {\\n        // TODO: Explore other ways of doing use once\\n        uint8 roomId = utils.smallIntBetweenVals(uint8(START_ROOM_ID+1), _map.numRooms-4); // - for array, empty space, unexplored, donghaiziu\\n\\n        while (_map.usedRooms[roomId] == true) {\\n            if (roomId == _map.numRooms-1) {\\n                roomId = uint8(START_ROOM_ID) + 1; // TODO: Semi-Hardcoded to account for empty and donghaijiu\\n            } else {\\n                roomId++;\\n            }\\n        }\\n        _map.usedRooms[roomId] = true;\\n        return roomId;\\n    }\\n\\n    // Discover a room and return the uint id for that room's event\\n    function discoverRoom(uint _mapId, uint _row, uint _col) public returns (bool) {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n\\n        BCTypes.GameTile storage gameTile = maps[_mapId].board[_row][_col];\\n        if( gameTile.roomId == UNDISCOVERED_ROOM) {\\n            gameTile.roomId = _getUnusedRoomId(maps[_mapId]);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x6bbcdb1190c4ec7f45eec5fcdefd77e1239cedd2b25cb5d1b919a107bda46dd6\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x98de0b6eda4b7063aed4af3ef6fb5242d12e409c304123621491ef3d8d74d506\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61493380620001146000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806386e529d0116100ad578063c3fe3e2811610071578063c3fe3e281461032e578063f01fc35a1461034c578063f2fde38b1461036a578063f7157f6414610386578063f9dfbfcb146103a457610121565b806386e529d01461028c5780638ab63380146102a85780638af13fd2146102c45780638da5cb5b146102f4578063b6cdd3b41461031257610121565b80635a29638d116100f45780635a29638d146101d257806369568fd5146101f05780636ea1dcd814610220578063715018a61461025057806375990a0e1461025a57610121565b806302861c6c146101265780631ef0441614610156578063471b67591461018657806358308aa8146101b6575b600080fd5b610140600480360381019061013b91906133d5565b6103d4565b60405161014d9190613560565b60405180910390f35b610170600480360381019061016b919061357b565b610535565b60405161017d9190613833565b60405180910390f35b6101a0600480360381019061019b91906133d5565b6107c0565b6040516101ad9190613864565b60405180910390f35b6101d060048036038101906101cb919061357b565b61091a565b005b6101da610ad7565b6040516101e791906138fe565b60405180910390f35b61020a6004803603810190610205919061357b565b610afd565b6040516102179190613a52565b60405180910390f35b61023a60048036038101906102359190613a74565b610c89565b6040516102479190613b1d565b60405180910390f35b610258610df3565b005b610274600480360381019061026f919061357b565b610e07565b60405161028393929190613b76565b60405180910390f35b6102a660048036038101906102a191906133d5565b610e9f565b005b6102c260048036038101906102bd9190613beb565b610f97565b005b6102de60048036038101906102d9919061357b565b611067565b6040516102eb9190613d68565b60405180910390f35b6102fc611233565b6040516103099190613d99565b60405180910390f35b61032c60048036038101906103279190613dd9565b61125c565b005b6103366113fc565b6040516103439190613e75565b60405180910390f35b610354611422565b6040516103619190613e9f565b60405180910390f35b610384600480360381019061037f9190613eba565b61163f565b005b61038e6116c3565b60405161039b9190613f08565b60405180910390f35b6103be60048036038101906103b991906133d5565b6116e9565b6040516103cb9190613fa0565b60405180910390f35b6103dc6131a2565b600584815481106103f0576103ef613fbc565b5b906000526020600020906007020160000160006005868154811061041757610416613fbc565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900460ff1660ff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff16600481111561049c5761049b613428565b5b60048111156104ae576104ad613428565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505090509392505050565b60606000600b67ffffffffffffffff81111561055457610553613feb565b5b60405190808252806020026020018201604052801561058757816020015b60608152602001906001900390816105725790505b50905060005b600b81101561061c57600b67ffffffffffffffff8111156105b1576105b0613feb565b5b6040519080825280602002602001820160405280156105ea57816020015b6105d76131f4565b8152602001906001900390816105cf5790505b508282815181106105fe576105fd613fbc565b5b6020026020010181905250808061061490614049565b91505061058d565b5060005b600b8110156107b65760005b600b8110156107a2576005858154811061064957610648613fbc565b5b9060005260206000209060070201600301600083815260200190815260200160002060008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156106fd576020028201915b8154815260200190600101908083116106e9575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505083838151811061076a57610769613fbc565b5b6020026020010151828151811061078457610783613fbc565b5b6020026020010181905250808061079a90614049565b91505061062c565b5080806107ae90614049565b915050610620565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610849906140ef565b60405180910390fd5b60006005858154811061086857610867613fbc565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000209050600160ff168160000160009054906101000a900460ff1660ff16141561090d576108e7600586815481106108d4576108d3613fbc565b5b906000526020600020906007020161181c565b8160000160006101000a81548160ff021916908360ff1602179055506001915050610913565b60009150505b9392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a1906140ef565b60405180910390fd5b60005b600582815481106109c1576109c0613fbc565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff16811015610ad357600260048111156109fe576109fd613428565b5b60058381548110610a1257610a11613fbc565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff166004811115610a5757610a56613428565b5b1415610ac057600160058381548110610a7357610a72613fbc565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160026101000a81548160ff02191690836004811115610aba57610ab9613428565b5b02179055505b8080610acb90614049565b9150506109ad565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060058381548110610b1557610b14613fbc565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff1667ffffffffffffffff811115610b5057610b4f613feb565b5b604051908082528060200260200182016040528015610b8957816020015b610b7661323c565b815260200190600190039081610b6e5790505b50905060005b8151811015610c7f5760058481548110610bac57610bab613fbc565b5b906000526020600020906007020160040160008281526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610c3857610c37613428565b5b6004811115610c4a57610c49613428565b5b81525050828281518110610c6157610c60613fbc565b5b60200260200101819052508080610c7790614049565b915050610b8f565b5080915050919050565b610c9161323c565b600060058681548110610ca757610ca6613fbc565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015610d14576020028201915b815481526020019060010190808311610d00575b5050505050905060058681548110610d2f57610d2e613fbc565b5b90600052602060002090600702016004016000828560048110610d5557610d54613fbc565b5b602002015181526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610dd257610dd1613428565b5b6004811115610de457610de3613428565b5b81525050915050949350505050565b610dfb6119ac565b610e056000611a2a565b565b60058181548110610e1757600080fd5b90600052602060002090600702016000915090508060010160009054906101000a900460ff16908060050160009054906101000a900460ff1690806006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f26906140ef565b60405180910390fd5b600160058481548110610f4557610f44613fbc565b5b90600052602060002090600702016003016000848152602001908152602001600020600083815260200190815260200160002060050160016101000a81548160ff021916908315150217905550505050565b610f9f6119ac565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b606060006005838154811061107f5761107e613fbc565b5b906000526020600020906007020160010160009054906101000a900460ff1660ff1667ffffffffffffffff8111156110ba576110b9613feb565b5b6040519080825280602002602001820160405280156110f357816020015b6110e06131a2565b8152602001906001900390816110d85790505b50905060005b8151811015611229576005848154811061111657611115613fbc565b5b906000526020600020906007020160000160008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff16600481111561116857611167613428565b5b600481111561117a57611179613428565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505082828151811061120b5761120a613fbc565b5b6020026020010181905250808061122190614049565b9150506110f9565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e3906140ef565b60405180910390fd5b60006005868154811061130257611301613fbc565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060010160048060200260405190810160405280929190826004801561136f576020028201915b81548152602001906001019080831161135b575b5050505050905060006005878154811061138c5761138b613fbc565b5b906000526020600020906007020160040160008386600481106113b2576113b1613fbc565b5b602002015181526020019081526020016000209050828160000160026101000a81548160ff021916908360048111156113ee576113ed613428565b5b021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab9061415b565b60405180910390fd5b6000600560018160018154018082558091505003906000526020600020906007020190506114e481600001611aee565b8160010160006101000a81548160ff021916908360ff160217905550604051806060016040528060ff8016815260200160ff801681526020016000600481111561153157611530613428565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156115ca576115c9613428565b5b021790555090505080600501600081819054906101000a900460ff16809291906115f39061417b565b91906101000a81548160ff021916908360ff1602179055505061161581611d19565b61161e81611efb565b61162781612d79565b600160058054905061163991906141a5565b91505090565b6116476119ac565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae9061424b565b60405180910390fd5b6116c081611a2a565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116f16131f4565b6005848154811061170557611704613fbc565b5b9060005260206000209060070201600301600084815260200190815260200160002060008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156117b9576020028201915b8154815260200190600101908083116117a5575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505090509392505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f6001600261186b919061426b565b60048660010160009054906101000a900460ff1661188991906142c1565b6040518363ffffffff1660e01b81526004016118a69291906142f5565b6020604051808303816000875af11580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e9919061434a565b90505b600115158360020160008360ff16815260200190815260200160002060009054906101000a900460ff16151514156119725760018360010160009054906101000a900460ff1661193c91906142c1565b60ff168160ff16141561195e57600160026119579190614377565b905061196d565b80806119699061417b565b9150505b6118ec565b60018360020160008360ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050919050565b6119b461319a565b73ffffffffffffffffffffffffffffffffffffffff166119d2611233565b73ffffffffffffffffffffffffffffffffffffffff1614611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f906143fa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b82919061442f565b905060005b81811015611d0f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe826040518263ffffffff1660e01b8152600401611bea9190613e9f565b60c060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b91906145af565b84600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115611c6857611c67613428565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff0219169083151502179055509050508080611d0790614049565b915050611b87565b5080915050919050565b60006004600181600181540180825580915050039060005260206000209060060201905060006001600b611d4d91906141a5565b9050600060016002600b611d61919061460b565b611d6b919061426b565b905060405180604001604052808360ff1681526020018260ff168152508460060160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050508284600301600084815260200190815260200160002060008381526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff1602179055506000820160019054906101000a900460ff168160000160016101000a81548160ff021916908360ff1602179055506001820181600101906004611e6a929190613275565b506005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506005820160029054906101000a900460ff168160050160026101000a81548160ff02191690831515021790555090505050505050565b60008060028360010160009054906101000a900460ff16611f1c91906142c1565b60ff1690506000600190506000611f316132b2565b6001818760060160000160009054906101000a900460ff1660ff16600b8110611f5d57611f5c613fbc565b5b60200201518760060160000160019054906101000a900460ff1660ff16600b8110611f8b57611f8a613fbc565b5b602002019015159081151581525050611fa26132e0565b866006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508187601e8110611ffe57611ffd613fbc565b5b6020020181905250858061201190614049565b9650505b6000851180156120255750600086115b15612cbd5760008160018861203a91906141a5565b601e811061204b5761204a613fbc565b5b60200201519050868061205d9061463c565b9750508187601e811061207357612072613fbc565b5b6020020161207f61330e565b815250858061208d9061463c565b965050848061209b9061463c565b9550506001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506021600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016121509291906146dc565b6020604051808303816000875af115801561216f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612193919061434a565b60ff1610156121ed576001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060050160026101000a81548160ff0219169083151502179055505b600060405180608001604052806000815260200160018152602001600281526020016003815250905060006001600461222691906141a5565b90505b600081111561235a576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401612293929190614740565b6020604051808303816000875af11580156122b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d6919061434a565b9050828160ff16600481106122ee576122ed613fbc565b5b602002015183836004811061230657612305613fbc565b5b602002015184846004811061231e5761231d613fbc565b5b60200201858460ff166004811061233857612337613fbc565b5b60200201828152508281525050505080806123529061463c565b915050612229565b5060005b6004811015612cb5576000836000015160000b90506000846020015160000b9050600084846004811061239457612393613fbc565b5b602002015114156123b25781806123aa90614773565b92505061244a565b60018484600481106123c7576123c6613fbc565b5b602002015114156123e55781806123dd906147bc565b925050612449565b60028484600481106123fa576123f9613fbc565b5b60200201511415612418578080612410906147bc565b915050612448565b600384846004811061242d5761242c613fbc565b5b6020020151141561244757808061244390614773565b9150505b5b5b5b60018212806124595750600181125b8061247057506002600b61246d91906141a5565b82135b8061248757506002600b61248491906141a5565b81135b15612493575050612ca2565b600060405180604001604052808460ff1681526020018360ff1681525090506000151588826000015160ff16600b81106124d0576124cf613fbc565b5b6020020151826020015160ff16600b81106124ee576124ed613fbc565b5b6020020151151514806125e8575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa3993c289856040518363ffffffff1660e01b8152600401612592929190614805565b602060405180830381865afa1580156125af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d3919061442f565b600481106125e4576125e3613fbc565b5b0154145b15612c9e5760008a14806126ab575088604261260491906141a5565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016126639291906146dc565b6020604051808303816000875af1158015612682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a6919061434a565b60ff16105b15612c98576040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b815260040161271a92919061482e565b6020604051808303816000875af1158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d919061434a565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b81526004016127c492919061482e565b6020604051808303816000875af11580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612807919061434a565b60ff1681526020016001600481111561282357612822613428565b5b8152508d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156128bc576128bb613428565b5b021790555090505060008d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160009054906101000a900460ff1660ff16141561295f5760038d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160026101000a81548160ff0219169083600481111561295957612958613428565b5b02179055505b8c600501600081819054906101000a900460ff16809291906129809061417b565b91906101000a81548160ff021916908360ff160217905550506016896129a6919061426b565b985060428911156129b657604298505b6000151588826000015160ff16600b81106129d4576129d3613fbc565b5b6020020151826020015160ff16600b81106129f2576129f1613fbc565b5b602002015115151415612a815780878d601e8110612a1357612a12613fbc565b5b60200201819052508b80612a2690614049565b9c50508980612a3490614049565b9a5050600188826000015160ff16600b8110612a5357612a52613fbc565b5b6020020151826020015160ff16600b8110612a7157612a70613fbc565b5b6020020190151590811515815250505b60008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612acd57612acc613fbc565b5b602002015160048110612ae357612ae2613fbc565b5b01541415612c935760018d60050160009054906101000a900460ff16612b0991906142c1565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612b5657612b55613fbc565b5b602002015160048110612b6c57612b6b613fbc565b5b018190555060018d60050160009054906101000a900460ff16612b8f91906142c1565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638214f222888860048110612c1a57612c19613fbc565b5b60200201516040518263ffffffff1660e01b8152600401612c3b9190613e9f565b602060405180830381865afa158015612c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7c919061442f565b60048110612c8d57612c8c613fbc565b5b01819055505b612c9d565b600098505b5b5050505b8080612cad90614049565b91505061235e565b505050612015565b60028760030160008960060160000160009054906101000a900460ff1660ff16815260200190815260200160002060008960060160000160019054906101000a900460ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060038760040160006001815260200190815260200160002060000160026101000a81548160ff02191690836004811115612d6b57612d6a613428565b5b021790555050505050505050565b60005b600b8110156131965760005b600b81101561318257600160ff16836003016000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900460ff1660ff16141561316f5760005b600481101561316d57600084600301600085815260200190815260200160002060008481526020019081526020016000206001018260048110612e1f57612e1e613fbc565b5b0154141561315a576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8360405180604001604052808860ff1681526020018760ff168152506040518363ffffffff1660e01b8152600401612ea0929190614857565b6040805180830381865afa158015612ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee091906148d0565b90506000856003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1690506042600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b8152600401612f8f9291906146dc565b6020604051808303816000875af1158015612fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd2919061434a565b60ff16108015612fe55750600060ff1681145b1561315757604051806060016040528060ff8016815260200160ff8016815260200160048081111561301a57613019613428565b5b8152508660040160008860050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156130b3576130b2613428565b5b021790555090505085600501600081819054906101000a900460ff16809291906130dc9061417b565b91906101000a81548160ff021916908360ff1602179055505060018660050160009054906101000a900460ff1661311391906142c1565b60ff168660030160008781526020019081526020016000206000868152602001908152602001600020600101846004811061315157613150613fbc565b5b01819055505b50505b808061316590614049565b915050612dd9565b505b808061317a90614049565b915050612d88565b50808061318e90614049565b915050612d7c565b5050565b600033905090565b6040518060c00160405280600060048111156131c1576131c0613428565b5b815260200160008152602001600060ff168152602001600060ff1681526020016000151581526020016000151581525090565b6040518060c00160405280600060ff168152602001600060ff16815260200161321b61332e565b81526020016000151581526020016000151581526020016000151581525090565b6040518060600160405280600060ff168152602001600060ff1681526020016000600481111561326f5761326e613428565b5b81525090565b82600481019282156132a1579182015b828111156132a0578254825591600101919060010190613285565b5b5090506132ae9190613350565b5090565b604051806101600160405280600b905b6132ca61336d565b8152602001906001900390816132c25790505090565b604051806103c00160405280601e905b6132f861330e565b8152602001906001900390816132f05790505090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600490602082028036833780820191505090505090565b5b80821115613369576000816000905550600101613351565b5090565b604051806101600160405280600b90602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b6133b28161339f565b81146133bd57600080fd5b50565b6000813590506133cf816133a9565b92915050565b6000806000606084860312156133ee576133ed61339a565b5b60006133fc868287016133c0565b935050602061340d868287016133c0565b925050604061341e868287016133c0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061346857613467613428565b5b50565b600081905061347982613457565b919050565b60006134898261346b565b9050919050565b6134998161347e565b82525050565b6134a88161339f565b82525050565b600060ff82169050919050565b6134c4816134ae565b82525050565b60008115159050919050565b6134df816134ca565b82525050565b60c0820160008201516134fb6000850182613490565b50602082015161350e602085018261349f565b50604082015161352160408501826134bb565b50606082015161353460608501826134bb565b50608082015161354760808501826134d6565b5060a082015161355a60a08501826134d6565b50505050565b600060c08201905061357560008301846134e5565b92915050565b6000602082840312156135915761359061339a565b5b600061359f848285016133c0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060049050919050565b600081905092915050565b6000819050919050565b600061362c838361349f565b60208301905092915050565b6000602082019050919050565b61364e81613600565b613658818461360b565b925061366382613616565b8060005b8381101561369457815161367b8782613620565b965061368683613638565b925050600181019050613667565b505050505050565b610120820160008201516136b360008501826134bb565b5060208201516136c660208501826134bb565b5060408201516136d96040850182613645565b5060608201516136ec60c08501826134d6565b5060808201516136ff60e08501826134d6565b5060a08201516137136101008501826134d6565b50505050565b6000613725838361369c565b6101208301905092915050565b6000602082019050919050565b600061374a826135d4565b61375481856135df565b935061375f836135f0565b8060005b838110156137905781516137778882613719565b975061378283613732565b925050600181019050613763565b5085935050505092915050565b60006137a9838361373f565b905092915050565b6000602082019050919050565b60006137c9826135a8565b6137d381856135b3565b9350836020820285016137e5856135c4565b8060005b858110156138215784840389528151613802858261379d565b945061380d836137b1565b925060208a019950506001810190506137e9565b50829750879550505050505092915050565b6000602082019050818103600083015261384d81846137be565b905092915050565b61385e816134ca565b82525050565b60006020820190506138796000830184613855565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006138c46138bf6138ba8461387f565b61389f565b61387f565b9050919050565b60006138d6826138a9565b9050919050565b60006138e8826138cb565b9050919050565b6138f8816138dd565b82525050565b600060208201905061391360008301846138ef565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6005811061395657613955613428565b5b50565b600081905061396782613945565b919050565b600061397782613959565b9050919050565b6139878161396c565b82525050565b6060820160008201516139a360008501826134bb565b5060208201516139b660208501826134bb565b5060408201516139c9604085018261397e565b50505050565b60006139db838361398d565b60608301905092915050565b6000602082019050919050565b60006139ff82613919565b613a098185613924565b9350613a1483613935565b8060005b83811015613a45578151613a2c88826139cf565b9750613a37836139e7565b925050600181019050613a18565b5085935050505092915050565b60006020820190508181036000830152613a6c81846139f4565b905092915050565b60008060008060808587031215613a8e57613a8d61339a565b5b6000613a9c878288016133c0565b9450506020613aad878288016133c0565b9350506040613abe878288016133c0565b9250506060613acf878288016133c0565b91505092959194509250565b606082016000820151613af160008501826134bb565b506020820151613b0460208501826134bb565b506040820151613b17604085018261397e565b50505050565b6000606082019050613b326000830184613adb565b92915050565b613b41816134ae565b82525050565b604082016000820151613b5d60008501826134bb565b506020820151613b7060208501826134bb565b50505050565b6000608082019050613b8b6000830186613b38565b613b986020830185613b38565b613ba56040830184613b47565b949350505050565b6000613bb88261387f565b9050919050565b613bc881613bad565b8114613bd357600080fd5b50565b600081359050613be581613bbf565b92915050565b600080600060608486031215613c0457613c0361339a565b5b6000613c1286828701613bd6565b9350506020613c2386828701613bd6565b9250506040613c3486828701613bd6565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c082016000820151613c806000850182613490565b506020820151613c93602085018261349f565b506040820151613ca660408501826134bb565b506060820151613cb960608501826134bb565b506080820151613ccc60808501826134d6565b5060a0820151613cdf60a08501826134d6565b50505050565b6000613cf18383613c6a565b60c08301905092915050565b6000602082019050919050565b6000613d1582613c3e565b613d1f8185613c49565b9350613d2a83613c5a565b8060005b83811015613d5b578151613d428882613ce5565b9750613d4d83613cfd565b925050600181019050613d2e565b5085935050505092915050565b60006020820190508181036000830152613d828184613d0a565b905092915050565b613d9381613bad565b82525050565b6000602082019050613dae6000830184613d8a565b92915050565b60058110613dc157600080fd5b50565b600081359050613dd381613db4565b92915050565b600080600080600060a08688031215613df557613df461339a565b5b6000613e03888289016133c0565b9550506020613e14888289016133c0565b9450506040613e25888289016133c0565b9350506060613e36888289016133c0565b9250506080613e4788828901613dc4565b9150509295509295909350565b6000613e5f826138cb565b9050919050565b613e6f81613e54565b82525050565b6000602082019050613e8a6000830184613e66565b92915050565b613e998161339f565b82525050565b6000602082019050613eb46000830184613e90565b92915050565b600060208284031215613ed057613ecf61339a565b5b6000613ede84828501613bd6565b91505092915050565b6000613ef2826138cb565b9050919050565b613f0281613ee7565b82525050565b6000602082019050613f1d6000830184613ef9565b92915050565b61012082016000820151613f3a60008501826134bb565b506020820151613f4d60208501826134bb565b506040820151613f606040850182613645565b506060820151613f7360c08501826134d6565b506080820151613f8660e08501826134d6565b5060a0820151613f9a6101008501826134d6565b50505050565b600061012082019050613fb66000830184613f23565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006140548261339f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140875761408661401a565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b60006140d9601183614092565b91506140e4826140a3565b602082019050919050565b60006020820190508181036000830152614108816140cc565b9050919050565b7f4f6e6c792067616d6520636f6e74726163742063616e20757365000000000000600082015250565b6000614145601a83614092565b91506141508261410f565b602082019050919050565b6000602082019050818103600083015261417481614138565b9050919050565b6000614186826134ae565b915060ff82141561419a5761419961401a565b5b600182019050919050565b60006141b08261339f565b91506141bb8361339f565b9250828210156141ce576141cd61401a565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614235602683614092565b9150614240826141d9565b604082019050919050565b6000602082019050818103600083015261426481614228565b9050919050565b60006142768261339f565b91506142818361339f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142b6576142b561401a565b5b828201905092915050565b60006142cc826134ae565b91506142d7836134ae565b9250828210156142ea576142e961401a565b5b828203905092915050565b600060408201905061430a6000830185613b38565b6143176020830184613b38565b9392505050565b614327816134ae565b811461433257600080fd5b50565b6000815190506143448161431e565b92915050565b6000602082840312156143605761435f61339a565b5b600061436e84828501614335565b91505092915050565b6000614382826134ae565b915061438d836134ae565b92508260ff038211156143a3576143a261401a565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006143e4602083614092565b91506143ef826143ae565b602082019050919050565b60006020820190508181036000830152614413816143d7565b9050919050565b600081519050614429816133a9565b92915050565b6000602082840312156144455761444461339a565b5b60006144538482850161441a565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b61447b82614461565b810181811067ffffffffffffffff8211171561449a57614499613feb565b5b80604052505050565b60006144ad613390565b90506144b98282614472565b919050565b600581106144cb57600080fd5b50565b6000815190506144dd816144be565b92915050565b6144ec816134ca565b81146144f757600080fd5b50565b600081519050614509816144e3565b92915050565b600060c082840312156145255761452461445c565b5b61452f60c06144a3565b9050600061453f848285016144ce565b60008301525060206145538482850161441a565b602083015250604061456784828501614335565b604083015250606061457b84828501614335565b606083015250608061458f848285016144fa565b60808301525060a06145a3848285016144fa565b60a08301525092915050565b600060c082840312156145c5576145c461339a565b5b60006145d38482850161450f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006146168261339f565b91506146218361339f565b925082614631576146306145dc565b5b828204905092915050565b60006146478261339f565b9150600082141561465b5761465a61401a565b5b600182039050919050565b6000819050919050565b600061468b61468661468184614666565b61389f565b6134ae565b9050919050565b61469b81614670565b82525050565b6000819050919050565b60006146c66146c16146bc846146a1565b61389f565b6134ae565b9050919050565b6146d6816146ab565b82525050565b60006040820190506146f16000830185614692565b6146fe60208301846146cd565b9392505050565b6000819050919050565b600061472a61472561472084614705565b61389f565b6134ae565b9050919050565b61473a8161470f565b82525050565b60006040820190506147556000830185614692565b6147626020830184614731565b9392505050565b6000819050919050565b600061477e82614769565b91507f80000000000000000000000000000000000000000000000000000000000000008214156147b1576147b061401a565b5b600182039050919050565b60006147c782614769565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147fa576147f961401a565b5b600182019050919050565b600060808201905061481a6000830185613b47565b6148276040830184613b47565b9392505050565b60006040820190506148436000830185614692565b6148506020830184613b38565b9392505050565b600060608201905061486c6000830185613e90565b6148796020830184613b47565b9392505050565b6000604082840312156148965761489561445c565b5b6148a060406144a3565b905060006148b084828501614335565b60008301525060206148c484828501614335565b60208301525092915050565b6000604082840312156148e6576148e561339a565b5b60006148f484828501614880565b9150509291505056fea26469706673582212204e28638d8f285b7610e023164cecdb660a5f8045b80362c6d2174e965831072864736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806386e529d0116100ad578063c3fe3e2811610071578063c3fe3e281461032e578063f01fc35a1461034c578063f2fde38b1461036a578063f7157f6414610386578063f9dfbfcb146103a457610121565b806386e529d01461028c5780638ab63380146102a85780638af13fd2146102c45780638da5cb5b146102f4578063b6cdd3b41461031257610121565b80635a29638d116100f45780635a29638d146101d257806369568fd5146101f05780636ea1dcd814610220578063715018a61461025057806375990a0e1461025a57610121565b806302861c6c146101265780631ef0441614610156578063471b67591461018657806358308aa8146101b6575b600080fd5b610140600480360381019061013b91906133d5565b6103d4565b60405161014d9190613560565b60405180910390f35b610170600480360381019061016b919061357b565b610535565b60405161017d9190613833565b60405180910390f35b6101a0600480360381019061019b91906133d5565b6107c0565b6040516101ad9190613864565b60405180910390f35b6101d060048036038101906101cb919061357b565b61091a565b005b6101da610ad7565b6040516101e791906138fe565b60405180910390f35b61020a6004803603810190610205919061357b565b610afd565b6040516102179190613a52565b60405180910390f35b61023a60048036038101906102359190613a74565b610c89565b6040516102479190613b1d565b60405180910390f35b610258610df3565b005b610274600480360381019061026f919061357b565b610e07565b60405161028393929190613b76565b60405180910390f35b6102a660048036038101906102a191906133d5565b610e9f565b005b6102c260048036038101906102bd9190613beb565b610f97565b005b6102de60048036038101906102d9919061357b565b611067565b6040516102eb9190613d68565b60405180910390f35b6102fc611233565b6040516103099190613d99565b60405180910390f35b61032c60048036038101906103279190613dd9565b61125c565b005b6103366113fc565b6040516103439190613e75565b60405180910390f35b610354611422565b6040516103619190613e9f565b60405180910390f35b610384600480360381019061037f9190613eba565b61163f565b005b61038e6116c3565b60405161039b9190613f08565b60405180910390f35b6103be60048036038101906103b991906133d5565b6116e9565b6040516103cb9190613fa0565b60405180910390f35b6103dc6131a2565b600584815481106103f0576103ef613fbc565b5b906000526020600020906007020160000160006005868154811061041757610416613fbc565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900460ff1660ff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff16600481111561049c5761049b613428565b5b60048111156104ae576104ad613428565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505090509392505050565b60606000600b67ffffffffffffffff81111561055457610553613feb565b5b60405190808252806020026020018201604052801561058757816020015b60608152602001906001900390816105725790505b50905060005b600b81101561061c57600b67ffffffffffffffff8111156105b1576105b0613feb565b5b6040519080825280602002602001820160405280156105ea57816020015b6105d76131f4565b8152602001906001900390816105cf5790505b508282815181106105fe576105fd613fbc565b5b6020026020010181905250808061061490614049565b91505061058d565b5060005b600b8110156107b65760005b600b8110156107a2576005858154811061064957610648613fbc565b5b9060005260206000209060070201600301600083815260200190815260200160002060008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156106fd576020028201915b8154815260200190600101908083116106e9575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505083838151811061076a57610769613fbc565b5b6020026020010151828151811061078457610783613fbc565b5b6020026020010181905250808061079a90614049565b91505061062c565b5080806107ae90614049565b915050610620565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610849906140ef565b60405180910390fd5b60006005858154811061086857610867613fbc565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000209050600160ff168160000160009054906101000a900460ff1660ff16141561090d576108e7600586815481106108d4576108d3613fbc565b5b906000526020600020906007020161181c565b8160000160006101000a81548160ff021916908360ff1602179055506001915050610913565b60009150505b9392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a1906140ef565b60405180910390fd5b60005b600582815481106109c1576109c0613fbc565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff16811015610ad357600260048111156109fe576109fd613428565b5b60058381548110610a1257610a11613fbc565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff166004811115610a5757610a56613428565b5b1415610ac057600160058381548110610a7357610a72613fbc565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160026101000a81548160ff02191690836004811115610aba57610ab9613428565b5b02179055505b8080610acb90614049565b9150506109ad565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060058381548110610b1557610b14613fbc565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff1667ffffffffffffffff811115610b5057610b4f613feb565b5b604051908082528060200260200182016040528015610b8957816020015b610b7661323c565b815260200190600190039081610b6e5790505b50905060005b8151811015610c7f5760058481548110610bac57610bab613fbc565b5b906000526020600020906007020160040160008281526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610c3857610c37613428565b5b6004811115610c4a57610c49613428565b5b81525050828281518110610c6157610c60613fbc565b5b60200260200101819052508080610c7790614049565b915050610b8f565b5080915050919050565b610c9161323c565b600060058681548110610ca757610ca6613fbc565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015610d14576020028201915b815481526020019060010190808311610d00575b5050505050905060058681548110610d2f57610d2e613fbc565b5b90600052602060002090600702016004016000828560048110610d5557610d54613fbc565b5b602002015181526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610dd257610dd1613428565b5b6004811115610de457610de3613428565b5b81525050915050949350505050565b610dfb6119ac565b610e056000611a2a565b565b60058181548110610e1757600080fd5b90600052602060002090600702016000915090508060010160009054906101000a900460ff16908060050160009054906101000a900460ff1690806006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f26906140ef565b60405180910390fd5b600160058481548110610f4557610f44613fbc565b5b90600052602060002090600702016003016000848152602001908152602001600020600083815260200190815260200160002060050160016101000a81548160ff021916908315150217905550505050565b610f9f6119ac565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b606060006005838154811061107f5761107e613fbc565b5b906000526020600020906007020160010160009054906101000a900460ff1660ff1667ffffffffffffffff8111156110ba576110b9613feb565b5b6040519080825280602002602001820160405280156110f357816020015b6110e06131a2565b8152602001906001900390816110d85790505b50905060005b8151811015611229576005848154811061111657611115613fbc565b5b906000526020600020906007020160000160008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff16600481111561116857611167613428565b5b600481111561117a57611179613428565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505082828151811061120b5761120a613fbc565b5b6020026020010181905250808061122190614049565b9150506110f9565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e3906140ef565b60405180910390fd5b60006005868154811061130257611301613fbc565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060010160048060200260405190810160405280929190826004801561136f576020028201915b81548152602001906001019080831161135b575b5050505050905060006005878154811061138c5761138b613fbc565b5b906000526020600020906007020160040160008386600481106113b2576113b1613fbc565b5b602002015181526020019081526020016000209050828160000160026101000a81548160ff021916908360048111156113ee576113ed613428565b5b021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab9061415b565b60405180910390fd5b6000600560018160018154018082558091505003906000526020600020906007020190506114e481600001611aee565b8160010160006101000a81548160ff021916908360ff160217905550604051806060016040528060ff8016815260200160ff801681526020016000600481111561153157611530613428565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156115ca576115c9613428565b5b021790555090505080600501600081819054906101000a900460ff16809291906115f39061417b565b91906101000a81548160ff021916908360ff1602179055505061161581611d19565b61161e81611efb565b61162781612d79565b600160058054905061163991906141a5565b91505090565b6116476119ac565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae9061424b565b60405180910390fd5b6116c081611a2a565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116f16131f4565b6005848154811061170557611704613fbc565b5b9060005260206000209060070201600301600084815260200190815260200160002060008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156117b9576020028201915b8154815260200190600101908083116117a5575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505090509392505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f6001600261186b919061426b565b60048660010160009054906101000a900460ff1661188991906142c1565b6040518363ffffffff1660e01b81526004016118a69291906142f5565b6020604051808303816000875af11580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e9919061434a565b90505b600115158360020160008360ff16815260200190815260200160002060009054906101000a900460ff16151514156119725760018360010160009054906101000a900460ff1661193c91906142c1565b60ff168160ff16141561195e57600160026119579190614377565b905061196d565b80806119699061417b565b9150505b6118ec565b60018360020160008360ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050919050565b6119b461319a565b73ffffffffffffffffffffffffffffffffffffffff166119d2611233565b73ffffffffffffffffffffffffffffffffffffffff1614611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f906143fa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b82919061442f565b905060005b81811015611d0f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe826040518263ffffffff1660e01b8152600401611bea9190613e9f565b60c060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b91906145af565b84600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115611c6857611c67613428565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff0219169083151502179055509050508080611d0790614049565b915050611b87565b5080915050919050565b60006004600181600181540180825580915050039060005260206000209060060201905060006001600b611d4d91906141a5565b9050600060016002600b611d61919061460b565b611d6b919061426b565b905060405180604001604052808360ff1681526020018260ff168152508460060160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050508284600301600084815260200190815260200160002060008381526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff1602179055506000820160019054906101000a900460ff168160000160016101000a81548160ff021916908360ff1602179055506001820181600101906004611e6a929190613275565b506005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506005820160029054906101000a900460ff168160050160026101000a81548160ff02191690831515021790555090505050505050565b60008060028360010160009054906101000a900460ff16611f1c91906142c1565b60ff1690506000600190506000611f316132b2565b6001818760060160000160009054906101000a900460ff1660ff16600b8110611f5d57611f5c613fbc565b5b60200201518760060160000160019054906101000a900460ff1660ff16600b8110611f8b57611f8a613fbc565b5b602002019015159081151581525050611fa26132e0565b866006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508187601e8110611ffe57611ffd613fbc565b5b6020020181905250858061201190614049565b9650505b6000851180156120255750600086115b15612cbd5760008160018861203a91906141a5565b601e811061204b5761204a613fbc565b5b60200201519050868061205d9061463c565b9750508187601e811061207357612072613fbc565b5b6020020161207f61330e565b815250858061208d9061463c565b965050848061209b9061463c565b9550506001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506021600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016121509291906146dc565b6020604051808303816000875af115801561216f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612193919061434a565b60ff1610156121ed576001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060050160026101000a81548160ff0219169083151502179055505b600060405180608001604052806000815260200160018152602001600281526020016003815250905060006001600461222691906141a5565b90505b600081111561235a576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401612293929190614740565b6020604051808303816000875af11580156122b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d6919061434a565b9050828160ff16600481106122ee576122ed613fbc565b5b602002015183836004811061230657612305613fbc565b5b602002015184846004811061231e5761231d613fbc565b5b60200201858460ff166004811061233857612337613fbc565b5b60200201828152508281525050505080806123529061463c565b915050612229565b5060005b6004811015612cb5576000836000015160000b90506000846020015160000b9050600084846004811061239457612393613fbc565b5b602002015114156123b25781806123aa90614773565b92505061244a565b60018484600481106123c7576123c6613fbc565b5b602002015114156123e55781806123dd906147bc565b925050612449565b60028484600481106123fa576123f9613fbc565b5b60200201511415612418578080612410906147bc565b915050612448565b600384846004811061242d5761242c613fbc565b5b6020020151141561244757808061244390614773565b9150505b5b5b5b60018212806124595750600181125b8061247057506002600b61246d91906141a5565b82135b8061248757506002600b61248491906141a5565b81135b15612493575050612ca2565b600060405180604001604052808460ff1681526020018360ff1681525090506000151588826000015160ff16600b81106124d0576124cf613fbc565b5b6020020151826020015160ff16600b81106124ee576124ed613fbc565b5b6020020151151514806125e8575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa3993c289856040518363ffffffff1660e01b8152600401612592929190614805565b602060405180830381865afa1580156125af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d3919061442f565b600481106125e4576125e3613fbc565b5b0154145b15612c9e5760008a14806126ab575088604261260491906141a5565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016126639291906146dc565b6020604051808303816000875af1158015612682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a6919061434a565b60ff16105b15612c98576040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b815260040161271a92919061482e565b6020604051808303816000875af1158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d919061434a565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b81526004016127c492919061482e565b6020604051808303816000875af11580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612807919061434a565b60ff1681526020016001600481111561282357612822613428565b5b8152508d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156128bc576128bb613428565b5b021790555090505060008d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160009054906101000a900460ff1660ff16141561295f5760038d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160026101000a81548160ff0219169083600481111561295957612958613428565b5b02179055505b8c600501600081819054906101000a900460ff16809291906129809061417b565b91906101000a81548160ff021916908360ff160217905550506016896129a6919061426b565b985060428911156129b657604298505b6000151588826000015160ff16600b81106129d4576129d3613fbc565b5b6020020151826020015160ff16600b81106129f2576129f1613fbc565b5b602002015115151415612a815780878d601e8110612a1357612a12613fbc565b5b60200201819052508b80612a2690614049565b9c50508980612a3490614049565b9a5050600188826000015160ff16600b8110612a5357612a52613fbc565b5b6020020151826020015160ff16600b8110612a7157612a70613fbc565b5b6020020190151590811515815250505b60008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612acd57612acc613fbc565b5b602002015160048110612ae357612ae2613fbc565b5b01541415612c935760018d60050160009054906101000a900460ff16612b0991906142c1565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612b5657612b55613fbc565b5b602002015160048110612b6c57612b6b613fbc565b5b018190555060018d60050160009054906101000a900460ff16612b8f91906142c1565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638214f222888860048110612c1a57612c19613fbc565b5b60200201516040518263ffffffff1660e01b8152600401612c3b9190613e9f565b602060405180830381865afa158015612c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7c919061442f565b60048110612c8d57612c8c613fbc565b5b01819055505b612c9d565b600098505b5b5050505b8080612cad90614049565b91505061235e565b505050612015565b60028760030160008960060160000160009054906101000a900460ff1660ff16815260200190815260200160002060008960060160000160019054906101000a900460ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060038760040160006001815260200190815260200160002060000160026101000a81548160ff02191690836004811115612d6b57612d6a613428565b5b021790555050505050505050565b60005b600b8110156131965760005b600b81101561318257600160ff16836003016000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900460ff1660ff16141561316f5760005b600481101561316d57600084600301600085815260200190815260200160002060008481526020019081526020016000206001018260048110612e1f57612e1e613fbc565b5b0154141561315a576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8360405180604001604052808860ff1681526020018760ff168152506040518363ffffffff1660e01b8152600401612ea0929190614857565b6040805180830381865afa158015612ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee091906148d0565b90506000856003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1690506042600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b8152600401612f8f9291906146dc565b6020604051808303816000875af1158015612fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd2919061434a565b60ff16108015612fe55750600060ff1681145b1561315757604051806060016040528060ff8016815260200160ff8016815260200160048081111561301a57613019613428565b5b8152508660040160008860050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156130b3576130b2613428565b5b021790555090505085600501600081819054906101000a900460ff16809291906130dc9061417b565b91906101000a81548160ff021916908360ff1602179055505060018660050160009054906101000a900460ff1661311391906142c1565b60ff168660030160008781526020019081526020016000206000868152602001908152602001600020600101846004811061315157613150613fbc565b5b01819055505b50505b808061316590614049565b915050612dd9565b505b808061317a90614049565b915050612d88565b50808061318e90614049565b915050612d7c565b5050565b600033905090565b6040518060c00160405280600060048111156131c1576131c0613428565b5b815260200160008152602001600060ff168152602001600060ff1681526020016000151581526020016000151581525090565b6040518060c00160405280600060ff168152602001600060ff16815260200161321b61332e565b81526020016000151581526020016000151581526020016000151581525090565b6040518060600160405280600060ff168152602001600060ff1681526020016000600481111561326f5761326e613428565b5b81525090565b82600481019282156132a1579182015b828111156132a0578254825591600101919060010190613285565b5b5090506132ae9190613350565b5090565b604051806101600160405280600b905b6132ca61336d565b8152602001906001900390816132c25790505090565b604051806103c00160405280601e905b6132f861330e565b8152602001906001900390816132f05790505090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600490602082028036833780820191505090505090565b5b80821115613369576000816000905550600101613351565b5090565b604051806101600160405280600b90602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b6133b28161339f565b81146133bd57600080fd5b50565b6000813590506133cf816133a9565b92915050565b6000806000606084860312156133ee576133ed61339a565b5b60006133fc868287016133c0565b935050602061340d868287016133c0565b925050604061341e868287016133c0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061346857613467613428565b5b50565b600081905061347982613457565b919050565b60006134898261346b565b9050919050565b6134998161347e565b82525050565b6134a88161339f565b82525050565b600060ff82169050919050565b6134c4816134ae565b82525050565b60008115159050919050565b6134df816134ca565b82525050565b60c0820160008201516134fb6000850182613490565b50602082015161350e602085018261349f565b50604082015161352160408501826134bb565b50606082015161353460608501826134bb565b50608082015161354760808501826134d6565b5060a082015161355a60a08501826134d6565b50505050565b600060c08201905061357560008301846134e5565b92915050565b6000602082840312156135915761359061339a565b5b600061359f848285016133c0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060049050919050565b600081905092915050565b6000819050919050565b600061362c838361349f565b60208301905092915050565b6000602082019050919050565b61364e81613600565b613658818461360b565b925061366382613616565b8060005b8381101561369457815161367b8782613620565b965061368683613638565b925050600181019050613667565b505050505050565b610120820160008201516136b360008501826134bb565b5060208201516136c660208501826134bb565b5060408201516136d96040850182613645565b5060608201516136ec60c08501826134d6565b5060808201516136ff60e08501826134d6565b5060a08201516137136101008501826134d6565b50505050565b6000613725838361369c565b6101208301905092915050565b6000602082019050919050565b600061374a826135d4565b61375481856135df565b935061375f836135f0565b8060005b838110156137905781516137778882613719565b975061378283613732565b925050600181019050613763565b5085935050505092915050565b60006137a9838361373f565b905092915050565b6000602082019050919050565b60006137c9826135a8565b6137d381856135b3565b9350836020820285016137e5856135c4565b8060005b858110156138215784840389528151613802858261379d565b945061380d836137b1565b925060208a019950506001810190506137e9565b50829750879550505050505092915050565b6000602082019050818103600083015261384d81846137be565b905092915050565b61385e816134ca565b82525050565b60006020820190506138796000830184613855565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006138c46138bf6138ba8461387f565b61389f565b61387f565b9050919050565b60006138d6826138a9565b9050919050565b60006138e8826138cb565b9050919050565b6138f8816138dd565b82525050565b600060208201905061391360008301846138ef565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6005811061395657613955613428565b5b50565b600081905061396782613945565b919050565b600061397782613959565b9050919050565b6139878161396c565b82525050565b6060820160008201516139a360008501826134bb565b5060208201516139b660208501826134bb565b5060408201516139c9604085018261397e565b50505050565b60006139db838361398d565b60608301905092915050565b6000602082019050919050565b60006139ff82613919565b613a098185613924565b9350613a1483613935565b8060005b83811015613a45578151613a2c88826139cf565b9750613a37836139e7565b925050600181019050613a18565b5085935050505092915050565b60006020820190508181036000830152613a6c81846139f4565b905092915050565b60008060008060808587031215613a8e57613a8d61339a565b5b6000613a9c878288016133c0565b9450506020613aad878288016133c0565b9350506040613abe878288016133c0565b9250506060613acf878288016133c0565b91505092959194509250565b606082016000820151613af160008501826134bb565b506020820151613b0460208501826134bb565b506040820151613b17604085018261397e565b50505050565b6000606082019050613b326000830184613adb565b92915050565b613b41816134ae565b82525050565b604082016000820151613b5d60008501826134bb565b506020820151613b7060208501826134bb565b50505050565b6000608082019050613b8b6000830186613b38565b613b986020830185613b38565b613ba56040830184613b47565b949350505050565b6000613bb88261387f565b9050919050565b613bc881613bad565b8114613bd357600080fd5b50565b600081359050613be581613bbf565b92915050565b600080600060608486031215613c0457613c0361339a565b5b6000613c1286828701613bd6565b9350506020613c2386828701613bd6565b9250506040613c3486828701613bd6565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c082016000820151613c806000850182613490565b506020820151613c93602085018261349f565b506040820151613ca660408501826134bb565b506060820151613cb960608501826134bb565b506080820151613ccc60808501826134d6565b5060a0820151613cdf60a08501826134d6565b50505050565b6000613cf18383613c6a565b60c08301905092915050565b6000602082019050919050565b6000613d1582613c3e565b613d1f8185613c49565b9350613d2a83613c5a565b8060005b83811015613d5b578151613d428882613ce5565b9750613d4d83613cfd565b925050600181019050613d2e565b5085935050505092915050565b60006020820190508181036000830152613d828184613d0a565b905092915050565b613d9381613bad565b82525050565b6000602082019050613dae6000830184613d8a565b92915050565b60058110613dc157600080fd5b50565b600081359050613dd381613db4565b92915050565b600080600080600060a08688031215613df557613df461339a565b5b6000613e03888289016133c0565b9550506020613e14888289016133c0565b9450506040613e25888289016133c0565b9350506060613e36888289016133c0565b9250506080613e4788828901613dc4565b9150509295509295909350565b6000613e5f826138cb565b9050919050565b613e6f81613e54565b82525050565b6000602082019050613e8a6000830184613e66565b92915050565b613e998161339f565b82525050565b6000602082019050613eb46000830184613e90565b92915050565b600060208284031215613ed057613ecf61339a565b5b6000613ede84828501613bd6565b91505092915050565b6000613ef2826138cb565b9050919050565b613f0281613ee7565b82525050565b6000602082019050613f1d6000830184613ef9565b92915050565b61012082016000820151613f3a60008501826134bb565b506020820151613f4d60208501826134bb565b506040820151613f606040850182613645565b506060820151613f7360c08501826134d6565b506080820151613f8660e08501826134d6565b5060a0820151613f9a6101008501826134d6565b50505050565b600061012082019050613fb66000830184613f23565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006140548261339f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140875761408661401a565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b60006140d9601183614092565b91506140e4826140a3565b602082019050919050565b60006020820190508181036000830152614108816140cc565b9050919050565b7f4f6e6c792067616d6520636f6e74726163742063616e20757365000000000000600082015250565b6000614145601a83614092565b91506141508261410f565b602082019050919050565b6000602082019050818103600083015261417481614138565b9050919050565b6000614186826134ae565b915060ff82141561419a5761419961401a565b5b600182019050919050565b60006141b08261339f565b91506141bb8361339f565b9250828210156141ce576141cd61401a565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614235602683614092565b9150614240826141d9565b604082019050919050565b6000602082019050818103600083015261426481614228565b9050919050565b60006142768261339f565b91506142818361339f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142b6576142b561401a565b5b828201905092915050565b60006142cc826134ae565b91506142d7836134ae565b9250828210156142ea576142e961401a565b5b828203905092915050565b600060408201905061430a6000830185613b38565b6143176020830184613b38565b9392505050565b614327816134ae565b811461433257600080fd5b50565b6000815190506143448161431e565b92915050565b6000602082840312156143605761435f61339a565b5b600061436e84828501614335565b91505092915050565b6000614382826134ae565b915061438d836134ae565b92508260ff038211156143a3576143a261401a565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006143e4602083614092565b91506143ef826143ae565b602082019050919050565b60006020820190508181036000830152614413816143d7565b9050919050565b600081519050614429816133a9565b92915050565b6000602082840312156144455761444461339a565b5b60006144538482850161441a565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b61447b82614461565b810181811067ffffffffffffffff8211171561449a57614499613feb565b5b80604052505050565b60006144ad613390565b90506144b98282614472565b919050565b600581106144cb57600080fd5b50565b6000815190506144dd816144be565b92915050565b6144ec816134ca565b81146144f757600080fd5b50565b600081519050614509816144e3565b92915050565b600060c082840312156145255761452461445c565b5b61452f60c06144a3565b9050600061453f848285016144ce565b60008301525060206145538482850161441a565b602083015250604061456784828501614335565b604083015250606061457b84828501614335565b606083015250608061458f848285016144fa565b60808301525060a06145a3848285016144fa565b60a08301525092915050565b600060c082840312156145c5576145c461339a565b5b60006145d38482850161450f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006146168261339f565b91506146218361339f565b925082614631576146306145dc565b5b828204905092915050565b60006146478261339f565b9150600082141561465b5761465a61401a565b5b600182039050919050565b6000819050919050565b600061468b61468661468184614666565b61389f565b6134ae565b9050919050565b61469b81614670565b82525050565b6000819050919050565b60006146c66146c16146bc846146a1565b61389f565b6134ae565b9050919050565b6146d6816146ab565b82525050565b60006040820190506146f16000830185614692565b6146fe60208301846146cd565b9392505050565b6000819050919050565b600061472a61472561472084614705565b61389f565b6134ae565b9050919050565b61473a8161470f565b82525050565b60006040820190506147556000830185614692565b6147626020830184614731565b9392505050565b6000819050919050565b600061477e82614769565b91507f80000000000000000000000000000000000000000000000000000000000000008214156147b1576147b061401a565b5b600182039050919050565b60006147c782614769565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147fa576147f961401a565b5b600182019050919050565b600060808201905061481a6000830185613b47565b6148276040830184613b47565b9392505050565b60006040820190506148436000830185614692565b6148506020830184613b38565b9392505050565b600060608201905061486c6000830185613e90565b6148796020830184613b47565b9392505050565b6000604082840312156148965761489561445c565b5b6148a060406144a3565b905060006148b084828501614335565b60008301525060206148c484828501614335565b60208301525092915050565b6000604082840312156148e6576148e561339a565b5b60006148f484828501614880565b9150509291505056fea26469706673582212204e28638d8f285b7610e023164cecdb660a5f8045b80362c6d2174e965831072864736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5419,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "game",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GameInterface)5349"
      },
      {
        "astId": 5422,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)5414"
      },
      {
        "astId": 5425,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomTiles",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(RoomTileInterface)5363"
      },
      {
        "astId": 5459,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "gameTiles",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(GameTile)6972_storage)dyn_storage"
      },
      {
        "astId": 5463,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "maps",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Map)7009_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(GameTile)6972_storage)dyn_storage": {
        "base": "t_struct(GameTile)6972_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.GameTile[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Map)7009_storage)dyn_storage": {
        "base": "t_struct(Map)7009_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Map[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameInterface)5349": {
        "encoding": "inplace",
        "label": "contract GameInterface",
        "numberOfBytes": "20"
      },
      "t_contract(RoomTileInterface)5363": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)5414": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)7042": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DoorStatus)6896": {
        "encoding": "inplace",
        "label": "enum BCTypes.DoorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)6972_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BCTypes.GameTile))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GameTile)6972_storage)"
      },
      "t_mapping(t_uint256,t_struct(Door)6980_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.Door)",
        "numberOfBytes": "32",
        "value": "t_struct(Door)6980_storage"
      },
      "t_mapping(t_uint256,t_struct(GameTile)6972_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.GameTile)",
        "numberOfBytes": "32",
        "value": "t_struct(GameTile)6972_storage"
      },
      "t_mapping(t_uint256,t_struct(RoomTile)7056_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.RoomTile)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomTile)7056_storage"
      },
      "t_struct(Door)6980_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Door",
        "members": [
          {
            "astId": 6974,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsBreach",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6976,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsHack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6979,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "status",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(DoorStatus)6896"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameTile)6972_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.GameTile",
        "members": [
          {
            "astId": 6959,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6961,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "parentId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6965,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 6967,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "explored",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 6969,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "looted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 6971,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasVent",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)7009_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Map",
        "members": [
          {
            "astId": 6985,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomList",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RoomTile)7056_storage)"
          },
          {
            "astId": 6987,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numRooms",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 6991,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "usedRooms",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 6998,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "board",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)6972_storage))"
          },
          {
            "astId": 7003,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Door)6980_storage)"
          },
          {
            "astId": 7005,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numDoors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 7008,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "startPosition",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Position)6957_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Position)6957_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 6954,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6956,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoomTile)7056_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.RoomTile",
        "members": [
          {
            "astId": 7045,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BCEventType)7042"
          },
          {
            "astId": 7047,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7049,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numItems",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 7051,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numData",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 7053,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasHazard",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7055,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "sigDetected",
            "offset": 3,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}