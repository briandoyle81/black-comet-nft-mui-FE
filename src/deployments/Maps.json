{
  "address": "0x6FB81Dd04E86a3095414C621457B3eCb4A8b3A59",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "debugBuildMapOneRoom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "debugForceRoomId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "discoverRoom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetDoors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetGameTile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasHazard",
          "type": "bool"
        }
      ],
      "name": "extSetHazardStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distance",
          "type": "uint256"
        }
      ],
      "name": "extSpreadHazards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "contract GameInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "getDoor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maps",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numRooms",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numDoors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "startPosition",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "resetOpenDoors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roomTilesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DoorStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setDoorFromPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "setLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb797ec0010086c757ca4abf2846f409ba6ccf75fa8d13cc46e2321c25383b113",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0x6FB81Dd04E86a3095414C621457B3eCb4A8b3A59",
    "transactionIndex": 10,
    "gasUsed": "5374579",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008000000000008000000000009000000000000000000000000000000000800021000000000000200100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000400000000000000000000020000000000000000000000000000200000000000000000080000000000000000000000000000000000000000004000000000000000000001000000000100000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x4cf4320e839518700201d2b72df03bfd45fb59437ccc722e7454453f723cf286",
    "transactionHash": "0xb797ec0010086c757ca4abf2846f409ba6ccf75fa8d13cc46e2321c25383b113",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 29249956,
        "transactionHash": "0xb797ec0010086c757ca4abf2846f409ba6ccf75fa8d13cc46e2321c25383b113",
        "address": "0x6FB81Dd04E86a3095414C621457B3eCb4A8b3A59",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x4cf4320e839518700201d2b72df03bfd45fb59437ccc722e7454453f723cf286"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 29249956,
        "transactionHash": "0xb797ec0010086c757ca4abf2846f409ba6ccf75fa8d13cc46e2321c25383b113",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001f81730a44434c00000000000000000000000000000000000000000000000007cb5b3f343ee78c0000000000000000000000000000000000000000000000011d626a6c6b65239f00000000000000000000000000000000000000000000000007abd9cc29faa4400000000000000000000000000000000000000000000000011d81ebdf75a966eb",
        "logIndex": 22,
        "blockHash": "0x4cf4320e839518700201d2b72df03bfd45fb59437ccc722e7454453f723cf286"
      }
    ],
    "blockNumber": 29249956,
    "cumulativeGasUsed": "9380268",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9b86c8b8137dd07133ca83918693cba3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"debugBuildMapOneRoom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"debugForceRoomId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"discoverRoom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetDoors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetGameTile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomById\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomList\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasHazard\",\"type\":\"bool\"}],\"name\":\"extSetHazardStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distance\",\"type\":\"uint256\"}],\"name\":\"extSpreadHazards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contract GameInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"getDoor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numRooms\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numDoors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"startPosition\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"resetOpenDoors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roomTilesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setDoorFromPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"setLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCMaps.sol\":\"Maps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BCMaps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// TODO: Eval putting constants in a separate file that is imported/shared\\nuint constant BOARD_SIZE = 11;\\nuint constant VENT_CHANCE = 33;\\nuint constant WINDOW_CHANCE = 66;\\nuint constant DOOR_CHANCE = 66;\\nuint constant DOOR_MOD_STEP = 22;\\nuint8 constant MAX_DOOR_STR = 3;\\n\\nuint constant START_ROOM_ID = 2; // TODO: Possibility of more than one start room?\\nuint8 constant UNDISCOVERED_ROOM = 1;\\nuint8 constant SPACE_ROOM = 0;\\n\\ninterface GameInterface {\\n\\n}\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n    function opposite(uint _direction) external pure returns (uint);\\n}\\n\\ncontract Maps is Ownable {\\n\\n    GameInterface public game;\\n    UtilsInterface public utils;\\n    RoomTileInterface public roomTiles;\\n\\n    address public actionsAddress;\\n\\n    function setContractAddresses(\\n        address _gameAddress,\\n        address _utilsAddress,\\n        address _roomTilesAddress,\\n        address _actionsAddress\\n        ) public onlyOwner {\\n        game = GameInterface(_gameAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        roomTiles = RoomTileInterface(_roomTilesAddress);\\n        actionsAddress = _actionsAddress;\\n    }\\n\\n    // TODO: This array is here just to support making an empty one to put in the mapping\\n    BCTypes.GameTile[] private gameTiles;\\n    BCTypes.Map[] public maps;\\n\\n    // TODO: System for options like static start and debug maps for testing\\n    function createMap() public returns (uint) {\\n        require(msg.sender == address(game), \\\"Only game contract can use\\\");\\n\\n        BCTypes.Map storage newMap = maps.push();\\n\\n        // Get the room list and save the number of rooms\\n        newMap.numRooms = uint8(_setGameRoomTiles(newMap.roomList));\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        _staticStart(newMap);\\n        _buildMap(newMap);\\n        _addWindows(newMap);\\n\\n        // Return the map id for the games contract\\n        return maps.length-1;\\n    }\\n\\n    // TODO: Is there any reason NOT to just always place start bottom center???\\n    function _staticStart(BCTypes.Map storage _newMap) internal {\\n        BCTypes.GameTile storage startTile = gameTiles.push(); // TODO: Can I make an empty one and reference it this way without the array?\\n\\n        uint startRow = BOARD_SIZE-1;\\n        uint startCol = (BOARD_SIZE/2)+1;\\n\\n        _newMap.startPosition = BCTypes.Position(uint8(startRow), uint8(startCol));\\n        _newMap.board[startRow][startCol] = startTile;\\n    }\\n\\n    function _addWindows(BCTypes.Map storage _newMap) internal {\\n        for(uint row = 0; row < BOARD_SIZE; row++){\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                if(_newMap.board[row][col].roomId == UNDISCOVERED_ROOM) {\\n                    for (uint i = 0; i < 4; i++) {\\n                        // Position memory neighbor = utils.getNeighborRoom(i, Position(uint8(row), uint8(col)));\\n                        if (_newMap.board[row][col].doors[i] == 0) {\\n                                BCTypes.Position memory neighborPos = utils.getNeighborRoom(i, BCTypes.Position(uint8(row), uint8(col)));\\n                                uint neighborId = _newMap.board[neighborPos.row][neighborPos.col].roomId;\\n                                if (utils.smallIntBetweenVals(0, 99) < WINDOW_CHANCE && neighborId == SPACE_ROOM) {\\n                                    _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                                    255,\\n                                    255,\\n                                    BCTypes.DoorStatus.WINDOW);\\n                                    _newMap.numDoors++;\\n                                    _newMap.board[row][col].doors[i] = _newMap.numDoors-1; // -1 for correct index\\n                                    // TODO: Conform that neighbor doesn't need this door/window\\n                                }\\n                            }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _buildMap(BCTypes.Map storage _newMap) internal {\\n        uint stackCount = 0;\\n        uint numToPlace = _newMap.numRooms - 2; // -1 for space and -1 for empty room\\n\\n        uint availableDoors = 1; // Start with 1 because tracking is done in the pop current phase\\n\\n        uint doorModifier = 0;\\n\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_newMap.startPosition.row][_newMap.startPosition.col] = true;\\n\\n        BCTypes.Position[30] memory stack; // TODO: Write a stack library? // TODO: This can probably be 27\\n        stack[stackCount] = _newMap.startPosition; // Start by enstacking the Donghaijiu location\\n        stackCount++;\\n\\n        while (numToPlace > 0 && stackCount > 0) { // TODO: Need to track stack count to avoid crash on error if all rooms not placed\\n            // Pop the top item from the stack\\n            BCTypes.Position memory current = stack[stackCount-1];\\n            stackCount--;\\n            delete stack[stackCount]; // TODO: Confirm utility of deleting\\n\\n            numToPlace--;\\n            availableDoors--;\\n\\n            _newMap.board[current.row][current.col].roomId = UNDISCOVERED_ROOM;\\n\\n            // Add vent\\n            if (utils.smallIntBetweenVals(0, 99) < VENT_CHANCE) {\\n                _newMap.board[current.row][current.col].hasVent = true;\\n            }\\n\\n            // Also ugly but fighting stack limit\\n            uint[4] memory order = [uint(0), 1, 2, 3];\\n\\n            // Fischer-Yates shuffle to avoid direction bias in room placement\\n            for (uint i = order.length-1; i > 0; i--) {\\n                uint8 k = utils.smallIntBetweenVals(0, uint8(i));\\n\\n                (order[i], order[k]) = (order[k], order[i]);\\n            }\\n\\n            for (uint i = 0; i < order.length; i++) {\\n                int newRow = int8(current.row);\\n                int newCol = int8(current.col);\\n\\n                if(order[i] == 0) {\\n                    newRow--;\\n                } else if (order[i] == 1) {\\n                    newRow++;\\n                } else if (order[i] == 2) {\\n                    newCol++;\\n                } else if (order[i] == 3) {\\n                    newCol--;\\n                }\\n\\n                // Stay in bounds, reserving outside edge for Donghaijiu only\\n                if (newRow < 1 ||\\n                    newCol < 1 ||\\n                    newRow > int(BOARD_SIZE-2) ||\\n                    newCol > int(BOARD_SIZE-2)) {\\n                        continue;\\n                }\\n                BCTypes.Position memory neighbor = BCTypes.Position(uint8(int8(newRow)), uint8(int8(newCol)));\\n                                                                    // Hideous but hashtag #stacklimit\\n                if (found[neighbor.row][neighbor.col] == false || _newMap.board[current.row][current.col].doors[utils.getDirectionBetween(current, neighbor)] == 0) {\\n                    if (availableDoors == 0 || utils.smallIntBetweenVals(0, 99) < DOOR_CHANCE - doorModifier) {\\n                        _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                        utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        BCTypes.DoorStatus.CLOSED);\\n                        // Pre-breach doors with strength 0\\n                        if (_newMap.doors[_newMap.numDoors].vsBreach == 0) {\\n                            _newMap.doors[_newMap.numDoors].status = BCTypes.DoorStatus.BREACHED;\\n                        }\\n                        _newMap.numDoors++;\\n\\n                        doorModifier += DOOR_MOD_STEP;\\n                        // Prevent negative uint in DOOR_CHANCE - doorModifier\\n                        if (doorModifier > DOOR_CHANCE) {\\n                            doorModifier = DOOR_CHANCE;\\n                        }\\n\\n                        // Only enstack if we haven't found this one yet\\n                        // Otherwise it will overwrite existing tiles\\n                        if (found[neighbor.row][neighbor.col] == false) {\\n                            stack[stackCount] = neighbor;\\n                            stackCount++;\\n                            availableDoors++;\\n\\n                            found[neighbor.row][neighbor.col] = true;\\n                        }\\n\\n                        // Add the door if one isn't present already\\n                        // TODO: Check may be unnecessary\\n                        if(_newMap.board[current.row][current.col].doors[order[i]] == 0) {\\n                            _newMap.board[current.row][current.col].doors[order[i]] = _newMap.numDoors-1;\\n                            _newMap.board[neighbor.row][neighbor.col].doors[utils.opposite(order[i])] = _newMap.numDoors-1;\\n                        }\\n                    } else {\\n                        doorModifier = 0;\\n                    }\\n                }\\n\\n            }\\n            // Detect mapgen stuck and reset by adding a new valid room in the stack\\n        }\\n        // Cleanup Tasks\\n\\n        // TODO Detect and prevent failure to deploy all tiles\\n\\n        // require(numToPlace == 0, \\\"Error: Bad mapgen.  Unplaced rooms\\\");\\n\\n        // Reset Donghaijiu ID (Was changed by map building)\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].roomId = uint8(START_ROOM_ID);\\n\\n        // Set the first door placed to breached, this is the entrance\\n        _newMap.doors[1].status = BCTypes.DoorStatus.BREACHED;\\n\\n        // TODO: Add signature detected\\n    }\\n\\n    function _setGameRoomTiles(mapping (uint => BCTypes.RoomTile) storage _roomList) internal returns (uint) {\\n        uint number = roomTiles.getNumRoomTiles();\\n        for(uint i = 0; i < number; i++) {\\n            _roomList[i] = roomTiles.extGetRoomTile(i);\\n        }\\n        return number;\\n    }\\n\\n    function extGetBoard(uint _mapId) public view returns (BCTypes.GameTile[][] memory) {\\n        BCTypes.GameTile[][] memory board = new BCTypes.GameTile[][](BOARD_SIZE);\\n        for (uint i = 0; i < BOARD_SIZE; i++) {\\n            board[i] = new BCTypes.GameTile[](BOARD_SIZE);\\n        }\\n\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                board[row][col] = maps[_mapId].board[row][col];\\n            }\\n        }\\n\\n        return board;\\n    }\\n\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) public view returns (BCTypes.GameTile memory) {\\n        return maps[_mapId].board[_row][_col];\\n    }\\n\\n    function extGetRoomList(uint _mapId) public view returns (BCTypes.RoomTile[] memory) {\\n        BCTypes.RoomTile[] memory roomList = new BCTypes.RoomTile[](maps[_mapId].numRooms);\\n        for (uint i = 0; i < roomList.length; i++) {\\n            roomList[i] = maps[_mapId].roomList[i];\\n        }\\n        return roomList;\\n    }\\n\\n    function extGetRoom(uint _mapId, uint _row, uint _col) public view returns(BCTypes.RoomTile memory) {\\n        return maps[_mapId].roomList[maps[_mapId].board[_row][_col].roomId];\\n    }\\n\\n    function extGetRoomById(uint _mapId, uint _roomId) public view returns (BCTypes.RoomTile memory) {\\n        return maps[_mapId].roomList[_roomId];\\n    }\\n\\n    function extGetDoors(uint _mapId) public view returns (BCTypes.Door[] memory) {\\n        BCTypes.Door[] memory doors = new BCTypes.Door[](maps[_mapId].numDoors);\\n        for (uint i = 0; i < doors.length; i++) {\\n            doors[i] = maps[_mapId].doors[i];\\n        }\\n\\n        return doors;\\n    }\\n\\n    // TODO:  These need to validate that this is the right version of BCMaps\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) public view returns (BCTypes.Door memory){\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        return maps[_mapId].doors[currentRoomDoors[_direction]];\\n    }\\n\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) public {\\n        require((msg.sender == address(game) || msg.sender == actionsAddress), \\\"Not allowed contract\\\");\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        BCTypes.Door storage currentDoor = maps[_mapId].doors[currentRoomDoors[_direction]];\\n        currentDoor.status = _status;\\n    }\\n\\n    function setLooted(uint _mapId, uint _row, uint _col) public {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract\\\");\\n        maps[_mapId].board[_row][_col].looted = true;\\n    }\\n\\n    function extSetHazardStatus(uint _mapId, uint _row, uint _col, bool _hasHazard) public {\\n        require(msg.sender == address(game), \\\"Not games contract\\\");\\n        _setHazardStatus(_mapId, _row, _col, _hasHazard);\\n    }\\n\\n    function _setHazardStatus(uint _mapId, uint _row, uint _col, bool _hasHazard) internal {\\n        maps[_mapId].board[_row][_col].hasHazard = _hasHazard;\\n    }\\n\\n    function extSpreadHazards(uint _mapId, uint _distance) public {\\n        // TODO: CRITICAL -> this is untested\\n        require(msg.sender == address(game), \\\"Not games contract\\\");\\n        bool[BOARD_SIZE][BOARD_SIZE] memory buffer;\\n\\n        for(uint times = 0; times < _distance; times++) {\\n            for(uint row = 0; row < BOARD_SIZE; row++) {\\n                for(uint col = 0; col < BOARD_SIZE; col++) {\\n                    buffer[row][col] = maps[_mapId].board[row][col].hasHazard;\\n                }\\n            }\\n\\n            for(uint row = 0; row < BOARD_SIZE; row++) {\\n                for(uint col = 0; col < BOARD_SIZE; col++) {\\n                    for(uint dir = 0; dir < 4; dir++) {\\n                        uint doorId = maps[_mapId].board[row][col].doors[dir];\\n                        BCTypes.DoorStatus doorStatus = maps[_mapId].doors[doorId].status;\\n                        if(doorStatus == BCTypes.DoorStatus.OPEN || doorStatus == BCTypes.DoorStatus.BREACHED) {\\n                            if(row == 0 && dir == 0) {\\n                                continue;\\n                            }\\n                            if (row == BOARD_SIZE-1 && dir == 1) {\\n                                continue;\\n                            }\\n                            if(col == 0 && dir == 3) {\\n                                continue;\\n                            }\\n                            if(col == BOARD_SIZE-1 && dir == 2) {\\n                                continue;\\n                            }\\n                            BCTypes.Position memory neighborPos = utils.getNeighborRoom(dir, BCTypes.Position(uint8(row), uint8(col)));\\n                            BCTypes.GameTile storage neighbor = maps[_mapId].board[neighborPos.row][neighborPos.col];\\n                            if(neighbor.roomId != SPACE_ROOM && neighbor.roomId != START_ROOM_ID) {\\n                                neighbor.hasHazard = true;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n\\n    function resetOpenDoors(uint _mapId) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        for (uint i = 0; i < maps[_mapId].numDoors; i++) {\\n            if (maps[_mapId].doors[i].status == BCTypes.DoorStatus.OPEN) {\\n                maps[_mapId].doors[i].status = BCTypes.DoorStatus.CLOSED;\\n            }\\n        }\\n    }\\n\\n    function _getUnusedRoomId(BCTypes.Map storage _map) internal returns (uint8) {\\n        // TODO: Explore other ways of doing use once\\n        uint8 roomId = utils.smallIntBetweenVals(uint8(START_ROOM_ID+1), _map.numRooms-1);\\n\\n        while (_map.usedRooms[roomId] == true) {\\n            if (roomId == _map.numRooms-1) {\\n                roomId = uint8(START_ROOM_ID) + 1; // TODO: Semi-Hardcoded to account for empty and donghaijiu\\n            } else {\\n                roomId++;\\n            }\\n        }\\n        _map.usedRooms[roomId] = true;\\n        return roomId;\\n    }\\n\\n    // Discover a room and return the uint id for that room's event\\n    // Return either the room's number, or 0 to indicate room already discovered\\n    function discoverRoom(uint _mapId, uint _row, uint _col) public returns (uint) {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        BCTypes.GameTile storage gameTile = maps[_mapId].board[_row][_col];\\n        if( gameTile.roomId == UNDISCOVERED_ROOM) {\\n            gameTile.roomId = _getUnusedRoomId(maps[_mapId]);\\n            return gameTile.roomId;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function debugForceRoomId(uint _mapId, uint _row, uint _col, uint _roomId) public onlyOwner {\\n        maps[_mapId].board[_row][_col].roomId = uint8(_roomId);\\n    }\\n\\n    // Used to guarantee discovery of specific room immediately when leaving\\n    function debugBuildMapOneRoom(uint _roomId) public returns(uint) {\\n        require(msg.sender == address(game));\\n\\n        BCTypes.Map storage newMap = maps.push();\\n\\n        newMap.numRooms = 4;\\n        newMap.roomList[0] = roomTiles.extGetRoomTile(0);\\n        newMap.roomList[1] = roomTiles.extGetRoomTile(1);\\n        newMap.roomList[2] = roomTiles.extGetRoomTile(2);\\n        newMap.roomList[3] = roomTiles.extGetRoomTile(_roomId);\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        _staticStart(newMap);\\n\\n        uint startRow = BOARD_SIZE-1;\\n        uint startCol = (BOARD_SIZE/2)+1;\\n\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n            utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n            BCTypes.DoorStatus.BREACHED);\\n\\n        newMap.numDoors++;\\n\\n        newMap.board[startRow][startCol].roomId = uint8(START_ROOM_ID);\\n        newMap.board[startRow-1][startCol].roomId = UNDISCOVERED_ROOM;\\n\\n        newMap.board[startRow][startCol].doors[0] = newMap.numDoors-1;\\n        newMap.board[startRow-1][startCol].doors[1] = newMap.numDoors-1;\\n\\n        return maps.length-1;\\n    }\\n}\\n\",\"keccak256\":\"0x1aec56f1ef86a406cca9131077a50ae8b61137b98cee8dfa39f217ed1ea4da9d\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // WARNING: THIS IS NOT USED CURRENTLY!!! // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead; // TODO: Probably don't need\\n        bool hasEgg;  // TODO: Eval only allowing one egg at a time\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        // TODO:  Either add all events, effects, and traits here, or remove roomList\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        bool eventIsTile;  // TODO: Consider making enum\\n        Position eventPosition;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        // uint roomTileId // TODO: Critical\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x099a3909e28d8c8752cdf0e43d6019f2aabcd302b6acf4c5bbdf858e4a108f14\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806386e529d0116100de578063c3fe3e2811610097578063f2fde38b11610071578063f2fde38b14610472578063f7157f641461048e578063f9dfbfcb146104ac578063fe368d7a146104dc57610173565b8063c3fe3e281461041a578063c6b41b4514610438578063f01fc35a1461045457610173565b806386e529d01461035c5780638af13fd2146103785780638da5cb5b146103a8578063aaa68777146103c6578063b14ca575146103e2578063b6cdd3b4146103fe57610173565b80635a29638d116101305780635a29638d1461028457806369568fd5146102a25780636ea1dcd8146102d2578063715018a61461030257806375990a0e1461030c5780637b45c0d41461033e57610173565b806302861c6c146101785780631ef04416146101a8578063471b6759146101d8578063523814bc14610208578063580582831461023857806358308aa814610268575b600080fd5b610192600480360381019061018d919061482b565b6104f8565b60405161019f91906149a3565b60405180910390f35b6101c260048036038101906101bd91906149be565b61063e565b6040516101cf9190614c8a565b60405180910390f35b6101f260048036038101906101ed919061482b565b6108e4565b6040516101ff9190614cbb565b60405180910390f35b610222600480360381019061021d91906149be565b610a51565b60405161022f9190614cbb565b60405180910390f35b610252600480360381019061024d9190614cd6565b611546565b60405161025f91906149a3565b60405180910390f35b610282600480360381019061027d91906149be565b611631565b005b61028c6117ee565b6040516102999190614d95565b60405180910390f35b6102bc60048036038101906102b791906149be565b611814565b6040516102c99190614ee9565b60405180910390f35b6102ec60048036038101906102e79190614f0b565b6119a0565b6040516102f99190614fb4565b60405180910390f35b61030a611b0a565b005b610326600480360381019061032191906149be565b611b1e565b6040516103359392919061500d565b60405180910390f35b610346611bb6565b6040516103539190615065565b60405180910390f35b6103766004803603810190610371919061482b565b611bdc565b005b610392600480360381019061038d91906149be565b611cd4565b60405161039f9190615197565b60405180910390f35b6103b0611e85565b6040516103bd9190615065565b60405180910390f35b6103e060048036038101906103db91906151e5565b611eae565b005b6103fc60048036038101906103f79190614f0b565b611fc0565b005b61041860048036038101906104139190615271565b612031565b005b610422612229565b60405161042f919061530d565b60405180910390f35b610452600480360381019061044d9190614cd6565b61224f565b005b61045c612747565b6040516104699190614cbb565b60405180910390f35b61048c60048036038101906104879190615328565b612964565b005b6104966129e8565b6040516104a39190615376565b60405180910390f35b6104c660048036038101906104c1919061482b565b612a0e565b6040516104d39190615422565b60405180910390f35b6104f660048036038101906104f1919061546a565b612b5c565b005b6105006145f8565b60068481548110610514576105136154d1565b5b906000526020600020906007020160000160006006868154811061053b5761053a6154d1565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900460ff1660ff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff1660048111156105c0576105bf61487e565b5b60048111156105d2576105d161487e565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff16151515158152505090509392505050565b60606000600b67ffffffffffffffff81111561065d5761065c615500565b5b60405190808252806020026020018201604052801561069057816020015b606081526020019060019003908161067b5790505b50905060005b600b81101561072557600b67ffffffffffffffff8111156106ba576106b9615500565b5b6040519080825280602002602001820160405280156106f357816020015b6106e0614641565b8152602001906001900390816106d85790505b50828281518110610707576107066154d1565b5b6020026020010181905250808061071d9061555e565b915050610696565b5060005b600b8110156108da5760005b600b8110156108c65760068581548110610752576107516154d1565b5b9060005260206000209060070201600301600083815260200190815260200160002060008281526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815260200160018201600480602002604051908101604052809291908260048015610806576020028201915b8154815260200190600101908083116107f2575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff161515151581526020016005820160039054906101000a900460ff16151515158152505083838151811061088e5761088d6154d1565b5b602002602001015182815181106108a8576108a76154d1565b5b602002602001018190525080806108be9061555e565b915050610735565b5080806108d29061555e565b915050610729565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d90615604565b60405180910390fd5b60006006858154811061098c5761098b6154d1565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000209050600160ff168160000160009054906101000a900460ff1660ff161415610a4457610a0b600686815481106109f8576109f76154d1565b5b9060005260206000209060070201612bfe565b8160000160006101000a81548160ff021916908360ff1602179055508060000160009054906101000a900460ff1660ff16915050610a4a565b60009150505b9392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aad57600080fd5b60006006600181600181540180825580915050039060005260206000209060070201905060048160010160006101000a81548160ff021916908360ff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe60006040518263ffffffff1660e01b8152600401610b4b919061565f565b60a060405180830381865afa158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c91906157e3565b81600001600080815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115610bcc57610bcb61487e565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff021916908315150217905550905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe60016040518263ffffffff1660e01b8152600401610c9c919061584b565b60a060405180830381865afa158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd91906157e3565b8160000160006001815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115610d1e57610d1d61487e565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff021916908315150217905550905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe60026040518263ffffffff1660e01b8152600401610dee91906158a1565b60a060405180830381865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f91906157e3565b8160000160006002815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115610e7057610e6f61487e565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff021916908315150217905550905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe846040518263ffffffff1660e01b8152600401610f3f9190614cbb565b60a060405180830381865afa158015610f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8091906157e3565b8160000160006003815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115610fc157610fc061487e565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff021916908315150217905550905050604051806060016040528060ff8016815260200160ff80168152602001600060048111156110665761106561487e565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156110ff576110fe61487e565b5b021790555090505080600501600081819054906101000a900460ff1680929190611128906158bc565b91906101000a81548160ff021916908360ff1602179055505061114a81612d8e565b60006001600b61115a91906158e6565b9050600060016002600b61116e9190615949565b611178919061597a565b90506040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b81526004016111e4929190615a01565b6020604051808303816000875af1158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190615a2a565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b815260040161128e929190615a01565b6020604051808303816000875af11580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d19190615a2a565b60ff168152602001600360048111156112ed576112ec61487e565b5b8152508360040160008560050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156113865761138561487e565b5b021790555090505082600501600081819054906101000a900460ff16809291906113af906158bc565b91906101000a81548160ff021916908360ff160217905550506002836003016000848152602001908152602001600020600083815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550600183600301600060018561142091906158e6565b8152602001908152602001600020600083815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060018360050160009054906101000a900460ff166114789190615a57565b60ff1683600301600084815260200190815260200160002060008381526020019081526020016000206001016000600481106114b7576114b66154d1565b5b018190555060018360050160009054906101000a900460ff166114da9190615a57565b60ff168360030160006001856114f091906158e6565b81526020019081526020016000206000838152602001908152602001600020600101600160048110611525576115246154d1565b5b0181905550600160068054905061153c91906158e6565b9350505050919050565b61154e6145f8565b60068381548110611562576115616154d1565b5b906000526020600020906007020160000160008381526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff1660048111156115b4576115b361487e565b5b60048111156115c6576115c561487e565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581525050905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b890615604565b60405180910390fd5b60005b600682815481106116d8576116d76154d1565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff168110156117ea57600260048111156117155761171461487e565b5b60068381548110611729576117286154d1565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff16600481111561176e5761176d61487e565b5b14156117d75760016006838154811061178a576117896154d1565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160026101000a81548160ff021916908360048111156117d1576117d061487e565b5b02179055505b80806117e29061555e565b9150506116c4565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060006006838154811061182c5761182b6154d1565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff1667ffffffffffffffff81111561186757611866615500565b5b6040519080825280602002602001820160405280156118a057816020015b61188d614692565b8152602001906001900390816118855790505b50905060005b815181101561199657600684815481106118c3576118c26154d1565b5b906000526020600020906007020160040160008281526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff16600481111561194f5761194e61487e565b5b60048111156119615761196061487e565b5b81525050828281518110611978576119776154d1565b5b6020026020010181905250808061198e9061555e565b9150506118a6565b5080915050919050565b6119a8614692565b6000600686815481106119be576119bd6154d1565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015611a2b576020028201915b815481526020019060010190808311611a17575b5050505050905060068681548110611a4657611a456154d1565b5b90600052602060002090600702016004016000828560048110611a6c57611a6b6154d1565b5b602002015181526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115611ae957611ae861487e565b5b6004811115611afb57611afa61487e565b5b81525050915050949350505050565b611b12612f9d565b611b1c600061301b565b565b60068181548110611b2e57600080fd5b90600052602060002090600702016000915090508060010160009054906101000a900460ff16908060050160009054906101000a900460ff1690806006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050905083565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6390615ad7565b60405180910390fd5b600160068481548110611c8257611c816154d1565b5b90600052602060002090600702016003016000848152602001908152602001600020600083815260200190815260200160002060050160016101000a81548160ff021916908315150217905550505050565b6060600060068381548110611cec57611ceb6154d1565b5b906000526020600020906007020160010160009054906101000a900460ff1660ff1667ffffffffffffffff811115611d2757611d26615500565b5b604051908082528060200260200182016040528015611d6057816020015b611d4d6145f8565b815260200190600190039081611d455790505b50905060005b8151811015611e7b5760068481548110611d8357611d826154d1565b5b906000526020600020906007020160000160008281526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff166004811115611dd557611dd461487e565b5b6004811115611de757611de661487e565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581525050828281518110611e5d57611e5c6154d1565b5b60200260200101819052508080611e739061555e565b915050611d66565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611eb6612f9d565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611fc8612f9d565b8060068581548110611fdd57611fdc6154d1565b5b90600052602060002090600702016003016000858152602001908152602001600020600084815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806120da5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612119576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211090615b43565b60405180910390fd5b60006006868154811061212f5761212e6154d1565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060010160048060200260405190810160405280929190826004801561219c576020028201915b815481526020019060010190808311612188575b505050505090506000600687815481106121b9576121b86154d1565b5b906000526020600020906007020160040160008386600481106121df576121de6154d1565b5b602002015181526020019081526020016000209050828160000160026101000a81548160ff0219169083600481111561221b5761221a61487e565b5b021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d690615baf565b60405180910390fd5b6122e76146cb565b60005b828110156127415760005b600b8110156123c25760005b600b8110156123ae576006868154811061231e5761231d6154d1565b5b90600052602060002090600702016003016000838152602001908152602001600020600082815260200190815260200160002060050160039054906101000a900460ff168483600b8110612375576123746154d1565b5b602002015182600b811061238c5761238b6154d1565b5b60200201901515908115158152505080806123a69061555e565b915050612301565b5080806123ba9061555e565b9150506122f5565b5060005b600b81101561272d5760005b600b8110156127195760005b6004811015612705576000600688815481106123fd576123fc6154d1565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000206001018260048110612445576124446154d1565b5b0154905060006006898154811061245f5761245e6154d1565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff169050600260048111156124a8576124a761487e565b5b8160048111156124bb576124ba61487e565b5b14806124eb5750600360048111156124d6576124d561487e565b5b8160048111156124e9576124e861487e565b5b145b156126ef576000851480156125005750600083145b1561250c5750506126f2565b6001600b61251a91906158e6565b851480156125285750600183145b156125345750506126f2565b6000841480156125445750600383145b156125505750506126f2565b6001600b61255e91906158e6565b8414801561256c5750600283145b156125785750506126f2565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8560405180604001604052808a60ff1681526020018960ff168152506040518363ffffffff1660e01b81526004016125f1929190615bcf565b6040805180830381865afa15801561260d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126319190615c48565b9050600060068b81548110612649576126486154d1565b5b90600052602060002090600702016003016000836000015160ff1681526020019081526020016000206000836020015160ff1681526020019081526020016000209050600060ff168160000160009054906101000a900460ff1660ff16141580156126c9575060028160000160009054906101000a900460ff1660ff1614155b156126ec5760018160050160036101000a81548160ff0219169083151502179055505b50505b50505b80806126fd9061555e565b9150506123de565b5080806127119061555e565b9150506123d2565b5080806127259061555e565b9150506123c6565b5080806127399061555e565b9150506122ea565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d090615cc1565b60405180910390fd5b600060066001816001815401808255809150500390600052602060002090600702019050612809816000016130df565b8160010160006101000a81548160ff021916908360ff160217905550604051806060016040528060ff8016815260200160ff80168152602001600060048111156128565761285561487e565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156128ef576128ee61487e565b5b021790555090505080600501600081819054906101000a900460ff1680929190612918906158bc565b91906101000a81548160ff021916908360ff1602179055505061293a81612d8e565b612943816132ea565b61294c81614167565b600160068054905061295e91906158e6565b91505090565b61296c612f9d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d390615d53565b60405180910390fd5b6129e58161301b565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612a16614641565b60068481548110612a2a57612a296154d1565b5b9060005260206000209060070201600301600084815260200190815260200160002060008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815260200160018201600480602002604051908101604052809291908260048015612ade576020028201915b815481526020019060010190808311612aca575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff161515151581526020016005820160039054906101000a900460ff16151515158152505090509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be390615baf565b60405180910390fd5b612bf884848484614588565b50505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f60016002612c4d919061597a565b60018660010160009054906101000a900460ff16612c6b9190615a57565b6040518363ffffffff1660e01b8152600401612c88929190615d73565b6020604051808303816000875af1158015612ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccb9190615a2a565b90505b600115158360020160008360ff16815260200190815260200160002060009054906101000a900460ff1615151415612d545760018360010160009054906101000a900460ff16612d1e9190615a57565b60ff168160ff161415612d405760016002612d399190615d9c565b9050612d4f565b8080612d4b906158bc565b9150505b612cce565b60018360020160008360ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050919050565b60006005600181600181540180825580915050039060005260206000209060060201905060006001600b612dc291906158e6565b9050600060016002600b612dd69190615949565b612de0919061597a565b905060405180604001604052808360ff1681526020018260ff168152508460060160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050508284600301600084815260200190815260200160002060008381526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff1602179055506000820160019054906101000a900460ff168160000160016101000a81548160ff021916908360ff1602179055506001820181600101906004612edf9291906146f9565b506005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506005820160029054906101000a900460ff168160050160026101000a81548160ff0219169083151502179055506005820160039054906101000a900460ff168160050160036101000a81548160ff02191690831515021790555090505050505050565b612fa56145f0565b73ffffffffffffffffffffffffffffffffffffffff16612fc3611e85565b73ffffffffffffffffffffffffffffffffffffffff1614613019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301090615e1f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561314f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131739190615e3f565b905060005b818110156132e057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe826040518263ffffffff1660e01b81526004016131db9190614cbb565b60a060405180830381865afa1580156131f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321c91906157e3565b84600083815260200190815260200160002060008201518160000160006101000a81548160ff021916908360048111156132595761325861487e565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff02191690831515021790555090505080806132d89061555e565b915050613178565b5080915050919050565b60008060028360010160009054906101000a900460ff1661330b9190615a57565b60ff16905060006001905060006133206146cb565b6001818760060160000160009054906101000a900460ff1660ff16600b811061334c5761334b6154d1565b5b60200201518760060160000160019054906101000a900460ff1660ff16600b811061337a576133796154d1565b5b602002019015159081151581525050613391614736565b866006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508187601e81106133ed576133ec6154d1565b5b602002018190525085806134009061555e565b9650505b6000851180156134145750600086115b156140ab5760008160018861342991906158e6565b601e811061343a576134396154d1565b5b60200201519050868061344c90615e6c565b9750508187601e8110613462576134616154d1565b5b6020020161346e614764565b815250858061347c90615e6c565b965050848061348a90615e6c565b9550506001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506021600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b815260040161353f929190615ed1565b6020604051808303816000875af115801561355e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135829190615a2a565b60ff1610156135dc576001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060050160026101000a81548160ff0219169083151502179055505b600060405180608001604052806000815260200160018152602001600281526020016003815250905060006001600461361591906158e6565b90505b6000811115613748576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f6000846040518363ffffffff1660e01b8152600401613681929190615a01565b6020604051808303816000875af11580156136a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c49190615a2a565b9050828160ff16600481106136dc576136db6154d1565b5b60200201518383600481106136f4576136f36154d1565b5b602002015184846004811061370c5761370b6154d1565b5b60200201858460ff1660048110613726576137256154d1565b5b602002018281525082815250505050808061374090615e6c565b915050613618565b5060005b60048110156140a3576000836000015160000b90506000846020015160000b90506000848460048110613782576137816154d1565b5b602002015114156137a057818061379890615f04565b925050613838565b60018484600481106137b5576137b46154d1565b5b602002015114156137d35781806137cb90615f4d565b925050613837565b60028484600481106137e8576137e76154d1565b5b602002015114156138065780806137fe90615f4d565b915050613836565b600384846004811061381b5761381a6154d1565b5b6020020151141561383557808061383190615f04565b9150505b5b5b5b60018212806138475750600181125b8061385e57506002600b61385b91906158e6565b82135b8061387557506002600b61387291906158e6565b81135b15613881575050614090565b600060405180604001604052808460ff1681526020018360ff1681525090506000151588826000015160ff16600b81106138be576138bd6154d1565b5b6020020151826020015160ff16600b81106138dc576138db6154d1565b5b6020020151151514806139d6575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa3993c289856040518363ffffffff1660e01b8152600401613980929190615f96565b602060405180830381865afa15801561399d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c19190615e3f565b600481106139d2576139d16154d1565b5b0154145b1561408c5760008a1480613a9957508860426139f291906158e6565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b8152600401613a51929190615ed1565b6020604051808303816000875af1158015613a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a949190615a2a565b60ff16105b15614086576040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401613b08929190615a01565b6020604051808303816000875af1158015613b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4b9190615a2a565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401613bb2929190615a01565b6020604051808303816000875af1158015613bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf59190615a2a565b60ff16815260200160016004811115613c1157613c1061487e565b5b8152508d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff02191690836004811115613caa57613ca961487e565b5b021790555090505060008d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160009054906101000a900460ff1660ff161415613d4d5760038d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160026101000a81548160ff02191690836004811115613d4757613d4661487e565b5b02179055505b8c600501600081819054906101000a900460ff1680929190613d6e906158bc565b91906101000a81548160ff021916908360ff16021790555050601689613d94919061597a565b98506042891115613da457604298505b6000151588826000015160ff16600b8110613dc257613dc16154d1565b5b6020020151826020015160ff16600b8110613de057613ddf6154d1565b5b602002015115151415613e6f5780878d601e8110613e0157613e006154d1565b5b60200201819052508b80613e149061555e565b9c50508980613e229061555e565b9a5050600188826000015160ff16600b8110613e4157613e406154d1565b5b6020020151826020015160ff16600b8110613e5f57613e5e6154d1565b5b6020020190151590811515815250505b60008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110613ebb57613eba6154d1565b5b602002015160048110613ed157613ed06154d1565b5b015414156140815760018d60050160009054906101000a900460ff16613ef79190615a57565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110613f4457613f436154d1565b5b602002015160048110613f5a57613f596154d1565b5b018190555060018d60050160009054906101000a900460ff16613f7d9190615a57565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638214f222888860048110614008576140076154d1565b5b60200201516040518263ffffffff1660e01b81526004016140299190614cbb565b602060405180830381865afa158015614046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406a9190615e3f565b6004811061407b5761407a6154d1565b5b01819055505b61408b565b600098505b5b5050505b808061409b9061555e565b91505061374c565b505050613404565b60028760030160008960060160000160009054906101000a900460ff1660ff16815260200190815260200160002060008960060160000160019054906101000a900460ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060038760040160006001815260200190815260200160002060000160026101000a81548160ff021916908360048111156141595761415861487e565b5b021790555050505050505050565b60005b600b8110156145845760005b600b81101561457057600160ff16836003016000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900460ff1660ff16141561455d5760005b600481101561455b5760008460030160008581526020019081526020016000206000848152602001908152602001600020600101826004811061420d5761420c6154d1565b5b01541415614548576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8360405180604001604052808860ff1681526020018760ff168152506040518363ffffffff1660e01b815260040161428e929190615bcf565b6040805180830381865afa1580156142aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142ce9190615c48565b90506000856003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1690506042600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b815260040161437d929190615ed1565b6020604051808303816000875af115801561439c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143c09190615a2a565b60ff161080156143d35750600060ff1681145b1561454557604051806060016040528060ff8016815260200160ff801681526020016004808111156144085761440761487e565b5b8152508660040160008860050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156144a1576144a061487e565b5b021790555090505085600501600081819054906101000a900460ff16809291906144ca906158bc565b91906101000a81548160ff021916908360ff1602179055505060018660050160009054906101000a900460ff166145019190615a57565b60ff168660030160008781526020019081526020016000206000868152602001908152602001600020600101846004811061453f5761453e6154d1565b5b01819055505b50505b80806145539061555e565b9150506141c7565b505b80806145689061555e565b915050614176565b50808061457c9061555e565b91505061416a565b5050565b806006858154811061459d5761459c6154d1565b5b90600052602060002090600702016003016000858152602001908152602001600020600084815260200190815260200160002060050160036101000a81548160ff02191690831515021790555050505050565b600033905090565b6040518060a00160405280600060048111156146175761461661487e565b5b815260200160008152602001600060ff168152602001600060ff1681526020016000151581525090565b6040518060e00160405280600060ff168152602001600060ff168152602001614668614784565b81526020016000151581526020016000151581526020016000151581526020016000151581525090565b6040518060600160405280600060ff168152602001600060ff168152602001600060048111156146c5576146c461487e565b5b81525090565b604051806101600160405280600b905b6146e36147a6565b8152602001906001900390816146db5790505090565b8260048101928215614725579182015b82811115614724578254825591600101919060010190614709565b5b50905061473291906147c9565b5090565b604051806103c00160405280601e905b61474e614764565b8152602001906001900390816147465790505090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806101600160405280600b90602082028036833780820191505090505090565b5b808211156147e25760008160009055506001016147ca565b5090565b6000604051905090565b600080fd5b6000819050919050565b614808816147f5565b811461481357600080fd5b50565b600081359050614825816147ff565b92915050565b600080600060608486031215614844576148436147f0565b5b600061485286828701614816565b935050602061486386828701614816565b925050604061487486828701614816565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106148be576148bd61487e565b5b50565b60008190506148cf826148ad565b919050565b60006148df826148c1565b9050919050565b6148ef816148d4565b82525050565b6148fe816147f5565b82525050565b600060ff82169050919050565b61491a81614904565b82525050565b60008115159050919050565b61493581614920565b82525050565b60a08201600082015161495160008501826148e6565b50602082015161496460208501826148f5565b5060408201516149776040850182614911565b50606082015161498a6060850182614911565b50608082015161499d608085018261492c565b50505050565b600060a0820190506149b8600083018461493b565b92915050565b6000602082840312156149d4576149d36147f0565b5b60006149e284828501614816565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060049050919050565b600081905092915050565b6000819050919050565b6000614a6f83836148f5565b60208301905092915050565b6000602082019050919050565b614a9181614a43565b614a9b8184614a4e565b9250614aa682614a59565b8060005b83811015614ad7578151614abe8782614a63565b9650614ac983614a7b565b925050600181019050614aaa565b505050505050565b61014082016000820151614af66000850182614911565b506020820151614b096020850182614911565b506040820151614b1c6040850182614a88565b506060820151614b2f60c085018261492c565b506080820151614b4260e085018261492c565b5060a0820151614b5661010085018261492c565b5060c0820151614b6a61012085018261492c565b50505050565b6000614b7c8383614adf565b6101408301905092915050565b6000602082019050919050565b6000614ba182614a17565b614bab8185614a22565b9350614bb683614a33565b8060005b83811015614be7578151614bce8882614b70565b9750614bd983614b89565b925050600181019050614bba565b5085935050505092915050565b6000614c008383614b96565b905092915050565b6000602082019050919050565b6000614c20826149eb565b614c2a81856149f6565b935083602082028501614c3c85614a07565b8060005b85811015614c785784840389528151614c598582614bf4565b9450614c6483614c08565b925060208a01995050600181019050614c40565b50829750879550505050505092915050565b60006020820190508181036000830152614ca48184614c15565b905092915050565b614cb5816147f5565b82525050565b6000602082019050614cd06000830184614cac565b92915050565b60008060408385031215614ced57614cec6147f0565b5b6000614cfb85828601614816565b9250506020614d0c85828601614816565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614d5b614d56614d5184614d16565b614d36565b614d16565b9050919050565b6000614d6d82614d40565b9050919050565b6000614d7f82614d62565b9050919050565b614d8f81614d74565b82525050565b6000602082019050614daa6000830184614d86565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60058110614ded57614dec61487e565b5b50565b6000819050614dfe82614ddc565b919050565b6000614e0e82614df0565b9050919050565b614e1e81614e03565b82525050565b606082016000820151614e3a6000850182614911565b506020820151614e4d6020850182614911565b506040820151614e606040850182614e15565b50505050565b6000614e728383614e24565b60608301905092915050565b6000602082019050919050565b6000614e9682614db0565b614ea08185614dbb565b9350614eab83614dcc565b8060005b83811015614edc578151614ec38882614e66565b9750614ece83614e7e565b925050600181019050614eaf565b5085935050505092915050565b60006020820190508181036000830152614f038184614e8b565b905092915050565b60008060008060808587031215614f2557614f246147f0565b5b6000614f3387828801614816565b9450506020614f4487828801614816565b9350506040614f5587828801614816565b9250506060614f6687828801614816565b91505092959194509250565b606082016000820151614f886000850182614911565b506020820151614f9b6020850182614911565b506040820151614fae6040850182614e15565b50505050565b6000606082019050614fc96000830184614f72565b92915050565b614fd881614904565b82525050565b604082016000820151614ff46000850182614911565b5060208201516150076020850182614911565b50505050565b60006080820190506150226000830186614fcf565b61502f6020830185614fcf565b61503c6040830184614fde565b949350505050565b600061504f82614d16565b9050919050565b61505f81615044565b82525050565b600060208201905061507a6000830184615056565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60a0820160008201516150c260008501826148e6565b5060208201516150d560208501826148f5565b5060408201516150e86040850182614911565b5060608201516150fb6060850182614911565b50608082015161510e608085018261492c565b50505050565b600061512083836150ac565b60a08301905092915050565b6000602082019050919050565b600061514482615080565b61514e818561508b565b93506151598361509c565b8060005b8381101561518a5781516151718882615114565b975061517c8361512c565b92505060018101905061515d565b5085935050505092915050565b600060208201905081810360008301526151b18184615139565b905092915050565b6151c281615044565b81146151cd57600080fd5b50565b6000813590506151df816151b9565b92915050565b600080600080608085870312156151ff576151fe6147f0565b5b600061520d878288016151d0565b945050602061521e878288016151d0565b935050604061522f878288016151d0565b9250506060615240878288016151d0565b91505092959194509250565b6005811061525957600080fd5b50565b60008135905061526b8161524c565b92915050565b600080600080600060a0868803121561528d5761528c6147f0565b5b600061529b88828901614816565b95505060206152ac88828901614816565b94505060406152bd88828901614816565b93505060606152ce88828901614816565b92505060806152df8882890161525c565b9150509295509295909350565b60006152f782614d62565b9050919050565b615307816152ec565b82525050565b600060208201905061532260008301846152fe565b92915050565b60006020828403121561533e5761533d6147f0565b5b600061534c848285016151d0565b91505092915050565b600061536082614d62565b9050919050565b61537081615355565b82525050565b600060208201905061538b6000830184615367565b92915050565b610140820160008201516153a86000850182614911565b5060208201516153bb6020850182614911565b5060408201516153ce6040850182614a88565b5060608201516153e160c085018261492c565b5060808201516153f460e085018261492c565b5060a082015161540861010085018261492c565b5060c082015161541c61012085018261492c565b50505050565b6000610140820190506154386000830184615391565b92915050565b61544781614920565b811461545257600080fd5b50565b6000813590506154648161543e565b92915050565b60008060008060808587031215615484576154836147f0565b5b600061549287828801614816565b94505060206154a387828801614816565b93505060406154b487828801614816565b92505060606154c587828801615455565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000615569826147f5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561559c5761559b61552f565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b60006155ee6011836155a7565b91506155f9826155b8565b602082019050919050565b6000602082019050818103600083015261561d816155e1565b9050919050565b6000819050919050565b600061564961564461563f84615624565b614d36565b6147f5565b9050919050565b6156598161562e565b82525050565b60006020820190506156746000830184615650565b92915050565b600080fd5b6000601f19601f8301169050919050565b6156998261567f565b810181811067ffffffffffffffff821117156156b8576156b7615500565b5b80604052505050565b60006156cb6147e6565b90506156d78282615690565b919050565b600581106156e957600080fd5b50565b6000815190506156fb816156dc565b92915050565b600081519050615710816147ff565b92915050565b61571f81614904565b811461572a57600080fd5b50565b60008151905061573c81615716565b92915050565b6000815190506157518161543e565b92915050565b600060a0828403121561576d5761576c61567a565b5b61577760a06156c1565b90506000615787848285016156ec565b600083015250602061579b84828501615701565b60208301525060406157af8482850161572d565b60408301525060606157c38482850161572d565b60608301525060806157d784828501615742565b60808301525092915050565b600060a082840312156157f9576157f86147f0565b5b600061580784828501615757565b91505092915050565b6000819050919050565b600061583561583061582b84615810565b614d36565b6147f5565b9050919050565b6158458161581a565b82525050565b6000602082019050615860600083018461583c565b92915050565b6000819050919050565b600061588b61588661588184615866565b614d36565b6147f5565b9050919050565b61589b81615870565b82525050565b60006020820190506158b66000830184615892565b92915050565b60006158c782614904565b915060ff8214156158db576158da61552f565b5b600182019050919050565b60006158f1826147f5565b91506158fc836147f5565b92508282101561590f5761590e61552f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615954826147f5565b915061595f836147f5565b92508261596f5761596e61591a565b5b828204905092915050565b6000615985826147f5565b9150615990836147f5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156159c5576159c461552f565b5b828201905092915050565b60006159eb6159e66159e184615624565b614d36565b614904565b9050919050565b6159fb816159d0565b82525050565b6000604082019050615a1660008301856159f2565b615a236020830184614fcf565b9392505050565b600060208284031215615a4057615a3f6147f0565b5b6000615a4e8482850161572d565b91505092915050565b6000615a6282614904565b9150615a6d83614904565b925082821015615a8057615a7f61552f565b5b828203905092915050565b7f4e6f7420616374696f6e7320636f6e7472616374000000000000000000000000600082015250565b6000615ac16014836155a7565b9150615acc82615a8b565b602082019050919050565b60006020820190508181036000830152615af081615ab4565b9050919050565b7f4e6f7420616c6c6f77656420636f6e7472616374000000000000000000000000600082015250565b6000615b2d6014836155a7565b9150615b3882615af7565b602082019050919050565b60006020820190508181036000830152615b5c81615b20565b9050919050565b7f4e6f742067616d657320636f6e74726163740000000000000000000000000000600082015250565b6000615b996012836155a7565b9150615ba482615b63565b602082019050919050565b60006020820190508181036000830152615bc881615b8c565b9050919050565b6000606082019050615be46000830185614cac565b615bf16020830184614fde565b9392505050565b600060408284031215615c0e57615c0d61567a565b5b615c1860406156c1565b90506000615c288482850161572d565b6000830152506020615c3c8482850161572d565b60208301525092915050565b600060408284031215615c5e57615c5d6147f0565b5b6000615c6c84828501615bf8565b91505092915050565b7f4f6e6c792067616d6520636f6e74726163742063616e20757365000000000000600082015250565b6000615cab601a836155a7565b9150615cb682615c75565b602082019050919050565b60006020820190508181036000830152615cda81615c9e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615d3d6026836155a7565b9150615d4882615ce1565b604082019050919050565b60006020820190508181036000830152615d6c81615d30565b9050919050565b6000604082019050615d886000830185614fcf565b615d956020830184614fcf565b9392505050565b6000615da782614904565b9150615db283614904565b92508260ff03821115615dc857615dc761552f565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615e096020836155a7565b9150615e1482615dd3565b602082019050919050565b60006020820190508181036000830152615e3881615dfc565b9050919050565b600060208284031215615e5557615e546147f0565b5b6000615e6384828501615701565b91505092915050565b6000615e77826147f5565b91506000821415615e8b57615e8a61552f565b5b600182039050919050565b6000819050919050565b6000615ebb615eb6615eb184615e96565b614d36565b614904565b9050919050565b615ecb81615ea0565b82525050565b6000604082019050615ee660008301856159f2565b615ef36020830184615ec2565b9392505050565b6000819050919050565b6000615f0f82615efa565b91507f8000000000000000000000000000000000000000000000000000000000000000821415615f4257615f4161552f565b5b600182039050919050565b6000615f5882615efa565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615f8b57615f8a61552f565b5b600182019050919050565b6000608082019050615fab6000830185614fde565b615fb86040830184614fde565b939250505056fea2646970667358221220a70d0af6f00fcb0fea6854fd3c41a30495e95c5dcd3ee5a808abb7fa3c56448d64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 225,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "game",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GameInterface)167"
      },
      {
        "astId": 228,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)220"
      },
      {
        "astId": 231,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomTiles",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(RoomTileInterface)181"
      },
      {
        "astId": 233,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 273,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "gameTiles",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(GameTile)2372_storage)dyn_storage"
      },
      {
        "astId": 277,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "maps",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Map)2409_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(GameTile)2372_storage)dyn_storage": {
        "base": "t_struct(GameTile)2372_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.GameTile[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Map)2409_storage)dyn_storage": {
        "base": "t_struct(Map)2409_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Map[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameInterface)167": {
        "encoding": "inplace",
        "label": "contract GameInterface",
        "numberOfBytes": "20"
      },
      "t_contract(RoomTileInterface)181": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)220": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)2301": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DoorStatus)2284": {
        "encoding": "inplace",
        "label": "enum BCTypes.DoorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)2372_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BCTypes.GameTile))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GameTile)2372_storage)"
      },
      "t_mapping(t_uint256,t_struct(Door)2380_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.Door)",
        "numberOfBytes": "32",
        "value": "t_struct(Door)2380_storage"
      },
      "t_mapping(t_uint256,t_struct(GameTile)2372_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.GameTile)",
        "numberOfBytes": "32",
        "value": "t_struct(GameTile)2372_storage"
      },
      "t_mapping(t_uint256,t_struct(RoomTile)2457_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.RoomTile)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomTile)2457_storage"
      },
      "t_struct(Door)2380_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Door",
        "members": [
          {
            "astId": 2374,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsBreach",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2376,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsHack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2379,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "status",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(DoorStatus)2284"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameTile)2372_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.GameTile",
        "members": [
          {
            "astId": 2357,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2359,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "parentId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2363,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 2365,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "explored",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2367,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "looted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2369,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasVent",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2371,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasHazard",
            "offset": 3,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)2409_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Map",
        "members": [
          {
            "astId": 2385,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomList",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RoomTile)2457_storage)"
          },
          {
            "astId": 2387,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numRooms",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 2391,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "usedRooms",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 2398,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "board",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)2372_storage))"
          },
          {
            "astId": 2403,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Door)2380_storage)"
          },
          {
            "astId": 2405,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numDoors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 2408,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "startPosition",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Position)2355_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Position)2355_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 2352,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2354,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoomTile)2457_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.RoomTile",
        "members": [
          {
            "astId": 2448,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BCEventType)2301"
          },
          {
            "astId": 2450,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2452,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numItems",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 2454,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numData",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 2456,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "sigDetected",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}