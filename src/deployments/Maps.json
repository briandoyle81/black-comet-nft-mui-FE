{
  "address": "0xb9071BB3488f6074C1D660B27D543Ac4975F88E8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "discoverRoom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetDoors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetGameTile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "contract GameInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "getDoor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maps",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numRooms",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numDoors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "startPosition",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "resetOpenDoors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roomTilesAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DoorStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setDoorFromPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "setLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bb905f32ce56bfb98830e4b4bf8f7dbc112a3fa34f85f596f78e305676e087f",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0xb9071BB3488f6074C1D660B27D543Ac4975F88E8",
    "transactionIndex": 12,
    "gasUsed": "4328508",
    "logsBloom": "0x
    "blockHash": "0x115119846ccbc93cc32b4ff7b20a2ee7e39378a8a1d59ed8bb90240b4ff5a20e",
    "transactionHash": "0x4bb905f32ce56bfb98830e4b4bf8f7dbc112a3fa34f85f596f78e305676e087f",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 28428145,
        "transactionHash": "0x4bb905f32ce56bfb98830e4b4bf8f7dbc112a3fa34f85f596f78e305676e087f",
        "address": "0xb9071BB3488f6074C1D660B27D543Ac4975F88E8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x115119846ccbc93cc32b4ff7b20a2ee7e39378a8a1d59ed8bb90240b4ff5a20e"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 28428145,
        "transactionHash": "0x4bb905f32ce56bfb98830e4b4bf8f7dbc112a3fa34f85f596f78e305676e087f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002671e3425e5c0000000000000000000000000000000000000000000000000015ee530d122b834e0000000000000000000000000000000000000000000015fa34f7702cb94840a200000000000000000000000000000000000000000000000015c7e129cfcd274e0000000000000000000000000000000000000000000015fa351de20ffba69ca2",
        "logIndex": 28,
        "blockHash": "0x115119846ccbc93cc32b4ff7b20a2ee7e39378a8a1d59ed8bb90240b4ff5a20e"
      }
    ],
    "blockNumber": 28428145,
    "cumulativeGasUsed": "4841319",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "5b2bbd68f283e494724ffe6f6acdc479",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"discoverRoom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetDoors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetGameTile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomList\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contract GameInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"getDoor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numRooms\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numDoors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"startPosition\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"resetOpenDoors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roomTilesAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setDoorFromPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"setLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCMaps.sol\":\"Maps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BCMaps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// TODO: Eval putting constants in a separate file that is imported/shared\\nuint constant BOARD_SIZE = 9;\\nuint constant VENT_CHANCE = 33;\\nuint constant WINDOW_CHANCE = 66;\\nuint constant DOOR_CHANCE = 66;\\nuint8 constant DOOR_MOD_STEP = 22; // NOTE: For now, this MUST be divisible with DOOR_CHANCE\\nuint8 constant MAX_DOOR_STR = 3;\\n\\nuint constant START_ROOM_ID = 2; // TODO: Possibility of more than one start room?\\nuint8 constant UNDISCOVERED_ROOM = 1;\\nuint8 constant SPACE_ROOM = 0;\\n\\ninterface GameInterface {\\n\\n}\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll() external returns (uint8);\\n    function abs(int x) external pure returns(int);\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n}\\n\\ncontract Maps is Ownable {\\n\\n    GameInterface public game;\\n    UtilsInterface public utils;\\n    RoomTileInterface public roomTiles;\\n\\n    function setContractAddresses(\\n        address _gameAddress,\\n        address _utilsAddress,\\n        address _roomTilesAddress\\n        ) public onlyOwner {\\n        game = GameInterface(_gameAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        roomTiles = RoomTileInterface(_roomTilesAddress);\\n    }\\n\\n    // TODO: This array is here just to support making an empty one to put in the mapping\\n    BCTypes.GameTile[] private gameTiles;\\n    BCTypes.Map[] public maps;\\n\\n    // TODO: System for options like static start and debug maps for testing\\n    function createMap() public returns (uint) {\\n        require(msg.sender == address(game), \\\"Only game contract can use\\\");\\n\\n        BCTypes.Map storage newMap = maps.push();\\n\\n        // Get the room list and save the number of rooms\\n        newMap.numRooms = uint8(_setGameRoomTiles(newMap.roomList));\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        _staticStart(newMap);\\n        _buildMap(newMap);\\n        _addWindows(newMap);\\n\\n        // Return the map id for the games contract\\n        return maps.length-1;\\n    }\\n\\n    // TODO: Is there any reason NOT to just always place start bottom center???\\n    function _staticStart(BCTypes.Map storage _newMap) internal {\\n        BCTypes.GameTile storage startTile = gameTiles.push(); // TODO: Can I make an empty one and reference it this way without the array?\\n\\n        uint startRow = BOARD_SIZE-1;\\n        uint startCol = (BOARD_SIZE/2)+1;\\n\\n        _newMap.startPosition = BCTypes.Position(uint8(startRow), uint8(startCol));\\n        _newMap.board[startRow][startCol] = startTile;\\n    }\\n\\n    function _addWindows(BCTypes.Map storage _newMap) internal {\\n        for(uint row = 0; row < BOARD_SIZE; row++){\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                if(_newMap.board[row][col].roomId == UNDISCOVERED_ROOM) {\\n                    for (uint i = 0; i < 4; i++) {\\n                        // Position memory neighbor = utils.getNeighborRoom(i, Position(uint8(row), uint8(col)));\\n                        if (_newMap.board[row][col].doors[i] == 0) {\\n                                BCTypes.Position memory neighborPos = utils.getNeighborRoom(i, BCTypes.Position(uint8(row), uint8(col)));\\n                                uint neighborId = _newMap.board[neighborPos.row][neighborPos.col].roomId;\\n                                if (utils.smallIntBetweenVals(0, 99) < WINDOW_CHANCE && neighborId == SPACE_ROOM) {\\n                                    _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                                    255,\\n                                    255,\\n                                    BCTypes.DoorStatus.WINDOW);\\n                                    _newMap.numDoors++;\\n                                    _newMap.board[row][col].doors[i] = _newMap.numDoors-1; // -1 for correct index\\n                                    // TODO: Conform that neighbor doesn't need this door/window\\n                                }\\n                            }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _buildMap(BCTypes.Map storage _newMap) internal {\\n        // TODO: This is occassionally getting stuck\\n        // BFT - inspired traversal\\n        uint stackCount = 0;\\n        uint numToPlace = _newMap.numRooms - 2; // -1 for Donghaizu and -1 for empty room\\n        uint availableDoors = 1; // Starts with the one out of the Donghaizu // TODO: This is kind of a hack to go down to zero when popping this tile\\n\\n        uint8 doorModifier = 0;\\n\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_newMap.startPosition.row][_newMap.startPosition.col] = true;\\n\\n        BCTypes.Position[30] memory stack; // TODO: Write a stack library? // TODO: This can probably be 27\\n        stack[stackCount] = _newMap.startPosition; // Start by enstacking the Donghaijiu location\\n        stackCount++;\\n\\n        while (numToPlace > 0) { // TODO: Need to track stack count to avoid crash on error\\n            // Pop the top item from the stack\\n            BCTypes.Position memory current = stack[stackCount-1];\\n            stackCount--;\\n            delete stack[stackCount]; // TODO: Confirm utility of deleting\\n\\n            numToPlace--;\\n            availableDoors--;\\n\\n            _newMap.board[current.row][current.col].roomId = UNDISCOVERED_ROOM;\\n\\n            // Add vent\\n            if (utils.smallIntBetweenVals(0, 99) < VENT_CHANCE) {\\n                _newMap.board[current.row][current.col].hasVent = true;\\n            }\\n\\n            // TODO:  This is going to bias the order of the traversal\\n            // But it doesn't really seem to matter\\n            for (int i = -1; i <= 1; i++) {\\n                for (int k = -1; k <=1; k++) {\\n                    // Skip diagonals and center\\n                    if (utils.abs(i) == utils.abs(k)) {\\n                        continue;\\n                    }\\n                    int newRow = int8(current.row) + i;\\n                    int newCol = int8(current.col) + k;\\n\\n                    // Stay in bounds, reserving outside edge for Donghaijiu only\\n                    if (newRow < 1 ||\\n                        newCol < 1 ||\\n                        newRow > int(BOARD_SIZE-2) ||\\n                        newCol > int(BOARD_SIZE-2)) {\\n                            continue;\\n                    }\\n                    BCTypes.Position memory neighbor = BCTypes.Position(uint8(int8(newRow)), uint8(int8(newCol)));\\n                                                                        // Hideous but hashtag #stacklimit\\n                    if (found[neighbor.row][neighbor.col] == false || _newMap.board[current.row][current.col].doors[utils.getDirectionBetween(current, neighbor)] == 0) {\\n                        // TODO:  FIX: Error: VM Exception while processing transaction: reverted with panic code 0x11 (Arithmetic operation underflowed or overflowed outside of an unchecked block) at BCGames._buildMap (contracts/BCGames.sol:335)\\n                        if (availableDoors == 0 ||  utils.smallIntBetweenVals(0, 99) < DOOR_CHANCE - doorModifier) {\\n                            _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                            utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                            utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                            BCTypes.DoorStatus.CLOSED);\\n                            // Pre-breach doors with strength 0\\n                            if (_newMap.doors[_newMap.numDoors].vsBreach == 0) {\\n                                _newMap.doors[_newMap.numDoors].status = BCTypes.DoorStatus.BREACHED;\\n                            }\\n                            _newMap.numDoors++;\\n                            doorModifier += DOOR_MOD_STEP;\\n\\n                            stack[stackCount] = neighbor;\\n                            stackCount++;\\n                            availableDoors++;\\n\\n                            found[neighbor.row][neighbor.col] = true;\\n\\n                            // TODO: DRY This?\\n                            // TODO:  Overkill on if statemenents.  Figure out why the k check is needed to prevent incorrect placing 90 degree doors\\n                            // TODO: Verify the third && prevents extra door generation\\n                            if (i == -1 && k == 0 && _newMap.board[current.row][current.col].doors[0] == 0) {\\n                                // North\\n                                // console.log(\\\"Added north\\\", current.row, current.col);\\n                                _newMap.board[current.row][current.col].doors[0] = _newMap.numDoors-1; // -1 because we incremented the number of doors above, but want the one just created\\n                                _newMap.board[neighbor.row][neighbor.col].doors[1] = _newMap.numDoors-1;\\n                            } else if (i == 1 && k == 0 && _newMap.board[current.row][current.col].doors[1] == 0) {\\n                                // South\\n                                // console.log(\\\"Added south\\\", current.row, current.col);\\n                                _newMap.board[current.row][current.col].doors[1] = _newMap.numDoors-1;\\n                                _newMap.board[neighbor.row][neighbor.col].doors[0] = _newMap.numDoors-1;\\n                            } else if (k == 1 && i == 0 && _newMap.board[current.row][current.col].doors[2] == 0) {\\n                                // East\\n                                // console.log(\\\"Added east\\\", current.row, current.col);\\n                                _newMap.board[current.row][current.col].doors[2] = _newMap.numDoors-1;\\n                                _newMap.board[neighbor.row][neighbor.col].doors[3] = _newMap.numDoors-1;\\n                            } else if (k == -1 && i == 0 && _newMap.board[current.row][current.col].doors[3] == 0){\\n                                // West\\n                                // console.log(\\\"Added west\\\", current.row, current.col);\\n                                _newMap.board[current.row][current.col].doors[3] = _newMap.numDoors-1;\\n                                _newMap.board[neighbor.row][neighbor.col].doors[2] = _newMap.numDoors-1;\\n                            }\\n                        } else {\\n                            doorModifier = 0;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // Cleanup Tasks\\n\\n        // TODO Detect and prevent failure to deploy all tiles\\n\\n        require(numToPlace == 0, \\\"Error: Bad mapgen.  Unplaced rooms\\\");\\n\\n        // Reset Donghaijiu ID (Was changed by map building)\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].roomId = uint8(START_ROOM_ID);\\n\\n        // Set the north door to breached\\n        // TODO: Assumes south start\\n        _newMap.doors[1].status = BCTypes.DoorStatus.BREACHED;\\n\\n        // TODO: Add signature detected\\n    }\\n\\n    function _setGameRoomTiles(mapping (uint => BCTypes.RoomTile) storage _roomList) internal returns (uint) {\\n        uint number = roomTiles.getNumRoomTiles();\\n        for(uint i = 0; i < number; i++) {\\n            _roomList[i] = roomTiles.extGetRoomTile(i);\\n        }\\n        return number;\\n    }\\n\\n    function extGetBoard(uint _mapId) public view returns (BCTypes.GameTile[][] memory) {\\n        BCTypes.GameTile[][] memory board = new BCTypes.GameTile[][](BOARD_SIZE);\\n        for (uint i = 0; i < BOARD_SIZE; i++) {\\n            board[i] = new BCTypes.GameTile[](BOARD_SIZE);\\n        }\\n\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                board[row][col] = maps[_mapId].board[row][col];\\n            }\\n        }\\n\\n        return board;\\n    }\\n\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) public view returns (BCTypes.GameTile memory) {\\n        return maps[_mapId].board[_row][_col];\\n    }\\n\\n    function extGetRoomList(uint _mapId) public view returns (BCTypes.RoomTile[] memory) {\\n        BCTypes.RoomTile[] memory roomList = new BCTypes.RoomTile[](maps[_mapId].numRooms);\\n        for (uint i = 0; i < roomList.length; i++) {\\n            roomList[i] = maps[_mapId].roomList[i];\\n        }\\n        return roomList;\\n    }\\n\\n    function extGetRoom(uint _mapId, uint _row, uint _col) public view returns(BCTypes.RoomTile memory) {\\n        return maps[_mapId].roomList[maps[_mapId].board[_row][_col].roomId];\\n    }\\n\\n    function extGetDoors(uint _mapId) public view returns (BCTypes.Door[] memory) {\\n        BCTypes.Door[] memory doors = new BCTypes.Door[](maps[_mapId].numDoors);\\n        for (uint i = 0; i < doors.length; i++) {\\n            doors[i] = maps[_mapId].doors[i];\\n        }\\n\\n        return doors;\\n    }\\n\\n    // TODO:  These need to validate that this is the right version of BCMaps\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) public view returns (BCTypes.Door memory){\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        return maps[_mapId].doors[currentRoomDoors[_direction]];\\n    }\\n\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        BCTypes.Door storage currentDoor = maps[_mapId].doors[currentRoomDoors[_direction]];\\n        currentDoor.status = _status;\\n    }\\n\\n    function setLooted(uint _mapId, uint _row, uint _col) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        maps[_mapId].board[_row][_col].looted = true;\\n    }\\n\\n    function resetOpenDoors(uint _mapId) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        for (uint i = 0; i < maps[_mapId].numDoors; i++) {\\n            if (maps[_mapId].doors[i].status == BCTypes.DoorStatus.OPEN) {\\n                maps[_mapId].doors[i].status = BCTypes.DoorStatus.CLOSED;\\n            }\\n        }\\n    }\\n\\n    function _getUnusedRoomId(BCTypes.Map storage _map) internal returns (uint8) {\\n        // TODO: Explore other ways of doing use once\\n        uint8 roomId = utils.smallIntBetweenVals(uint8(START_ROOM_ID+1), _map.numRooms-4); // - for array, empty space, unexplored, donghaiziu\\n\\n        while (_map.usedRooms[roomId] == true) {\\n            if (roomId == _map.numRooms-1) {\\n                roomId = uint8(START_ROOM_ID) + 1; // TODO: Semi-Hardcoded to account for empty and donghaijiu\\n            } else {\\n                roomId++;\\n            }\\n        }\\n        _map.usedRooms[roomId] = true;\\n        return roomId;\\n    }\\n\\n    // Discover a room and return the uint id for that room's event\\n    function discoverRoom(uint _mapId, uint _row, uint _col) public returns (bool) {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n\\n        BCTypes.GameTile storage gameTile = maps[_mapId].board[_row][_col];\\n        if( gameTile.roomId == UNDISCOVERED_ROOM) {\\n            gameTile.roomId = _getUnusedRoomId(maps[_mapId]);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe33a8463e56242af0314c37f09935f73256189fa19df7c79c3abb7ee34457b26\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Tie to universal inventory\\n        uint id;\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n    }\\n}\\n\",\"keccak256\":\"0xd81c7abba8911c2f7565c013254479409839b2451ff16254937a1294265e619f\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b614d0380620001146000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806386e529d0116100ad578063c3fe3e2811610071578063c3fe3e281461032e578063f01fc35a1461034c578063f2fde38b1461036a578063f7157f6414610386578063f9dfbfcb146103a457610121565b806386e529d01461028c5780638ab63380146102a85780638af13fd2146102c45780638da5cb5b146102f4578063b6cdd3b41461031257610121565b80635a29638d116100f45780635a29638d146101d257806369568fd5146101f05780636ea1dcd814610220578063715018a61461025057806375990a0e1461025a57610121565b806302861c6c146101265780631ef0441614610156578063471b67591461018657806358308aa8146101b6575b600080fd5b610140600480360381019061013b91906136a9565b6103d4565b60405161014d9190613834565b60405180910390f35b610170600480360381019061016b919061384f565b610535565b60405161017d9190613b07565b60405180910390f35b6101a0600480360381019061019b91906136a9565b6107c0565b6040516101ad9190613b38565b60405180910390f35b6101d060048036038101906101cb919061384f565b61091a565b005b6101da610ad7565b6040516101e79190613bd2565b60405180910390f35b61020a6004803603810190610205919061384f565b610afd565b6040516102179190613d26565b60405180910390f35b61023a60048036038101906102359190613d48565b610c89565b6040516102479190613df1565b60405180910390f35b610258610df3565b005b610274600480360381019061026f919061384f565b610e07565b60405161028393929190613e4a565b60405180910390f35b6102a660048036038101906102a191906136a9565b610e9f565b005b6102c260048036038101906102bd9190613ebf565b610f97565b005b6102de60048036038101906102d9919061384f565b611067565b6040516102eb919061403c565b60405180910390f35b6102fc611233565b604051610309919061406d565b60405180910390f35b61032c600480360381019061032791906140ad565b61125c565b005b6103366113fc565b6040516103439190614149565b60405180910390f35b610354611422565b6040516103619190614173565b60405180910390f35b610384600480360381019061037f919061418e565b61163f565b005b61038e6116c3565b60405161039b91906141dc565b60405180910390f35b6103be60048036038101906103b991906136a9565b6116e9565b6040516103cb9190614274565b60405180910390f35b6103dc613476565b600584815481106103f0576103ef614290565b5b906000526020600020906007020160000160006005868154811061041757610416614290565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900460ff1660ff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff16600481111561049c5761049b6136fc565b5b60048111156104ae576104ad6136fc565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505090509392505050565b60606000600967ffffffffffffffff811115610554576105536142bf565b5b60405190808252806020026020018201604052801561058757816020015b60608152602001906001900390816105725790505b50905060005b600981101561061c57600967ffffffffffffffff8111156105b1576105b06142bf565b5b6040519080825280602002602001820160405280156105ea57816020015b6105d76134c8565b8152602001906001900390816105cf5790505b508282815181106105fe576105fd614290565b5b602002602001018190525080806106149061431d565b91505061058d565b5060005b60098110156107b65760005b60098110156107a2576005858154811061064957610648614290565b5b9060005260206000209060070201600301600083815260200190815260200160002060008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156106fd576020028201915b8154815260200190600101908083116106e9575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505083838151811061076a57610769614290565b5b6020026020010151828151811061078457610783614290565b5b6020026020010181905250808061079a9061431d565b91505061062c565b5080806107ae9061431d565b915050610620565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610849906143c3565b60405180910390fd5b60006005858154811061086857610867614290565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000209050600160ff168160000160009054906101000a900460ff1660ff16141561090d576108e7600586815481106108d4576108d3614290565b5b906000526020600020906007020161181c565b8160000160006101000a81548160ff021916908360ff1602179055506001915050610913565b60009150505b9392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a1906143c3565b60405180910390fd5b60005b600582815481106109c1576109c0614290565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff16811015610ad357600260048111156109fe576109fd6136fc565b5b60058381548110610a1257610a11614290565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff166004811115610a5757610a566136fc565b5b1415610ac057600160058381548110610a7357610a72614290565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160026101000a81548160ff02191690836004811115610aba57610ab96136fc565b5b02179055505b8080610acb9061431d565b9150506109ad565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060058381548110610b1557610b14614290565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff1667ffffffffffffffff811115610b5057610b4f6142bf565b5b604051908082528060200260200182016040528015610b8957816020015b610b76613510565b815260200190600190039081610b6e5790505b50905060005b8151811015610c7f5760058481548110610bac57610bab614290565b5b906000526020600020906007020160040160008281526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610c3857610c376136fc565b5b6004811115610c4a57610c496136fc565b5b81525050828281518110610c6157610c60614290565b5b60200260200101819052508080610c779061431d565b915050610b8f565b5080915050919050565b610c91613510565b600060058681548110610ca757610ca6614290565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015610d14576020028201915b815481526020019060010190808311610d00575b5050505050905060058681548110610d2f57610d2e614290565b5b90600052602060002090600702016004016000828560048110610d5557610d54614290565b5b602002015181526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610dd257610dd16136fc565b5b6004811115610de457610de36136fc565b5b81525050915050949350505050565b610dfb6119ac565b610e056000611a2a565b565b60058181548110610e1757600080fd5b90600052602060002090600702016000915090508060010160009054906101000a900460ff16908060050160009054906101000a900460ff1690806006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f26906143c3565b60405180910390fd5b600160058481548110610f4557610f44614290565b5b90600052602060002090600702016003016000848152602001908152602001600020600083815260200190815260200160002060050160016101000a81548160ff021916908315150217905550505050565b610f9f6119ac565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b606060006005838154811061107f5761107e614290565b5b906000526020600020906007020160010160009054906101000a900460ff1660ff1667ffffffffffffffff8111156110ba576110b96142bf565b5b6040519080825280602002602001820160405280156110f357816020015b6110e0613476565b8152602001906001900390816110d85790505b50905060005b8151811015611229576005848154811061111657611115614290565b5b906000526020600020906007020160000160008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff166004811115611168576111676136fc565b5b600481111561117a576111796136fc565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505082828151811061120b5761120a614290565b5b602002602001018190525080806112219061431d565b9150506110f9565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e3906143c3565b60405180910390fd5b60006005868154811061130257611301614290565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060010160048060200260405190810160405280929190826004801561136f576020028201915b81548152602001906001019080831161135b575b5050505050905060006005878154811061138c5761138b614290565b5b906000526020600020906007020160040160008386600481106113b2576113b1614290565b5b602002015181526020019081526020016000209050828160000160026101000a81548160ff021916908360048111156113ee576113ed6136fc565b5b021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab9061442f565b60405180910390fd5b6000600560018160018154018082558091505003906000526020600020906007020190506114e481600001611aee565b8160010160006101000a81548160ff021916908360ff160217905550604051806060016040528060ff8016815260200160ff8016815260200160006004811115611531576115306136fc565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156115ca576115c96136fc565b5b021790555090505080600501600081819054906101000a900460ff16809291906115f39061444f565b91906101000a81548160ff021916908360ff1602179055505061161581611d19565b61161e81611efb565b6116278161304d565b60016005805490506116399190614479565b91505090565b6116476119ac565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae9061451f565b60405180910390fd5b6116c081611a2a565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116f16134c8565b6005848154811061170557611704614290565b5b9060005260206000209060070201600301600084815260200190815260200160002060008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156117b9576020028201915b8154815260200190600101908083116117a5575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505090509392505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f6001600261186b919061453f565b60048660010160009054906101000a900460ff166118899190614595565b6040518363ffffffff1660e01b81526004016118a69291906145c9565b6020604051808303816000875af11580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e9919061461e565b90505b600115158360020160008360ff16815260200190815260200160002060009054906101000a900460ff16151514156119725760018360010160009054906101000a900460ff1661193c9190614595565b60ff168160ff16141561195e5760016002611957919061464b565b905061196d565b80806119699061444f565b9150505b6118ec565b60018360020160008360ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050919050565b6119b461346e565b73ffffffffffffffffffffffffffffffffffffffff166119d2611233565b73ffffffffffffffffffffffffffffffffffffffff1614611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f906146ce565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b829190614703565b905060005b81811015611d0f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe826040518263ffffffff1660e01b8152600401611bea9190614173565b60c060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b9190614883565b84600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115611c6857611c676136fc565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff0219169083151502179055509050508080611d079061431d565b915050611b87565b5080915050919050565b600060046001816001815401808255809150500390600052602060002090600602019050600060016009611d4d9190614479565b90506000600160026009611d6191906148df565b611d6b919061453f565b905060405180604001604052808360ff1681526020018260ff168152508460060160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050508284600301600084815260200190815260200160002060008381526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff1602179055506000820160019054906101000a900460ff168160000160016101000a81548160ff021916908360ff1602179055506001820181600101906004611e6a929190613549565b506005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506005820160029054906101000a900460ff168160050160026101000a81548160ff02191690831515021790555090505050505050565b60008060028360010160009054906101000a900460ff16611f1c9190614595565b60ff1690506000600190506000611f31613586565b6001818760060160000160009054906101000a900460ff1660ff1660098110611f5d57611f5c614290565b5b60200201518760060160000160019054906101000a900460ff1660ff1660098110611f8b57611f8a614290565b5b602002019015159081151581525050611fa26135b4565b866006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508187601e8110611ffe57611ffd614290565b5b602002018190525085806120119061431d565b9650505b6000851115612f4e5760008160018861202e9190614479565b601e811061203f5761203e614290565b5b60200201519050868061205190614910565b9750508187601e811061206757612066614290565b5b602002016120736135e2565b815250858061208190614910565b965050848061208f90614910565b9550506001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506021600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016121449291906149b0565b6020604051808303816000875af1158015612163573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612187919061461e565b60ff1610156121e1576001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060050160026101000a81548160ff0219169083151502179055505b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b60018113612f475760007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b60018113612f3357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b5ac4b5826040518263ffffffff1660e01b815260040161229891906149f2565b602060405180830381865afa1580156122b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d99190614a39565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b5ac4b5846040518263ffffffff1660e01b815260040161233491906149f2565b602060405180830381865afa158015612351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123759190614a39565b141561238057612f20565b600082846000015160000b6123959190614a66565b9050600082856020015160000b6123ac9190614a66565b905060018212806123bd5750600181125b806123d45750600260096123d19190614479565b82135b806123eb5750600260096123e89190614479565b81135b156123f7575050612f20565b600060405180604001604052808460ff1681526020018360ff1681525090506000151588826000015160ff166009811061243457612433614290565b5b6020020151826020015160ff166009811061245257612451614290565b5b60200201511515148061254c575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa3993c289856040518363ffffffff1660e01b81526004016124f6929190614afa565b602060405180830381865afa158015612513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125379190614703565b6004811061254857612547614290565b5b0154145b15612f1c5760008a148061261257508860ff16604261256b9190614479565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016125ca9291906149b0565b6020604051808303816000875af11580156125e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260d919061461e565b60ff16105b15612f16576040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401612681929190614b23565b6020604051808303816000875af11580156126a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c4919061461e565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b815260040161272b929190614b23565b6020604051808303816000875af115801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e919061461e565b60ff1681526020016001600481111561278a576127896136fc565b5b8152508d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff02191690836004811115612823576128226136fc565b5b021790555090505060008d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1614156128c65760038d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160026101000a81548160ff021916908360048111156128c0576128bf6136fc565b5b02179055505b8c600501600081819054906101000a900460ff16809291906128e79061444f565b91906101000a81548160ff021916908360ff1602179055505060168961290d919061464b565b985080878d601e811061292357612922614290565b5b60200201819052508b806129369061431d565b9c505089806129449061431d565b9a5050600188826000015160ff166009811061296357612962614290565b5b6020020151826020015160ff166009811061298157612980614290565b5b6020020190151590811515815250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851480156129bf5750600084145b8015612a16575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600060048110612a1257612a11614290565b5b0154145b15612b005760018d60050160009054906101000a900460ff16612a399190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600060048110612a8657612a85614290565b5b018190555060018d60050160009054906101000a900460ff16612aa99190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600160048110612af657612af5614290565b5b0181905550612f11565b600185148015612b105750600084145b8015612b67575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600160048110612b6357612b62614290565b5b0154145b15612c515760018d60050160009054906101000a900460ff16612b8a9190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600160048110612bd757612bd6614290565b5b018190555060018d60050160009054906101000a900460ff16612bfa9190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600060048110612c4757612c46614290565b5b0181905550612f10565b600184148015612c615750600085145b8015612cb8575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260048110612cb457612cb3614290565b5b0154145b15612da25760018d60050160009054906101000a900460ff16612cdb9190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260048110612d2857612d27614290565b5b018190555060018d60050160009054906101000a900460ff16612d4b9190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600360048110612d9857612d97614290565b5b0181905550612f0f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84148015612dd15750600085145b8015612e28575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600360048110612e2457612e23614290565b5b0154145b15612f0e5760018d60050160009054906101000a900460ff16612e4b9190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600360048110612e9857612e97614290565b5b018190555060018d60050160009054906101000a900460ff16612ebb9190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600260048110612f0857612f07614290565b5b01819055505b5b5b5b612f1b565b600098505b5b5050505b8080612f2b90614b4c565b915050612235565b508080612f3f90614b4c565b915050612207565b5050612015565b60008514612f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8890614c07565b60405180910390fd5b60028760030160008960060160000160009054906101000a900460ff1660ff16815260200190815260200160002060008960060160000160019054906101000a900460ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060038760040160006001815260200190815260200160002060000160026101000a81548160ff0219169083600481111561303f5761303e6136fc565b5b021790555050505050505050565b60005b600981101561346a5760005b600981101561345657600160ff16836003016000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900460ff1660ff1614156134435760005b6004811015613441576000846003016000858152602001908152602001600020600084815260200190815260200160002060010182600481106130f3576130f2614290565b5b0154141561342e576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8360405180604001604052808860ff1681526020018760ff168152506040518363ffffffff1660e01b8152600401613174929190614c27565b6040805180830381865afa158015613190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b49190614ca0565b90506000856003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1690506042600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016132639291906149b0565b6020604051808303816000875af1158015613282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a6919061461e565b60ff161080156132b95750600060ff1681145b1561342b57604051806060016040528060ff8016815260200160ff801681526020016004808111156132ee576132ed6136fc565b5b8152508660040160008860050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff02191690836004811115613387576133866136fc565b5b021790555090505085600501600081819054906101000a900460ff16809291906133b09061444f565b91906101000a81548160ff021916908360ff1602179055505060018660050160009054906101000a900460ff166133e79190614595565b60ff168660030160008781526020019081526020016000206000868152602001908152602001600020600101846004811061342557613424614290565b5b01819055505b50505b80806134399061431d565b9150506130ad565b505b808061344e9061431d565b91505061305c565b5080806134629061431d565b915050613050565b5050565b600033905090565b6040518060c0016040528060006004811115613495576134946136fc565b5b815260200160008152602001600060ff168152602001600060ff1681526020016000151581526020016000151581525090565b6040518060c00160405280600060ff168152602001600060ff1681526020016134ef613602565b81526020016000151581526020016000151581526020016000151581525090565b6040518060600160405280600060ff168152602001600060ff16815260200160006004811115613543576135426136fc565b5b81525090565b8260048101928215613575579182015b82811115613574578254825591600101919060010190613559565b5b5090506135829190613624565b5090565b6040518061012001604052806009905b61359e613641565b8152602001906001900390816135965790505090565b604051806103c00160405280601e905b6135cc6135e2565b8152602001906001900390816135c45790505090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600490602082028036833780820191505090505090565b5b8082111561363d576000816000905550600101613625565b5090565b604051806101200160405280600990602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b61368681613673565b811461369157600080fd5b50565b6000813590506136a38161367d565b92915050565b6000806000606084860312156136c2576136c161366e565b5b60006136d086828701613694565b93505060206136e186828701613694565b92505060406136f286828701613694565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061373c5761373b6136fc565b5b50565b600081905061374d8261372b565b919050565b600061375d8261373f565b9050919050565b61376d81613752565b82525050565b61377c81613673565b82525050565b600060ff82169050919050565b61379881613782565b82525050565b60008115159050919050565b6137b38161379e565b82525050565b60c0820160008201516137cf6000850182613764565b5060208201516137e26020850182613773565b5060408201516137f5604085018261378f565b506060820151613808606085018261378f565b50608082015161381b60808501826137aa565b5060a082015161382e60a08501826137aa565b50505050565b600060c08201905061384960008301846137b9565b92915050565b6000602082840312156138655761386461366e565b5b600061387384828501613694565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060049050919050565b600081905092915050565b6000819050919050565b60006139008383613773565b60208301905092915050565b6000602082019050919050565b613922816138d4565b61392c81846138df565b9250613937826138ea565b8060005b8381101561396857815161394f87826138f4565b965061395a8361390c565b92505060018101905061393b565b505050505050565b61012082016000820151613987600085018261378f565b50602082015161399a602085018261378f565b5060408201516139ad6040850182613919565b5060608201516139c060c08501826137aa565b5060808201516139d360e08501826137aa565b5060a08201516139e76101008501826137aa565b50505050565b60006139f98383613970565b6101208301905092915050565b6000602082019050919050565b6000613a1e826138a8565b613a2881856138b3565b9350613a33836138c4565b8060005b83811015613a64578151613a4b88826139ed565b9750613a5683613a06565b925050600181019050613a37565b5085935050505092915050565b6000613a7d8383613a13565b905092915050565b6000602082019050919050565b6000613a9d8261387c565b613aa78185613887565b935083602082028501613ab985613898565b8060005b85811015613af55784840389528151613ad68582613a71565b9450613ae183613a85565b925060208a01995050600181019050613abd565b50829750879550505050505092915050565b60006020820190508181036000830152613b218184613a92565b905092915050565b613b328161379e565b82525050565b6000602082019050613b4d6000830184613b29565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613b98613b93613b8e84613b53565b613b73565b613b53565b9050919050565b6000613baa82613b7d565b9050919050565b6000613bbc82613b9f565b9050919050565b613bcc81613bb1565b82525050565b6000602082019050613be76000830184613bc3565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60058110613c2a57613c296136fc565b5b50565b6000819050613c3b82613c19565b919050565b6000613c4b82613c2d565b9050919050565b613c5b81613c40565b82525050565b606082016000820151613c77600085018261378f565b506020820151613c8a602085018261378f565b506040820151613c9d6040850182613c52565b50505050565b6000613caf8383613c61565b60608301905092915050565b6000602082019050919050565b6000613cd382613bed565b613cdd8185613bf8565b9350613ce883613c09565b8060005b83811015613d19578151613d008882613ca3565b9750613d0b83613cbb565b925050600181019050613cec565b5085935050505092915050565b60006020820190508181036000830152613d408184613cc8565b905092915050565b60008060008060808587031215613d6257613d6161366e565b5b6000613d7087828801613694565b9450506020613d8187828801613694565b9350506040613d9287828801613694565b9250506060613da387828801613694565b91505092959194509250565b606082016000820151613dc5600085018261378f565b506020820151613dd8602085018261378f565b506040820151613deb6040850182613c52565b50505050565b6000606082019050613e066000830184613daf565b92915050565b613e1581613782565b82525050565b604082016000820151613e31600085018261378f565b506020820151613e44602085018261378f565b50505050565b6000608082019050613e5f6000830186613e0c565b613e6c6020830185613e0c565b613e796040830184613e1b565b949350505050565b6000613e8c82613b53565b9050919050565b613e9c81613e81565b8114613ea757600080fd5b50565b600081359050613eb981613e93565b92915050565b600080600060608486031215613ed857613ed761366e565b5b6000613ee686828701613eaa565b9350506020613ef786828701613eaa565b9250506040613f0886828701613eaa565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c082016000820151613f546000850182613764565b506020820151613f676020850182613773565b506040820151613f7a604085018261378f565b506060820151613f8d606085018261378f565b506080820151613fa060808501826137aa565b5060a0820151613fb360a08501826137aa565b50505050565b6000613fc58383613f3e565b60c08301905092915050565b6000602082019050919050565b6000613fe982613f12565b613ff38185613f1d565b9350613ffe83613f2e565b8060005b8381101561402f5781516140168882613fb9565b975061402183613fd1565b925050600181019050614002565b5085935050505092915050565b600060208201905081810360008301526140568184613fde565b905092915050565b61406781613e81565b82525050565b6000602082019050614082600083018461405e565b92915050565b6005811061409557600080fd5b50565b6000813590506140a781614088565b92915050565b600080600080600060a086880312156140c9576140c861366e565b5b60006140d788828901613694565b95505060206140e888828901613694565b94505060406140f988828901613694565b935050606061410a88828901613694565b925050608061411b88828901614098565b9150509295509295909350565b600061413382613b9f565b9050919050565b61414381614128565b82525050565b600060208201905061415e600083018461413a565b92915050565b61416d81613673565b82525050565b60006020820190506141886000830184614164565b92915050565b6000602082840312156141a4576141a361366e565b5b60006141b284828501613eaa565b91505092915050565b60006141c682613b9f565b9050919050565b6141d6816141bb565b82525050565b60006020820190506141f160008301846141cd565b92915050565b6101208201600082015161420e600085018261378f565b506020820151614221602085018261378f565b5060408201516142346040850182613919565b50606082015161424760c08501826137aa565b50608082015161425a60e08501826137aa565b5060a082015161426e6101008501826137aa565b50505050565b60006101208201905061428a60008301846141f7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061432882613673565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561435b5761435a6142ee565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b60006143ad601183614366565b91506143b882614377565b602082019050919050565b600060208201905081810360008301526143dc816143a0565b9050919050565b7f4f6e6c792067616d6520636f6e74726163742063616e20757365000000000000600082015250565b6000614419601a83614366565b9150614424826143e3565b602082019050919050565b600060208201905081810360008301526144488161440c565b9050919050565b600061445a82613782565b915060ff82141561446e5761446d6142ee565b5b600182019050919050565b600061448482613673565b915061448f83613673565b9250828210156144a2576144a16142ee565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614509602683614366565b9150614514826144ad565b604082019050919050565b60006020820190508181036000830152614538816144fc565b9050919050565b600061454a82613673565b915061455583613673565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561458a576145896142ee565b5b828201905092915050565b60006145a082613782565b91506145ab83613782565b9250828210156145be576145bd6142ee565b5b828203905092915050565b60006040820190506145de6000830185613e0c565b6145eb6020830184613e0c565b9392505050565b6145fb81613782565b811461460657600080fd5b50565b600081519050614618816145f2565b92915050565b6000602082840312156146345761463361366e565b5b600061464284828501614609565b91505092915050565b600061465682613782565b915061466183613782565b92508260ff03821115614677576146766142ee565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006146b8602083614366565b91506146c382614682565b602082019050919050565b600060208201905081810360008301526146e7816146ab565b9050919050565b6000815190506146fd8161367d565b92915050565b6000602082840312156147195761471861366e565b5b6000614727848285016146ee565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b61474f82614735565b810181811067ffffffffffffffff8211171561476e5761476d6142bf565b5b80604052505050565b6000614781613664565b905061478d8282614746565b919050565b6005811061479f57600080fd5b50565b6000815190506147b181614792565b92915050565b6147c08161379e565b81146147cb57600080fd5b50565b6000815190506147dd816147b7565b92915050565b600060c082840312156147f9576147f8614730565b5b61480360c0614777565b90506000614813848285016147a2565b6000830152506020614827848285016146ee565b602083015250604061483b84828501614609565b604083015250606061484f84828501614609565b6060830152506080614863848285016147ce565b60808301525060a0614877848285016147ce565b60a08301525092915050565b600060c082840312156148995761489861366e565b5b60006148a7848285016147e3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006148ea82613673565b91506148f583613673565b925082614905576149046148b0565b5b828204905092915050565b600061491b82613673565b9150600082141561492f5761492e6142ee565b5b600182039050919050565b6000819050919050565b600061495f61495a6149558461493a565b613b73565b613782565b9050919050565b61496f81614944565b82525050565b6000819050919050565b600061499a61499561499084614975565b613b73565b613782565b9050919050565b6149aa8161497f565b82525050565b60006040820190506149c56000830185614966565b6149d260208301846149a1565b9392505050565b6000819050919050565b6149ec816149d9565b82525050565b6000602082019050614a0760008301846149e3565b92915050565b614a16816149d9565b8114614a2157600080fd5b50565b600081519050614a3381614a0d565b92915050565b600060208284031215614a4f57614a4e61366e565b5b6000614a5d84828501614a24565b91505092915050565b6000614a71826149d9565b9150614a7c836149d9565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615614ab757614ab66142ee565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615614aef57614aee6142ee565b5b828201905092915050565b6000608082019050614b0f6000830185613e1b565b614b1c6040830184613e1b565b9392505050565b6000604082019050614b386000830185614966565b614b456020830184613e0c565b9392505050565b6000614b57826149d9565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b8a57614b896142ee565b5b600182019050919050565b7f4572726f723a20426164206d617067656e2e2020556e706c6163656420726f6f60008201527f6d73000000000000000000000000000000000000000000000000000000000000602082015250565b6000614bf1602283614366565b9150614bfc82614b95565b604082019050919050565b60006020820190508181036000830152614c2081614be4565b9050919050565b6000606082019050614c3c6000830185614164565b614c496020830184613e1b565b9392505050565b600060408284031215614c6657614c65614730565b5b614c706040614777565b90506000614c8084828501614609565b6000830152506020614c9484828501614609565b60208301525092915050565b600060408284031215614cb657614cb561366e565b5b6000614cc484828501614c50565b9150509291505056fea26469706673582212209f4f8da621c57b3045ee3c8ef81b27b6d11f99e65de473b7a2f9c45ef934baa464736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806386e529d0116100ad578063c3fe3e2811610071578063c3fe3e281461032e578063f01fc35a1461034c578063f2fde38b1461036a578063f7157f6414610386578063f9dfbfcb146103a457610121565b806386e529d01461028c5780638ab63380146102a85780638af13fd2146102c45780638da5cb5b146102f4578063b6cdd3b41461031257610121565b80635a29638d116100f45780635a29638d146101d257806369568fd5146101f05780636ea1dcd814610220578063715018a61461025057806375990a0e1461025a57610121565b806302861c6c146101265780631ef0441614610156578063471b67591461018657806358308aa8146101b6575b600080fd5b610140600480360381019061013b91906136a9565b6103d4565b60405161014d9190613834565b60405180910390f35b610170600480360381019061016b919061384f565b610535565b60405161017d9190613b07565b60405180910390f35b6101a0600480360381019061019b91906136a9565b6107c0565b6040516101ad9190613b38565b60405180910390f35b6101d060048036038101906101cb919061384f565b61091a565b005b6101da610ad7565b6040516101e79190613bd2565b60405180910390f35b61020a6004803603810190610205919061384f565b610afd565b6040516102179190613d26565b60405180910390f35b61023a60048036038101906102359190613d48565b610c89565b6040516102479190613df1565b60405180910390f35b610258610df3565b005b610274600480360381019061026f919061384f565b610e07565b60405161028393929190613e4a565b60405180910390f35b6102a660048036038101906102a191906136a9565b610e9f565b005b6102c260048036038101906102bd9190613ebf565b610f97565b005b6102de60048036038101906102d9919061384f565b611067565b6040516102eb919061403c565b60405180910390f35b6102fc611233565b604051610309919061406d565b60405180910390f35b61032c600480360381019061032791906140ad565b61125c565b005b6103366113fc565b6040516103439190614149565b60405180910390f35b610354611422565b6040516103619190614173565b60405180910390f35b610384600480360381019061037f919061418e565b61163f565b005b61038e6116c3565b60405161039b91906141dc565b60405180910390f35b6103be60048036038101906103b991906136a9565b6116e9565b6040516103cb9190614274565b60405180910390f35b6103dc613476565b600584815481106103f0576103ef614290565b5b906000526020600020906007020160000160006005868154811061041757610416614290565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900460ff1660ff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff16600481111561049c5761049b6136fc565b5b60048111156104ae576104ad6136fc565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505090509392505050565b60606000600967ffffffffffffffff811115610554576105536142bf565b5b60405190808252806020026020018201604052801561058757816020015b60608152602001906001900390816105725790505b50905060005b600981101561061c57600967ffffffffffffffff8111156105b1576105b06142bf565b5b6040519080825280602002602001820160405280156105ea57816020015b6105d76134c8565b8152602001906001900390816105cf5790505b508282815181106105fe576105fd614290565b5b602002602001018190525080806106149061431d565b91505061058d565b5060005b60098110156107b65760005b60098110156107a2576005858154811061064957610648614290565b5b9060005260206000209060070201600301600083815260200190815260200160002060008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156106fd576020028201915b8154815260200190600101908083116106e9575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505083838151811061076a57610769614290565b5b6020026020010151828151811061078457610783614290565b5b6020026020010181905250808061079a9061431d565b91505061062c565b5080806107ae9061431d565b915050610620565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610849906143c3565b60405180910390fd5b60006005858154811061086857610867614290565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000209050600160ff168160000160009054906101000a900460ff1660ff16141561090d576108e7600586815481106108d4576108d3614290565b5b906000526020600020906007020161181c565b8160000160006101000a81548160ff021916908360ff1602179055506001915050610913565b60009150505b9392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a1906143c3565b60405180910390fd5b60005b600582815481106109c1576109c0614290565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff16811015610ad357600260048111156109fe576109fd6136fc565b5b60058381548110610a1257610a11614290565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff166004811115610a5757610a566136fc565b5b1415610ac057600160058381548110610a7357610a72614290565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160026101000a81548160ff02191690836004811115610aba57610ab96136fc565b5b02179055505b8080610acb9061431d565b9150506109ad565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060058381548110610b1557610b14614290565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff1667ffffffffffffffff811115610b5057610b4f6142bf565b5b604051908082528060200260200182016040528015610b8957816020015b610b76613510565b815260200190600190039081610b6e5790505b50905060005b8151811015610c7f5760058481548110610bac57610bab614290565b5b906000526020600020906007020160040160008281526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610c3857610c376136fc565b5b6004811115610c4a57610c496136fc565b5b81525050828281518110610c6157610c60614290565b5b60200260200101819052508080610c779061431d565b915050610b8f565b5080915050919050565b610c91613510565b600060058681548110610ca757610ca6614290565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015610d14576020028201915b815481526020019060010190808311610d00575b5050505050905060058681548110610d2f57610d2e614290565b5b90600052602060002090600702016004016000828560048110610d5557610d54614290565b5b602002015181526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610dd257610dd16136fc565b5b6004811115610de457610de36136fc565b5b81525050915050949350505050565b610dfb6119ac565b610e056000611a2a565b565b60058181548110610e1757600080fd5b90600052602060002090600702016000915090508060010160009054906101000a900460ff16908060050160009054906101000a900460ff1690806006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f26906143c3565b60405180910390fd5b600160058481548110610f4557610f44614290565b5b90600052602060002090600702016003016000848152602001908152602001600020600083815260200190815260200160002060050160016101000a81548160ff021916908315150217905550505050565b610f9f6119ac565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b606060006005838154811061107f5761107e614290565b5b906000526020600020906007020160010160009054906101000a900460ff1660ff1667ffffffffffffffff8111156110ba576110b96142bf565b5b6040519080825280602002602001820160405280156110f357816020015b6110e0613476565b8152602001906001900390816110d85790505b50905060005b8151811015611229576005848154811061111657611115614290565b5b906000526020600020906007020160000160008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff166004811115611168576111676136fc565b5b600481111561117a576111796136fc565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505082828151811061120b5761120a614290565b5b602002602001018190525080806112219061431d565b9150506110f9565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e3906143c3565b60405180910390fd5b60006005868154811061130257611301614290565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060010160048060200260405190810160405280929190826004801561136f576020028201915b81548152602001906001019080831161135b575b5050505050905060006005878154811061138c5761138b614290565b5b906000526020600020906007020160040160008386600481106113b2576113b1614290565b5b602002015181526020019081526020016000209050828160000160026101000a81548160ff021916908360048111156113ee576113ed6136fc565b5b021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab9061442f565b60405180910390fd5b6000600560018160018154018082558091505003906000526020600020906007020190506114e481600001611aee565b8160010160006101000a81548160ff021916908360ff160217905550604051806060016040528060ff8016815260200160ff8016815260200160006004811115611531576115306136fc565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156115ca576115c96136fc565b5b021790555090505080600501600081819054906101000a900460ff16809291906115f39061444f565b91906101000a81548160ff021916908360ff1602179055505061161581611d19565b61161e81611efb565b6116278161304d565b60016005805490506116399190614479565b91505090565b6116476119ac565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae9061451f565b60405180910390fd5b6116c081611a2a565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116f16134c8565b6005848154811061170557611704614290565b5b9060005260206000209060070201600301600084815260200190815260200160002060008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156117b9576020028201915b8154815260200190600101908083116117a5575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505090509392505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f6001600261186b919061453f565b60048660010160009054906101000a900460ff166118899190614595565b6040518363ffffffff1660e01b81526004016118a69291906145c9565b6020604051808303816000875af11580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e9919061461e565b90505b600115158360020160008360ff16815260200190815260200160002060009054906101000a900460ff16151514156119725760018360010160009054906101000a900460ff1661193c9190614595565b60ff168160ff16141561195e5760016002611957919061464b565b905061196d565b80806119699061444f565b9150505b6118ec565b60018360020160008360ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050919050565b6119b461346e565b73ffffffffffffffffffffffffffffffffffffffff166119d2611233565b73ffffffffffffffffffffffffffffffffffffffff1614611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f906146ce565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b829190614703565b905060005b81811015611d0f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe826040518263ffffffff1660e01b8152600401611bea9190614173565b60c060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b9190614883565b84600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115611c6857611c676136fc565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff0219169083151502179055509050508080611d079061431d565b915050611b87565b5080915050919050565b600060046001816001815401808255809150500390600052602060002090600602019050600060016009611d4d9190614479565b90506000600160026009611d6191906148df565b611d6b919061453f565b905060405180604001604052808360ff1681526020018260ff168152508460060160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050508284600301600084815260200190815260200160002060008381526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff1602179055506000820160019054906101000a900460ff168160000160016101000a81548160ff021916908360ff1602179055506001820181600101906004611e6a929190613549565b506005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506005820160029054906101000a900460ff168160050160026101000a81548160ff02191690831515021790555090505050505050565b60008060028360010160009054906101000a900460ff16611f1c9190614595565b60ff1690506000600190506000611f31613586565b6001818760060160000160009054906101000a900460ff1660ff1660098110611f5d57611f5c614290565b5b60200201518760060160000160019054906101000a900460ff1660ff1660098110611f8b57611f8a614290565b5b602002019015159081151581525050611fa26135b4565b866006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508187601e8110611ffe57611ffd614290565b5b602002018190525085806120119061431d565b9650505b6000851115612f4e5760008160018861202e9190614479565b601e811061203f5761203e614290565b5b60200201519050868061205190614910565b9750508187601e811061206757612066614290565b5b602002016120736135e2565b815250858061208190614910565b965050848061208f90614910565b9550506001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506021600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016121449291906149b0565b6020604051808303816000875af1158015612163573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612187919061461e565b60ff1610156121e1576001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060050160026101000a81548160ff0219169083151502179055505b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b60018113612f475760007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b60018113612f3357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b5ac4b5826040518263ffffffff1660e01b815260040161229891906149f2565b602060405180830381865afa1580156122b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d99190614a39565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b5ac4b5846040518263ffffffff1660e01b815260040161233491906149f2565b602060405180830381865afa158015612351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123759190614a39565b141561238057612f20565b600082846000015160000b6123959190614a66565b9050600082856020015160000b6123ac9190614a66565b905060018212806123bd5750600181125b806123d45750600260096123d19190614479565b82135b806123eb5750600260096123e89190614479565b81135b156123f7575050612f20565b600060405180604001604052808460ff1681526020018360ff1681525090506000151588826000015160ff166009811061243457612433614290565b5b6020020151826020015160ff166009811061245257612451614290565b5b60200201511515148061254c575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa3993c289856040518363ffffffff1660e01b81526004016124f6929190614afa565b602060405180830381865afa158015612513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125379190614703565b6004811061254857612547614290565b5b0154145b15612f1c5760008a148061261257508860ff16604261256b9190614479565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016125ca9291906149b0565b6020604051808303816000875af11580156125e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260d919061461e565b60ff16105b15612f16576040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401612681929190614b23565b6020604051808303816000875af11580156126a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c4919061461e565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b815260040161272b929190614b23565b6020604051808303816000875af115801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e919061461e565b60ff1681526020016001600481111561278a576127896136fc565b5b8152508d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff02191690836004811115612823576128226136fc565b5b021790555090505060008d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1614156128c65760038d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160026101000a81548160ff021916908360048111156128c0576128bf6136fc565b5b02179055505b8c600501600081819054906101000a900460ff16809291906128e79061444f565b91906101000a81548160ff021916908360ff1602179055505060168961290d919061464b565b985080878d601e811061292357612922614290565b5b60200201819052508b806129369061431d565b9c505089806129449061431d565b9a5050600188826000015160ff166009811061296357612962614290565b5b6020020151826020015160ff166009811061298157612980614290565b5b6020020190151590811515815250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851480156129bf5750600084145b8015612a16575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600060048110612a1257612a11614290565b5b0154145b15612b005760018d60050160009054906101000a900460ff16612a399190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600060048110612a8657612a85614290565b5b018190555060018d60050160009054906101000a900460ff16612aa99190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600160048110612af657612af5614290565b5b0181905550612f11565b600185148015612b105750600084145b8015612b67575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600160048110612b6357612b62614290565b5b0154145b15612c515760018d60050160009054906101000a900460ff16612b8a9190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600160048110612bd757612bd6614290565b5b018190555060018d60050160009054906101000a900460ff16612bfa9190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600060048110612c4757612c46614290565b5b0181905550612f10565b600184148015612c615750600085145b8015612cb8575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260048110612cb457612cb3614290565b5b0154145b15612da25760018d60050160009054906101000a900460ff16612cdb9190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260048110612d2857612d27614290565b5b018190555060018d60050160009054906101000a900460ff16612d4b9190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600360048110612d9857612d97614290565b5b0181905550612f0f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84148015612dd15750600085145b8015612e28575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600360048110612e2457612e23614290565b5b0154145b15612f0e5760018d60050160009054906101000a900460ff16612e4b9190614595565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600360048110612e9857612e97614290565b5b018190555060018d60050160009054906101000a900460ff16612ebb9190614595565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600260048110612f0857612f07614290565b5b01819055505b5b5b5b612f1b565b600098505b5b5050505b8080612f2b90614b4c565b915050612235565b508080612f3f90614b4c565b915050612207565b5050612015565b60008514612f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8890614c07565b60405180910390fd5b60028760030160008960060160000160009054906101000a900460ff1660ff16815260200190815260200160002060008960060160000160019054906101000a900460ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060038760040160006001815260200190815260200160002060000160026101000a81548160ff0219169083600481111561303f5761303e6136fc565b5b021790555050505050505050565b60005b600981101561346a5760005b600981101561345657600160ff16836003016000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900460ff1660ff1614156134435760005b6004811015613441576000846003016000858152602001908152602001600020600084815260200190815260200160002060010182600481106130f3576130f2614290565b5b0154141561342e576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8360405180604001604052808860ff1681526020018760ff168152506040518363ffffffff1660e01b8152600401613174929190614c27565b6040805180830381865afa158015613190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b49190614ca0565b90506000856003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1690506042600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016132639291906149b0565b6020604051808303816000875af1158015613282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a6919061461e565b60ff161080156132b95750600060ff1681145b1561342b57604051806060016040528060ff8016815260200160ff801681526020016004808111156132ee576132ed6136fc565b5b8152508660040160008860050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff02191690836004811115613387576133866136fc565b5b021790555090505085600501600081819054906101000a900460ff16809291906133b09061444f565b91906101000a81548160ff021916908360ff1602179055505060018660050160009054906101000a900460ff166133e79190614595565b60ff168660030160008781526020019081526020016000206000868152602001908152602001600020600101846004811061342557613424614290565b5b01819055505b50505b80806134399061431d565b9150506130ad565b505b808061344e9061431d565b91505061305c565b5080806134629061431d565b915050613050565b5050565b600033905090565b6040518060c0016040528060006004811115613495576134946136fc565b5b815260200160008152602001600060ff168152602001600060ff1681526020016000151581526020016000151581525090565b6040518060c00160405280600060ff168152602001600060ff1681526020016134ef613602565b81526020016000151581526020016000151581526020016000151581525090565b6040518060600160405280600060ff168152602001600060ff16815260200160006004811115613543576135426136fc565b5b81525090565b8260048101928215613575579182015b82811115613574578254825591600101919060010190613559565b5b5090506135829190613624565b5090565b6040518061012001604052806009905b61359e613641565b8152602001906001900390816135965790505090565b604051806103c00160405280601e905b6135cc6135e2565b8152602001906001900390816135c45790505090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600490602082028036833780820191505090505090565b5b8082111561363d576000816000905550600101613625565b5090565b604051806101200160405280600990602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b61368681613673565b811461369157600080fd5b50565b6000813590506136a38161367d565b92915050565b6000806000606084860312156136c2576136c161366e565b5b60006136d086828701613694565b93505060206136e186828701613694565b92505060406136f286828701613694565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061373c5761373b6136fc565b5b50565b600081905061374d8261372b565b919050565b600061375d8261373f565b9050919050565b61376d81613752565b82525050565b61377c81613673565b82525050565b600060ff82169050919050565b61379881613782565b82525050565b60008115159050919050565b6137b38161379e565b82525050565b60c0820160008201516137cf6000850182613764565b5060208201516137e26020850182613773565b5060408201516137f5604085018261378f565b506060820151613808606085018261378f565b50608082015161381b60808501826137aa565b5060a082015161382e60a08501826137aa565b50505050565b600060c08201905061384960008301846137b9565b92915050565b6000602082840312156138655761386461366e565b5b600061387384828501613694565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060049050919050565b600081905092915050565b6000819050919050565b60006139008383613773565b60208301905092915050565b6000602082019050919050565b613922816138d4565b61392c81846138df565b9250613937826138ea565b8060005b8381101561396857815161394f87826138f4565b965061395a8361390c565b92505060018101905061393b565b505050505050565b61012082016000820151613987600085018261378f565b50602082015161399a602085018261378f565b5060408201516139ad6040850182613919565b5060608201516139c060c08501826137aa565b5060808201516139d360e08501826137aa565b5060a08201516139e76101008501826137aa565b50505050565b60006139f98383613970565b6101208301905092915050565b6000602082019050919050565b6000613a1e826138a8565b613a2881856138b3565b9350613a33836138c4565b8060005b83811015613a64578151613a4b88826139ed565b9750613a5683613a06565b925050600181019050613a37565b5085935050505092915050565b6000613a7d8383613a13565b905092915050565b6000602082019050919050565b6000613a9d8261387c565b613aa78185613887565b935083602082028501613ab985613898565b8060005b85811015613af55784840389528151613ad68582613a71565b9450613ae183613a85565b925060208a01995050600181019050613abd565b50829750879550505050505092915050565b60006020820190508181036000830152613b218184613a92565b905092915050565b613b328161379e565b82525050565b6000602082019050613b4d6000830184613b29565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613b98613b93613b8e84613b53565b613b73565b613b53565b9050919050565b6000613baa82613b7d565b9050919050565b6000613bbc82613b9f565b9050919050565b613bcc81613bb1565b82525050565b6000602082019050613be76000830184613bc3565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60058110613c2a57613c296136fc565b5b50565b6000819050613c3b82613c19565b919050565b6000613c4b82613c2d565b9050919050565b613c5b81613c40565b82525050565b606082016000820151613c77600085018261378f565b506020820151613c8a602085018261378f565b506040820151613c9d6040850182613c52565b50505050565b6000613caf8383613c61565b60608301905092915050565b6000602082019050919050565b6000613cd382613bed565b613cdd8185613bf8565b9350613ce883613c09565b8060005b83811015613d19578151613d008882613ca3565b9750613d0b83613cbb565b925050600181019050613cec565b5085935050505092915050565b60006020820190508181036000830152613d408184613cc8565b905092915050565b60008060008060808587031215613d6257613d6161366e565b5b6000613d7087828801613694565b9450506020613d8187828801613694565b9350506040613d9287828801613694565b9250506060613da387828801613694565b91505092959194509250565b606082016000820151613dc5600085018261378f565b506020820151613dd8602085018261378f565b506040820151613deb6040850182613c52565b50505050565b6000606082019050613e066000830184613daf565b92915050565b613e1581613782565b82525050565b604082016000820151613e31600085018261378f565b506020820151613e44602085018261378f565b50505050565b6000608082019050613e5f6000830186613e0c565b613e6c6020830185613e0c565b613e796040830184613e1b565b949350505050565b6000613e8c82613b53565b9050919050565b613e9c81613e81565b8114613ea757600080fd5b50565b600081359050613eb981613e93565b92915050565b600080600060608486031215613ed857613ed761366e565b5b6000613ee686828701613eaa565b9350506020613ef786828701613eaa565b9250506040613f0886828701613eaa565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c082016000820151613f546000850182613764565b506020820151613f676020850182613773565b506040820151613f7a604085018261378f565b506060820151613f8d606085018261378f565b506080820151613fa060808501826137aa565b5060a0820151613fb360a08501826137aa565b50505050565b6000613fc58383613f3e565b60c08301905092915050565b6000602082019050919050565b6000613fe982613f12565b613ff38185613f1d565b9350613ffe83613f2e565b8060005b8381101561402f5781516140168882613fb9565b975061402183613fd1565b925050600181019050614002565b5085935050505092915050565b600060208201905081810360008301526140568184613fde565b905092915050565b61406781613e81565b82525050565b6000602082019050614082600083018461405e565b92915050565b6005811061409557600080fd5b50565b6000813590506140a781614088565b92915050565b600080600080600060a086880312156140c9576140c861366e565b5b60006140d788828901613694565b95505060206140e888828901613694565b94505060406140f988828901613694565b935050606061410a88828901613694565b925050608061411b88828901614098565b9150509295509295909350565b600061413382613b9f565b9050919050565b61414381614128565b82525050565b600060208201905061415e600083018461413a565b92915050565b61416d81613673565b82525050565b60006020820190506141886000830184614164565b92915050565b6000602082840312156141a4576141a361366e565b5b60006141b284828501613eaa565b91505092915050565b60006141c682613b9f565b9050919050565b6141d6816141bb565b82525050565b60006020820190506141f160008301846141cd565b92915050565b6101208201600082015161420e600085018261378f565b506020820151614221602085018261378f565b5060408201516142346040850182613919565b50606082015161424760c08501826137aa565b50608082015161425a60e08501826137aa565b5060a082015161426e6101008501826137aa565b50505050565b60006101208201905061428a60008301846141f7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061432882613673565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561435b5761435a6142ee565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b60006143ad601183614366565b91506143b882614377565b602082019050919050565b600060208201905081810360008301526143dc816143a0565b9050919050565b7f4f6e6c792067616d6520636f6e74726163742063616e20757365000000000000600082015250565b6000614419601a83614366565b9150614424826143e3565b602082019050919050565b600060208201905081810360008301526144488161440c565b9050919050565b600061445a82613782565b915060ff82141561446e5761446d6142ee565b5b600182019050919050565b600061448482613673565b915061448f83613673565b9250828210156144a2576144a16142ee565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614509602683614366565b9150614514826144ad565b604082019050919050565b60006020820190508181036000830152614538816144fc565b9050919050565b600061454a82613673565b915061455583613673565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561458a576145896142ee565b5b828201905092915050565b60006145a082613782565b91506145ab83613782565b9250828210156145be576145bd6142ee565b5b828203905092915050565b60006040820190506145de6000830185613e0c565b6145eb6020830184613e0c565b9392505050565b6145fb81613782565b811461460657600080fd5b50565b600081519050614618816145f2565b92915050565b6000602082840312156146345761463361366e565b5b600061464284828501614609565b91505092915050565b600061465682613782565b915061466183613782565b92508260ff03821115614677576146766142ee565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006146b8602083614366565b91506146c382614682565b602082019050919050565b600060208201905081810360008301526146e7816146ab565b9050919050565b6000815190506146fd8161367d565b92915050565b6000602082840312156147195761471861366e565b5b6000614727848285016146ee565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b61474f82614735565b810181811067ffffffffffffffff8211171561476e5761476d6142bf565b5b80604052505050565b6000614781613664565b905061478d8282614746565b919050565b6005811061479f57600080fd5b50565b6000815190506147b181614792565b92915050565b6147c08161379e565b81146147cb57600080fd5b50565b6000815190506147dd816147b7565b92915050565b600060c082840312156147f9576147f8614730565b5b61480360c0614777565b90506000614813848285016147a2565b6000830152506020614827848285016146ee565b602083015250604061483b84828501614609565b604083015250606061484f84828501614609565b6060830152506080614863848285016147ce565b60808301525060a0614877848285016147ce565b60a08301525092915050565b600060c082840312156148995761489861366e565b5b60006148a7848285016147e3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006148ea82613673565b91506148f583613673565b925082614905576149046148b0565b5b828204905092915050565b600061491b82613673565b9150600082141561492f5761492e6142ee565b5b600182039050919050565b6000819050919050565b600061495f61495a6149558461493a565b613b73565b613782565b9050919050565b61496f81614944565b82525050565b6000819050919050565b600061499a61499561499084614975565b613b73565b613782565b9050919050565b6149aa8161497f565b82525050565b60006040820190506149c56000830185614966565b6149d260208301846149a1565b9392505050565b6000819050919050565b6149ec816149d9565b82525050565b6000602082019050614a0760008301846149e3565b92915050565b614a16816149d9565b8114614a2157600080fd5b50565b600081519050614a3381614a0d565b92915050565b600060208284031215614a4f57614a4e61366e565b5b6000614a5d84828501614a24565b91505092915050565b6000614a71826149d9565b9150614a7c836149d9565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615614ab757614ab66142ee565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615614aef57614aee6142ee565b5b828201905092915050565b6000608082019050614b0f6000830185613e1b565b614b1c6040830184613e1b565b9392505050565b6000604082019050614b386000830185614966565b614b456020830184613e0c565b9392505050565b6000614b57826149d9565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b8a57614b896142ee565b5b600182019050919050565b7f4572726f723a20426164206d617067656e2e2020556e706c6163656420726f6f60008201527f6d73000000000000000000000000000000000000000000000000000000000000602082015250565b6000614bf1602283614366565b9150614bfc82614b95565b604082019050919050565b60006020820190508181036000830152614c2081614be4565b9050919050565b6000606082019050614c3c6000830185614164565b614c496020830184613e1b565b9392505050565b600060408284031215614c6657614c65614730565b5b614c706040614777565b90506000614c8084828501614609565b6000830152506020614c9484828501614609565b60208301525092915050565b600060408284031215614cb657614cb561366e565b5b6000614cc484828501614c50565b9150509291505056fea26469706673582212209f4f8da621c57b3045ee3c8ef81b27b6d11f99e65de473b7a2f9c45ef934baa464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1999,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "game",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GameInterface)1936"
      },
      {
        "astId": 2002,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)1994"
      },
      {
        "astId": 2005,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomTiles",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(RoomTileInterface)1950"
      },
      {
        "astId": 2039,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "gameTiles",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(GameTile)3648_storage)dyn_storage"
      },
      {
        "astId": 2043,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "maps",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Map)3685_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(GameTile)3648_storage)dyn_storage": {
        "base": "t_struct(GameTile)3648_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.GameTile[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Map)3685_storage)dyn_storage": {
        "base": "t_struct(Map)3685_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Map[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameInterface)1936": {
        "encoding": "inplace",
        "label": "contract GameInterface",
        "numberOfBytes": "20"
      },
      "t_contract(RoomTileInterface)1950": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)1994": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)3718": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DoorStatus)3572": {
        "encoding": "inplace",
        "label": "enum BCTypes.DoorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)3648_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BCTypes.GameTile))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GameTile)3648_storage)"
      },
      "t_mapping(t_uint256,t_struct(Door)3656_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.Door)",
        "numberOfBytes": "32",
        "value": "t_struct(Door)3656_storage"
      },
      "t_mapping(t_uint256,t_struct(GameTile)3648_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.GameTile)",
        "numberOfBytes": "32",
        "value": "t_struct(GameTile)3648_storage"
      },
      "t_mapping(t_uint256,t_struct(RoomTile)3732_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.RoomTile)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomTile)3732_storage"
      },
      "t_struct(Door)3656_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Door",
        "members": [
          {
            "astId": 3650,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsBreach",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3652,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsHack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3655,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "status",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(DoorStatus)3572"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameTile)3648_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.GameTile",
        "members": [
          {
            "astId": 3635,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3637,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "parentId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3641,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 3643,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "explored",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 3645,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "looted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 3647,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasVent",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)3685_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Map",
        "members": [
          {
            "astId": 3661,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomList",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RoomTile)3732_storage)"
          },
          {
            "astId": 3663,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numRooms",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3667,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "usedRooms",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 3674,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "board",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)3648_storage))"
          },
          {
            "astId": 3679,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Door)3656_storage)"
          },
          {
            "astId": 3681,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numDoors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 3684,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "startPosition",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Position)3633_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Position)3633_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 3630,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3632,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoomTile)3732_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.RoomTile",
        "members": [
          {
            "astId": 3721,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BCEventType)3718"
          },
          {
            "astId": 3723,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3725,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numItems",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3727,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numData",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3729,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasHazard",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3731,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "sigDetected",
            "offset": 3,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}