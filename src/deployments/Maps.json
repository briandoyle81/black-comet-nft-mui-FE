{
  "address": "0x199fB7f45f1dcd5684AF3482025fE1521d9428A8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "against",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "debugForceRoomId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debugForceId",
          "type": "uint256"
        }
      ],
      "name": "discoverRoom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetDoors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetGameTile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetMainReactorCoords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roomId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasHazard",
          "type": "bool"
        }
      ],
      "name": "extSetHazardStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distance",
          "type": "uint256"
        }
      ],
      "name": "extSpreadHazards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_firstRoom",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_secondRoom",
          "type": "tuple"
        }
      ],
      "name": "getDirectionBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "getDoor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "getDoorDirections",
      "outputs": [
        {
          "internalType": "bool[4]",
          "name": "",
          "type": "bool[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "_start",
          "type": "tuple"
        }
      ],
      "name": "getNeighborRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_traitNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subTraitNum",
          "type": "uint256"
        }
      ],
      "name": "getUIOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maps",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numDoors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "startPosition",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mainReactorRow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mainReactorCol",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valMax",
          "type": "uint256"
        }
      ],
      "name": "normalizeToSmallRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRooms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "opposite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "resetOpenDoors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_for",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_against",
          "type": "uint256"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roomList",
      "outputs": [
        {
          "internalType": "enum BCTypes.BCEventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "eventNum",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numItems",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numData",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "sigDetected",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roomTilesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_playersAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DoorStatus",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_strength",
          "type": "uint256"
        }
      ],
      "name": "setDoorFromPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "setLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "sliceHashToSmallInt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "smallIntBetweenVals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6e24c6ed2cd7ecf0f3699483244c969ab476504675fad53d19d3ce2ca5c424c",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x199fB7f45f1dcd5684AF3482025fE1521d9428A8",
    "transactionIndex": 1,
    "gasUsed": "3449979",
    "logsBloom": "0x
    "blockHash": "0xf771a8f5f516ab44d50aad83db907336c1a709d3f296028f7241b1312da00713",
    "transactionHash": "0xc6e24c6ed2cd7ecf0f3699483244c969ab476504675fad53d19d3ce2ca5c424c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 34706522,
        "transactionHash": "0xc6e24c6ed2cd7ecf0f3699483244c969ab476504675fad53d19d3ce2ca5c424c",
        "address": "0x199fB7f45f1dcd5684AF3482025fE1521d9428A8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf771a8f5f516ab44d50aad83db907336c1a709d3f296028f7241b1312da00713"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 34706522,
        "transactionHash": "0xc6e24c6ed2cd7ecf0f3699483244c969ab476504675fad53d19d3ce2ca5c424c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001bcebe02dad11530000000000000000000000000000000000000000000000000f26eab9c3d6b47500000000000000000000000000000000000000000000303fcdf1105348511cd00000000000000000000000000000000000000000000000000d69fed99629a32200000000000000000000000000000000000000000000303fcfadfc3375fe2e23",
        "logIndex": 3,
        "blockHash": "0xf771a8f5f516ab44d50aad83db907336c1a709d3f296028f7241b1312da00713"
      }
    ],
    "blockNumber": 34706522,
    "cumulativeGasUsed": "3470979",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "199aafc117a381f89410779209b19ac5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"against\",\"type\":\"uint256\"}],\"name\":\"ChallengeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"DiceRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"debugForceRoomId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debugForceId\",\"type\":\"uint256\"}],\"name\":\"discoverRoom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetDoors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetGameTile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetMainReactorCoords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roomId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomById\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col\",\"type\":\"uint256\"}],\"name\":\"extGetRoomId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomList\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasHazard\",\"type\":\"bool\"}],\"name\":\"extSetHazardStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distance\",\"type\":\"uint256\"}],\"name\":\"extSpreadHazards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_firstRoom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_secondRoom\",\"type\":\"tuple\"}],\"name\":\"getDirectionBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"getDoor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"getDoorDirections\",\"outputs\":[{\"internalType\":\"bool[4]\",\"name\":\"\",\"type\":\"bool[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"_start\",\"type\":\"tuple\"}],\"name\":\"getNeighborRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTraitNum\",\"type\":\"uint256\"}],\"name\":\"getUIOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numDoors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"startPosition\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mainReactorRow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainReactorCol\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valMax\",\"type\":\"uint256\"}],\"name\":\"normalizeToSmallRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRooms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"opposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"resetOpenDoors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roomList\",\"outputs\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roomTilesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playersAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_strength\",\"type\":\"uint256\"}],\"name\":\"setDoorFromPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"setLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"sliceHashToSmallInt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"smallIntBetweenVals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCMaps.sol\":\"Maps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/BCMaps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\nimport \\\"./BCUtils.sol\\\";\\n\\n// TODO: Eval putting constants in a separate file that is imported/shared\\nuint constant BOARD_SIZE = 11;\\nuint constant VENT_CHANCE = 33;\\nuint constant WINDOW_CHANCE = 66;\\nuint constant DOOR_CHANCE = 66;\\nuint constant DOOR_MOD_STEP = 22;\\nuint8 constant MAX_DOOR_STR = 4;\\n\\nuint constant START_ROOM_ID = 2; // TODO: Possibility of more than one start room?\\nuint8 constant UNDISCOVERED_ROOM = 1;\\nuint8 constant UNEXPLORED_MAIN_REACTOR = 100; // TODO: Random hardcoded value with meanging\\nuint8 constant EXPLORED_MAIN_REACTOR = 18;\\nuint8 constant SPACE_ROOM = 0;\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ncontract Maps is Ownable, BCUtils {\\n\\n    address public game;\\n    RoomTileInterface public roomTiles;\\n\\n    address public actionsAddress;\\n    address public playersAddress;\\n\\n    function setContractAddresses(\\n        address _gameAddress,\\n        address _utilsAddress, // TODO: Remove\\n        address _roomTilesAddress,\\n        address _actionsAddress,\\n        address _playersAddress\\n        ) public onlyOwner {\\n        game = _gameAddress;\\n        roomTiles = RoomTileInterface(_roomTilesAddress);\\n        actionsAddress = _actionsAddress;\\n        playersAddress = _playersAddress;\\n        numRooms = _setGameRoomTiles();\\n    }\\n\\n    // One room list for all games\\n    mapping (uint => BCTypes.RoomTile) public roomList;\\n    uint public numRooms;\\n\\n    BCTypes.Map[] public maps;\\n\\n    // TODO: System for options like static start and debug maps for testing\\n    function createMap() public onlyGame returns (uint) {\\n        BCTypes.Map storage newMap = maps.push();\\n                                                                                        // Skipping 18 main reactor\\n        uint[26] memory rooms = [uint(3), 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];\\n        newMap.unusedNormalRooms = rooms;\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        newMap.startPosition = BCTypes.Position(10, 6); // TODO: Hardcoding\\n        _buildMap(newMap);\\n        _addFeatures(newMap);\\n\\n        // Return the map id for the games contract\\n        return maps.length-1;\\n    }\\n\\n    function _addFeatures(BCTypes.Map storage _newMap) internal {\\n        // TODO: Eval how this is working, should usually place reactor near the back\\n        uint rooms = 0;\\n        for(uint row = 0; row < BOARD_SIZE; row++){\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                if(_newMap.board[row][col].roomId == UNDISCOVERED_ROOM) {\\n                    rooms++;\\n                    if(rooms == 5) { // TODO: Hardcoding\\n                        _newMap.board[row][col].roomId = UNEXPLORED_MAIN_REACTOR;\\n                        _newMap.mainReactorRow = row;\\n                        _newMap.mainReactorCol = col;\\n                    }\\n                    // Place Windows\\n                    for (uint i = 0; i < 4; i++) {\\n                        if (_newMap.board[row][col].doors[i] == 0) {\\n                                // TODO: Hardcoding\\n                                if(row == 9 && col == 6) {\\n                                    continue;\\n                                }\\n                                BCTypes.Position memory neighborPos = getNeighborRoom(i, BCTypes.Position(uint8(row), uint8(col)));\\n                                uint neighborId = _newMap.board[neighborPos.row][neighborPos.col].roomId;\\n                                if (neighborId == SPACE_ROOM && smallIntBetweenVals(0, 99) < WINDOW_CHANCE) {\\n                                    _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                                    255,\\n                                    255,\\n                                    BCTypes.DoorStatus.WINDOW);\\n                                    _newMap.numDoors++;\\n                                    _newMap.board[row][col].doors[i] = _newMap.numDoors-1; // -1 for correct index\\n                                    // _newMap.board[row][col].doors[opposite(i)] = _newMap.numDoors-1; //TODO: this breaks things\\n                                }\\n                            }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _buildMap(BCTypes.Map storage _newMap) internal {\\n        uint stackCount = 0;\\n        uint numToPlace = numRooms - 2; // -1 for space and -1 for empty room\\n\\n        uint availableDoors = 1; // Start with 1 because tracking is done in the pop current phase\\n\\n        uint doorModifier = 0;\\n\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_newMap.startPosition.row][_newMap.startPosition.col] = true;\\n\\n        BCTypes.Position[30] memory stack; // TODO: Write a stack library? // TODO: This can probably be 27\\n        stack[stackCount] = _newMap.startPosition; // Start by enstacking the Donghaijiu location\\n        stackCount++;\\n\\n        while (numToPlace > 0 && stackCount > 0) { // TODO: Need to track stack count to avoid crash on error if all rooms not placed\\n            // Pop the top item from the stack\\n            BCTypes.Position memory current = stack[stackCount-1];\\n            stackCount--;\\n            delete stack[stackCount]; // TODO: Confirm utility of deleting\\n\\n            numToPlace--;\\n            availableDoors--;\\n\\n            _newMap.board[current.row][current.col].roomId = UNDISCOVERED_ROOM;\\n\\n            // Add vent\\n            if (smallIntBetweenVals(0, 99) < VENT_CHANCE) {\\n                _newMap.board[current.row][current.col].hasVent = true;\\n            }\\n\\n            // Also ugly but fighting stack limit\\n            uint[4] memory order = [uint(0), 1, 2, 3];\\n\\n            // Fischer-Yates shuffle to avoid direction bias in room placement\\n            for (uint i = order.length-1; i > 0; i--) {\\n                uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n                (order[i], order[k]) = (order[k], order[i]);\\n            }\\n\\n            for (uint i = 0; i < order.length; i++) {\\n                int newRow = int8(current.row);\\n                int newCol = int8(current.col);\\n\\n                if(order[i] == 0) {\\n                    newRow--;\\n                } else if (order[i] == 1) {\\n                    newRow++;\\n                } else if (order[i] == 2) {\\n                    newCol++;\\n                } else if (order[i] == 3) {\\n                    newCol--;\\n                }\\n\\n                // Stay in bounds, reserving outside edge for Donghaijiu only\\n                if (newRow < 1 ||\\n                    newCol < 1 ||\\n                    newRow > int(BOARD_SIZE-2) ||\\n                    newCol > int(BOARD_SIZE-2)) {\\n                        continue;\\n                }\\n                BCTypes.Position memory neighbor = BCTypes.Position(uint8(int8(newRow)), uint8(int8(newCol)));\\n                                                                    // Hideous but hashtag #stacklimit\\n                if (found[neighbor.row][neighbor.col] == false || _newMap.board[current.row][current.col].doors[getDirectionBetween(current, neighbor)] == 0) {\\n                    if (availableDoors == 0 || smallIntBetweenVals(0, 99) < DOOR_CHANCE - doorModifier) {\\n                        _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                        smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        BCTypes.DoorStatus.CLOSED);\\n                        // Pre-breach doors with strength 0\\n                        if (_newMap.doors[_newMap.numDoors].vsBreach == 0) {\\n                            _newMap.doors[_newMap.numDoors].status = BCTypes.DoorStatus.BREACHED;\\n                        }\\n                        _newMap.numDoors++;\\n\\n                        doorModifier += DOOR_MOD_STEP;\\n                        // Prevent negative uint in DOOR_CHANCE - doorModifier\\n                        if (doorModifier > DOOR_CHANCE) {\\n                            doorModifier = DOOR_CHANCE;\\n                        }\\n\\n                        // Only enstack if we haven't found this one yet\\n                        // Otherwise it will overwrite existing tiles\\n                        if (found[neighbor.row][neighbor.col] == false) {\\n                            stack[stackCount] = neighbor;\\n                            stackCount++;\\n                            availableDoors++;\\n\\n                            found[neighbor.row][neighbor.col] = true;\\n                        }\\n\\n                        // Add the door if one isn't present already\\n                        // TODO: Check may be unnecessary\\n                        if(_newMap.board[current.row][current.col].doors[order[i]] == 0) {\\n                            _newMap.board[current.row][current.col].doors[order[i]] = _newMap.numDoors-1;\\n                            _newMap.board[neighbor.row][neighbor.col].doors[opposite(order[i])] = _newMap.numDoors-1;\\n                        }\\n                    } else {\\n                        doorModifier = 0;\\n                    }\\n                }\\n\\n            }\\n            // Detect mapgen stuck and reset by adding a new valid room in the stack\\n        }\\n\\n\\n        // Cleanup Tasks\\n        // TODO Detect and prevent failure to deploy all tiles\\n        // require(numToPlace == 0, \\\"Error: Bad mapgen.  Unplaced rooms\\\");\\n\\n        // Reset Donghaijiu ID (Was changed by map building)\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].roomId = uint8(START_ROOM_ID);\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].hasVent = false;\\n\\n        // Set the first door placed to breached, this is the entrance\\n        _newMap.doors[1].status = BCTypes.DoorStatus.BREACHED;\\n\\n        // TODO: Add signature detected\\n    }\\n\\n    // Create an internal copy of roomTiles\\n    function _setGameRoomTiles() internal returns (uint) {\\n        // Doing loop because can't set nested mapping all at once\\n        uint number = roomTiles.getNumRoomTiles();\\n        for(uint i = 0; i < number; i++) {\\n            roomList[i] = roomTiles.extGetRoomTile(i);\\n        }\\n        return number;\\n    }\\n\\n    function extGetBoard(uint _mapId) public view returns (BCTypes.GameTile[][] memory) {\\n        BCTypes.GameTile[][] memory board = new BCTypes.GameTile[][](BOARD_SIZE);\\n        for (uint i = 0; i < BOARD_SIZE; i++) {\\n            board[i] = new BCTypes.GameTile[](BOARD_SIZE);\\n        }\\n\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                board[row][col] = maps[_mapId].board[row][col];\\n            }\\n        }\\n\\n        return board;\\n    }\\n\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) public view returns (BCTypes.GameTile memory) {\\n        return maps[_mapId].board[_row][_col];\\n    }\\n\\n    function extGetRoomList(uint _mapId) public view returns (BCTypes.RoomTile[] memory) {\\n        BCTypes.RoomTile[] memory roomListArr = new BCTypes.RoomTile[](numRooms);\\n        for (uint i = 0; i < roomListArr.length; i++) {\\n            roomListArr[i] = roomList[i];\\n        }\\n        return roomListArr;\\n    }\\n\\n    function extGetRoom(uint _mapId, uint _row, uint _col) public view returns(BCTypes.RoomTile memory) {\\n        return roomList[maps[_mapId].board[_row][_col].roomId];\\n    }\\n\\n    function extGetRoomById(uint _mapId, uint _roomId) public view returns (BCTypes.RoomTile memory) {\\n        return roomList[_roomId];\\n    }\\n\\n    function extGetRoomId(uint _mapId, uint row, uint col) public view returns (uint) {\\n        return maps[_mapId].board[row][col].roomId;\\n    }\\n\\n    function extGetMainReactorCoords(uint _mapId) public view returns (uint, uint) {\\n        return (maps[_mapId].mainReactorRow, maps[_mapId].mainReactorCol);\\n    }\\n\\n    function extGetDoors(uint _mapId) public view returns (BCTypes.Door[] memory) {\\n        BCTypes.Door[] memory doors = new BCTypes.Door[](maps[_mapId].numDoors);\\n        for (uint i = 0; i < doors.length; i++) {\\n            doors[i] = maps[_mapId].doors[i];\\n        }\\n\\n        return doors;\\n    }\\n\\n    // TODO:  These need to validate that this is the right version of BCMaps\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) public view returns (BCTypes.Door memory){\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        return maps[_mapId].doors[currentRoomDoors[_direction]];\\n    }\\n\\n    function getDoorDirections(uint _mapId, uint _row, uint _col) public view returns (bool[4] memory) {\\n        uint[4] storage currentRoomDoorIds = maps[_mapId].board[_row][_col].doors;\\n        bool[4] memory directions;\\n\\n        for(uint i = 0; i < 4; i++) {\\n            BCTypes.Door storage currentDoor = maps[_mapId].doors[currentRoomDoorIds[i]];\\n            BCTypes.DoorStatus status = currentDoor.status;\\n            if(\\n                status == BCTypes.DoorStatus.CLOSED ||\\n                status == BCTypes.DoorStatus.OPEN ||\\n                status == BCTypes.DoorStatus.BREACHED\\n            ) {\\n                directions[i] = true;\\n            }\\n        }\\n\\n        return directions;\\n    }\\n                                                                                                                // 0 -> no change\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status, uint _strength) public {\\n        require((msg.sender == game || msg.sender == actionsAddress || msg.sender == playersAddress), \\\"Not game/actions/players contract\\\");\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        BCTypes.Door storage currentDoor = maps[_mapId].doors[currentRoomDoors[_direction]];\\n        currentDoor.status = _status;\\n        if(_strength > 0) {\\n            currentDoor.vsHack = uint8(_strength);\\n            currentDoor.vsBreach = uint8(_strength);\\n        }\\n    }\\n    // TODO: Below is better, but having trouble with contract size\\n    // See ~line 265 in BCPlayers, effect for locking doors\\n    // function lockDownRoom(uint _mapId, uint _row, uint _col, uint _strength) public {\\n    //     require(msg.sender == playersAddress, \\\"Not players contract\\\");\\n    //     for(uint i = 0; i < 4; i++) {\\n    //         BCTypes.Door memory currentDoor = getDoor(_mapId, _row, _col, i);\\n    //         if (currentDoor.status == BCTypes.DoorStatus.CLOSED ||\\n    //             currentDoor.status == BCTypes.DoorStatus.OPEN ||\\n    //             currentDoor.status == BCTypes.DoorStatus.BREACHED) {\\n    //                 _setDoorFromPos(_mapId, _row, _col, i, BCTypes.DoorStatus.CLOSED, _strength);\\n    //         }\\n    //     }\\n    // }\\n\\n    function setLooted(uint _mapId, uint _row, uint _col) public {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract - setLooted\\\");\\n        maps[_mapId].board[_row][_col].looted = true;\\n    }\\n\\n    function extSetHazardStatus(uint _mapId, uint _row, uint _col, bool _hasHazard) public {\\n        require(msg.sender == playersAddress, \\\"Not player contract\\\");\\n        maps[_mapId].board[_row][_col].hasHazard = _hasHazard;\\n    }\\n\\n    function extSpreadHazards(uint _mapId, uint _distance) public onlyGame {\\n        // TODO: CRITICAL -> this is untested\\n        bool[BOARD_SIZE][BOARD_SIZE] memory buffer;\\n\\n        for(uint times = 0; times < _distance; times++) {\\n            for(uint row = 0; row < BOARD_SIZE; row++) {\\n                for(uint col = 0; col < BOARD_SIZE; col++) {\\n                    buffer[row][col] = maps[_mapId].board[row][col].hasHazard;\\n                }\\n            }\\n\\n            for(uint row = 0; row < BOARD_SIZE; row++) {\\n                for(uint col = 0; col < BOARD_SIZE; col++) {\\n                    if(buffer[row][col]) {\\n                        for(uint dir = 0; dir < 4; dir++) {\\n                            uint doorId = maps[_mapId].board[row][col].doors[dir];\\n                            BCTypes.DoorStatus doorStatus = maps[_mapId].doors[doorId].status;\\n                            if(doorStatus == BCTypes.DoorStatus.BREACHED) {\\n                                if(row == 0 && dir == 0) {\\n                                    continue;\\n                                }\\n                                if (row == BOARD_SIZE-1 && dir == 1) {\\n                                    continue;\\n                                }\\n                                if(col == 0 && dir == 3) {\\n                                    continue;\\n                                }\\n                                if(col == BOARD_SIZE-1 && dir == 2) {\\n                                    continue;\\n                                }\\n                                BCTypes.Position memory neighborPos = getNeighborRoom(dir, BCTypes.Position(uint8(row), uint8(col)));\\n                                BCTypes.GameTile storage neighbor = maps[_mapId].board[neighborPos.row][neighborPos.col];\\n                                if(neighbor.roomId != SPACE_ROOM && neighbor.roomId != START_ROOM_ID) {\\n                                    neighbor.hasHazard = true;\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n\\n    function resetOpenDoors(uint _mapId) public onlyGame {\\n        for (uint i = 0; i < maps[_mapId].numDoors; i++) {\\n            if (maps[_mapId].doors[i].status == BCTypes.DoorStatus.OPEN) {\\n                maps[_mapId].doors[i].status = BCTypes.DoorStatus.CLOSED;\\n            }\\n        }\\n    }\\n\\n    function _getUnusedRoomId(BCTypes.Map storage _map) internal returns (uint8) {\\n        for (uint i = _map.unusedNormalRooms.length-1; i > 0; i--) {\\n            uint8 k = smallIntBetweenVals(0, uint8(i));\\n\\n            (_map.unusedNormalRooms[i], _map.unusedNormalRooms[k]) = (_map.unusedNormalRooms[k], _map.unusedNormalRooms[i]);\\n        }\\n\\n        uint room = _map.unusedNormalRooms[_map.unusedNormalRooms.length-1];\\n        _map.unusedNormalRooms.pop();\\n        return uint8(room);\\n    }\\n\\n    // Discover a room and return the uint id for that room's event\\n    // Return either the room's number, or 0 to indicate room already discovered\\n    function discoverRoom(uint _mapId, uint _row, uint _col, uint debugForceId) public onlyGame returns (uint) {\\n        BCTypes.GameTile storage gameTile = maps[_mapId].board[_row][_col];\\n        if(debugForceId != 0) {\\n            gameTile.roomId = uint8(debugForceId);\\n            return debugForceId;\\n        }\\n        // Handle the main reactor\\n        if(gameTile.roomId == UNEXPLORED_MAIN_REACTOR) {\\n            gameTile.roomId = uint8(EXPLORED_MAIN_REACTOR);\\n            return EXPLORED_MAIN_REACTOR;\\n        }\\n        if(gameTile.roomId == UNDISCOVERED_ROOM) {\\n            gameTile.roomId = _getUnusedRoomId(maps[_mapId]);\\n            return gameTile.roomId;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function debugForceRoomId(uint _mapId, uint _row, uint _col, uint _roomId) public onlyOwner {\\n        maps[_mapId].board[_row][_col].roomId = uint8(_roomId);\\n    }\\n\\n    modifier onlyGame {\\n        require(msg.sender == game);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf9d06b3861132fff7001903be11f02a5e205d72bce2b5c79fc290149eab6a948\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT, USE_ROOM, USE_ITEM, DROP_ITEMS, PICK_ITEMS, LEAVE_GAME } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n    enum BCEventType { NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY, ROOM }\\n    enum WorldItemStatus { DESTROYED, HELD, ON_GROUND, DISCARDED, OUT_OF_GAME }\\n\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { CONSUMABLE, HEALTH, CARRY, DEFENSE, HACK, BREACH, HAZARD, ARMOR, RANGED, MELEE, SPECIAL }\\n\\n    enum DenizenType { NONE, BUG, SCAV, TURRET, ROBOT, QUEEN, BUTCHER, BEHEMOTH, DOCTOR }\\n\\n    struct Player {\\n        address owner;\\n        uint256 characterId;\\n\\n        Traits currentTraits; // Char traits plus effects of items etc.\\n\\n        Position position;\\n        Position lastPos;\\n        // 20,000 (probably actually just 5k plus, but still) to write a word vs. 3 to add numbers, will not store updated characteristics\\n        // Now think this doesn't save much because of overhead to read across contracts, saving for now in BCTypes.Player\\n        int8 healthDmgTaken;  // TODO: eval cons of this being int, using to give bonus health\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;  // TODO: Consider payout model that approaches a limit?  First 4 pay 1, second 4 pay .5, third .25, etc.  Limit of 2.  Adds interesting motiviation\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8 numItemsHeld;\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;  // Currently unused\\n        // bool hasEgg; // Need stack space\\n\\n        uint gameId;\\n    }\\n\\n    struct Denizen {\\n        uint id;\\n        uint gameId;\\n        DenizenType denizenType; // Traits are derived from type\\n\\n        Position position;\\n\\n        uint healthRemaining;\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n        bool hasHazard;\\n    }\\n\\n    struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        uint[] unusedNormalRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n        uint mainReactorRow;\\n        uint mainReactorCol;\\n    }\\n\\n    struct Game {\\n        // TODO: Consider adding contract addresses to games to handle versioning\\n        bool active;\\n\\n        uint[] playerIndexes; // TODO: Rename playerIds\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n\\n        uint turnsTaken;\\n\\n        EventTracker eventTracker;\\n\\n        // address mapContract;\\n        uint mapId;\\n\\n        uint eventPlayerId;\\n        uint eventNumber;\\n        BCEventType eventType;\\n        Position eventPosition;\\n\\n        uint[] unusedBugEvents;\\n        uint[] unusedMysteryEvents;\\n        uint[] unusedScavEvents;\\n        uint[] unusedShipEvents;\\n\\n        uint turnTimeLimit;\\n        uint lastTurnTimestamp;\\n\\n        uint DEBUG_returnAmount;\\n\\n        BCTypes.Denizen[] denizens;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        // bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol\\n    struct Traits {\\n        int8 health;\\n        int8 carry;\\n        int8 defense;\\n        int8 hack;\\n        int8 breach;\\n        int8 shoot;\\n        int8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit // TODO: Move to UiF\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame;\\n    }\\n\\n    // WARNING:  At stack limit\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id;\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n        address ownerAddress; // Set when taken out of game, remove when brought in\\n\\n        uint weight;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType;\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        uint currentGame;\\n\\n        WorldItemStatus status;\\n\\n        Position position; // 0, 0 UNLESS the item is on the ground\\n    }\\n}\\n\",\"keccak256\":\"0xb7748e65f3c8f18eb98c66a2a539edbb13dfc0a4560d4c7dd6459426923f029a\",\"license\":\"UNLICENSED\"},\"contracts/BCUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\ncontract BCUtils {\\n    uint constant DEFAULT_ROLL_RES = 3;  // TODO: Decide to split to hack, breach, defense, etc.\\n\\n    event ChallengeEvent(uint gameId, uint roll, uint forValue, uint against);\\n    event DiceRollEvent(uint gameId, uint roll);\\n\\n    // TODO: Random seed will be replaced with a value from an oracle\\n    // TODO: Add budget for oracle derived from enlistment fees, or just make my own\\n    // TODO: Alternately, I think using the hash of the last block should be safe enough.  Only 2 seconds to do an attack\\n    uint private TODO_randomSeed = 0;\\n\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) public returns(uint8) {\\n        TODO_randomSeed++;\\n        uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n        uint8 mod = _max - _min + 1;\\n\\n        return uint8((rand % mod) + _min);\\n    }\\n\\n    // function smallIntBetweenVals256(uint _min, uint _max) public returns(uint) {\\n    //     TODO_randomSeed++;\\n    //     uint rand = uint256(keccak256(abi.encodePacked(msg.sender, TODO_randomSeed, blockhash(block.number-1))));\\n    //     uint mod = _max - _min + 1;\\n\\n    //     return (rand % mod) + _min;\\n    // }\\n\\n    function roll(uint _gameId) public returns(uint) {\\n        uint rollResult = uint(smallIntBetweenVals(1, 6));\\n        emit DiceRollEvent(_gameId, rollResult);\\n        return rollResult;\\n    }\\n\\n    function randKeccak() public returns (bytes32) {\\n        TODO_randomSeed++;\\n        return(keccak256(abi.encodePacked(TODO_randomSeed, blockhash(block.number-1), msg.sender)));\\n    }\\n\\n    function abs(int x) public pure returns (int) { // TODO: Why isn't this returning uint?\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    // Given a number and max, find the normalized value between two ranges\\n    // This requires _val to be equal to _valMax for the result to equal _max,\\n    // Design accordingly\\n    function normalizeToSmallRange(uint _min, uint _max, uint _val, uint _valMax) public pure returns (uint8) {\\n        uint adjustedMax = _max - _min;\\n\\n        uint result = adjustedMax * _val / _valMax;\\n        return uint8(result + _min);\\n    }\\n\\n    // Convert part of a hash into an int by grabbing _size bits at _offset\\n    function sliceHashToSmallInt(bytes32 _hash, uint256 _size, uint256 _offset) public pure returns(uint8) {\\n        bytes32 mask = bytes32((2**_size) - 1) << _offset;\\n        return uint8(uint256(bytes32((_hash & mask) >> _offset)));\\n    }\\n\\n    // Returns the offset in BITS for a given Universal Inventory item characteristic\\n    function getUIOffset(uint _traitNum, uint _subTraitNum) public pure returns(uint) {\\n        return (4 * _traitNum + _subTraitNum);\\n    }\\n\\n    // Returns direction from _firstRoom 0,1,2,3 -> nsew\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) public pure returns(uint) {\\n        if (int8(_firstRoom.row) - int8(_secondRoom.row) == 1) {\\n            return 0;\\n        } else if (int8(_firstRoom.row) - int8(_secondRoom.row) == -1) {\\n            return 1;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == -1) {\\n            return 2;\\n        } else if (int8(_firstRoom.col) - int8(_secondRoom.col) == 1) {\\n            return 3;\\n        }\\n\\n        revert(\\\"Error: Not adjacent\\\");\\n    }\\n\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) public pure returns (BCTypes.Position memory) {\\n        // North\\n        if (_direction == 0) {\\n            return BCTypes.Position(_start.row-1, _start.col);\\n        }\\n        // South\\n        if (_direction == 1) {\\n            return BCTypes.Position(_start.row+1, _start.col);\\n        }\\n        // East\\n        if (_direction == 2) {\\n            return BCTypes.Position(_start.row, _start.col+1);\\n        }\\n        // West\\n        if (_direction == 3) {\\n            return BCTypes.Position(_start.row, _start.col-1);\\n        }\\n        string memory message = string.concat(\\\"Invalid direction: \\\", Strings.toString(_direction));\\n        revert(message);\\n    }\\n\\n    // Return true if _for beats against with the roll\\n    function resolveChallenge(uint _gameId, uint _for, uint _against) public returns(bool) {\\n        uint diceRoll = roll(_gameId);\\n        emit ChallengeEvent(_gameId, diceRoll, _for, _against);\\n        if (diceRoll == 1) {\\n            return false;\\n        }\\n\\n        if (int(diceRoll + _for) - int(_against) > int(DEFAULT_ROLL_RES)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // Return the opposite direction NSEW == 0123\\n    function opposite(uint _direction) public pure returns (uint) {\\n        // TODO: There's something more clever for this (not a dict) but can't remember\\n        if(_direction == 0) {\\n            return 1;\\n        }\\n        if(_direction == 1) {\\n            return 0;\\n        }\\n        if(_direction == 2) {\\n            return 3;\\n        }\\n        if(_direction == 3) {\\n            return 2;\\n        }\\n        revert(\\\"Bad direction\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a51f6da3b262b3322a372cf15e062a7ab3b5836906021b891a6bb75cafa8232\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006001553480156200001657600080fd5b50620000223362000028565b62000078565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613cf680620000886000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806381bad36d1161013b578063c6b41b45116100b8578063f2fde38b1161007c578063f2fde38b146105d1578063f7157f64146105e4578063f9dfbfcb146105f7578063fa3993c214610617578063fe368d7a1461062a57600080fd5b8063c6b41b451461057d578063c8e9ac9614610590578063ce28613f146105a3578063e847ae1e146105b6578063f01fc35a146105c957600080fd5b8063951fc3fe116100ff578063951fc3fe146104cc57806397f34c3f146104ec578063a63a9aab146104ff578063b14ca57514610557578063c3fe3e281461056a57600080fd5b806381bad36d146104625780638214f2221461047557806386e529d0146104885780638af13fd21461049b5780638da5cb5b146104bb57600080fd5b806358308aa8116101c957806369568fd51161018d57806369568fd5146103e45780636ea1dcd814610404578063715018a61461042457806375990a0e1461042c5780637b45c0d41461044f57600080fd5b806358308aa81461035e57806359215223146103735780635dc96967146103865780635f8951e6146103a957806364db84bf146103d157600080fd5b80631e1de205116102105780631e1de205146102eb5780631ef04416146102f35780631f7b4f30146103135780635301169614610326578063580582831461034b57600080fd5b806302861c6c1461024d57806303b414e41461027657806315636a4d146102a15780631b5ac4b5146102c15780631cdec3ad146102e2575b600080fd5b61026061025b366004613291565b61063d565b60405161026d9190613326565b60405180910390f35b600554610289906001600160a01b031681565b6040516001600160a01b03909116815260200161026d565b6102b46102af366004613291565b61070c565b60405161026d9190613334565b6102d46102cf366004613367565b610851565b60405190815260200161026d565b6102d460075481565b6102d4610871565b610306610301366004613367565b6108e9565b60405161026d91906133f7565b6102d4610321366004613367565b610add565b61033961033436600461348c565b610b39565b60405160ff909116815260200161026d565b6102606103593660046134be565b610b78565b61037161036c366004613367565b610c01565b005b6103716103813660046134e0565b610d0e565b610399610394366004613291565b610eb5565b604051901515815260200161026d565b6103bc6103b7366004613367565b610f50565b6040805192835260208301919091520161026d565b6102d46103df3660046134be565b610fa6565b6103f76103f2366004613367565b610fbe565b60405161026d919061356d565b61041761041236600461348c565b61111e565b60405161026d91906135bb565b61037161125c565b61043f61043a366004613367565b611270565b60405161026d94939291906135c9565b600454610289906001600160a01b031681565b6102d461047036600461348c565b6112d1565b6102d4610483366004613367565b6113c1565b610371610496366004613291565b61143b565b6104ae6104a9366004613367565b6114ee565b60405161026d9190613602565b6000546001600160a01b0316610289565b6104df6104da3660046136da565b611601565b60405161026d9190613707565b6103396104fa366004613291565b61172b565b61054661050d366004613367565b60066020526000908152604090208054600182015460029092015460ff9182169291818116916101008104821691620100009091041685565b60405161026d959493929190613725565b61037161056536600461348c565b611756565b600254610289906001600160a01b031681565b61037161058b3660046134be565b6117b2565b6102d461059e366004613291565b611b0f565b6103396105b136600461375d565b611b57565b6103716105c43660046137b2565b611c07565b6102d4611c6b565b6103716105df366004613817565b611ea4565b600354610289906001600160a01b031681565b61060a610605366004613291565b611f1d565b60405161026d9190613832565b6102d4610625366004613841565b612001565b61037161063836600461387b565b6120c9565b61064561313c565b600660006008868154811061065c5761065c6138bc565b600091825260208083208884526001600790930201919091018152604080832087845282528083205460ff9081168552918401949094529183019020825160a081019093528054909183911660058111156106b9576106b96132bd565b60058111156106ca576106ca6132bd565b81526001820154602082015260029091015460ff80821660408401526101008204811660608401526201000090910416151560809091015290505b9392505050565b61071461316d565b600060088581548110610729576107296138bc565b60009182526020808320878452600160079093020182018152604080842087855290915290912001905061075b61316d565b60005b60048110156108475760006008888154811061077c5761077c6138bc565b906000526020600020906007020160020160008584600481106107a1576107a16138bc565b015481526020810191909152604001600020805490915062010000900460ff1660018160048111156107d5576107d56132bd565b14806107f2575060028160048111156107f0576107f06132bd565b145b8061080e5750600381600481111561080c5761080c6132bd565b145b15610832576001848460048110610827576108276138bc565b911515602090920201525b5050808061083f906138e8565b91505061075e565b5095945050505050565b6000808212156108695761086482613901565b61086b565b815b92915050565b6001805460009182610882836138e8565b9190505550600154600143610897919061391d565b40336040516020016108ce93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b60408051600b808252610180820190925260609160009190816020015b606081526020019060019003908161090657905050905060005b600b81101561098b5760408051600b808252610180820190925290816020015b61094861318b565b8152602001906001900390816109405790505082828151811061096d5761096d6138bc565b60200260200101819052508080610983906138e8565b915050610920565b5060005b600b811015610ad65760005b600b811015610ac357600885815481106109b7576109b76138bc565b600091825260208083208584526001600790930201820181526040808420858552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b815481526020019060010190808311610a1c5750505091835250506005919091015460ff80821615156020840152610100820481161515604084015262010000820481161515606084015263010000009091041615156080909101528351849084908110610a8c57610a8c6138bc565b60200260200101518281518110610aa557610aa56138bc565b60200260200101819052508080610abb906138e8565b91505061099b565b5080610ace816138e8565b91505061098f565b5092915050565b600080610aec60016006611b57565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c518382604051610b2b929190918252602082015260400190565b60405180910390a192915050565b600080610b46868661391d565b9050600083610b558684613930565b610b5f919061395d565b9050610b6b8782613971565b925050505b949350505050565b610b8061313c565b60008281526006602052604090819020815160a081019092528054829060ff166005811115610bb157610bb16132bd565b6005811115610bc257610bc26132bd565b81526001820154602082015260029091015460ff8082166040840152610100820481166060840152620100009091041615156080909101529392505050565b6002546001600160a01b03163314610c1857600080fd5b60005b60088281548110610c2e57610c2e6138bc565b600091825260209091206003600790920201015460ff16811015610d0a57600260088381548110610c6157610c616138bc565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff166004811115610c9b57610c9b6132bd565b03610cf857600160088381548110610cb557610cb56138bc565b60009182526020808320858452600260079093020191909101905260409020805462ff0000191662010000836004811115610cf257610cf26132bd565b02179055505b80610d02816138e8565b915050610c1b565b5050565b6002546001600160a01b0316331480610d3157506004546001600160a01b031633145b80610d4657506005546001600160a01b031633145b610da15760405162461bcd60e51b815260206004820152602160248201527f4e6f742067616d652f616374696f6e732f706c617965727320636f6e747261636044820152601d60fa1b60648201526084015b60405180910390fd5b600060088781548110610db657610db66138bc565b600091825260208083208984526001600790930201820181526040808420898552909152918290208251608081019093520160048282826020028201915b815481526020019060010190808311610df45750505050509050600060088881548110610e2357610e236138bc565b90600052602060002090600702016002016000838760048110610e4857610e486138bc565b602002015181526020019081526020016000209050838160000160026101000a81548160ff02191690836004811115610e8357610e836132bd565b02179055508215610eab57805461ffff191661010060ff851690810260ff1916919091171781555b5050505050505050565b600080610ec185610add565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a180600103610f1e576000915050610705565b600383610f2b8684613971565b610f359190613984565b1315610f45576001915050610705565b506000949350505050565b60008060088381548110610f6657610f666138bc565b90600052602060002090600702016005015460088481548110610f8b57610f8b6138bc565b90600052602060002090600702016006015491509150915091565b600081610fb4846004613930565b6107059190613971565b6060600060088381548110610fd557610fd56138bc565b600091825260209091206003600790920201015460ff1667ffffffffffffffff81111561100457611004613644565b60405190808252806020026020018201604052801561105657816020015b61104360408051606081018252600080825260208201819052909182015290565b8152602001906001900390816110225790505b50905060005b8151811015610ad65760088481548110611078576110786138bc565b6000918252602080832084845260026007909302019190910181526040918290208251606081018452815460ff808216835261010082048116948301949094529093919291840191620100009091041660048111156110d9576110d96132bd565b60048111156110ea576110ea6132bd565b81525050828281518110611100576111006138bc565b60200260200101819052508080611116906138e8565b91505061105c565b61113f60408051606081018252600080825260208201819052909182015290565b600060088681548110611154576111546138bc565b600091825260208083208884526001600790930201820181526040808420888552909152918290208251608081019093520160048282826020028201915b8154815260200190600101908083116111925750505050509050600886815481106111bf576111bf6138bc565b906000526020600020906007020160020160008285600481106111e4576111e46138bc565b6020908102919091015182528181019290925260409081016000208151606081018352815460ff80821683526101008204811695830195909552909391928401916201000090910416600481111561123e5761123e6132bd565b600481111561124f5761124f6132bd565b9052509695505050505050565b611264612178565b61126e60006121d2565b565b6008818154811061128057600080fd5b600091825260209182902060036007909202019081015460408051808201909152600483015460ff818116835261010090910481169482019490945260058301546006909301549390911693509184565b6002546000906001600160a01b031633146112eb57600080fd5b600060088681548110611300576113006138bc565b600091825260208083208884526001600790930201919091018152604080832087845290915290209050821561134457805460ff191660ff84161790555080610b70565b805460ff166063190161136657805460ff191660129081179091559050610b70565b805460ff16600019016113b55761139c60088781548110611389576113896138bc565b9060005260206000209060070201612222565b815460ff191660ff919091169081179091559050610b70565b50600095945050505050565b6000816000036113d357506001919050565b816001036113e357506000919050565b816002036113f357506003919050565b8160030361140357506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b6044820152606401610d98565b6004546001600160a01b031633146114955760405162461bcd60e51b815260206004820181905260248201527f4e6f7420616374696f6e7320636f6e7472616374202d207365744c6f6f7465646044820152606401610d98565b6001600884815481106114aa576114aa6138bc565b6000918252602080832095835260016007909202909501018452604080822093825292909352912060050180549115156101000261ff001990921691909117905550565b6060600060075467ffffffffffffffff81111561150d5761150d613644565b60405190808252806020026020018201604052801561154657816020015b61153361313c565b81526020019060019003908161152b5790505b50905060005b8151811015610ad65760008181526006602052604090819020815160a081019092528054829060ff166005811115611586576115866132bd565b6005811115611597576115976132bd565b81526001820154602082015260029091015460ff80821660408401526101008204811660608401526201000090910416151560809091015282518390839081106115e3576115e36138bc565b602002602001018190525080806115f9906138e8565b91505061154c565b6040805180820190915260008082526020820152826000036116535760405180604001604052806001846000015161163991906139a4565b60ff168152602001836020015160ff16815250905061086b565b826001036116775760405180604001604052808360000151600161163991906139bd565b826002036116b4576040518060400160405280836000015160ff168152602001836020015160016116a891906139bd565b60ff169052905061086b565b826003036116e5576040518060400160405280836000015160ff168152602001600184602001516116a891906139a4565b60006116f084612354565b60405160200161170091906139fa565b60405160208183030381529060405290508060405162461bcd60e51b8152600401610d989190613a35565b60008082600161173c866002613b4c565b611746919061391d565b901b8516831c9150509392505050565b61175e612178565b8060088581548110611772576117726138bc565b60009182526020808320968352600791909102909501600101855260408082209482529390945291909220805460ff191660ff9092169190911790555050565b6002546001600160a01b031633146117c957600080fd5b6117d16131aa565b60005b82811015611b095760005b600b8110156118945760005b600b8110156118815760088681548110611807576118076138bc565b60009182526020808320858452600792909202909101600101815260408083208484529091529020600501546301000000900460ff168483600b811061184f5761184f6138bc565b602002015182600b8110611865576118656138bc565b9115156020909202015280611879816138e8565b9150506117eb565b508061188c816138e8565b9150506117df565b5060005b600b811015611af65760005b600b811015611ae3578382600b81106118bf576118bf6138bc565b602002015181600b81106118d5576118d56138bc565b602002015115611ad15760005b6004811015611acf57600060088881548110611900576119006138bc565b600091825260208083208784526001600790930201820181526040808420878552909152909120018260048110611939576119396138bc565b01549050600060088981548110611952576119526138bc565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff1690506003816004811115611991576119916132bd565b03611aba57841580156119a2575082155b156119ae575050611abd565b6119ba6001600b61391d565b851480156119c85750826001145b156119d4575050611abd565b831580156119e25750826003145b156119ee575050611abd565b6119fa6001600b61391d565b84148015611a085750826002145b15611a14575050611abd565b6000611a3a8460405180604001604052808960ff1681526020018860ff16815250611601565b9050600060088b81548110611a5157611a516138bc565b60009182526020808320855160ff90811685526007939093020160010181526040808420868301518416855290915290912080549092501615801590611a9c5750805460ff16600214155b15611ab75760058101805463ff000000191663010000001790555b50505b50505b80611ac7816138e8565b9150506118e2565b505b80611adb816138e8565b9150506118a4565b5080611aee816138e8565b915050611898565b5080611b01816138e8565b9150506117d4565b50505050565b600060088481548110611b2457611b246138bc565b6000918252602080832095835260079190910290940160010184526040808220938252929093525090205460ff16919050565b6001805460009182611b68836138e8565b9190505550600033600154600143611b80919061391d565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000611bd485856139a4565b611bdf9060016139bd565b90508460ff168160ff1683611bf49190613b58565b611bfe9190613971565b95945050505050565b611c0f612178565b600280546001600160a01b038088166001600160a01b03199283161790925560038054868416908316179055600480548584169083161790556005805492841692909116919091179055611c61612455565b6007555050505050565b6002546000906001600160a01b03163314611c8557600080fd5b600880546001810182556000829052604080516103408101825260038152600460208201526005918101919091526006606082015260076080820181905260a0820193909352600960c0820152600a60e0820152600b610100820152600c610120820152600d610140820152600e610160820152600f61018082015260106101a082015260116101c082015260136101e08201526014610200820152601561022082015260166102408201526017610260820152601861028082015260196102a0820152601a6102c08201819052601b6102e0830152601c610300830152601d610320830152929091027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30191611d9f90839083906131d8565b506040805160608101825260ff808252602082015290810160009052600383015460ff9081166000908152600285016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff0000191662010000836004811115611e1b57611e1b6132bd565b0217905550505060038201805460ff16906000611e3783613b6c565b82546101009290920a60ff8181021990931691909216919091021790555060408051808201909152600a8152600660209091015260048201805461ffff191661060a179055611e85826125e2565b611e8e82612ea9565b600854611e9d9060019061391d565b9250505090565b611eac612178565b6001600160a01b038116611f115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d98565b611f1a816121d2565b50565b611f2561318b565b60088481548110611f3857611f386138bc565b600091825260208083208684526001600790930201820181526040808420868552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b815481526020019060010190808311611f9d5750505091835250506005919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152949350505050565b8051825160009161201191613b8b565b60000b6001036120235750600061086b565b815183516120319190613b8b565b60000b196120415750600161086b565b816020015183602001516120559190613b8b565b60000b196120655750600261086b565b816020015183602001516120799190613b8b565b60000b60010361208b5750600361086b565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b6044820152606401610d98565b6005546001600160a01b031633146121195760405162461bcd60e51b8152602060048201526013602482015272139bdd081c1b185e595c8818dbdb9d1c9858dd606a1b6044820152606401610d98565b806008858154811061212d5761212d6138bc565b600091825260208083209683526001600790920290960101855260408082209482529390945291909220600501805491151563010000000263ff000000199092169190911790555050565b6000546001600160a01b0316331461126e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d98565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805460009081906122359060019061391d565b90505b80156122f157600061224b600083611b57565b9050836000018160ff1681548110612265576122656138bc565b9060005260206000200154846000018381548110612285576122856138bc565b90600052602060002001548560000184815481106122a5576122a56138bc565b906000526020600020016000876000018560ff16815481106122c9576122c96138bc565b60009182526020909120019290925591909155508190506122e981613bac565b915050612238565b50815460009083906123059060019061391d565b81548110612315576123156138bc565b906000526020600020015490508260000180548061233557612335613bc3565b6001900381819060005260206000200160009055905580915050919050565b60608160000361237b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156123a5578061238f816138e8565b915061239e9050600a8361395d565b915061237f565b60008167ffffffffffffffff8111156123c0576123c0613644565b6040519080825280601f01601f1916602001820160405280156123ea576020820181803683370190505b5090505b8415610b70576123ff60018361391d565b915061240c600a86613b58565b612417906030613971565b60f81b81838151811061242c5761242c6138bc565b60200101906001600160f81b031916908160001a90535061244e600a8661395d565b94506123ee565b600080600360009054906101000a90046001600160a01b03166001600160a01b03166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cf9190613bd9565b905060005b818110156125dc5760035460405163413a9f5f60e11b8152600481018390526001600160a01b03909116906382753ebe9060240160a060405180830381865afa158015612525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125499190613bf2565b600082815260066020526040902081518154829060ff19166001836005811115612575576125756132bd565b02179055506020820151600182015560408201516002909101805460608401516080909401511515620100000262ff00001960ff9586166101000261ffff1990931695909416949094171791909116919091179055806125d4816138e8565b9150506124d4565b50919050565b60008060026007546125f4919061391d565b9050600160006126026131aa565b6004860154600190829060ff16600b811061261f5761261f6138bc565b60200201516004880154610100900460ff16600b8110612641576126416138bc565b91151560209092020152612653613223565b60408051808201909152600488015460ff80821683526101009091041660208201528187601e8110612687576126876138bc565b602002015285612696816138e8565b9650505b6000851180156126aa5750600086115b15612e1d576000816126bd60018961391d565b601e81106126cd576126cd6138bc565b60200201519050866126de81613bac565b9750508187601e81106126f3576126f36138bc565b6020020161271a6040518060400160405280600060ff168152602001600060ff1681525090565b90528561272681613bac565b965050848061273490613bac565b825160ff908116600090815260018c810160209081526040808420828901519095168452939052918120805460ff19169092179091559096506021915061277c906063611b57565b60ff1610156127bf57805160ff908116600090815260018a016020908152604080832082860151909416835292905220600501805462ff00001916620100001790555b60006040518060800160405280600081526020016001815260200160028152602001600381525090506000600160046127f8919061391d565b90505b801561288857600061280e600083611b57565b9050828160ff1660048110612825576128256138bc565b602002015183836004811061283c5761283c6138bc565b6020020151848460048110612853576128536138bc565b60200201858460ff166004811061286c5761286c6138bc565b602002019190915252508061288081613bac565b9150506127fb565b5060005b6004811015612e155782516020840151600091820b910b8383600481106128b5576128b56138bc565b60200201516000036128d357816128cb81613c93565b925050612957565b8383600481106128e5576128e56138bc565b60200201516001036128fb57816128cb81613ca8565b83836004811061290d5761290d6138bc565b602002015160020361292b578061292381613ca8565b915050612957565b83836004811061293d5761293d6138bc565b6020020151600303612957578061295381613c93565b9150505b60018212806129665750600181125b8061297b57506129786002600b61391d565b82135b80612990575061298d6002600b61391d565b81135b1561299c575050612e03565b6040805180820190915260ff80841680835290831660208301528890600b81106129c8576129c86138bc565b6020020151816020015160ff16600b81106129e5576129e56138bc565b60200201511580612a4657508c6001016000876000015160ff1681526020019081526020016000206000876020015160ff168152602001908152602001600020600101612a328783612001565b60048110612a4257612a426138bc565b0154155b15612dff57891580612a6f5750612a5e89604261391d565b612a6a60006063611b57565b60ff16105b15612dfa576040518060600160405280612a8b60006004611b57565b60ff168152602001612a9f60006004611b57565b60ff16815260200160018152508d60020160008f60030160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff02191690836004811115612b4157612b416132bd565b0217905550505060038d015460ff908116600090815260028f0160205260408120549091169003612b945760038d015460ff16600090815260028e0160205260409020805462ff00001916620300001790555b60038d01805460ff16906000612ba983613b6c565b91906101000a81548160ff021916908360ff16021790555050601689612bcf9190613971565b98506042891115612bdf57604298505b8051889060ff16600b8110612bf657612bf66138bc565b6020020151816020015160ff16600b8110612c1357612c136138bc565b60200201511515600003612c975780878d601e8110612c3457612c346138bc565b60200201528b612c43816138e8565b9c50508980612c51906138e8565b9a5050600188826000015160ff16600b8110612c6f57612c6f6138bc565b6020020151826020015160ff16600b8110612c8c57612c8c6138bc565b911515602090920201525b8c6001016000876000015160ff1681526020019081526020016000206000876020015160ff168152602001908152602001600020600101858560048110612ce057612ce06138bc565b602002015160048110612cf557612cf56138bc565b0154600003612df55760038d0154612d129060019060ff166139a4565b60ff168d6001016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612d5e57612d5e6138bc565b602002015160048110612d7357612d736138bc565b015560038d0154612d899060019060ff166139a4565b60ff168d6001016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101612de2878760048110612dd857612dd86138bc565b60200201516113c1565b60048110612df257612df26138bc565b01555b612dff565b600098505b5050505b80612e0d816138e8565b91505061288c565b50505061269a565b60048701805460ff80821660009081526001808c016020818152604080852061010097889004871686528252808520805460ff1916600290811790915597548087168652928252808520969092049094168352938352838220600501805462ff000019908116909155908252938b01909152208054600392166201000083021790555050505050505050565b6000805b600b8110156131375760005b600b811015613124576000828152600185016020908152604080832084845290915290205460ff16600019016131125782612ef3816138e8565b93505082600503612f3357600082815260018501602090815260408083208484529091529020805460ff1916606417905560058401829055600684018190555b60005b6004811015613110576000838152600180870160209081526040808420868552909152909120018160048110612f6e57612f6e6138bc565b01546000036130fe57826009148015612f875750816006145b6130fe576000612fb18260405180604001604052808760ff1681526020018660ff16815250611601565b805160ff9081166000908152600189016020908152604080832082860151851684529091529020549192501680158015612ff957506042612ff460006063611b57565b60ff16105b156130fb576040805160608101825260ff808252602082015290810160049052600388015460ff908116600090815260028a016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff0000191662010000836004811115613079576130796132bd565b0217905550505060038701805460ff1690600061309583613b6c565b82546101009290920a60ff81810219909316918316021790915560038901546130c29250600191166139a4565b60008681526001808a016020908152604080842089855290915290912060ff92909216910184600481106130f8576130f86138bc565b01555b50505b80613108816138e8565b915050612f36565b505b8061311c816138e8565b915050612eb9565b508061312f816138e8565b915050612ead565b505050565b6040805160a081019091528060005b8152600060208201819052604082018190526060820181905260809091015290565b60405180608001604052806004906020820280368337509192915050565b6040805160e0810182526000808252602082015290810161314b61316d565b604051806101600160405280600b905b6131c261325d565b8152602001906001900390816131ba5790505090565b828054828255906000526020600020908101928215613213579160200282015b828111156132135782518255916020019190600101906131f8565b5061321f92915061327c565b5090565b604051806103c00160405280601e905b60408051808201909152600080825260208201528152602001906001900390816132335790505090565b604051806101600160405280600b906020820280368337509192915050565b5b8082111561321f576000815560010161327d565b6000806000606084860312156132a657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b600681106132e3576132e36132bd565b9052565b6132f28282516132d3565b6020810151602083015260ff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b60a0810161086b82846132e7565b60808101818360005b600481101561335e578151151583526020928301929091019060010161333d565b50505092915050565b60006020828403121561337957600080fd5b5035919050565b60ff8151168252602060ff81830151168184015260408201516040840160005b60048110156133bd578251825291830191908301906001016133a0565b505050506060810151151560c0838101919091526080820151151560e084015260a082015115156101008401520151151561012090910152565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561347e57888603603f19018552825180518088529088019088880190845b8181101561346857613454838551613380565b928a01926101409290920191600101613441565b509097505050938601939186019160010161341f565b509398975050505050505050565b600080600080608085870312156134a257600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156134d157600080fd5b50508035926020909101359150565b60008060008060008060c087890312156134f957600080fd5b8635955060208701359450604087013593506060870135925060808701356005811061352457600080fd5b8092505060a087013590509295509295509295565b60ff815116825260ff6020820151166020830152604081015160058110613562576135626132bd565b806040840152505050565b6020808252825182820181905260009190848201906040850190845b818110156135af5761359c838551613539565b9284019260609290920191600101613589565b50909695505050505050565b6060810161086b8284613539565b60ff8516815260a081016135f06020830186805160ff908116835260209182015116910152565b60608201939093526080015292915050565b6020808252825182820181905260009190848201906040850190845b818110156135af576136318385516132e7565b9284019260a0929092019160010161361e565b634e487b7160e01b600052604160045260246000fd5b60ff81168114611f1a57600080fd5b60006040828403121561367b57600080fd5b6040516040810181811067ffffffffffffffff821117156136ac57634e487b7160e01b600052604160045260246000fd5b60405290508082356136bd8161365a565b815260208301356136cd8161365a565b6020919091015292915050565b600080606083850312156136ed57600080fd5b823591506136fe8460208501613669565b90509250929050565b6040810161086b8284805160ff908116835260209182015116910152565b60a0810161373382886132d3565b85602083015260ff8516604083015260ff8416606083015282151560808301529695505050505050565b6000806040838503121561377057600080fd5b823561377b8161365a565b9150602083013561378b8161365a565b809150509250929050565b80356001600160a01b03811681146137ad57600080fd5b919050565b600080600080600060a086880312156137ca57600080fd5b6137d386613796565b94506137e160208701613796565b93506137ef60408701613796565b92506137fd60608701613796565b915061380b60808701613796565b90509295509295909350565b60006020828403121561382957600080fd5b61070582613796565b610140810161086b8284613380565b6000806080838503121561385457600080fd5b61385e8484613669565b91506136fe8460408501613669565b8015158114611f1a57600080fd5b6000806000806080858703121561389157600080fd5b84359350602085013592506040850135915060608501356138b18161386d565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016138fa576138fa6138d2565b5060010190565b6000600160ff1b8201613916576139166138d2565b5060000390565b8181038181111561086b5761086b6138d2565b808202811582820484141761086b5761086b6138d2565b634e487b7160e01b600052601260045260246000fd5b60008261396c5761396c613947565b500490565b8082018082111561086b5761086b6138d2565b8181036000831280158383131683831282161715610ad657610ad66138d2565b60ff828116828216039081111561086b5761086b6138d2565b60ff818116838216019081111561086b5761086b6138d2565b60005b838110156139f15781810151838201526020016139d9565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251613a288160138501602087016139d6565b9190910160130192915050565b6020815260008251806020840152613a548160408501602087016139d6565b601f01601f19169190910160400192915050565b600181815b80851115613aa3578160001904821115613a8957613a896138d2565b80851615613a9657918102915b93841c9390800290613a6d565b509250929050565b600082613aba5750600161086b565b81613ac75750600061086b565b8160018114613add5760028114613ae757613b03565b600191505061086b565b60ff841115613af857613af86138d2565b50506001821b61086b565b5060208310610133831016604e8410600b8410161715613b26575081810a61086b565b613b308383613a68565b8060001904821115613b4457613b446138d2565b029392505050565b60006107058383613aab565b600082613b6757613b67613947565b500690565b600060ff821660ff8103613b8257613b826138d2565b60010192915050565b600082810b9082900b03607f198112607f8213171561086b5761086b6138d2565b600081613bbb57613bbb6138d2565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613beb57600080fd5b5051919050565b600060a08284031215613c0457600080fd5b60405160a0810181811067ffffffffffffffff82111715613c3557634e487b7160e01b600052604160045260246000fd5b604052825160068110613c4757600080fd5b8152602083810151908201526040830151613c618161365a565b60408201526060830151613c748161365a565b60608201526080830151613c878161386d565b60808201529392505050565b6000600160ff1b8201613bbb57613bbb6138d2565b60006001600160ff1b0182016138fa576138fa6138d256fea2646970667358221220fc660cc716604c925974ef8464e45915317eff8156d492859bd83c938684697764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c806381bad36d1161013b578063c6b41b45116100b8578063f2fde38b1161007c578063f2fde38b146105d1578063f7157f64146105e4578063f9dfbfcb146105f7578063fa3993c214610617578063fe368d7a1461062a57600080fd5b8063c6b41b451461057d578063c8e9ac9614610590578063ce28613f146105a3578063e847ae1e146105b6578063f01fc35a146105c957600080fd5b8063951fc3fe116100ff578063951fc3fe146104cc57806397f34c3f146104ec578063a63a9aab146104ff578063b14ca57514610557578063c3fe3e281461056a57600080fd5b806381bad36d146104625780638214f2221461047557806386e529d0146104885780638af13fd21461049b5780638da5cb5b146104bb57600080fd5b806358308aa8116101c957806369568fd51161018d57806369568fd5146103e45780636ea1dcd814610404578063715018a61461042457806375990a0e1461042c5780637b45c0d41461044f57600080fd5b806358308aa81461035e57806359215223146103735780635dc96967146103865780635f8951e6146103a957806364db84bf146103d157600080fd5b80631e1de205116102105780631e1de205146102eb5780631ef04416146102f35780631f7b4f30146103135780635301169614610326578063580582831461034b57600080fd5b806302861c6c1461024d57806303b414e41461027657806315636a4d146102a15780631b5ac4b5146102c15780631cdec3ad146102e2575b600080fd5b61026061025b366004613291565b61063d565b60405161026d9190613326565b60405180910390f35b600554610289906001600160a01b031681565b6040516001600160a01b03909116815260200161026d565b6102b46102af366004613291565b61070c565b60405161026d9190613334565b6102d46102cf366004613367565b610851565b60405190815260200161026d565b6102d460075481565b6102d4610871565b610306610301366004613367565b6108e9565b60405161026d91906133f7565b6102d4610321366004613367565b610add565b61033961033436600461348c565b610b39565b60405160ff909116815260200161026d565b6102606103593660046134be565b610b78565b61037161036c366004613367565b610c01565b005b6103716103813660046134e0565b610d0e565b610399610394366004613291565b610eb5565b604051901515815260200161026d565b6103bc6103b7366004613367565b610f50565b6040805192835260208301919091520161026d565b6102d46103df3660046134be565b610fa6565b6103f76103f2366004613367565b610fbe565b60405161026d919061356d565b61041761041236600461348c565b61111e565b60405161026d91906135bb565b61037161125c565b61043f61043a366004613367565b611270565b60405161026d94939291906135c9565b600454610289906001600160a01b031681565b6102d461047036600461348c565b6112d1565b6102d4610483366004613367565b6113c1565b610371610496366004613291565b61143b565b6104ae6104a9366004613367565b6114ee565b60405161026d9190613602565b6000546001600160a01b0316610289565b6104df6104da3660046136da565b611601565b60405161026d9190613707565b6103396104fa366004613291565b61172b565b61054661050d366004613367565b60066020526000908152604090208054600182015460029092015460ff9182169291818116916101008104821691620100009091041685565b60405161026d959493929190613725565b61037161056536600461348c565b611756565b600254610289906001600160a01b031681565b61037161058b3660046134be565b6117b2565b6102d461059e366004613291565b611b0f565b6103396105b136600461375d565b611b57565b6103716105c43660046137b2565b611c07565b6102d4611c6b565b6103716105df366004613817565b611ea4565b600354610289906001600160a01b031681565b61060a610605366004613291565b611f1d565b60405161026d9190613832565b6102d4610625366004613841565b612001565b61037161063836600461387b565b6120c9565b61064561313c565b600660006008868154811061065c5761065c6138bc565b600091825260208083208884526001600790930201919091018152604080832087845282528083205460ff9081168552918401949094529183019020825160a081019093528054909183911660058111156106b9576106b96132bd565b60058111156106ca576106ca6132bd565b81526001820154602082015260029091015460ff80821660408401526101008204811660608401526201000090910416151560809091015290505b9392505050565b61071461316d565b600060088581548110610729576107296138bc565b60009182526020808320878452600160079093020182018152604080842087855290915290912001905061075b61316d565b60005b60048110156108475760006008888154811061077c5761077c6138bc565b906000526020600020906007020160020160008584600481106107a1576107a16138bc565b015481526020810191909152604001600020805490915062010000900460ff1660018160048111156107d5576107d56132bd565b14806107f2575060028160048111156107f0576107f06132bd565b145b8061080e5750600381600481111561080c5761080c6132bd565b145b15610832576001848460048110610827576108276138bc565b911515602090920201525b5050808061083f906138e8565b91505061075e565b5095945050505050565b6000808212156108695761086482613901565b61086b565b815b92915050565b6001805460009182610882836138e8565b9190505550600154600143610897919061391d565b40336040516020016108ce93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120905090565b60408051600b808252610180820190925260609160009190816020015b606081526020019060019003908161090657905050905060005b600b81101561098b5760408051600b808252610180820190925290816020015b61094861318b565b8152602001906001900390816109405790505082828151811061096d5761096d6138bc565b60200260200101819052508080610983906138e8565b915050610920565b5060005b600b811015610ad65760005b600b811015610ac357600885815481106109b7576109b76138bc565b600091825260208083208584526001600790930201820181526040808420858552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b815481526020019060010190808311610a1c5750505091835250506005919091015460ff80821615156020840152610100820481161515604084015262010000820481161515606084015263010000009091041615156080909101528351849084908110610a8c57610a8c6138bc565b60200260200101518281518110610aa557610aa56138bc565b60200260200101819052508080610abb906138e8565b91505061099b565b5080610ace816138e8565b91505061098f565b5092915050565b600080610aec60016006611b57565b60ff1690507ffe34d093a460a16ee5fb374540914d1c734a17502c0c1a87b387c8d6097e1c518382604051610b2b929190918252602082015260400190565b60405180910390a192915050565b600080610b46868661391d565b9050600083610b558684613930565b610b5f919061395d565b9050610b6b8782613971565b925050505b949350505050565b610b8061313c565b60008281526006602052604090819020815160a081019092528054829060ff166005811115610bb157610bb16132bd565b6005811115610bc257610bc26132bd565b81526001820154602082015260029091015460ff8082166040840152610100820481166060840152620100009091041615156080909101529392505050565b6002546001600160a01b03163314610c1857600080fd5b60005b60088281548110610c2e57610c2e6138bc565b600091825260209091206003600790920201015460ff16811015610d0a57600260088381548110610c6157610c616138bc565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff166004811115610c9b57610c9b6132bd565b03610cf857600160088381548110610cb557610cb56138bc565b60009182526020808320858452600260079093020191909101905260409020805462ff0000191662010000836004811115610cf257610cf26132bd565b02179055505b80610d02816138e8565b915050610c1b565b5050565b6002546001600160a01b0316331480610d3157506004546001600160a01b031633145b80610d4657506005546001600160a01b031633145b610da15760405162461bcd60e51b815260206004820152602160248201527f4e6f742067616d652f616374696f6e732f706c617965727320636f6e747261636044820152601d60fa1b60648201526084015b60405180910390fd5b600060088781548110610db657610db66138bc565b600091825260208083208984526001600790930201820181526040808420898552909152918290208251608081019093520160048282826020028201915b815481526020019060010190808311610df45750505050509050600060088881548110610e2357610e236138bc565b90600052602060002090600702016002016000838760048110610e4857610e486138bc565b602002015181526020019081526020016000209050838160000160026101000a81548160ff02191690836004811115610e8357610e836132bd565b02179055508215610eab57805461ffff191661010060ff851690810260ff1916919091171781555b5050505050505050565b600080610ec185610add565b6040805187815260208101839052908101869052606081018590529091507f75b6a8325595f91135e07382840634226793c68c9e59623da7e10d7ad3d95b959060800160405180910390a180600103610f1e576000915050610705565b600383610f2b8684613971565b610f359190613984565b1315610f45576001915050610705565b506000949350505050565b60008060088381548110610f6657610f666138bc565b90600052602060002090600702016005015460088481548110610f8b57610f8b6138bc565b90600052602060002090600702016006015491509150915091565b600081610fb4846004613930565b6107059190613971565b6060600060088381548110610fd557610fd56138bc565b600091825260209091206003600790920201015460ff1667ffffffffffffffff81111561100457611004613644565b60405190808252806020026020018201604052801561105657816020015b61104360408051606081018252600080825260208201819052909182015290565b8152602001906001900390816110225790505b50905060005b8151811015610ad65760088481548110611078576110786138bc565b6000918252602080832084845260026007909302019190910181526040918290208251606081018452815460ff808216835261010082048116948301949094529093919291840191620100009091041660048111156110d9576110d96132bd565b60048111156110ea576110ea6132bd565b81525050828281518110611100576111006138bc565b60200260200101819052508080611116906138e8565b91505061105c565b61113f60408051606081018252600080825260208201819052909182015290565b600060088681548110611154576111546138bc565b600091825260208083208884526001600790930201820181526040808420888552909152918290208251608081019093520160048282826020028201915b8154815260200190600101908083116111925750505050509050600886815481106111bf576111bf6138bc565b906000526020600020906007020160020160008285600481106111e4576111e46138bc565b6020908102919091015182528181019290925260409081016000208151606081018352815460ff80821683526101008204811695830195909552909391928401916201000090910416600481111561123e5761123e6132bd565b600481111561124f5761124f6132bd565b9052509695505050505050565b611264612178565b61126e60006121d2565b565b6008818154811061128057600080fd5b600091825260209182902060036007909202019081015460408051808201909152600483015460ff818116835261010090910481169482019490945260058301546006909301549390911693509184565b6002546000906001600160a01b031633146112eb57600080fd5b600060088681548110611300576113006138bc565b600091825260208083208884526001600790930201919091018152604080832087845290915290209050821561134457805460ff191660ff84161790555080610b70565b805460ff166063190161136657805460ff191660129081179091559050610b70565b805460ff16600019016113b55761139c60088781548110611389576113896138bc565b9060005260206000209060070201612222565b815460ff191660ff919091169081179091559050610b70565b50600095945050505050565b6000816000036113d357506001919050565b816001036113e357506000919050565b816002036113f357506003919050565b8160030361140357506002919050565b60405162461bcd60e51b815260206004820152600d60248201526c2130b2103234b932b1ba34b7b760991b6044820152606401610d98565b6004546001600160a01b031633146114955760405162461bcd60e51b815260206004820181905260248201527f4e6f7420616374696f6e7320636f6e7472616374202d207365744c6f6f7465646044820152606401610d98565b6001600884815481106114aa576114aa6138bc565b6000918252602080832095835260016007909202909501018452604080822093825292909352912060050180549115156101000261ff001990921691909117905550565b6060600060075467ffffffffffffffff81111561150d5761150d613644565b60405190808252806020026020018201604052801561154657816020015b61153361313c565b81526020019060019003908161152b5790505b50905060005b8151811015610ad65760008181526006602052604090819020815160a081019092528054829060ff166005811115611586576115866132bd565b6005811115611597576115976132bd565b81526001820154602082015260029091015460ff80821660408401526101008204811660608401526201000090910416151560809091015282518390839081106115e3576115e36138bc565b602002602001018190525080806115f9906138e8565b91505061154c565b6040805180820190915260008082526020820152826000036116535760405180604001604052806001846000015161163991906139a4565b60ff168152602001836020015160ff16815250905061086b565b826001036116775760405180604001604052808360000151600161163991906139bd565b826002036116b4576040518060400160405280836000015160ff168152602001836020015160016116a891906139bd565b60ff169052905061086b565b826003036116e5576040518060400160405280836000015160ff168152602001600184602001516116a891906139a4565b60006116f084612354565b60405160200161170091906139fa565b60405160208183030381529060405290508060405162461bcd60e51b8152600401610d989190613a35565b60008082600161173c866002613b4c565b611746919061391d565b901b8516831c9150509392505050565b61175e612178565b8060088581548110611772576117726138bc565b60009182526020808320968352600791909102909501600101855260408082209482529390945291909220805460ff191660ff9092169190911790555050565b6002546001600160a01b031633146117c957600080fd5b6117d16131aa565b60005b82811015611b095760005b600b8110156118945760005b600b8110156118815760088681548110611807576118076138bc565b60009182526020808320858452600792909202909101600101815260408083208484529091529020600501546301000000900460ff168483600b811061184f5761184f6138bc565b602002015182600b8110611865576118656138bc565b9115156020909202015280611879816138e8565b9150506117eb565b508061188c816138e8565b9150506117df565b5060005b600b811015611af65760005b600b811015611ae3578382600b81106118bf576118bf6138bc565b602002015181600b81106118d5576118d56138bc565b602002015115611ad15760005b6004811015611acf57600060088881548110611900576119006138bc565b600091825260208083208784526001600790930201820181526040808420878552909152909120018260048110611939576119396138bc565b01549050600060088981548110611952576119526138bc565b600091825260208083208584526007929092029091016002019052604090205462010000900460ff1690506003816004811115611991576119916132bd565b03611aba57841580156119a2575082155b156119ae575050611abd565b6119ba6001600b61391d565b851480156119c85750826001145b156119d4575050611abd565b831580156119e25750826003145b156119ee575050611abd565b6119fa6001600b61391d565b84148015611a085750826002145b15611a14575050611abd565b6000611a3a8460405180604001604052808960ff1681526020018860ff16815250611601565b9050600060088b81548110611a5157611a516138bc565b60009182526020808320855160ff90811685526007939093020160010181526040808420868301518416855290915290912080549092501615801590611a9c5750805460ff16600214155b15611ab75760058101805463ff000000191663010000001790555b50505b50505b80611ac7816138e8565b9150506118e2565b505b80611adb816138e8565b9150506118a4565b5080611aee816138e8565b915050611898565b5080611b01816138e8565b9150506117d4565b50505050565b600060088481548110611b2457611b246138bc565b6000918252602080832095835260079190910290940160010184526040808220938252929093525090205460ff16919050565b6001805460009182611b68836138e8565b9190505550600033600154600143611b80919061391d565b60405160609390931b6bffffffffffffffffffffffff19166020840152603483019190915240605482015260740160408051601f19818403018152919052805160209091012090506000611bd485856139a4565b611bdf9060016139bd565b90508460ff168160ff1683611bf49190613b58565b611bfe9190613971565b95945050505050565b611c0f612178565b600280546001600160a01b038088166001600160a01b03199283161790925560038054868416908316179055600480548584169083161790556005805492841692909116919091179055611c61612455565b6007555050505050565b6002546000906001600160a01b03163314611c8557600080fd5b600880546001810182556000829052604080516103408101825260038152600460208201526005918101919091526006606082015260076080820181905260a0820193909352600960c0820152600a60e0820152600b610100820152600c610120820152600d610140820152600e610160820152600f61018082015260106101a082015260116101c082015260136101e08201526014610200820152601561022082015260166102408201526017610260820152601861028082015260196102a0820152601a6102c08201819052601b6102e0830152601c610300830152601d610320830152929091027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30191611d9f90839083906131d8565b506040805160608101825260ff808252602082015290810160009052600383015460ff9081166000908152600285016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff0000191662010000836004811115611e1b57611e1b6132bd565b0217905550505060038201805460ff16906000611e3783613b6c565b82546101009290920a60ff8181021990931691909216919091021790555060408051808201909152600a8152600660209091015260048201805461ffff191661060a179055611e85826125e2565b611e8e82612ea9565b600854611e9d9060019061391d565b9250505090565b611eac612178565b6001600160a01b038116611f115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d98565b611f1a816121d2565b50565b611f2561318b565b60088481548110611f3857611f386138bc565b600091825260208083208684526001600790930201820181526040808420868552825292839020835160e081018552815460ff808216835261010090910416928101929092528351608081018552919390929084019190830160048282826020028201915b815481526020019060010190808311611f9d5750505091835250506005919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152949350505050565b8051825160009161201191613b8b565b60000b6001036120235750600061086b565b815183516120319190613b8b565b60000b196120415750600161086b565b816020015183602001516120559190613b8b565b60000b196120655750600261086b565b816020015183602001516120799190613b8b565b60000b60010361208b5750600361086b565b60405162461bcd60e51b8152602060048201526013602482015272115c9c9bdc8e88139bdd0818591a9858d95b9d606a1b6044820152606401610d98565b6005546001600160a01b031633146121195760405162461bcd60e51b8152602060048201526013602482015272139bdd081c1b185e595c8818dbdb9d1c9858dd606a1b6044820152606401610d98565b806008858154811061212d5761212d6138bc565b600091825260208083209683526001600790920290960101855260408082209482529390945291909220600501805491151563010000000263ff000000199092169190911790555050565b6000546001600160a01b0316331461126e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d98565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805460009081906122359060019061391d565b90505b80156122f157600061224b600083611b57565b9050836000018160ff1681548110612265576122656138bc565b9060005260206000200154846000018381548110612285576122856138bc565b90600052602060002001548560000184815481106122a5576122a56138bc565b906000526020600020016000876000018560ff16815481106122c9576122c96138bc565b60009182526020909120019290925591909155508190506122e981613bac565b915050612238565b50815460009083906123059060019061391d565b81548110612315576123156138bc565b906000526020600020015490508260000180548061233557612335613bc3565b6001900381819060005260206000200160009055905580915050919050565b60608160000361237b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156123a5578061238f816138e8565b915061239e9050600a8361395d565b915061237f565b60008167ffffffffffffffff8111156123c0576123c0613644565b6040519080825280601f01601f1916602001820160405280156123ea576020820181803683370190505b5090505b8415610b70576123ff60018361391d565b915061240c600a86613b58565b612417906030613971565b60f81b81838151811061242c5761242c6138bc565b60200101906001600160f81b031916908160001a90535061244e600a8661395d565b94506123ee565b600080600360009054906101000a90046001600160a01b03166001600160a01b03166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cf9190613bd9565b905060005b818110156125dc5760035460405163413a9f5f60e11b8152600481018390526001600160a01b03909116906382753ebe9060240160a060405180830381865afa158015612525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125499190613bf2565b600082815260066020526040902081518154829060ff19166001836005811115612575576125756132bd565b02179055506020820151600182015560408201516002909101805460608401516080909401511515620100000262ff00001960ff9586166101000261ffff1990931695909416949094171791909116919091179055806125d4816138e8565b9150506124d4565b50919050565b60008060026007546125f4919061391d565b9050600160006126026131aa565b6004860154600190829060ff16600b811061261f5761261f6138bc565b60200201516004880154610100900460ff16600b8110612641576126416138bc565b91151560209092020152612653613223565b60408051808201909152600488015460ff80821683526101009091041660208201528187601e8110612687576126876138bc565b602002015285612696816138e8565b9650505b6000851180156126aa5750600086115b15612e1d576000816126bd60018961391d565b601e81106126cd576126cd6138bc565b60200201519050866126de81613bac565b9750508187601e81106126f3576126f36138bc565b6020020161271a6040518060400160405280600060ff168152602001600060ff1681525090565b90528561272681613bac565b965050848061273490613bac565b825160ff908116600090815260018c810160209081526040808420828901519095168452939052918120805460ff19169092179091559096506021915061277c906063611b57565b60ff1610156127bf57805160ff908116600090815260018a016020908152604080832082860151909416835292905220600501805462ff00001916620100001790555b60006040518060800160405280600081526020016001815260200160028152602001600381525090506000600160046127f8919061391d565b90505b801561288857600061280e600083611b57565b9050828160ff1660048110612825576128256138bc565b602002015183836004811061283c5761283c6138bc565b6020020151848460048110612853576128536138bc565b60200201858460ff166004811061286c5761286c6138bc565b602002019190915252508061288081613bac565b9150506127fb565b5060005b6004811015612e155782516020840151600091820b910b8383600481106128b5576128b56138bc565b60200201516000036128d357816128cb81613c93565b925050612957565b8383600481106128e5576128e56138bc565b60200201516001036128fb57816128cb81613ca8565b83836004811061290d5761290d6138bc565b602002015160020361292b578061292381613ca8565b915050612957565b83836004811061293d5761293d6138bc565b6020020151600303612957578061295381613c93565b9150505b60018212806129665750600181125b8061297b57506129786002600b61391d565b82135b80612990575061298d6002600b61391d565b81135b1561299c575050612e03565b6040805180820190915260ff80841680835290831660208301528890600b81106129c8576129c86138bc565b6020020151816020015160ff16600b81106129e5576129e56138bc565b60200201511580612a4657508c6001016000876000015160ff1681526020019081526020016000206000876020015160ff168152602001908152602001600020600101612a328783612001565b60048110612a4257612a426138bc565b0154155b15612dff57891580612a6f5750612a5e89604261391d565b612a6a60006063611b57565b60ff16105b15612dfa576040518060600160405280612a8b60006004611b57565b60ff168152602001612a9f60006004611b57565b60ff16815260200160018152508d60020160008f60030160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff02191690836004811115612b4157612b416132bd565b0217905550505060038d015460ff908116600090815260028f0160205260408120549091169003612b945760038d015460ff16600090815260028e0160205260409020805462ff00001916620300001790555b60038d01805460ff16906000612ba983613b6c565b91906101000a81548160ff021916908360ff16021790555050601689612bcf9190613971565b98506042891115612bdf57604298505b8051889060ff16600b8110612bf657612bf66138bc565b6020020151816020015160ff16600b8110612c1357612c136138bc565b60200201511515600003612c975780878d601e8110612c3457612c346138bc565b60200201528b612c43816138e8565b9c50508980612c51906138e8565b9a5050600188826000015160ff16600b8110612c6f57612c6f6138bc565b6020020151826020015160ff16600b8110612c8c57612c8c6138bc565b911515602090920201525b8c6001016000876000015160ff1681526020019081526020016000206000876020015160ff168152602001908152602001600020600101858560048110612ce057612ce06138bc565b602002015160048110612cf557612cf56138bc565b0154600003612df55760038d0154612d129060019060ff166139a4565b60ff168d6001016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612d5e57612d5e6138bc565b602002015160048110612d7357612d736138bc565b015560038d0154612d899060019060ff166139a4565b60ff168d6001016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101612de2878760048110612dd857612dd86138bc565b60200201516113c1565b60048110612df257612df26138bc565b01555b612dff565b600098505b5050505b80612e0d816138e8565b91505061288c565b50505061269a565b60048701805460ff80821660009081526001808c016020818152604080852061010097889004871686528252808520805460ff1916600290811790915597548087168652928252808520969092049094168352938352838220600501805462ff000019908116909155908252938b01909152208054600392166201000083021790555050505050505050565b6000805b600b8110156131375760005b600b811015613124576000828152600185016020908152604080832084845290915290205460ff16600019016131125782612ef3816138e8565b93505082600503612f3357600082815260018501602090815260408083208484529091529020805460ff1916606417905560058401829055600684018190555b60005b6004811015613110576000838152600180870160209081526040808420868552909152909120018160048110612f6e57612f6e6138bc565b01546000036130fe57826009148015612f875750816006145b6130fe576000612fb18260405180604001604052808760ff1681526020018660ff16815250611601565b805160ff9081166000908152600189016020908152604080832082860151851684529091529020549192501680158015612ff957506042612ff460006063611b57565b60ff16105b156130fb576040805160608101825260ff808252602082015290810160049052600388015460ff908116600090815260028a016020908152604091829020845181549286015185166101000261ffff19909316941693909317178083559083015190829062ff0000191662010000836004811115613079576130796132bd565b0217905550505060038701805460ff1690600061309583613b6c565b82546101009290920a60ff81810219909316918316021790915560038901546130c29250600191166139a4565b60008681526001808a016020908152604080842089855290915290912060ff92909216910184600481106130f8576130f86138bc565b01555b50505b80613108816138e8565b915050612f36565b505b8061311c816138e8565b915050612eb9565b508061312f816138e8565b915050612ead565b505050565b6040805160a081019091528060005b8152600060208201819052604082018190526060820181905260809091015290565b60405180608001604052806004906020820280368337509192915050565b6040805160e0810182526000808252602082015290810161314b61316d565b604051806101600160405280600b905b6131c261325d565b8152602001906001900390816131ba5790505090565b828054828255906000526020600020908101928215613213579160200282015b828111156132135782518255916020019190600101906131f8565b5061321f92915061327c565b5090565b604051806103c00160405280601e905b60408051808201909152600080825260208201528152602001906001900390816132335790505090565b604051806101600160405280600b906020820280368337509192915050565b5b8082111561321f576000815560010161327d565b6000806000606084860312156132a657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b600681106132e3576132e36132bd565b9052565b6132f28282516132d3565b6020810151602083015260ff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b60a0810161086b82846132e7565b60808101818360005b600481101561335e578151151583526020928301929091019060010161333d565b50505092915050565b60006020828403121561337957600080fd5b5035919050565b60ff8151168252602060ff81830151168184015260408201516040840160005b60048110156133bd578251825291830191908301906001016133a0565b505050506060810151151560c0838101919091526080820151151560e084015260a082015115156101008401520151151561012090910152565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561347e57888603603f19018552825180518088529088019088880190845b8181101561346857613454838551613380565b928a01926101409290920191600101613441565b509097505050938601939186019160010161341f565b509398975050505050505050565b600080600080608085870312156134a257600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156134d157600080fd5b50508035926020909101359150565b60008060008060008060c087890312156134f957600080fd5b8635955060208701359450604087013593506060870135925060808701356005811061352457600080fd5b8092505060a087013590509295509295509295565b60ff815116825260ff6020820151166020830152604081015160058110613562576135626132bd565b806040840152505050565b6020808252825182820181905260009190848201906040850190845b818110156135af5761359c838551613539565b9284019260609290920191600101613589565b50909695505050505050565b6060810161086b8284613539565b60ff8516815260a081016135f06020830186805160ff908116835260209182015116910152565b60608201939093526080015292915050565b6020808252825182820181905260009190848201906040850190845b818110156135af576136318385516132e7565b9284019260a0929092019160010161361e565b634e487b7160e01b600052604160045260246000fd5b60ff81168114611f1a57600080fd5b60006040828403121561367b57600080fd5b6040516040810181811067ffffffffffffffff821117156136ac57634e487b7160e01b600052604160045260246000fd5b60405290508082356136bd8161365a565b815260208301356136cd8161365a565b6020919091015292915050565b600080606083850312156136ed57600080fd5b823591506136fe8460208501613669565b90509250929050565b6040810161086b8284805160ff908116835260209182015116910152565b60a0810161373382886132d3565b85602083015260ff8516604083015260ff8416606083015282151560808301529695505050505050565b6000806040838503121561377057600080fd5b823561377b8161365a565b9150602083013561378b8161365a565b809150509250929050565b80356001600160a01b03811681146137ad57600080fd5b919050565b600080600080600060a086880312156137ca57600080fd5b6137d386613796565b94506137e160208701613796565b93506137ef60408701613796565b92506137fd60608701613796565b915061380b60808701613796565b90509295509295909350565b60006020828403121561382957600080fd5b61070582613796565b610140810161086b8284613380565b6000806080838503121561385457600080fd5b61385e8484613669565b91506136fe8460408501613669565b8015158114611f1a57600080fd5b6000806000806080858703121561389157600080fd5b84359350602085013592506040850135915060608501356138b18161386d565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016138fa576138fa6138d2565b5060010190565b6000600160ff1b8201613916576139166138d2565b5060000390565b8181038181111561086b5761086b6138d2565b808202811582820484141761086b5761086b6138d2565b634e487b7160e01b600052601260045260246000fd5b60008261396c5761396c613947565b500490565b8082018082111561086b5761086b6138d2565b8181036000831280158383131683831282161715610ad657610ad66138d2565b60ff828116828216039081111561086b5761086b6138d2565b60ff818116838216019081111561086b5761086b6138d2565b60005b838110156139f15781810151838201526020016139d9565b50506000910152565b72024b73b30b634b2103234b932b1ba34b7b71d1606d1b815260008251613a288160138501602087016139d6565b9190910160130192915050565b6020815260008251806020840152613a548160408501602087016139d6565b601f01601f19169190910160400192915050565b600181815b80851115613aa3578160001904821115613a8957613a896138d2565b80851615613a9657918102915b93841c9390800290613a6d565b509250929050565b600082613aba5750600161086b565b81613ac75750600061086b565b8160018114613add5760028114613ae757613b03565b600191505061086b565b60ff841115613af857613af86138d2565b50506001821b61086b565b5060208310610133831016604e8410600b8410161715613b26575081810a61086b565b613b308383613a68565b8060001904821115613b4457613b446138d2565b029392505050565b60006107058383613aab565b600082613b6757613b67613947565b500690565b600060ff821660ff8103613b8257613b826138d2565b60010192915050565b600082810b9082900b03607f198112607f8213171561086b5761086b6138d2565b600081613bbb57613bbb6138d2565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613beb57600080fd5b5051919050565b600060a08284031215613c0457600080fd5b60405160a0810181811067ffffffffffffffff82111715613c3557634e487b7160e01b600052604160045260246000fd5b604052825160068110613c4757600080fd5b8152602083810151908201526040830151613c618161365a565b60408201526060830151613c748161365a565b60608201526080830151613c878161386d565b60808201529392505050565b6000600160ff1b8201613bbb57613bbb6138d2565b60006001600160ff1b0182016138fa576138fa6138d256fea2646970667358221220fc660cc716604c925974ef8464e45915317eff8156d492859bd83c938684697764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11965,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "TODO_randomSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7600,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "game",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7603,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomTiles",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(RoomTileInterface)7594"
      },
      {
        "astId": 7605,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7607,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "playersAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7651,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(RoomTile)11869_storage)"
      },
      {
        "astId": 7653,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "numRooms",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7657,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "maps",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Map)11800_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Map)11800_storage)dyn_storage": {
        "base": "t_struct(Map)11800_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Map[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RoomTileInterface)7594": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)11658": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DoorStatus)11637": {
        "encoding": "inplace",
        "label": "enum BCTypes.DoorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)11767_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BCTypes.GameTile))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GameTile)11767_storage)"
      },
      "t_mapping(t_uint256,t_struct(Door)11775_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.Door)",
        "numberOfBytes": "32",
        "value": "t_struct(Door)11775_storage"
      },
      "t_mapping(t_uint256,t_struct(GameTile)11767_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.GameTile)",
        "numberOfBytes": "32",
        "value": "t_struct(GameTile)11767_storage"
      },
      "t_mapping(t_uint256,t_struct(RoomTile)11869_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.RoomTile)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomTile)11869_storage"
      },
      "t_struct(Door)11775_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Door",
        "members": [
          {
            "astId": 11769,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsBreach",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11771,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsHack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11774,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "status",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(DoorStatus)11637"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameTile)11767_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.GameTile",
        "members": [
          {
            "astId": 11752,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11754,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "parentId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11758,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 11760,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "explored",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 11762,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "looted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 11764,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasVent",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 11766,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasHazard",
            "offset": 3,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)11800_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Map",
        "members": [
          {
            "astId": 11778,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "unusedNormalRooms",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 11785,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "board",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)11767_storage))"
          },
          {
            "astId": 11790,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Door)11775_storage)"
          },
          {
            "astId": 11792,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numDoors",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 11795,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "startPosition",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Position)11750_storage"
          },
          {
            "astId": 11797,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "mainReactorRow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11799,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "mainReactorCol",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Position)11750_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 11747,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11749,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoomTile)11869_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.RoomTile",
        "members": [
          {
            "astId": 11860,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BCEventType)11658"
          },
          {
            "astId": 11862,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11864,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numItems",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 11866,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numData",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 11868,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "sigDetected",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}