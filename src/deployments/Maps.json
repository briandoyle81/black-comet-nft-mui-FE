{
  "address": "0x6011BA0DAcD7c30E8eAf146e6DE73AF90C72fc75",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "actionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "discoverRoom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetDoors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetGameTile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roomId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "parentId",
              "type": "uint8"
            },
            {
              "internalType": "uint256[4]",
              "name": "doors",
              "type": "uint256[4]"
            },
            {
              "internalType": "bool",
              "name": "explored",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "looted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVent",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.GameTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "extGetRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "extGetRoomList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BCTypes.BCEventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventNum",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "numItems",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "numData",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "hasHazard",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sigDetected",
              "type": "bool"
            }
          ],
          "internalType": "struct BCTypes.RoomTile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "contract GameInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        }
      ],
      "name": "getDoor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vsBreach",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "vsHack",
              "type": "uint8"
            },
            {
              "internalType": "enum BCTypes.DoorStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Door",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maps",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numRooms",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numDoors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "row",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "col",
              "type": "uint8"
            }
          ],
          "internalType": "struct BCTypes.Position",
          "name": "startPosition",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        }
      ],
      "name": "resetOpenDoors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomTiles",
      "outputs": [
        {
          "internalType": "contract RoomTileInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roomTilesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_actionsAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_direction",
          "type": "uint256"
        },
        {
          "internalType": "enum BCTypes.DoorStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setDoorFromPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_row",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_col",
          "type": "uint256"
        }
      ],
      "name": "setLooted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utils",
      "outputs": [
        {
          "internalType": "contract UtilsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x82caa8bb7c0aa5198c75de306c05a6f31aeaa4e480075af618c5f3c6b506d6e5",
  "receipt": {
    "to": null,
    "from": "0x69a5B3aE8598fC5A5419eaa1f2A59Db2D052e346",
    "contractAddress": "0x6011BA0DAcD7c30E8eAf146e6DE73AF90C72fc75",
    "transactionIndex": 7,
    "gasUsed": "4219894",
    "logsBloom": "0x
    "blockHash": "0xde837616ec29bad487c8be4e3dc356921a561ee96415d7ae5340207b8b762f91",
    "transactionHash": "0x82caa8bb7c0aa5198c75de306c05a6f31aeaa4e480075af618c5f3c6b506d6e5",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 28881256,
        "transactionHash": "0x82caa8bb7c0aa5198c75de306c05a6f31aeaa4e480075af618c5f3c6b506d6e5",
        "address": "0x6011BA0DAcD7c30E8eAf146e6DE73AF90C72fc75",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0xde837616ec29bad487c8be4e3dc356921a561ee96415d7ae5340207b8b762f91"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 28881256,
        "transactionHash": "0x82caa8bb7c0aa5198c75de306c05a6f31aeaa4e480075af618c5f3c6b506d6e5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000069a5b3ae8598fc5a5419eaa1f2a59db2d052e346",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000025ce74e5f4080940000000000000000000000000000000000000000000000001d03bee306798f3f000000000000000000000000000000000000000000002705ad40e1cd3d7df6560000000000000000000000000000000000000000000000001aa6d794a7390eab000000000000000000000000000000000000000000002705af9dc91b9cbe76ea",
        "logIndex": 36,
        "blockHash": "0xde837616ec29bad487c8be4e3dc356921a561ee96415d7ae5340207b8b762f91"
      }
    ],
    "blockNumber": 28881256,
    "cumulativeGasUsed": "5287426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "753b1330799a0df0790c168e06935726",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"discoverRoom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetDoors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetGameTile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roomId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"parentId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"doors\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"explored\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"looted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVent\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.GameTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"extGetRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"extGetRoomList\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BCTypes.BCEventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numItems\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numData\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasHazard\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sigDetected\",\"type\":\"bool\"}],\"internalType\":\"struct BCTypes.RoomTile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contract GameInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"}],\"name\":\"getDoor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vsBreach\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vsHack\",\"type\":\"uint8\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Door\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numRooms\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numDoors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"}],\"internalType\":\"struct BCTypes.Position\",\"name\":\"startPosition\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"}],\"name\":\"resetOpenDoors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomTiles\",\"outputs\":[{\"internalType\":\"contract RoomTileInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roomTilesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actionsAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"enum BCTypes.DoorStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setDoorFromPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"setLooted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract UtilsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCMaps.sol\":\"Maps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BCMaps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BCTypes.sol\\\";\\n\\n// TODO: Eval putting constants in a separate file that is imported/shared\\nuint constant BOARD_SIZE = 11;\\nuint constant VENT_CHANCE = 33;\\nuint constant WINDOW_CHANCE = 66;\\nuint constant DOOR_CHANCE = 66;\\nuint constant DOOR_MOD_STEP = 22;\\nuint8 constant MAX_DOOR_STR = 3;\\n\\nuint constant START_ROOM_ID = 2; // TODO: Possibility of more than one start room?\\nuint8 constant UNDISCOVERED_ROOM = 1;\\nuint8 constant SPACE_ROOM = 0;\\n\\ninterface GameInterface {\\n\\n}\\n\\ninterface RoomTileInterface {\\n    function getNumRoomTiles() external view returns(uint256);\\n    function extGetRoomTile(uint _id) external view returns(BCTypes.RoomTile memory);\\n}\\n\\ninterface UtilsInterface {\\n    function smallIntBetweenVals(uint8 _min, uint8 _max) external returns (uint8);\\n    function roll() external returns (uint8);\\n    function abs(int x) external pure returns(int);\\n    function getDirectionBetween(BCTypes.Position memory _firstRoom, BCTypes.Position memory _secondRoom) external pure returns(uint);\\n    function getNeighborRoom(uint _direction, BCTypes.Position memory _start) external pure returns (BCTypes.Position memory);\\n    function opposite(uint _direction) external pure returns (uint);\\n}\\n\\ncontract Maps is Ownable {\\n\\n    GameInterface public game;\\n    UtilsInterface public utils;\\n    RoomTileInterface public roomTiles;\\n\\n    address public actionsAddress;\\n\\n    function setContractAddresses(\\n        address _gameAddress,\\n        address _utilsAddress,\\n        address _roomTilesAddress,\\n        address _actionsAddress\\n        ) public onlyOwner {\\n        game = GameInterface(_gameAddress);\\n        utils = UtilsInterface(_utilsAddress);\\n        roomTiles = RoomTileInterface(_roomTilesAddress);\\n        actionsAddress = _actionsAddress;\\n    }\\n\\n    // TODO: This array is here just to support making an empty one to put in the mapping\\n    BCTypes.GameTile[] private gameTiles;\\n    BCTypes.Map[] public maps;\\n\\n    // TODO: System for options like static start and debug maps for testing\\n    function createMap() public returns (uint) {\\n        require(msg.sender == address(game), \\\"Only game contract can use\\\");\\n\\n        BCTypes.Map storage newMap = maps.push();\\n\\n        // Get the room list and save the number of rooms\\n        newMap.numRooms = uint8(_setGameRoomTiles(newMap.roomList));\\n\\n        // ADD a door for walls (this will be default!)\\n        newMap.doors[newMap.numDoors] = BCTypes.Door(\\n            255,\\n            255, // TODO: Hack to make them invincible??\\n            BCTypes.DoorStatus.NO_DOOR\\n        );\\n        newMap.numDoors++;\\n\\n        _staticStart(newMap);\\n        _buildMap(newMap);\\n        _addWindows(newMap);\\n\\n        // Return the map id for the games contract\\n        return maps.length-1;\\n    }\\n\\n    // TODO: Is there any reason NOT to just always place start bottom center???\\n    function _staticStart(BCTypes.Map storage _newMap) internal {\\n        BCTypes.GameTile storage startTile = gameTiles.push(); // TODO: Can I make an empty one and reference it this way without the array?\\n\\n        uint startRow = BOARD_SIZE-1;\\n        uint startCol = (BOARD_SIZE/2)+1;\\n\\n        _newMap.startPosition = BCTypes.Position(uint8(startRow), uint8(startCol));\\n        _newMap.board[startRow][startCol] = startTile;\\n    }\\n\\n    function _addWindows(BCTypes.Map storage _newMap) internal {\\n        for(uint row = 0; row < BOARD_SIZE; row++){\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                if(_newMap.board[row][col].roomId == UNDISCOVERED_ROOM) {\\n                    for (uint i = 0; i < 4; i++) {\\n                        // Position memory neighbor = utils.getNeighborRoom(i, Position(uint8(row), uint8(col)));\\n                        if (_newMap.board[row][col].doors[i] == 0) {\\n                                BCTypes.Position memory neighborPos = utils.getNeighborRoom(i, BCTypes.Position(uint8(row), uint8(col)));\\n                                uint neighborId = _newMap.board[neighborPos.row][neighborPos.col].roomId;\\n                                if (utils.smallIntBetweenVals(0, 99) < WINDOW_CHANCE && neighborId == SPACE_ROOM) {\\n                                    _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                                    255,\\n                                    255,\\n                                    BCTypes.DoorStatus.WINDOW);\\n                                    _newMap.numDoors++;\\n                                    _newMap.board[row][col].doors[i] = _newMap.numDoors-1; // -1 for correct index\\n                                    // TODO: Conform that neighbor doesn't need this door/window\\n                                }\\n                            }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _buildMap(BCTypes.Map storage _newMap) internal {\\n        uint stackCount = 0;\\n        uint numToPlace = _newMap.numRooms - 2; // -1 for space and -1 for empty room\\n\\n        uint availableDoors = 1; // Start with 1 because tracking is done in the pop current phase\\n\\n        uint doorModifier = 0;\\n\\n        bool[BOARD_SIZE][BOARD_SIZE] memory found;\\n        found[_newMap.startPosition.row][_newMap.startPosition.col] = true;\\n\\n        BCTypes.Position[30] memory stack; // TODO: Write a stack library? // TODO: This can probably be 27\\n        stack[stackCount] = _newMap.startPosition; // Start by enstacking the Donghaijiu location\\n        stackCount++;\\n\\n        while (numToPlace > 0 && stackCount > 0) { // TODO: Need to track stack count to avoid crash on error if all rooms not placed\\n            // Pop the top item from the stack\\n            BCTypes.Position memory current = stack[stackCount-1];\\n            stackCount--;\\n            delete stack[stackCount]; // TODO: Confirm utility of deleting\\n\\n            numToPlace--;\\n            availableDoors--;\\n\\n            _newMap.board[current.row][current.col].roomId = UNDISCOVERED_ROOM;\\n\\n            // Add vent\\n            if (utils.smallIntBetweenVals(0, 99) < VENT_CHANCE) {\\n                _newMap.board[current.row][current.col].hasVent = true;\\n            }\\n\\n            // Also ugly but fighting stack limit\\n            uint[4] memory order = [uint(0), 1, 2, 3];\\n\\n            // Fischer-Yates shuffle to avoid direction bias in room placement\\n            for (uint i = order.length-1; i > 0; i--) {\\n                uint8 k = utils.smallIntBetweenVals(0, 3);\\n\\n                (order[i], order[k]) = (order[k], order[i]);\\n            }\\n\\n            for (uint i = 0; i < order.length; i++) {\\n                int newRow = int8(current.row);\\n                int newCol = int8(current.col);\\n\\n                if(order[i] == 0) {\\n                    newRow--;\\n                } else if (order[i] == 1) {\\n                    newRow++;\\n                } else if (order[i] == 2) {\\n                    newCol++;\\n                } else if (order[i] == 3) {\\n                    newCol--;\\n                }\\n\\n                // Stay in bounds, reserving outside edge for Donghaijiu only\\n                if (newRow < 1 ||\\n                    newCol < 1 ||\\n                    newRow > int(BOARD_SIZE-2) ||\\n                    newCol > int(BOARD_SIZE-2)) {\\n                        continue;\\n                }\\n                BCTypes.Position memory neighbor = BCTypes.Position(uint8(int8(newRow)), uint8(int8(newCol)));\\n                                                                    // Hideous but hashtag #stacklimit\\n                if (found[neighbor.row][neighbor.col] == false || _newMap.board[current.row][current.col].doors[utils.getDirectionBetween(current, neighbor)] == 0) {\\n                    if (availableDoors == 0 || utils.smallIntBetweenVals(0, 99) < DOOR_CHANCE - doorModifier) {\\n                        _newMap.doors[_newMap.numDoors] = BCTypes.Door(\\n                        utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        utils.smallIntBetweenVals(0, MAX_DOOR_STR),\\n                        BCTypes.DoorStatus.CLOSED);\\n                        // Pre-breach doors with strength 0\\n                        if (_newMap.doors[_newMap.numDoors].vsBreach == 0) {\\n                            _newMap.doors[_newMap.numDoors].status = BCTypes.DoorStatus.BREACHED;\\n                        }\\n                        _newMap.numDoors++;\\n\\n                        doorModifier += DOOR_MOD_STEP;\\n                        // Prevent negative uint in DOOR_CHANCE - doorModifier\\n                        if (doorModifier > DOOR_CHANCE) {\\n                            doorModifier = DOOR_CHANCE;\\n                        }\\n\\n                        // Only enstack if we haven't found this one yet\\n                        // Otherwise it will overwrite existing tiles\\n                        if (found[neighbor.row][neighbor.col] == false) {\\n                            stack[stackCount] = neighbor;\\n                            stackCount++;\\n                            availableDoors++;\\n\\n                            found[neighbor.row][neighbor.col] = true;\\n                        }\\n\\n                        // Add the door if one isn't present already\\n                        // TODO: Check may be unnecessary\\n                        if(_newMap.board[current.row][current.col].doors[order[i]] == 0) {\\n                            _newMap.board[current.row][current.col].doors[order[i]] = _newMap.numDoors-1;\\n                            _newMap.board[neighbor.row][neighbor.col].doors[utils.opposite(order[i])] = _newMap.numDoors-1;\\n                        }\\n                    } else {\\n                        doorModifier = 0;\\n                    }\\n                }\\n\\n            }\\n            // Detect mapgen stuck and reset by adding a new valid room in the stack\\n        }\\n        // Cleanup Tasks\\n\\n        // TODO Detect and prevent failure to deploy all tiles\\n\\n        // require(numToPlace == 0, \\\"Error: Bad mapgen.  Unplaced rooms\\\");\\n\\n        // Reset Donghaijiu ID (Was changed by map building)\\n        _newMap.board[_newMap.startPosition.row][_newMap.startPosition.col].roomId = uint8(START_ROOM_ID);\\n\\n        // Set the first door placed to breached, this is the entrance\\n        _newMap.doors[1].status = BCTypes.DoorStatus.BREACHED;\\n\\n        // TODO: Add signature detected\\n    }\\n\\n    function _setGameRoomTiles(mapping (uint => BCTypes.RoomTile) storage _roomList) internal returns (uint) {\\n        uint number = roomTiles.getNumRoomTiles();\\n        for(uint i = 0; i < number; i++) {\\n            _roomList[i] = roomTiles.extGetRoomTile(i);\\n        }\\n        return number;\\n    }\\n\\n    function extGetBoard(uint _mapId) public view returns (BCTypes.GameTile[][] memory) {\\n        BCTypes.GameTile[][] memory board = new BCTypes.GameTile[][](BOARD_SIZE);\\n        for (uint i = 0; i < BOARD_SIZE; i++) {\\n            board[i] = new BCTypes.GameTile[](BOARD_SIZE);\\n        }\\n\\n        for (uint row = 0; row < BOARD_SIZE; row++) {\\n            for (uint col = 0; col < BOARD_SIZE; col++) {\\n                board[row][col] = maps[_mapId].board[row][col];\\n            }\\n        }\\n\\n        return board;\\n    }\\n\\n    function extGetGameTile(uint _mapId, uint _row, uint _col) public view returns (BCTypes.GameTile memory) {\\n        return maps[_mapId].board[_row][_col];\\n    }\\n\\n    function extGetRoomList(uint _mapId) public view returns (BCTypes.RoomTile[] memory) {\\n        BCTypes.RoomTile[] memory roomList = new BCTypes.RoomTile[](maps[_mapId].numRooms);\\n        for (uint i = 0; i < roomList.length; i++) {\\n            roomList[i] = maps[_mapId].roomList[i];\\n        }\\n        return roomList;\\n    }\\n\\n    function extGetRoom(uint _mapId, uint _row, uint _col) public view returns(BCTypes.RoomTile memory) {\\n        return maps[_mapId].roomList[maps[_mapId].board[_row][_col].roomId];\\n    }\\n\\n    function extGetDoors(uint _mapId) public view returns (BCTypes.Door[] memory) {\\n        BCTypes.Door[] memory doors = new BCTypes.Door[](maps[_mapId].numDoors);\\n        for (uint i = 0; i < doors.length; i++) {\\n            doors[i] = maps[_mapId].doors[i];\\n        }\\n\\n        return doors;\\n    }\\n\\n    // TODO:  These need to validate that this is the right version of BCMaps\\n    function getDoor(uint _mapId, uint _row, uint _col, uint _direction) public view returns (BCTypes.Door memory){\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        return maps[_mapId].doors[currentRoomDoors[_direction]];\\n    }\\n\\n    function setDoorFromPos(uint _mapId, uint _row, uint _col, uint _direction, BCTypes.DoorStatus _status) public {\\n        require((msg.sender == address(game) || msg.sender == actionsAddress), \\\"Not allowed contract\\\");\\n        uint[4] memory currentRoomDoors = maps[_mapId].board[_row][_col].doors;\\n        BCTypes.Door storage currentDoor = maps[_mapId].doors[currentRoomDoors[_direction]];\\n        currentDoor.status = _status;\\n    }\\n\\n    function setLooted(uint _mapId, uint _row, uint _col) public {\\n        require(msg.sender == actionsAddress, \\\"Not actions contract\\\");\\n        maps[_mapId].board[_row][_col].looted = true;\\n    }\\n\\n    function resetOpenDoors(uint _mapId) public {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n        for (uint i = 0; i < maps[_mapId].numDoors; i++) {\\n            if (maps[_mapId].doors[i].status == BCTypes.DoorStatus.OPEN) {\\n                maps[_mapId].doors[i].status = BCTypes.DoorStatus.CLOSED;\\n            }\\n        }\\n    }\\n\\n    function _getUnusedRoomId(BCTypes.Map storage _map) internal returns (uint8) {\\n        // TODO: Explore other ways of doing use once\\n        uint8 roomId = utils.smallIntBetweenVals(uint8(START_ROOM_ID+1), _map.numRooms-4); // - for array, empty space, unexplored, donghaiziu\\n\\n        while (_map.usedRooms[roomId] == true) {\\n            if (roomId == _map.numRooms-1) {\\n                roomId = uint8(START_ROOM_ID) + 1; // TODO: Semi-Hardcoded to account for empty and donghaijiu\\n            } else {\\n                roomId++;\\n            }\\n        }\\n        _map.usedRooms[roomId] = true;\\n        return roomId;\\n    }\\n\\n    // Discover a room and return the uint id for that room's event\\n    function discoverRoom(uint _mapId, uint _row, uint _col) public returns (bool) {\\n        require(msg.sender == address(game), \\\"Not game contract\\\");\\n\\n        BCTypes.GameTile storage gameTile = maps[_mapId].board[_row][_col];\\n        if( gameTile.roomId == UNDISCOVERED_ROOM) {\\n            gameTile.roomId = _getUnusedRoomId(maps[_mapId]);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xbe026d5ec459f65e86bd27a277df19e00a7fe4630861c7f2805d39eabcd7dd60\",\"license\":\"UNLICENSED\"},\"contracts/BCTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BCTypes {\\n\\n    // From BCGames.sol\\n    enum DoorStatus { NO_DOOR, CLOSED, OPEN, BREACHED, WINDOW }\\n    enum Action { HACK, BREACH, MOVE, PASS, LOOT } // TODO: Add rest\\n    enum Followthrough { NONE, MOVE }\\n\\n    struct Player {\\n        address owner;\\n        address charContractAddress;\\n        uint256 characterId;\\n\\n        Position position;\\n        // 20,000 to write a word vs. 3 to add numbers, will not store updated characteristics\\n        uint8 healthDmgTaken;\\n        uint8 armorDmgTaken;\\n        uint8 actionsTaken;\\n\\n        uint8 dataTokens;\\n        uint8[] currentEffects; // Use mapping and mark true if effect is present\\n        uint8[] inventoryIDs; // TODO: figure out how to manage inventory\\n\\n        // Flags\\n        bool canHarmOthers;\\n        bool dead;\\n    }\\n\\n    struct WorldItem {\\n        address itemContract;\\n        uint id;\\n\\n        Position position;\\n        bool destroyed; // TODO: Discarded vs. destroyed (probably remove destroyed)\\n    }\\n\\n    struct EventTracker {\\n        uint8 bugEvents;\\n        uint8 mysteryEvents;\\n        uint8 scavEvents;\\n        uint8 shipEvents;\\n    }\\n\\n    struct Position {\\n        uint8 row;\\n        uint8 col;\\n    }\\n\\n    struct GameTile {\\n        // Position pos;\\n        // uint8 timesUsed;  // Used to turn off egg room, etc.\\n        uint8 roomId;\\n        uint8 parentId;\\n\\n        uint[4] doors; // n, s, e, w\\n\\n        bool explored;\\n        bool looted;\\n        bool hasVent;\\n    }\\n\\n        struct Door {\\n        uint8 vsBreach;\\n        uint8 vsHack;\\n        DoorStatus status;\\n    }\\n\\n    struct Map {\\n        mapping (uint => RoomTile) roomList;\\n        uint8 numRooms;\\n\\n        mapping (uint => bool) usedRooms;\\n\\n        // Row, Col => GameTile\\n        mapping (uint => mapping (uint => GameTile)) board;\\n        mapping (uint => Door) doors;\\n        uint8 numDoors;\\n\\n        Position startPosition;\\n    }\\n\\n    struct Game {\\n        bool active;\\n\\n        uint[] playerIndexes;\\n        uint currentPlayerTurnIndex; // TODO: Default of player zero\\n        uint numPlayers;\\n        // uint256[] itemIDs; // Items in (owned by) the game\\n\\n        uint turnsTaken; // TODO: Can this be smaller?\\n\\n        EventTracker eventTracker;\\n\\n        address mapContract; // TODO: Handle if game contract changes!!!!\\n        uint mapId;\\n    }\\n\\n    struct Lobby {\\n        bool gameStarted;\\n        uint8 numberOfPlayers;\\n        uint[] playerIndexes;\\n\\n        // uint expireTime; TODO: Lobbys should possibly expire, or maybe set a timer to allow starting with three\\n    }\\n\\n    // From RoomTiles.sol\\n    enum BCEventType {NONE, BUG, MYSTERY, SCAVENGER, SHIP_SECURITY}\\n\\n    struct RoomTile {\\n        BCEventType eventType;\\n        uint256 eventNum; // 0 if no event in room\\n\\n        uint8 numItems;\\n        uint8 numData;\\n\\n        bool hasHazard; // TODO:  Should hazards be handled by events only?\\n        bool sigDetected; // TODO:  Doesn't work with current map generation\\n                            // TODO: Split map list into those with and without sigs\\n    }\\n\\n    // From BCChars.sol // TODO: Change to int8\\n    struct Traits {\\n        uint8 health;\\n        uint8 carry;\\n        uint8 defense;\\n        uint8 hack;\\n        uint8 breach;\\n        uint8 shoot;\\n        uint8 melee;\\n    }\\n\\n    struct Character {\\n        bytes32 genHash; // TODO: Eval storing these properties\\n        uint id; // Id in the characters array\\n        uint uifID; // ID in UIF\\n        Traits traits;\\n        uint8 cloneNumber;  // High but possibly reachable limit\\n        uint8 maxClones; // Eventually exit them from the economy??\\n        uint8 ability;\\n        uint8 flaw;\\n        bool inGame; // TODO: I think uint8 would be cheaper because packing\\n    }\\n\\n    // From/for BCItems.sol\\n    enum ItemCategory { COMPANY, ARTIFACT, SCAVENGER }\\n    enum ItemType { MELEE, GUN, ARMOR, TODO_ITEM } // TODO: Finalize\\n\\n    struct Item {\\n        bytes32 genHash; // TODO: Eval storing this here\\n        uint id; // Id in chars array\\n        uint uifID;\\n        uint holdingPlayerId; // TODO: Eval if this is needed\\n\\n        uint weight;\\n\\n        uint traitModID;\\n\\n        ItemCategory itemCategory;\\n\\n        uint8 grantsAbility; // TODO: Align with char abilities\\n        uint8 grantsFlaw;\\n\\n        ItemType itemType; // 0 for not a weapon, 1 for melee, 2 gun, 3 grenade\\n        uint8 power;  // damage, armor level, etc... // TODO: Define this\\n        // uint8 level;\\n        // bool asAnAction; // TODO: Derive from itemType\\n        // bool consumable; // TODO: Derive from UIF and/or itemType\\n\\n        bool inGame;\\n    }\\n}\\n\",\"keccak256\":\"0x9f66a4e65d4153df6b166945090637137e3a90aa3efb95315789cf391af23395\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b614b0880620001146000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806386e529d0116100ad578063c3fe3e2811610071578063c3fe3e2814610357578063f01fc35a14610375578063f2fde38b14610393578063f7157f64146103af578063f9dfbfcb146103cd5761012c565b806386e529d0146102b55780638af13fd2146102d15780638da5cb5b14610301578063aaa687771461031f578063b6cdd3b41461033b5761012c565b806369568fd5116100f457806369568fd5146101fb5780636ea1dcd81461022b578063715018a61461025b57806375990a0e146102655780637b45c0d4146102975761012c565b806302861c6c146101315780631ef0441614610161578063471b67591461019157806358308aa8146101c15780635a29638d146101dd575b600080fd5b61014b600480360381019061014691906134be565b6103fd565b6040516101589190613649565b60405180910390f35b61017b60048036038101906101769190613664565b61055e565b604051610188919061391c565b60405180910390f35b6101ab60048036038101906101a691906134be565b6107e9565b6040516101b8919061394d565b60405180910390f35b6101db60048036038101906101d69190613664565b610943565b005b6101e5610b00565b6040516101f291906139e7565b60405180910390f35b61021560048036038101906102109190613664565b610b26565b6040516102229190613b3b565b60405180910390f35b61024560048036038101906102409190613b5d565b610cb2565b6040516102529190613c06565b60405180910390f35b610263610e1c565b005b61027f600480360381019061027a9190613664565b610e30565b60405161028e93929190613c5f565b60405180910390f35b61029f610ec8565b6040516102ac9190613cb7565b60405180910390f35b6102cf60048036038101906102ca91906134be565b610eee565b005b6102eb60048036038101906102e69190613664565b610fe6565b6040516102f89190613dfc565b60405180910390f35b6103096111b2565b6040516103169190613cb7565b60405180910390f35b61033960048036038101906103349190613e4a565b6111db565b005b61035560048036038101906103509190613ed6565b6112ed565b005b61035f6114e5565b60405161036c9190613f72565b60405180910390f35b61037d61150b565b60405161038a9190613f9c565b60405180910390f35b6103ad60048036038101906103a89190613fb7565b611728565b005b6103b76117ac565b6040516103c49190614005565b60405180910390f35b6103e760048036038101906103e291906134be565b6117d2565b6040516103f4919061409d565b60405180910390f35b61040561328b565b60068481548110610419576104186140b9565b5b90600052602060002090600702016000016000600686815481106104405761043f6140b9565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900460ff1660ff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660048111156104c5576104c4613511565b5b60048111156104d7576104d6613511565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505090509392505050565b60606000600b67ffffffffffffffff81111561057d5761057c6140e8565b5b6040519080825280602002602001820160405280156105b057816020015b606081526020019060019003908161059b5790505b50905060005b600b81101561064557600b67ffffffffffffffff8111156105da576105d96140e8565b5b60405190808252806020026020018201604052801561061357816020015b6106006132dd565b8152602001906001900390816105f85790505b50828281518110610627576106266140b9565b5b6020026020010181905250808061063d90614146565b9150506105b6565b5060005b600b8110156107df5760005b600b8110156107cb5760068581548110610672576106716140b9565b5b9060005260206000209060070201600301600083815260200190815260200160002060008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815260200160018201600480602002604051908101604052809291908260048015610726576020028201915b815481526020019060010190808311610712575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff161515151581525050838381518110610793576107926140b9565b5b602002602001015182815181106107ad576107ac6140b9565b5b602002602001018190525080806107c390614146565b915050610655565b5080806107d790614146565b915050610649565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610872906141ec565b60405180910390fd5b600060068581548110610891576108906140b9565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000209050600160ff168160000160009054906101000a900460ff1660ff16141561093657610910600686815481106108fd576108fc6140b9565b5b9060005260206000209060070201611905565b8160000160006101000a81548160ff021916908360ff160217905550600191505061093c565b60009150505b9392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca906141ec565b60405180910390fd5b60005b600682815481106109ea576109e96140b9565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff16811015610afc5760026004811115610a2757610a26613511565b5b60068381548110610a3b57610a3a6140b9565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff166004811115610a8057610a7f613511565b5b1415610ae957600160068381548110610a9c57610a9b6140b9565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160026101000a81548160ff02191690836004811115610ae357610ae2613511565b5b02179055505b8080610af490614146565b9150506109d6565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060068381548110610b3e57610b3d6140b9565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff1667ffffffffffffffff811115610b7957610b786140e8565b5b604051908082528060200260200182016040528015610bb257816020015b610b9f613325565b815260200190600190039081610b975790505b50905060005b8151811015610ca85760068481548110610bd557610bd46140b9565b5b906000526020600020906007020160040160008281526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610c6157610c60613511565b5b6004811115610c7357610c72613511565b5b81525050828281518110610c8a57610c896140b9565b5b60200260200101819052508080610ca090614146565b915050610bb8565b5080915050919050565b610cba613325565b600060068681548110610cd057610ccf6140b9565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015610d3d576020028201915b815481526020019060010190808311610d29575b5050505050905060068681548110610d5857610d576140b9565b5b90600052602060002090600702016004016000828560048110610d7e57610d7d6140b9565b5b602002015181526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610dfb57610dfa613511565b5b6004811115610e0d57610e0c613511565b5b81525050915050949350505050565b610e24611a95565b610e2e6000611b13565b565b60068181548110610e4057600080fd5b90600052602060002090600702016000915090508060010160009054906101000a900460ff16908060050160009054906101000a900460ff1690806006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050905083565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7590614258565b60405180910390fd5b600160068481548110610f9457610f936140b9565b5b90600052602060002090600702016003016000848152602001908152602001600020600083815260200190815260200160002060050160016101000a81548160ff021916908315150217905550505050565b6060600060068381548110610ffe57610ffd6140b9565b5b906000526020600020906007020160010160009054906101000a900460ff1660ff1667ffffffffffffffff811115611039576110386140e8565b5b60405190808252806020026020018201604052801561107257816020015b61105f61328b565b8152602001906001900390816110575790505b50905060005b81518110156111a85760068481548110611095576110946140b9565b5b906000526020600020906007020160000160008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660048111156110e7576110e6613511565b5b60048111156110f9576110f8613511565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505082828151811061118a576111896140b9565b5b602002602001018190525080806111a090614146565b915050611078565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111e3611a95565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113965750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6113d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cc906142c4565b60405180910390fd5b6000600686815481106113eb576113ea6140b9565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015611458576020028201915b815481526020019060010190808311611444575b50505050509050600060068781548110611475576114746140b9565b5b9060005260206000209060070201600401600083866004811061149b5761149a6140b9565b5b602002015181526020019081526020016000209050828160000160026101000a81548160ff021916908360048111156114d7576114d6613511565b5b021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159490614330565b60405180910390fd5b6000600660018160018154018082558091505003906000526020600020906007020190506115cd81600001611bd7565b8160010160006101000a81548160ff021916908360ff160217905550604051806060016040528060ff8016815260200160ff801681526020016000600481111561161a57611619613511565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156116b3576116b2613511565b5b021790555090505080600501600081819054906101000a900460ff16809291906116dc90614350565b91906101000a81548160ff021916908360ff160217905550506116fe81611e02565b61170781611fe4565b61171081612e62565b6001600680549050611722919061437a565b91505090565b611730611a95565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179790614420565b60405180910390fd5b6117a981611b13565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117da6132dd565b600684815481106117ee576117ed6140b9565b5b9060005260206000209060070201600301600084815260200190815260200160002060008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156118a2576020028201915b81548152602001906001019080831161188e575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505090509392505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600160026119549190614440565b60048660010160009054906101000a900460ff166119729190614496565b6040518363ffffffff1660e01b815260040161198f9291906144ca565b6020604051808303816000875af11580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d2919061451f565b90505b600115158360020160008360ff16815260200190815260200160002060009054906101000a900460ff1615151415611a5b5760018360010160009054906101000a900460ff16611a259190614496565b60ff168160ff161415611a475760016002611a40919061454c565b9050611a56565b8080611a5290614350565b9150505b6119d5565b60018360020160008360ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050919050565b611a9d613283565b73ffffffffffffffffffffffffffffffffffffffff16611abb6111b2565b73ffffffffffffffffffffffffffffffffffffffff1614611b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b08906145cf565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b9190614604565b905060005b81811015611df857600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe826040518263ffffffff1660e01b8152600401611cd39190613f9c565b60c060405180830381865afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190614784565b84600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115611d5157611d50613511565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff0219169083151502179055509050508080611df090614146565b915050611c70565b5080915050919050565b60006005600181600181540180825580915050039060005260206000209060060201905060006001600b611e36919061437a565b9050600060016002600b611e4a91906147e0565b611e549190614440565b905060405180604001604052808360ff1681526020018260ff168152508460060160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050508284600301600084815260200190815260200160002060008381526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff1602179055506000820160019054906101000a900460ff168160000160016101000a81548160ff021916908360ff1602179055506001820181600101906004611f5392919061335e565b506005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506005820160029054906101000a900460ff168160050160026101000a81548160ff02191690831515021790555090505050505050565b60008060028360010160009054906101000a900460ff166120059190614496565b60ff169050600060019050600061201a61339b565b6001818760060160000160009054906101000a900460ff1660ff16600b8110612046576120456140b9565b5b60200201518760060160000160019054906101000a900460ff1660ff16600b8110612074576120736140b9565b5b60200201901515908115158152505061208b6133c9565b866006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508187601e81106120e7576120e66140b9565b5b602002018190525085806120fa90614146565b9650505b60008511801561210e5750600086115b15612da657600081600188612123919061437a565b601e8110612134576121336140b9565b5b60200201519050868061214690614811565b9750508187601e811061215c5761215b6140b9565b5b602002016121686133f7565b815250858061217690614811565b965050848061218490614811565b9550506001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506021600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016122399291906148b1565b6020604051808303816000875af1158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c919061451f565b60ff1610156122d6576001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060050160026101000a81548160ff0219169083151502179055505b600060405180608001604052806000815260200160018152602001600281526020016003815250905060006001600461230f919061437a565b90505b6000811115612443576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b815260040161237c929190614915565b6020604051808303816000875af115801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf919061451f565b9050828160ff16600481106123d7576123d66140b9565b5b60200201518383600481106123ef576123ee6140b9565b5b6020020151848460048110612407576124066140b9565b5b60200201858460ff1660048110612421576124206140b9565b5b602002018281525082815250505050808061243b90614811565b915050612312565b5060005b6004811015612d9e576000836000015160000b90506000846020015160000b9050600084846004811061247d5761247c6140b9565b5b6020020151141561249b57818061249390614948565b925050612533565b60018484600481106124b0576124af6140b9565b5b602002015114156124ce5781806124c690614991565b925050612532565b60028484600481106124e3576124e26140b9565b5b602002015114156125015780806124f990614991565b915050612531565b6003848460048110612516576125156140b9565b5b6020020151141561253057808061252c90614948565b9150505b5b5b5b60018212806125425750600181125b8061255957506002600b612556919061437a565b82135b8061257057506002600b61256d919061437a565b81135b1561257c575050612d8b565b600060405180604001604052808460ff1681526020018360ff1681525090506000151588826000015160ff16600b81106125b9576125b86140b9565b5b6020020151826020015160ff16600b81106125d7576125d66140b9565b5b6020020151151514806126d1575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa3993c289856040518363ffffffff1660e01b815260040161267b9291906149da565b602060405180830381865afa158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190614604565b600481106126cd576126cc6140b9565b5b0154145b15612d875760008a148061279457508860426126ed919061437a565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b815260040161274c9291906148b1565b6020604051808303816000875af115801561276b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278f919061451f565b60ff16105b15612d81576040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401612803929190614a03565b6020604051808303816000875af1158015612822573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612846919061451f565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b81526004016128ad929190614a03565b6020604051808303816000875af11580156128cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f0919061451f565b60ff1681526020016001600481111561290c5761290b613511565b5b8152508d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156129a5576129a4613511565b5b021790555090505060008d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160009054906101000a900460ff1660ff161415612a485760038d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160026101000a81548160ff02191690836004811115612a4257612a41613511565b5b02179055505b8c600501600081819054906101000a900460ff1680929190612a6990614350565b91906101000a81548160ff021916908360ff16021790555050601689612a8f9190614440565b98506042891115612a9f57604298505b6000151588826000015160ff16600b8110612abd57612abc6140b9565b5b6020020151826020015160ff16600b8110612adb57612ada6140b9565b5b602002015115151415612b6a5780878d601e8110612afc57612afb6140b9565b5b60200201819052508b80612b0f90614146565b9c50508980612b1d90614146565b9a5050600188826000015160ff16600b8110612b3c57612b3b6140b9565b5b6020020151826020015160ff16600b8110612b5a57612b596140b9565b5b6020020190151590811515815250505b60008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612bb657612bb56140b9565b5b602002015160048110612bcc57612bcb6140b9565b5b01541415612d7c5760018d60050160009054906101000a900460ff16612bf29190614496565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612c3f57612c3e6140b9565b5b602002015160048110612c5557612c546140b9565b5b018190555060018d60050160009054906101000a900460ff16612c789190614496565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638214f222888860048110612d0357612d026140b9565b5b60200201516040518263ffffffff1660e01b8152600401612d249190613f9c565b602060405180830381865afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d659190614604565b60048110612d7657612d756140b9565b5b01819055505b612d86565b600098505b5b5050505b8080612d9690614146565b915050612447565b5050506120fe565b60028760030160008960060160000160009054906101000a900460ff1660ff16815260200190815260200160002060008960060160000160019054906101000a900460ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060038760040160006001815260200190815260200160002060000160026101000a81548160ff02191690836004811115612e5457612e53613511565b5b021790555050505050505050565b60005b600b81101561327f5760005b600b81101561326b57600160ff16836003016000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900460ff1660ff1614156132585760005b600481101561325657600084600301600085815260200190815260200160002060008481526020019081526020016000206001018260048110612f0857612f076140b9565b5b01541415613243576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8360405180604001604052808860ff1681526020018760ff168152506040518363ffffffff1660e01b8152600401612f89929190614a2c565b6040805180830381865afa158015612fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc99190614aa5565b90506000856003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1690506042600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016130789291906148b1565b6020604051808303816000875af1158015613097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130bb919061451f565b60ff161080156130ce5750600060ff1681145b1561324057604051806060016040528060ff8016815260200160ff8016815260200160048081111561310357613102613511565b5b8152508660040160008860050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff0219169083600481111561319c5761319b613511565b5b021790555090505085600501600081819054906101000a900460ff16809291906131c590614350565b91906101000a81548160ff021916908360ff1602179055505060018660050160009054906101000a900460ff166131fc9190614496565b60ff168660030160008781526020019081526020016000206000868152602001908152602001600020600101846004811061323a576132396140b9565b5b01819055505b50505b808061324e90614146565b915050612ec2565b505b808061326390614146565b915050612e71565b50808061327790614146565b915050612e65565b5050565b600033905090565b6040518060c00160405280600060048111156132aa576132a9613511565b5b815260200160008152602001600060ff168152602001600060ff1681526020016000151581526020016000151581525090565b6040518060c00160405280600060ff168152602001600060ff168152602001613304613417565b81526020016000151581526020016000151581526020016000151581525090565b6040518060600160405280600060ff168152602001600060ff1681526020016000600481111561335857613357613511565b5b81525090565b826004810192821561338a579182015b8281111561338957825482559160010191906001019061336e565b5b5090506133979190613439565b5090565b604051806101600160405280600b905b6133b3613456565b8152602001906001900390816133ab5790505090565b604051806103c00160405280601e905b6133e16133f7565b8152602001906001900390816133d95790505090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600490602082028036833780820191505090505090565b5b8082111561345257600081600090555060010161343a565b5090565b604051806101600160405280600b90602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b61349b81613488565b81146134a657600080fd5b50565b6000813590506134b881613492565b92915050565b6000806000606084860312156134d7576134d6613483565b5b60006134e5868287016134a9565b93505060206134f6868287016134a9565b9250506040613507868287016134a9565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061355157613550613511565b5b50565b600081905061356282613540565b919050565b600061357282613554565b9050919050565b61358281613567565b82525050565b61359181613488565b82525050565b600060ff82169050919050565b6135ad81613597565b82525050565b60008115159050919050565b6135c8816135b3565b82525050565b60c0820160008201516135e46000850182613579565b5060208201516135f76020850182613588565b50604082015161360a60408501826135a4565b50606082015161361d60608501826135a4565b50608082015161363060808501826135bf565b5060a082015161364360a08501826135bf565b50505050565b600060c08201905061365e60008301846135ce565b92915050565b60006020828403121561367a57613679613483565b5b6000613688848285016134a9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060049050919050565b600081905092915050565b6000819050919050565b60006137158383613588565b60208301905092915050565b6000602082019050919050565b613737816136e9565b61374181846136f4565b925061374c826136ff565b8060005b8381101561377d5781516137648782613709565b965061376f83613721565b925050600181019050613750565b505050505050565b6101208201600082015161379c60008501826135a4565b5060208201516137af60208501826135a4565b5060408201516137c2604085018261372e565b5060608201516137d560c08501826135bf565b5060808201516137e860e08501826135bf565b5060a08201516137fc6101008501826135bf565b50505050565b600061380e8383613785565b6101208301905092915050565b6000602082019050919050565b6000613833826136bd565b61383d81856136c8565b9350613848836136d9565b8060005b838110156138795781516138608882613802565b975061386b8361381b565b92505060018101905061384c565b5085935050505092915050565b60006138928383613828565b905092915050565b6000602082019050919050565b60006138b282613691565b6138bc818561369c565b9350836020820285016138ce856136ad565b8060005b8581101561390a57848403895281516138eb8582613886565b94506138f68361389a565b925060208a019950506001810190506138d2565b50829750879550505050505092915050565b6000602082019050818103600083015261393681846138a7565b905092915050565b613947816135b3565b82525050565b6000602082019050613962600083018461393e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006139ad6139a86139a384613968565b613988565b613968565b9050919050565b60006139bf82613992565b9050919050565b60006139d1826139b4565b9050919050565b6139e1816139c6565b82525050565b60006020820190506139fc60008301846139d8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60058110613a3f57613a3e613511565b5b50565b6000819050613a5082613a2e565b919050565b6000613a6082613a42565b9050919050565b613a7081613a55565b82525050565b606082016000820151613a8c60008501826135a4565b506020820151613a9f60208501826135a4565b506040820151613ab26040850182613a67565b50505050565b6000613ac48383613a76565b60608301905092915050565b6000602082019050919050565b6000613ae882613a02565b613af28185613a0d565b9350613afd83613a1e565b8060005b83811015613b2e578151613b158882613ab8565b9750613b2083613ad0565b925050600181019050613b01565b5085935050505092915050565b60006020820190508181036000830152613b558184613add565b905092915050565b60008060008060808587031215613b7757613b76613483565b5b6000613b85878288016134a9565b9450506020613b96878288016134a9565b9350506040613ba7878288016134a9565b9250506060613bb8878288016134a9565b91505092959194509250565b606082016000820151613bda60008501826135a4565b506020820151613bed60208501826135a4565b506040820151613c006040850182613a67565b50505050565b6000606082019050613c1b6000830184613bc4565b92915050565b613c2a81613597565b82525050565b604082016000820151613c4660008501826135a4565b506020820151613c5960208501826135a4565b50505050565b6000608082019050613c746000830186613c21565b613c816020830185613c21565b613c8e6040830184613c30565b949350505050565b6000613ca182613968565b9050919050565b613cb181613c96565b82525050565b6000602082019050613ccc6000830184613ca8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c082016000820151613d146000850182613579565b506020820151613d276020850182613588565b506040820151613d3a60408501826135a4565b506060820151613d4d60608501826135a4565b506080820151613d6060808501826135bf565b5060a0820151613d7360a08501826135bf565b50505050565b6000613d858383613cfe565b60c08301905092915050565b6000602082019050919050565b6000613da982613cd2565b613db38185613cdd565b9350613dbe83613cee565b8060005b83811015613def578151613dd68882613d79565b9750613de183613d91565b925050600181019050613dc2565b5085935050505092915050565b60006020820190508181036000830152613e168184613d9e565b905092915050565b613e2781613c96565b8114613e3257600080fd5b50565b600081359050613e4481613e1e565b92915050565b60008060008060808587031215613e6457613e63613483565b5b6000613e7287828801613e35565b9450506020613e8387828801613e35565b9350506040613e9487828801613e35565b9250506060613ea587828801613e35565b91505092959194509250565b60058110613ebe57600080fd5b50565b600081359050613ed081613eb1565b92915050565b600080600080600060a08688031215613ef257613ef1613483565b5b6000613f00888289016134a9565b9550506020613f11888289016134a9565b9450506040613f22888289016134a9565b9350506060613f33888289016134a9565b9250506080613f4488828901613ec1565b9150509295509295909350565b6000613f5c826139b4565b9050919050565b613f6c81613f51565b82525050565b6000602082019050613f876000830184613f63565b92915050565b613f9681613488565b82525050565b6000602082019050613fb16000830184613f8d565b92915050565b600060208284031215613fcd57613fcc613483565b5b6000613fdb84828501613e35565b91505092915050565b6000613fef826139b4565b9050919050565b613fff81613fe4565b82525050565b600060208201905061401a6000830184613ff6565b92915050565b6101208201600082015161403760008501826135a4565b50602082015161404a60208501826135a4565b50604082015161405d604085018261372e565b50606082015161407060c08501826135bf565b50608082015161408360e08501826135bf565b5060a08201516140976101008501826135bf565b50505050565b6000610120820190506140b36000830184614020565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061415182613488565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561418457614183614117565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b60006141d660118361418f565b91506141e1826141a0565b602082019050919050565b60006020820190508181036000830152614205816141c9565b9050919050565b7f4e6f7420616374696f6e7320636f6e7472616374000000000000000000000000600082015250565b600061424260148361418f565b915061424d8261420c565b602082019050919050565b6000602082019050818103600083015261427181614235565b9050919050565b7f4e6f7420616c6c6f77656420636f6e7472616374000000000000000000000000600082015250565b60006142ae60148361418f565b91506142b982614278565b602082019050919050565b600060208201905081810360008301526142dd816142a1565b9050919050565b7f4f6e6c792067616d6520636f6e74726163742063616e20757365000000000000600082015250565b600061431a601a8361418f565b9150614325826142e4565b602082019050919050565b600060208201905081810360008301526143498161430d565b9050919050565b600061435b82613597565b915060ff82141561436f5761436e614117565b5b600182019050919050565b600061438582613488565b915061439083613488565b9250828210156143a3576143a2614117565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061440a60268361418f565b9150614415826143ae565b604082019050919050565b60006020820190508181036000830152614439816143fd565b9050919050565b600061444b82613488565b915061445683613488565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561448b5761448a614117565b5b828201905092915050565b60006144a182613597565b91506144ac83613597565b9250828210156144bf576144be614117565b5b828203905092915050565b60006040820190506144df6000830185613c21565b6144ec6020830184613c21565b9392505050565b6144fc81613597565b811461450757600080fd5b50565b600081519050614519816144f3565b92915050565b60006020828403121561453557614534613483565b5b60006145438482850161450a565b91505092915050565b600061455782613597565b915061456283613597565b92508260ff0382111561457857614577614117565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006145b960208361418f565b91506145c482614583565b602082019050919050565b600060208201905081810360008301526145e8816145ac565b9050919050565b6000815190506145fe81613492565b92915050565b60006020828403121561461a57614619613483565b5b6000614628848285016145ef565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b61465082614636565b810181811067ffffffffffffffff8211171561466f5761466e6140e8565b5b80604052505050565b6000614682613479565b905061468e8282614647565b919050565b600581106146a057600080fd5b50565b6000815190506146b281614693565b92915050565b6146c1816135b3565b81146146cc57600080fd5b50565b6000815190506146de816146b8565b92915050565b600060c082840312156146fa576146f9614631565b5b61470460c0614678565b90506000614714848285016146a3565b6000830152506020614728848285016145ef565b602083015250604061473c8482850161450a565b60408301525060606147508482850161450a565b6060830152506080614764848285016146cf565b60808301525060a0614778848285016146cf565b60a08301525092915050565b600060c0828403121561479a57614799613483565b5b60006147a8848285016146e4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147eb82613488565b91506147f683613488565b925082614806576148056147b1565b5b828204905092915050565b600061481c82613488565b915060008214156148305761482f614117565b5b600182039050919050565b6000819050919050565b600061486061485b6148568461483b565b613988565b613597565b9050919050565b61487081614845565b82525050565b6000819050919050565b600061489b61489661489184614876565b613988565b613597565b9050919050565b6148ab81614880565b82525050565b60006040820190506148c66000830185614867565b6148d360208301846148a2565b9392505050565b6000819050919050565b60006148ff6148fa6148f5846148da565b613988565b613597565b9050919050565b61490f816148e4565b82525050565b600060408201905061492a6000830185614867565b6149376020830184614906565b9392505050565b6000819050919050565b60006149538261493e565b91507f800000000000000000000000000000000000000000000000000000000000000082141561498657614985614117565b5b600182039050919050565b600061499c8261493e565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149cf576149ce614117565b5b600182019050919050565b60006080820190506149ef6000830185613c30565b6149fc6040830184613c30565b9392505050565b6000604082019050614a186000830185614867565b614a256020830184613c21565b9392505050565b6000606082019050614a416000830185613f8d565b614a4e6020830184613c30565b9392505050565b600060408284031215614a6b57614a6a614631565b5b614a756040614678565b90506000614a858482850161450a565b6000830152506020614a998482850161450a565b60208301525092915050565b600060408284031215614abb57614aba613483565b5b6000614ac984828501614a55565b9150509291505056fea26469706673582212202ff26322dd937ce1c6b3d6127e80fae9fbbe314467a14c25b0d742f46a3327d264736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806386e529d0116100ad578063c3fe3e2811610071578063c3fe3e2814610357578063f01fc35a14610375578063f2fde38b14610393578063f7157f64146103af578063f9dfbfcb146103cd5761012c565b806386e529d0146102b55780638af13fd2146102d15780638da5cb5b14610301578063aaa687771461031f578063b6cdd3b41461033b5761012c565b806369568fd5116100f457806369568fd5146101fb5780636ea1dcd81461022b578063715018a61461025b57806375990a0e146102655780637b45c0d4146102975761012c565b806302861c6c146101315780631ef0441614610161578063471b67591461019157806358308aa8146101c15780635a29638d146101dd575b600080fd5b61014b600480360381019061014691906134be565b6103fd565b6040516101589190613649565b60405180910390f35b61017b60048036038101906101769190613664565b61055e565b604051610188919061391c565b60405180910390f35b6101ab60048036038101906101a691906134be565b6107e9565b6040516101b8919061394d565b60405180910390f35b6101db60048036038101906101d69190613664565b610943565b005b6101e5610b00565b6040516101f291906139e7565b60405180910390f35b61021560048036038101906102109190613664565b610b26565b6040516102229190613b3b565b60405180910390f35b61024560048036038101906102409190613b5d565b610cb2565b6040516102529190613c06565b60405180910390f35b610263610e1c565b005b61027f600480360381019061027a9190613664565b610e30565b60405161028e93929190613c5f565b60405180910390f35b61029f610ec8565b6040516102ac9190613cb7565b60405180910390f35b6102cf60048036038101906102ca91906134be565b610eee565b005b6102eb60048036038101906102e69190613664565b610fe6565b6040516102f89190613dfc565b60405180910390f35b6103096111b2565b6040516103169190613cb7565b60405180910390f35b61033960048036038101906103349190613e4a565b6111db565b005b61035560048036038101906103509190613ed6565b6112ed565b005b61035f6114e5565b60405161036c9190613f72565b60405180910390f35b61037d61150b565b60405161038a9190613f9c565b60405180910390f35b6103ad60048036038101906103a89190613fb7565b611728565b005b6103b76117ac565b6040516103c49190614005565b60405180910390f35b6103e760048036038101906103e291906134be565b6117d2565b6040516103f4919061409d565b60405180910390f35b61040561328b565b60068481548110610419576104186140b9565b5b90600052602060002090600702016000016000600686815481106104405761043f6140b9565b5b90600052602060002090600702016003016000868152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900460ff1660ff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660048111156104c5576104c4613511565b5b60048111156104d7576104d6613511565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505090509392505050565b60606000600b67ffffffffffffffff81111561057d5761057c6140e8565b5b6040519080825280602002602001820160405280156105b057816020015b606081526020019060019003908161059b5790505b50905060005b600b81101561064557600b67ffffffffffffffff8111156105da576105d96140e8565b5b60405190808252806020026020018201604052801561061357816020015b6106006132dd565b8152602001906001900390816105f85790505b50828281518110610627576106266140b9565b5b6020026020010181905250808061063d90614146565b9150506105b6565b5060005b600b8110156107df5760005b600b8110156107cb5760068581548110610672576106716140b9565b5b9060005260206000209060070201600301600083815260200190815260200160002060008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815260200160018201600480602002604051908101604052809291908260048015610726576020028201915b815481526020019060010190808311610712575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff161515151581525050838381518110610793576107926140b9565b5b602002602001015182815181106107ad576107ac6140b9565b5b602002602001018190525080806107c390614146565b915050610655565b5080806107d790614146565b915050610649565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610872906141ec565b60405180910390fd5b600060068581548110610891576108906140b9565b5b9060005260206000209060070201600301600085815260200190815260200160002060008481526020019081526020016000209050600160ff168160000160009054906101000a900460ff1660ff16141561093657610910600686815481106108fd576108fc6140b9565b5b9060005260206000209060070201611905565b8160000160006101000a81548160ff021916908360ff160217905550600191505061093c565b60009150505b9392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca906141ec565b60405180910390fd5b60005b600682815481106109ea576109e96140b9565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff16811015610afc5760026004811115610a2757610a26613511565b5b60068381548110610a3b57610a3a6140b9565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160029054906101000a900460ff166004811115610a8057610a7f613511565b5b1415610ae957600160068381548110610a9c57610a9b6140b9565b5b9060005260206000209060070201600401600083815260200190815260200160002060000160026101000a81548160ff02191690836004811115610ae357610ae2613511565b5b02179055505b8080610af490614146565b9150506109d6565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060068381548110610b3e57610b3d6140b9565b5b906000526020600020906007020160050160009054906101000a900460ff1660ff1667ffffffffffffffff811115610b7957610b786140e8565b5b604051908082528060200260200182016040528015610bb257816020015b610b9f613325565b815260200190600190039081610b975790505b50905060005b8151811015610ca85760068481548110610bd557610bd46140b9565b5b906000526020600020906007020160040160008281526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610c6157610c60613511565b5b6004811115610c7357610c72613511565b5b81525050828281518110610c8a57610c896140b9565b5b60200260200101819052508080610ca090614146565b915050610bb8565b5080915050919050565b610cba613325565b600060068681548110610cd057610ccf6140b9565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015610d3d576020028201915b815481526020019060010190808311610d29575b5050505050905060068681548110610d5857610d576140b9565b5b90600052602060002090600702016004016000828560048110610d7e57610d7d6140b9565b5b602002015181526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff166004811115610dfb57610dfa613511565b5b6004811115610e0d57610e0c613511565b5b81525050915050949350505050565b610e24611a95565b610e2e6000611b13565b565b60068181548110610e4057600080fd5b90600052602060002090600702016000915090508060010160009054906101000a900460ff16908060050160009054906101000a900460ff1690806006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050905083565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7590614258565b60405180910390fd5b600160068481548110610f9457610f936140b9565b5b90600052602060002090600702016003016000848152602001908152602001600020600083815260200190815260200160002060050160016101000a81548160ff021916908315150217905550505050565b6060600060068381548110610ffe57610ffd6140b9565b5b906000526020600020906007020160010160009054906101000a900460ff1660ff1667ffffffffffffffff811115611039576110386140e8565b5b60405190808252806020026020018201604052801561107257816020015b61105f61328b565b8152602001906001900390816110575790505b50905060005b81518110156111a85760068481548110611095576110946140b9565b5b906000526020600020906007020160000160008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660048111156110e7576110e6613511565b5b60048111156110f9576110f8613511565b5b8152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff1660ff1660ff1681526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff16151515158152505082828151811061118a576111896140b9565b5b602002602001018190525080806111a090614146565b915050611078565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111e3611a95565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113965750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6113d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cc906142c4565b60405180910390fd5b6000600686815481106113eb576113ea6140b9565b5b906000526020600020906007020160030160008681526020019081526020016000206000858152602001908152602001600020600101600480602002604051908101604052809291908260048015611458576020028201915b815481526020019060010190808311611444575b50505050509050600060068781548110611475576114746140b9565b5b9060005260206000209060070201600401600083866004811061149b5761149a6140b9565b5b602002015181526020019081526020016000209050828160000160026101000a81548160ff021916908360048111156114d7576114d6613511565b5b021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159490614330565b60405180910390fd5b6000600660018160018154018082558091505003906000526020600020906007020190506115cd81600001611bd7565b8160010160006101000a81548160ff021916908360ff160217905550604051806060016040528060ff8016815260200160ff801681526020016000600481111561161a57611619613511565b5b8152508160040160008360050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156116b3576116b2613511565b5b021790555090505080600501600081819054906101000a900460ff16809291906116dc90614350565b91906101000a81548160ff021916908360ff160217905550506116fe81611e02565b61170781611fe4565b61171081612e62565b6001600680549050611722919061437a565b91505090565b611730611a95565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179790614420565b60405180910390fd5b6117a981611b13565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117da6132dd565b600684815481106117ee576117ed6140b9565b5b9060005260206000209060070201600301600084815260200190815260200160002060008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152602001600182016004806020026040519081016040528092919082600480156118a2576020028201915b81548152602001906001019080831161188e575b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900460ff16151515158152505090509392505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600160026119549190614440565b60048660010160009054906101000a900460ff166119729190614496565b6040518363ffffffff1660e01b815260040161198f9291906144ca565b6020604051808303816000875af11580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d2919061451f565b90505b600115158360020160008360ff16815260200190815260200160002060009054906101000a900460ff1615151415611a5b5760018360010160009054906101000a900460ff16611a259190614496565b60ff168160ff161415611a475760016002611a40919061454c565b9050611a56565b8080611a5290614350565b9150505b6119d5565b60018360020160008360ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050919050565b611a9d613283565b73ffffffffffffffffffffffffffffffffffffffff16611abb6111b2565b73ffffffffffffffffffffffffffffffffffffffff1614611b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b08906145cf565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338fdf0bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b9190614604565b905060005b81811015611df857600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382753ebe826040518263ffffffff1660e01b8152600401611cd39190613f9c565b60c060405180830381865afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190614784565b84600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115611d5157611d50613511565b5b02179055506020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff0219169083151502179055509050508080611df090614146565b915050611c70565b5080915050919050565b60006005600181600181540180825580915050039060005260206000209060060201905060006001600b611e36919061437a565b9050600060016002600b611e4a91906147e0565b611e549190614440565b905060405180604001604052808360ff1681526020018260ff168152508460060160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050508284600301600084815260200190815260200160002060008381526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff1602179055506000820160019054906101000a900460ff168160000160016101000a81548160ff021916908360ff1602179055506001820181600101906004611f5392919061335e565b506005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506005820160029054906101000a900460ff168160050160026101000a81548160ff02191690831515021790555090505050505050565b60008060028360010160009054906101000a900460ff166120059190614496565b60ff169050600060019050600061201a61339b565b6001818760060160000160009054906101000a900460ff1660ff16600b8110612046576120456140b9565b5b60200201518760060160000160019054906101000a900460ff1660ff16600b8110612074576120736140b9565b5b60200201901515908115158152505061208b6133c9565b866006016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508187601e81106120e7576120e66140b9565b5b602002018190525085806120fa90614146565b9650505b60008511801561210e5750600086115b15612da657600081600188612123919061437a565b601e8110612134576121336140b9565b5b60200201519050868061214690614811565b9750508187601e811061215c5761215b6140b9565b5b602002016121686133f7565b815250858061217690614811565b965050848061218490614811565b9550506001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506021600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016122399291906148b1565b6020604051808303816000875af1158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c919061451f565b60ff1610156122d6576001886003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060050160026101000a81548160ff0219169083151502179055505b600060405180608001604052806000815260200160018152602001600281526020016003815250905060006001600461230f919061437a565b90505b6000811115612443576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b815260040161237c929190614915565b6020604051808303816000875af115801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf919061451f565b9050828160ff16600481106123d7576123d66140b9565b5b60200201518383600481106123ef576123ee6140b9565b5b6020020151848460048110612407576124066140b9565b5b60200201858460ff1660048110612421576124206140b9565b5b602002018281525082815250505050808061243b90614811565b915050612312565b5060005b6004811015612d9e576000836000015160000b90506000846020015160000b9050600084846004811061247d5761247c6140b9565b5b6020020151141561249b57818061249390614948565b925050612533565b60018484600481106124b0576124af6140b9565b5b602002015114156124ce5781806124c690614991565b925050612532565b60028484600481106124e3576124e26140b9565b5b602002015114156125015780806124f990614991565b915050612531565b6003848460048110612516576125156140b9565b5b6020020151141561253057808061252c90614948565b9150505b5b5b5b60018212806125425750600181125b8061255957506002600b612556919061437a565b82135b8061257057506002600b61256d919061437a565b81135b1561257c575050612d8b565b600060405180604001604052808460ff1681526020018360ff1681525090506000151588826000015160ff16600b81106125b9576125b86140b9565b5b6020020151826020015160ff16600b81106125d7576125d66140b9565b5b6020020151151514806126d1575060008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa3993c289856040518363ffffffff1660e01b815260040161267b9291906149da565b602060405180830381865afa158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190614604565b600481106126cd576126cc6140b9565b5b0154145b15612d875760008a148061279457508860426126ed919061437a565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b815260040161274c9291906148b1565b6020604051808303816000875af115801561276b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278f919061451f565b60ff16105b15612d81576040518060600160405280600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b8152600401612803929190614a03565b6020604051808303816000875af1158015612822573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612846919061451f565b60ff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060036040518363ffffffff1660e01b81526004016128ad929190614a03565b6020604051808303816000875af11580156128cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f0919061451f565b60ff1681526020016001600481111561290c5761290b613511565b5b8152508d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360048111156129a5576129a4613511565b5b021790555090505060008d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160009054906101000a900460ff1660ff161415612a485760038d60040160008f60050160009054906101000a900460ff1660ff16815260200190815260200160002060000160026101000a81548160ff02191690836004811115612a4257612a41613511565b5b02179055505b8c600501600081819054906101000a900460ff1680929190612a6990614350565b91906101000a81548160ff021916908360ff16021790555050601689612a8f9190614440565b98506042891115612a9f57604298505b6000151588826000015160ff16600b8110612abd57612abc6140b9565b5b6020020151826020015160ff16600b8110612adb57612ada6140b9565b5b602002015115151415612b6a5780878d601e8110612afc57612afb6140b9565b5b60200201819052508b80612b0f90614146565b9c50508980612b1d90614146565b9a5050600188826000015160ff16600b8110612b3c57612b3b6140b9565b5b6020020151826020015160ff16600b8110612b5a57612b596140b9565b5b6020020190151590811515815250505b60008d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612bb657612bb56140b9565b5b602002015160048110612bcc57612bcb6140b9565b5b01541415612d7c5760018d60050160009054906101000a900460ff16612bf29190614496565b60ff168d6003016000886000015160ff1681526020019081526020016000206000886020015160ff168152602001908152602001600020600101868660048110612c3f57612c3e6140b9565b5b602002015160048110612c5557612c546140b9565b5b018190555060018d60050160009054906101000a900460ff16612c789190614496565b60ff168d6003016000836000015160ff1681526020019081526020016000206000836020015160ff168152602001908152602001600020600101600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638214f222888860048110612d0357612d026140b9565b5b60200201516040518263ffffffff1660e01b8152600401612d249190613f9c565b602060405180830381865afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d659190614604565b60048110612d7657612d756140b9565b5b01819055505b612d86565b600098505b5b5050505b8080612d9690614146565b915050612447565b5050506120fe565b60028760030160008960060160000160009054906101000a900460ff1660ff16815260200190815260200160002060008960060160000160019054906101000a900460ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060038760040160006001815260200190815260200160002060000160026101000a81548160ff02191690836004811115612e5457612e53613511565b5b021790555050505050505050565b60005b600b81101561327f5760005b600b81101561326b57600160ff16836003016000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900460ff1660ff1614156132585760005b600481101561325657600084600301600085815260200190815260200160002060008481526020019081526020016000206001018260048110612f0857612f076140b9565b5b01541415613243576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663951fc3fe8360405180604001604052808860ff1681526020018760ff168152506040518363ffffffff1660e01b8152600401612f89929190614a2c565b6040805180830381865afa158015612fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc99190614aa5565b90506000856003016000836000015160ff1681526020019081526020016000206000836020015160ff16815260200190815260200160002060000160009054906101000a900460ff1660ff1690506042600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce28613f600060636040518363ffffffff1660e01b81526004016130789291906148b1565b6020604051808303816000875af1158015613097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130bb919061451f565b60ff161080156130ce5750600060ff1681145b1561324057604051806060016040528060ff8016815260200160ff8016815260200160048081111561310357613102613511565b5b8152508660040160008860050160009054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff0219169083600481111561319c5761319b613511565b5b021790555090505085600501600081819054906101000a900460ff16809291906131c590614350565b91906101000a81548160ff021916908360ff1602179055505060018660050160009054906101000a900460ff166131fc9190614496565b60ff168660030160008781526020019081526020016000206000868152602001908152602001600020600101846004811061323a576132396140b9565b5b01819055505b50505b808061324e90614146565b915050612ec2565b505b808061326390614146565b915050612e71565b50808061327790614146565b915050612e65565b5050565b600033905090565b6040518060c00160405280600060048111156132aa576132a9613511565b5b815260200160008152602001600060ff168152602001600060ff1681526020016000151581526020016000151581525090565b6040518060c00160405280600060ff168152602001600060ff168152602001613304613417565b81526020016000151581526020016000151581526020016000151581525090565b6040518060600160405280600060ff168152602001600060ff1681526020016000600481111561335857613357613511565b5b81525090565b826004810192821561338a579182015b8281111561338957825482559160010191906001019061336e565b5b5090506133979190613439565b5090565b604051806101600160405280600b905b6133b3613456565b8152602001906001900390816133ab5790505090565b604051806103c00160405280601e905b6133e16133f7565b8152602001906001900390816133d95790505090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600490602082028036833780820191505090505090565b5b8082111561345257600081600090555060010161343a565b5090565b604051806101600160405280600b90602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b61349b81613488565b81146134a657600080fd5b50565b6000813590506134b881613492565b92915050565b6000806000606084860312156134d7576134d6613483565b5b60006134e5868287016134a9565b93505060206134f6868287016134a9565b9250506040613507868287016134a9565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061355157613550613511565b5b50565b600081905061356282613540565b919050565b600061357282613554565b9050919050565b61358281613567565b82525050565b61359181613488565b82525050565b600060ff82169050919050565b6135ad81613597565b82525050565b60008115159050919050565b6135c8816135b3565b82525050565b60c0820160008201516135e46000850182613579565b5060208201516135f76020850182613588565b50604082015161360a60408501826135a4565b50606082015161361d60608501826135a4565b50608082015161363060808501826135bf565b5060a082015161364360a08501826135bf565b50505050565b600060c08201905061365e60008301846135ce565b92915050565b60006020828403121561367a57613679613483565b5b6000613688848285016134a9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060049050919050565b600081905092915050565b6000819050919050565b60006137158383613588565b60208301905092915050565b6000602082019050919050565b613737816136e9565b61374181846136f4565b925061374c826136ff565b8060005b8381101561377d5781516137648782613709565b965061376f83613721565b925050600181019050613750565b505050505050565b6101208201600082015161379c60008501826135a4565b5060208201516137af60208501826135a4565b5060408201516137c2604085018261372e565b5060608201516137d560c08501826135bf565b5060808201516137e860e08501826135bf565b5060a08201516137fc6101008501826135bf565b50505050565b600061380e8383613785565b6101208301905092915050565b6000602082019050919050565b6000613833826136bd565b61383d81856136c8565b9350613848836136d9565b8060005b838110156138795781516138608882613802565b975061386b8361381b565b92505060018101905061384c565b5085935050505092915050565b60006138928383613828565b905092915050565b6000602082019050919050565b60006138b282613691565b6138bc818561369c565b9350836020820285016138ce856136ad565b8060005b8581101561390a57848403895281516138eb8582613886565b94506138f68361389a565b925060208a019950506001810190506138d2565b50829750879550505050505092915050565b6000602082019050818103600083015261393681846138a7565b905092915050565b613947816135b3565b82525050565b6000602082019050613962600083018461393e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006139ad6139a86139a384613968565b613988565b613968565b9050919050565b60006139bf82613992565b9050919050565b60006139d1826139b4565b9050919050565b6139e1816139c6565b82525050565b60006020820190506139fc60008301846139d8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60058110613a3f57613a3e613511565b5b50565b6000819050613a5082613a2e565b919050565b6000613a6082613a42565b9050919050565b613a7081613a55565b82525050565b606082016000820151613a8c60008501826135a4565b506020820151613a9f60208501826135a4565b506040820151613ab26040850182613a67565b50505050565b6000613ac48383613a76565b60608301905092915050565b6000602082019050919050565b6000613ae882613a02565b613af28185613a0d565b9350613afd83613a1e565b8060005b83811015613b2e578151613b158882613ab8565b9750613b2083613ad0565b925050600181019050613b01565b5085935050505092915050565b60006020820190508181036000830152613b558184613add565b905092915050565b60008060008060808587031215613b7757613b76613483565b5b6000613b85878288016134a9565b9450506020613b96878288016134a9565b9350506040613ba7878288016134a9565b9250506060613bb8878288016134a9565b91505092959194509250565b606082016000820151613bda60008501826135a4565b506020820151613bed60208501826135a4565b506040820151613c006040850182613a67565b50505050565b6000606082019050613c1b6000830184613bc4565b92915050565b613c2a81613597565b82525050565b604082016000820151613c4660008501826135a4565b506020820151613c5960208501826135a4565b50505050565b6000608082019050613c746000830186613c21565b613c816020830185613c21565b613c8e6040830184613c30565b949350505050565b6000613ca182613968565b9050919050565b613cb181613c96565b82525050565b6000602082019050613ccc6000830184613ca8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c082016000820151613d146000850182613579565b506020820151613d276020850182613588565b506040820151613d3a60408501826135a4565b506060820151613d4d60608501826135a4565b506080820151613d6060808501826135bf565b5060a0820151613d7360a08501826135bf565b50505050565b6000613d858383613cfe565b60c08301905092915050565b6000602082019050919050565b6000613da982613cd2565b613db38185613cdd565b9350613dbe83613cee565b8060005b83811015613def578151613dd68882613d79565b9750613de183613d91565b925050600181019050613dc2565b5085935050505092915050565b60006020820190508181036000830152613e168184613d9e565b905092915050565b613e2781613c96565b8114613e3257600080fd5b50565b600081359050613e4481613e1e565b92915050565b60008060008060808587031215613e6457613e63613483565b5b6000613e7287828801613e35565b9450506020613e8387828801613e35565b9350506040613e9487828801613e35565b9250506060613ea587828801613e35565b91505092959194509250565b60058110613ebe57600080fd5b50565b600081359050613ed081613eb1565b92915050565b600080600080600060a08688031215613ef257613ef1613483565b5b6000613f00888289016134a9565b9550506020613f11888289016134a9565b9450506040613f22888289016134a9565b9350506060613f33888289016134a9565b9250506080613f4488828901613ec1565b9150509295509295909350565b6000613f5c826139b4565b9050919050565b613f6c81613f51565b82525050565b6000602082019050613f876000830184613f63565b92915050565b613f9681613488565b82525050565b6000602082019050613fb16000830184613f8d565b92915050565b600060208284031215613fcd57613fcc613483565b5b6000613fdb84828501613e35565b91505092915050565b6000613fef826139b4565b9050919050565b613fff81613fe4565b82525050565b600060208201905061401a6000830184613ff6565b92915050565b6101208201600082015161403760008501826135a4565b50602082015161404a60208501826135a4565b50604082015161405d604085018261372e565b50606082015161407060c08501826135bf565b50608082015161408360e08501826135bf565b5060a08201516140976101008501826135bf565b50505050565b6000610120820190506140b36000830184614020565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061415182613488565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561418457614183614117565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f742067616d6520636f6e7472616374000000000000000000000000000000600082015250565b60006141d660118361418f565b91506141e1826141a0565b602082019050919050565b60006020820190508181036000830152614205816141c9565b9050919050565b7f4e6f7420616374696f6e7320636f6e7472616374000000000000000000000000600082015250565b600061424260148361418f565b915061424d8261420c565b602082019050919050565b6000602082019050818103600083015261427181614235565b9050919050565b7f4e6f7420616c6c6f77656420636f6e7472616374000000000000000000000000600082015250565b60006142ae60148361418f565b91506142b982614278565b602082019050919050565b600060208201905081810360008301526142dd816142a1565b9050919050565b7f4f6e6c792067616d6520636f6e74726163742063616e20757365000000000000600082015250565b600061431a601a8361418f565b9150614325826142e4565b602082019050919050565b600060208201905081810360008301526143498161430d565b9050919050565b600061435b82613597565b915060ff82141561436f5761436e614117565b5b600182019050919050565b600061438582613488565b915061439083613488565b9250828210156143a3576143a2614117565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061440a60268361418f565b9150614415826143ae565b604082019050919050565b60006020820190508181036000830152614439816143fd565b9050919050565b600061444b82613488565b915061445683613488565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561448b5761448a614117565b5b828201905092915050565b60006144a182613597565b91506144ac83613597565b9250828210156144bf576144be614117565b5b828203905092915050565b60006040820190506144df6000830185613c21565b6144ec6020830184613c21565b9392505050565b6144fc81613597565b811461450757600080fd5b50565b600081519050614519816144f3565b92915050565b60006020828403121561453557614534613483565b5b60006145438482850161450a565b91505092915050565b600061455782613597565b915061456283613597565b92508260ff0382111561457857614577614117565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006145b960208361418f565b91506145c482614583565b602082019050919050565b600060208201905081810360008301526145e8816145ac565b9050919050565b6000815190506145fe81613492565b92915050565b60006020828403121561461a57614619613483565b5b6000614628848285016145ef565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b61465082614636565b810181811067ffffffffffffffff8211171561466f5761466e6140e8565b5b80604052505050565b6000614682613479565b905061468e8282614647565b919050565b600581106146a057600080fd5b50565b6000815190506146b281614693565b92915050565b6146c1816135b3565b81146146cc57600080fd5b50565b6000815190506146de816146b8565b92915050565b600060c082840312156146fa576146f9614631565b5b61470460c0614678565b90506000614714848285016146a3565b6000830152506020614728848285016145ef565b602083015250604061473c8482850161450a565b60408301525060606147508482850161450a565b6060830152506080614764848285016146cf565b60808301525060a0614778848285016146cf565b60a08301525092915050565b600060c0828403121561479a57614799613483565b5b60006147a8848285016146e4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147eb82613488565b91506147f683613488565b925082614806576148056147b1565b5b828204905092915050565b600061481c82613488565b915060008214156148305761482f614117565b5b600182039050919050565b6000819050919050565b600061486061485b6148568461483b565b613988565b613597565b9050919050565b61487081614845565b82525050565b6000819050919050565b600061489b61489661489184614876565b613988565b613597565b9050919050565b6148ab81614880565b82525050565b60006040820190506148c66000830185614867565b6148d360208301846148a2565b9392505050565b6000819050919050565b60006148ff6148fa6148f5846148da565b613988565b613597565b9050919050565b61490f816148e4565b82525050565b600060408201905061492a6000830185614867565b6149376020830184614906565b9392505050565b6000819050919050565b60006149538261493e565b91507f800000000000000000000000000000000000000000000000000000000000000082141561498657614985614117565b5b600182039050919050565b600061499c8261493e565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149cf576149ce614117565b5b600182019050919050565b60006080820190506149ef6000830185613c30565b6149fc6040830184613c30565b9392505050565b6000604082019050614a186000830185614867565b614a256020830184613c21565b9392505050565b6000606082019050614a416000830185613f8d565b614a4e6020830184613c30565b9392505050565b600060408284031215614a6b57614a6a614631565b5b614a756040614678565b90506000614a858482850161450a565b6000830152506020614a998482850161450a565b60208301525092915050565b600060408284031215614abb57614aba613483565b5b6000614ac984828501614a55565b9150509291505056fea26469706673582212202ff26322dd937ce1c6b3d6127e80fae9fbbe314467a14c25b0d742f46a3327d264736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 865,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "game",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GameInterface)795"
      },
      {
        "astId": 868,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "utils",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UtilsInterface)860"
      },
      {
        "astId": 871,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "roomTiles",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(RoomTileInterface)809"
      },
      {
        "astId": 873,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "actionsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 913,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "gameTiles",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(GameTile)2429_storage)dyn_storage"
      },
      {
        "astId": 917,
        "contract": "contracts/BCMaps.sol:Maps",
        "label": "maps",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Map)2466_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(GameTile)2429_storage)dyn_storage": {
        "base": "t_struct(GameTile)2429_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.GameTile[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Map)2466_storage)dyn_storage": {
        "base": "t_struct(Map)2466_storage",
        "encoding": "dynamic_array",
        "label": "struct BCTypes.Map[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameInterface)795": {
        "encoding": "inplace",
        "label": "contract GameInterface",
        "numberOfBytes": "20"
      },
      "t_contract(RoomTileInterface)809": {
        "encoding": "inplace",
        "label": "contract RoomTileInterface",
        "numberOfBytes": "20"
      },
      "t_contract(UtilsInterface)860": {
        "encoding": "inplace",
        "label": "contract UtilsInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BCEventType)2499": {
        "encoding": "inplace",
        "label": "enum BCTypes.BCEventType",
        "numberOfBytes": "1"
      },
      "t_enum(DoorStatus)2353": {
        "encoding": "inplace",
        "label": "enum BCTypes.DoorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)2429_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BCTypes.GameTile))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GameTile)2429_storage)"
      },
      "t_mapping(t_uint256,t_struct(Door)2437_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.Door)",
        "numberOfBytes": "32",
        "value": "t_struct(Door)2437_storage"
      },
      "t_mapping(t_uint256,t_struct(GameTile)2429_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.GameTile)",
        "numberOfBytes": "32",
        "value": "t_struct(GameTile)2429_storage"
      },
      "t_mapping(t_uint256,t_struct(RoomTile)2513_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BCTypes.RoomTile)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomTile)2513_storage"
      },
      "t_struct(Door)2437_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Door",
        "members": [
          {
            "astId": 2431,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsBreach",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2433,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "vsHack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2436,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "status",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(DoorStatus)2353"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameTile)2429_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.GameTile",
        "members": [
          {
            "astId": 2416,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2418,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "parentId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2422,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 2424,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "explored",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2426,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "looted",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2428,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasVent",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)2466_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Map",
        "members": [
          {
            "astId": 2442,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "roomList",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RoomTile)2513_storage)"
          },
          {
            "astId": 2444,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numRooms",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 2448,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "usedRooms",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 2455,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "board",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GameTile)2429_storage))"
          },
          {
            "astId": 2460,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "doors",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Door)2437_storage)"
          },
          {
            "astId": 2462,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numDoors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 2465,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "startPosition",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Position)2414_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Position)2414_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.Position",
        "members": [
          {
            "astId": 2411,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2413,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "col",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoomTile)2513_storage": {
        "encoding": "inplace",
        "label": "struct BCTypes.RoomTile",
        "members": [
          {
            "astId": 2502,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BCEventType)2499"
          },
          {
            "astId": 2504,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "eventNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2506,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numItems",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 2508,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "numData",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 2510,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "hasHazard",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2512,
            "contract": "contracts/BCMaps.sol:Maps",
            "label": "sigDetected",
            "offset": 3,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}